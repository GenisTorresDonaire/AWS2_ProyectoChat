Searching 6532 files for "HEAD"

/home/genis/Proyectos/ProyectoXat/app/Http/Middleware/TrustProxies.php:
   16  
   17      /**
   18:      * The current proxy header mappings.
   19       *
   20       * @var array
   21       */
   22:     protected $headers = [
   23:         Request::HEADER_FORWARDED => 'FORWARDED',
   24:         Request::HEADER_X_FORWARDED_FOR => 'X_FORWARDED_FOR',
   25:         Request::HEADER_X_FORWARDED_HOST => 'X_FORWARDED_HOST',
   26:         Request::HEADER_X_FORWARDED_PORT => 'X_FORWARDED_PORT',
   27:         Request::HEADER_X_FORWARDED_PROTO => 'X_FORWARDED_PROTO',
   28      ];
   29  }

/home/genis/Proyectos/ProyectoXat/composer.lock:
    5          "This file is @generated automatically"
    6      ],
    7: <<<<<<< HEAD
    8      "content-hash": "b7904d07d1e1765a0a199aa11d6301a3",
    9      "packages": [

/home/genis/Proyectos/ProyectoXat/config/app.php:
   62      | Here you may specify the default timezone for your application, which
   63      | will be used by the PHP date and date-time functions. We have gone
   64:     | ahead and set this to a sensible default for you out of the box.
   65      |
   66      */

/home/genis/Proyectos/ProyectoXat/public/.htaccess:
    6      RewriteEngine On
    7  
    8:     # Handle Authorization Header
    9      RewriteCond %{HTTP:Authorization} .
   10      RewriteRule .* - [E=HTTP_AUTHORIZATION:%{HTTP:Authorization}]

/home/genis/Proyectos/ProyectoXat/public/css/app.css:
    5   */
    6  
    7: /*! normalize.css v3.0.3 | MIT License | github.com/necolas/normalize.css */html{font-family:sans-serif;-ms-text-size-adjust:100%;-webkit-text-size-adjust:100%}body{margin:0}article,aside,details,figcaption,figure,footer,header,hgroup,main,menu,nav,section,summary{display:block}audio,canvas,progress,video{display:inline-block;vertical-align:baseline}audio:not([controls]){display:none;height:0}[hidden],template{display:none}a{background-color:transparent}a:active,a:hover{outline:0}abbr[title]{border-bottom:1px dotted}b,strong{font-weight:700}dfn{font-style:italic}h1{font-size:2em;margin:.67em 0}mark{background:#ff0;color:#000}small{font-size:80%}sub,sup{font-size:75%;line-height:0;position:relative;vertical-align:baseline}sup{top:-.5em}sub{bottom:-.25em}img{border:0}svg:not(:root){overflow:hidden}figure{margin:1em 40px}hr{-webkit-box-sizing:content-box;box-sizing:content-box;height:0}pre{overflow:auto}code,kbd,pre,samp{font-family:monospace,monospace;font-size:1em}button,input,optgroup,select,textarea{color:inherit;font:inherit;margin:0}button{overflow:visible}button,select{text-transform:none}button,html input[type=button],input[type=reset],input[type=submit]{-webkit-appearance:button;cursor:pointer}button[disabled],html input[disabled]{cursor:default}button::-moz-focus-inner,input::-moz-focus-inner{border:0;padding:0}input{line-height:normal}input[type=checkbox],input[type=radio]{-webkit-box-sizing:border-box;box-sizing:border-box;padding:0}input[type=number]::-webkit-inner-spin-button,input[type=number]::-webkit-outer-spin-button{height:auto}input[type=search]{-webkit-appearance:textfield;-webkit-box-sizing:content-box;box-sizing:content-box}input[type=search]::-webkit-search-cancel-button,input[type=search]::-webkit-search-decoration{-webkit-appearance:none}fieldset{border:1px solid silver;margin:0 2px;padding:.35em .625em .75em}textarea{overflow:auto}optgroup{font-weight:700}table{border-collapse:collapse;border-spacing:0}td,th{padding:0}
    8  
    9: <<<<<<< HEAD
   10: /*! Source: https://github.com/h5bp/html5-boilerplate/blob/master/src/css/main.css */@media print{*,:after,:before{background:transparent!important;color:#000!important;-webkit-box-shadow:none!important;box-shadow:none!important;text-shadow:none!important}a,a:visited{text-decoration:underline}a[href]:after{content:" (" attr(href) ")"}abbr[title]:after{content:" (" attr(title) ")"}a[href^="#"]:after,a[href^="javascript:"]:after{content:""}blockquote,pre{border:1px solid #999;page-break-inside:avoid}thead{display:table-header-group}img,tr{page-break-inside:avoid}img{max-width:100%!important}h2,h3,p{orphans:3;widows:3}h2,h3{page-break-after:avoid}.navbar{display:none}.btn>.caret,.dropup>.btn>.caret{border-top-color:#000!important}.label{border:1px solid #000}.table{border-collapse:collapse!important}.table td,.table th{background-color:#fff!important}.table-bordered td,.table-bordered th{border:1px solid #ddd!important}}@font-face{font-family:Glyphicons Halflings;src:url(/fonts/vendor/bootstrap-sass/bootstrap/glyphicons-halflings-regular.eot?f4769f9bdb7466be65088239c12046d1);src:url(/fonts/vendor/bootstrap-sass/bootstrap/glyphicons-halflings-regular.eot?f4769f9bdb7466be65088239c12046d1?#iefix) format("embedded-opentype"),url(/fonts/vendor/bootstrap-sass/bootstrap/glyphicons-halflings-regular.woff2?448c34a56d699c29117adc64c43affeb) format("woff2"),url(/fonts/vendor/bootstrap-sass/bootstrap/glyphicons-halflings-regular.woff?fa2772327f55d8198301fdb8bcfc8158) format("woff"),url(/fonts/vendor/bootstrap-sass/bootstrap/glyphicons-halflings-regular.ttf?e18bbf611f2a2e43afc071aa2f4e1512) format("truetype"),url(/fonts/vendor/bootstrap-sass/bootstrap/glyphicons-halflings-regular.svg?89889688147bd7575d6327160d64e760#glyphicons_halflingsregular) format("svg")}.glyphicon{position:relative;top:1px;display:inline-block;font-family:Glyphicons Halflings;font-style:normal;font-weight:400;line-height:1;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale}.glyphicon-asterisk:before{content:"*"}.glyphicon-plus:before{content:"+"}.glyphicon-eur:before,.glyphicon-euro:before{content:"\20AC"}.glyphicon-minus:before{content:"\2212"}.glyphicon-cloud:before{content:"\2601"}.glyphicon-envelope:before{content:"\2709"}.glyphicon-pencil:before{content:"\270F"}.glyphicon-glass:before{content:"\E001"}.glyphicon-music:before{content:"\E002"}.glyphicon-search:before{content:"\E003"}.glyphicon-heart:before{content:"\E005"}.glyphicon-star:before{content:"\E006"}.glyphicon-star-empty:before{content:"\E007"}.glyphicon-user:before{content:"\E008"}.glyphicon-film:before{content:"\E009"}.glyphicon-th-large:before{content:"\E010"}.glyphicon-th:before{content:"\E011"}.glyphicon-th-list:before{content:"\E012"}.glyphicon-ok:before{content:"\E013"}.glyphicon-remove:before{content:"\E014"}.glyphicon-zoom-in:before{content:"\E015"}.glyphicon-zoom-out:before{content:"\E016"}.glyphicon-off:before{content:"\E017"}.glyphicon-signal:before{content:"\E018"}.glyphicon-cog:before{content:"\E019"}.glyphicon-trash:before{content:"\E020"}.glyphicon-home:before{content:"\E021"}.glyphicon-file:before{content:"\E022"}.glyphicon-time:before{content:"\E023"}.glyphicon-road:before{content:"\E024"}.glyphicon-download-alt:before{content:"\E025"}.glyphicon-download:before{content:"\E026"}.glyphicon-upload:before{content:"\E027"}.glyphicon-inbox:before{content:"\E028"}.glyphicon-play-circle:before{content:"\E029"}.glyphicon-repeat:before{content:"\E030"}.glyphicon-refresh:before{content:"\E031"}.glyphicon-list-alt:before{content:"\E032"}.glyphicon-lock:before{content:"\E033"}.glyphicon-flag:before{content:"\E034"}.glyphicon-headphones:before{content:"\E035"}.glyphicon-volume-off:before{content:"\E036"}.glyphicon-volume-down:before{content:"\E037"}.glyphicon-volume-up:before{content:"\E038"}.glyphicon-qrcode:before{content:"\E039"}.glyphicon-barcode:before{content:"\E040"}.glyphicon-tag:before{content:"\E041"}.glyphicon-tags:before{content:"\E042"}.glyphicon-book:before{content:"\E043"}.glyphicon-bookmark:before{content:"\E044"}.glyphicon-print:before{content:"\E045"}.glyphicon-camera:before{content:"\E046"}.glyphicon-font:before{content:"\E047"}.glyphicon-bold:before{content:"\E048"}.glyphicon-italic:before{content:"\E049"}.glyphicon-text-height:before{content:"\E050"}.glyphicon-text-width:before{content:"\E051"}.glyphicon-align-left:before{content:"\E052"}.glyphicon-align-center:before{content:"\E053"}.glyphicon-align-right:before{content:"\E054"}.glyphicon-align-justify:before{content:"\E055"}.glyphicon-list:before{content:"\E056"}.glyphicon-indent-left:before{content:"\E057"}.glyphicon-indent-right:before{content:"\E058"}.glyphicon-facetime-video:before{content:"\E059"}.glyphicon-picture:before{content:"\E060"}.glyphicon-map-marker:before{content:"\E062"}.glyphicon-adjust:before{content:"\E063"}.glyphicon-tint:before{content:"\E064"}.glyphicon-edit:before{content:"\E065"}.glyphicon-share:before{content:"\E066"}.glyphicon-check:before{content:"\E067"}.glyphicon-move:before{content:"\E068"}.glyphicon-step-backward:before{content:"\E069"}.glyphicon-fast-backward:before{content:"\E070"}.glyphicon-backward:before{content:"\E071"}.glyphicon-play:before{content:"\E072"}.glyphicon-pause:before{content:"\E073"}.glyphicon-stop:before{content:"\E074"}.glyphicon-forward:before{content:"\E075"}.glyphicon-fast-forward:before{content:"\E076"}.glyphicon-step-forward:before{content:"\E077"}.glyphicon-eject:before{content:"\E078"}.glyphicon-chevron-left:before{content:"\E079"}.glyphicon-chevron-right:before{content:"\E080"}.glyphicon-plus-sign:before{content:"\E081"}.glyphicon-minus-sign:before{content:"\E082"}.glyphicon-remove-sign:before{content:"\E083"}.glyphicon-ok-sign:before{content:"\E084"}.glyphicon-question-sign:before{content:"\E085"}.glyphicon-info-sign:before{content:"\E086"}.glyphicon-screenshot:before{content:"\E087"}.glyphicon-remove-circle:before{content:"\E088"}.glyphicon-ok-circle:before{content:"\E089"}.glyphicon-ban-circle:before{content:"\E090"}.glyphicon-arrow-left:before{content:"\E091"}.glyphicon-arrow-right:before{content:"\E092"}.glyphicon-arrow-up:before{content:"\E093"}.glyphicon-arrow-down:before{content:"\E094"}.glyphicon-share-alt:before{content:"\E095"}.glyphicon-resize-full:before{content:"\E096"}.glyphicon-resize-small:before{content:"\E097"}.glyphicon-exclamation-sign:before{content:"\E101"}.glyphicon-gift:before{content:"\E102"}.glyphicon-leaf:before{content:"\E103"}.glyphicon-fire:before{content:"\E104"}.glyphicon-eye-open:before{content:"\E105"}.glyphicon-eye-close:before{content:"\E106"}.glyphicon-warning-sign:before{content:"\E107"}.glyphicon-plane:before{content:"\E108"}.glyphicon-calendar:before{content:"\E109"}.glyphicon-random:before{content:"\E110"}.glyphicon-comment:before{content:"\E111"}.glyphicon-magnet:before{content:"\E112"}.glyphicon-chevron-up:before{content:"\E113"}.glyphicon-chevron-down:before{content:"\E114"}.glyphicon-retweet:before{content:"\E115"}.glyphicon-shopping-cart:before{content:"\E116"}.glyphicon-folder-close:before{content:"\E117"}.glyphicon-folder-open:before{content:"\E118"}.glyphicon-resize-vertical:before{content:"\E119"}.glyphicon-resize-horizontal:before{content:"\E120"}.glyphicon-hdd:before{content:"\E121"}.glyphicon-bullhorn:before{content:"\E122"}.glyphicon-bell:before{content:"\E123"}.glyphicon-certificate:before{content:"\E124"}.glyphicon-thumbs-up:before{content:"\E125"}.glyphicon-thumbs-down:before{content:"\E126"}.glyphicon-hand-right:before{content:"\E127"}.glyphicon-hand-left:before{content:"\E128"}.glyphicon-hand-up:before{content:"\E129"}.glyphicon-hand-down:before{content:"\E130"}.glyphicon-circle-arrow-right:before{content:"\E131"}.glyphicon-circle-arrow-left:before{content:"\E132"}.glyphicon-circle-arrow-up:before{content:"\E133"}.glyphicon-circle-arrow-down:before{content:"\E134"}.glyphicon-globe:before{content:"\E135"}.glyphicon-wrench:before{content:"\E136"}.glyphicon-tasks:before{content:"\E137"}.glyphicon-filter:before{content:"\E138"}.glyphicon-briefcase:before{content:"\E139"}.glyphicon-fullscreen:before{content:"\E140"}.glyphicon-dashboard:before{content:"\E141"}.glyphicon-paperclip:before{content:"\E142"}.glyphicon-heart-empty:before{content:"\E143"}.glyphicon-link:before{content:"\E144"}.glyphicon-phone:before{content:"\E145"}.glyphicon-pushpin:before{content:"\E146"}.glyphicon-usd:before{content:"\E148"}.glyphicon-gbp:before{content:"\E149"}.glyphicon-sort:before{content:"\E150"}.glyphicon-sort-by-alphabet:before{content:"\E151"}.glyphicon-sort-by-alphabet-alt:before{content:"\E152"}.glyphicon-sort-by-order:before{content:"\E153"}.glyphicon-sort-by-order-alt:before{content:"\E154"}.glyphicon-sort-by-attributes:before{content:"\E155"}.glyphicon-sort-by-attributes-alt:before{content:"\E156"}.glyphicon-unchecked:before{content:"\E157"}.glyphicon-expand:before{content:"\E158"}.glyphicon-collapse-down:before{content:"\E159"}.glyphicon-collapse-up:before{content:"\E160"}.glyphicon-log-in:before{content:"\E161"}.glyphicon-flash:before{content:"\E162"}.glyphicon-log-out:before{content:"\E163"}.glyphicon-new-window:before{content:"\E164"}.glyphicon-record:before{content:"\E165"}.glyphicon-save:before{content:"\E166"}.glyphicon-open:before{content:"\E167"}.glyphicon-saved:before{content:"\E168"}.glyphicon-import:before{content:"\E169"}.glyphicon-export:before{content:"\E170"}.glyphicon-send:before{content:"\E171"}.glyphicon-floppy-disk:before{content:"\E172"}.glyphicon-floppy-saved:before{content:"\E173"}.glyphicon-floppy-remove:before{content:"\E174"}.glyphicon-floppy-save:before{content:"\E175"}.glyphicon-floppy-open:before{content:"\E176"}.glyphicon-credit-card:before{content:"\E177"}.glyphicon-transfer:before{content:"\E178"}.glyphicon-cutlery:before{content:"\E179"}.glyphicon-header:before{content:"\E180"}.glyphicon-compressed:before{content:"\E181"}.glyphicon-earphone:before{content:"\E182"}.glyphicon-phone-alt:before{content:"\E183"}.glyphicon-tower:before{content:"\E184"}.glyphicon-stats:before{content:"\E185"}.glyphicon-sd-video:before{content:"\E186"}.glyphicon-hd-video:before{content:"\E187"}.glyphicon-subtitles:before{content:"\E188"}.glyphicon-sound-stereo:before{content:"\E189"}.glyphicon-sound-dolby:before{content:"\E190"}.glyphicon-sound-5-1:before{content:"\E191"}.glyphicon-sound-6-1:before{content:"\E192"}.glyphicon-sound-7-1:before{content:"\E193"}.glyphicon-copyright-mark:before{content:"\E194"}.glyphicon-registration-mark:before{content:"\E195"}.glyphicon-cloud-download:before{content:"\E197"}.glyphicon-cloud-upload:before{content:"\E198"}.glyphicon-tree-conifer:before{content:"\E199"}.glyphicon-tree-deciduous:before{content:"\E200"}.glyphicon-cd:before{content:"\E201"}.glyphicon-save-file:before{content:"\E202"}.glyphicon-open-file:before{content:"\E203"}.glyphicon-level-up:before{content:"\E204"}.glyphicon-copy:before{content:"\E205"}.glyphicon-paste:before{content:"\E206"}.glyphicon-alert:before{content:"\E209"}.glyphicon-equalizer:before{content:"\E210"}.glyphicon-king:before{content:"\E211"}.glyphicon-queen:before{content:"\E212"}.glyphicon-pawn:before{content:"\E213"}.glyphicon-bishop:before{content:"\E214"}.glyphicon-knight:before{content:"\E215"}.glyphicon-baby-formula:before{content:"\E216"}.glyphicon-tent:before{content:"\26FA"}.glyphicon-blackboard:before{content:"\E218"}.glyphicon-bed:before{content:"\E219"}.glyphicon-apple:before{content:"\F8FF"}.glyphicon-erase:before{content:"\E221"}.glyphicon-hourglass:before{content:"\231B"}.glyphicon-lamp:before{content:"\E223"}.glyphicon-duplicate:before{content:"\E224"}.glyphicon-piggy-bank:before{content:"\E225"}.glyphicon-scissors:before{content:"\E226"}.glyphicon-bitcoin:before,.glyphicon-btc:before,.glyphicon-xbt:before{content:"\E227"}.glyphicon-jpy:before,.glyphicon-yen:before{content:"\A5"}.glyphicon-rub:before,.glyphicon-ruble:before{content:"\20BD"}.glyphicon-scale:before{content:"\E230"}.glyphicon-ice-lolly:before{content:"\E231"}.glyphicon-ice-lolly-tasted:before{content:"\E232"}.glyphicon-education:before{content:"\E233"}.glyphicon-option-horizontal:before{content:"\E234"}.glyphicon-option-vertical:before{content:"\E235"}.glyphicon-menu-hamburger:before{content:"\E236"}.glyphicon-modal-window:before{content:"\E237"}.glyphicon-oil:before{content:"\E238"}.glyphicon-grain:before{content:"\E239"}.glyphicon-sunglasses:before{content:"\E240"}.glyphicon-text-size:before{content:"\E241"}.glyphicon-text-color:before{content:"\E242"}.glyphicon-text-background:before{content:"\E243"}.glyphicon-object-align-top:before{content:"\E244"}.glyphicon-object-align-bottom:before{content:"\E245"}.glyphicon-object-align-horizontal:before{content:"\E246"}.glyphicon-object-align-left:before{content:"\E247"}.glyphicon-object-align-vertical:before{content:"\E248"}.glyphicon-object-align-right:before{content:"\E249"}.glyphicon-triangle-right:before{content:"\E250"}.glyphicon-triangle-left:before{content:"\E251"}.glyphicon-triangle-bottom:before{content:"\E252"}.glyphicon-triangle-top:before{content:"\E253"}.glyphicon-console:before{content:"\E254"}.glyphicon-superscript:before{content:"\E255"}.glyphicon-subscript:before{content:"\E256"}.glyphicon-menu-left:before{content:"\E257"}.glyphicon-menu-right:before{content:"\E258"}.glyphicon-menu-down:before{content:"\E259"}.glyphicon-menu-up:before{content:"\E260"}*,:after,:before{-webkit-box-sizing:border-box;box-sizing:border-box}html{font-size:10px;-webkit-tap-highlight-color:transparent}body{font-family:Raleway,sans-serif;font-size:14px;line-height:1.6;color:#636b6f;background-color:#f5f8fa}button,input,select,textarea{font-family:inherit;font-size:inherit;line-height:inherit}a{color:#3097d1;text-decoration:none}a:focus,a:hover{color:#216a94;text-decoration:underline}a:focus{outline:5px auto -webkit-focus-ring-color;outline-offset:-2px}figure{margin:0}img{vertical-align:middle}.img-responsive{display:block;max-width:100%;height:auto}.img-rounded{border-radius:6px}.img-thumbnail{padding:4px;line-height:1.6;background-color:#f5f8fa;border:1px solid #ddd;border-radius:4px;-webkit-transition:all .2s ease-in-out;transition:all .2s ease-in-out;display:inline-block;max-width:100%;height:auto}.img-circle{border-radius:50%}hr{margin-top:22px;margin-bottom:22px;border:0;border-top:1px solid #eee}.sr-only{position:absolute;width:1px;height:1px;margin:-1px;padding:0;overflow:hidden;clip:rect(0,0,0,0);border:0}.sr-only-focusable:active,.sr-only-focusable:focus{position:static;width:auto;height:auto;margin:0;overflow:visible;clip:auto}[role=button]{cursor:pointer}.h1,.h2,.h3,.h4,.h5,.h6,h1,h2,h3,h4,h5,h6{font-family:inherit;font-weight:500;line-height:1.1;color:inherit}.h1 .small,.h1 small,.h2 .small,.h2 small,.h3 .small,.h3 small,.h4 .small,.h4 small,.h5 .small,.h5 small,.h6 .small,.h6 small,h1 .small,h1 small,h2 .small,h2 small,h3 .small,h3 small,h4 .small,h4 small,h5 .small,h5 small,h6 .small,h6 small{font-weight:400;line-height:1;color:#777}.h1,.h2,.h3,h1,h2,h3{margin-top:22px;margin-bottom:11px}.h1 .small,.h1 small,.h2 .small,.h2 small,.h3 .small,.h3 small,h1 .small,h1 small,h2 .small,h2 small,h3 .small,h3 small{font-size:65%}.h4,.h5,.h6,h4,h5,h6{margin-top:11px;margin-bottom:11px}.h4 .small,.h4 small,.h5 .small,.h5 small,.h6 .small,.h6 small,h4 .small,h4 small,h5 .small,h5 small,h6 .small,h6 small{font-size:75%}.h1,h1{font-size:36px}.h2,h2{font-size:30px}.h3,h3{font-size:24px}.h4,h4{font-size:18px}.h5,h5{font-size:14px}.h6,h6{font-size:12px}p{margin:0 0 11px}.lead{margin-bottom:22px;font-size:16px;font-weight:300;line-height:1.4}@media (min-width:768px){.lead{font-size:21px}}.small,small{font-size:85%}.mark,mark{background-color:#fcf8e3;padding:.2em}.text-left{text-align:left}.text-right{text-align:right}.text-center{text-align:center}.text-justify{text-align:justify}.text-nowrap{white-space:nowrap}.text-lowercase{text-transform:lowercase}.initialism,.text-uppercase{text-transform:uppercase}.text-capitalize{text-transform:capitalize}.text-muted{color:#777}.text-primary{color:#3097d1}a.text-primary:focus,a.text-primary:hover{color:#2579a9}.text-success{color:#3c763d}a.text-success:focus,a.text-success:hover{color:#2b542c}.text-info{color:#31708f}a.text-info:focus,a.text-info:hover{color:#245269}.text-warning{color:#8a6d3b}a.text-warning:focus,a.text-warning:hover{color:#66512c}.text-danger{color:#a94442}a.text-danger:focus,a.text-danger:hover{color:#843534}.bg-primary{color:#fff;background-color:#3097d1}a.bg-primary:focus,a.bg-primary:hover{background-color:#2579a9}.bg-success{background-color:#dff0d8}a.bg-success:focus,a.bg-success:hover{background-color:#c1e2b3}.bg-info{background-color:#d9edf7}a.bg-info:focus,a.bg-info:hover{background-color:#afd9ee}.bg-warning{background-color:#fcf8e3}a.bg-warning:focus,a.bg-warning:hover{background-color:#f7ecb5}.bg-danger{background-color:#f2dede}a.bg-danger:focus,a.bg-danger:hover{background-color:#e4b9b9}.page-header{padding-bottom:10px;margin:44px 0 22px;border-bottom:1px solid #eee}ol,ul{margin-top:0;margin-bottom:11px}ol ol,ol ul,ul ol,ul ul{margin-bottom:0}.list-inline,.list-unstyled{padding-left:0;list-style:none}.list-inline{margin-left:-5px}.list-inline>li{display:inline-block;padding-left:5px;padding-right:5px}dl{margin-top:0;margin-bottom:22px}dd,dt{line-height:1.6}dt{font-weight:700}dd{margin-left:0}.dl-horizontal dd:after,.dl-horizontal dd:before{content:" ";display:table}.dl-horizontal dd:after{clear:both}@media (min-width:768px){.dl-horizontal dt{float:left;width:160px;clear:left;text-align:right;overflow:hidden;text-overflow:ellipsis;white-space:nowrap}.dl-horizontal dd{margin-left:180px}}abbr[data-original-title],abbr[title]{cursor:help;border-bottom:1px dotted #777}.initialism{font-size:90%}blockquote{padding:11px 22px;margin:0 0 22px;font-size:17.5px;border-left:5px solid #eee}blockquote ol:last-child,blockquote p:last-child,blockquote ul:last-child{margin-bottom:0}blockquote .small,blockquote footer,blockquote small{display:block;font-size:80%;line-height:1.6;color:#777}blockquote .small:before,blockquote footer:before,blockquote small:before{content:"\2014   \A0"}.blockquote-reverse,blockquote.pull-right{padding-right:15px;padding-left:0;border-right:5px solid #eee;border-left:0;text-align:right}.blockquote-reverse .small:before,.blockquote-reverse footer:before,.blockquote-reverse small:before,blockquote.pull-right .small:before,blockquote.pull-right footer:before,blockquote.pull-right small:before{content:""}.blockquote-reverse .small:after,.blockquote-reverse footer:after,.blockquote-reverse small:after,blockquote.pull-right .small:after,blockquote.pull-right footer:after,blockquote.pull-right small:after{content:"\A0   \2014"}address{margin-bottom:22px;font-style:normal;line-height:1.6}code,kbd,pre,samp{font-family:Menlo,Monaco,Consolas,Courier New,monospace}code{color:#c7254e;background-color:#f9f2f4;border-radius:4px}code,kbd{padding:2px 4px;font-size:90%}kbd{color:#fff;background-color:#333;border-radius:3px;-webkit-box-shadow:inset 0 -1px 0 rgba(0,0,0,.25);box-shadow:inset 0 -1px 0 rgba(0,0,0,.25)}kbd kbd{padding:0;font-size:100%;font-weight:700;-webkit-box-shadow:none;box-shadow:none}pre{display:block;padding:10.5px;margin:0 0 11px;font-size:13px;line-height:1.6;word-break:break-all;word-wrap:break-word;color:#333;background-color:#f5f5f5;border:1px solid #ccc;border-radius:4px}pre code{padding:0;font-size:inherit;color:inherit;white-space:pre-wrap;background-color:transparent;border-radius:0}.pre-scrollable{max-height:340px;overflow-y:scroll}.container{margin-right:auto;margin-left:auto;padding-left:15px;padding-right:15px}.container:after,.container:before{content:" ";display:table}.container:after{clear:both}@media (min-width:768px){.container{width:750px}}@media (min-width:992px){.container{width:970px}}@media (min-width:1200px){.container{width:1170px}}.container-fluid{margin-right:auto;margin-left:auto;padding-left:15px;padding-right:15px}.container-fluid:after,.container-fluid:before{content:" ";display:table}.container-fluid:after{clear:both}.row{margin-left:-15px;margin-right:-15px}.row:after,.row:before{content:" ";display:table}.row:after{clear:both}.col-lg-1,.col-lg-2,.col-lg-3,.col-lg-4,.col-lg-5,.col-lg-6,.col-lg-7,.col-lg-8,.col-lg-9,.col-lg-10,.col-lg-11,.col-lg-12,.col-md-1,.col-md-2,.col-md-3,.col-md-4,.col-md-5,.col-md-6,.col-md-7,.col-md-8,.col-md-9,.col-md-10,.col-md-11,.col-md-12,.col-sm-1,.col-sm-2,.col-sm-3,.col-sm-4,.col-sm-5,.col-sm-6,.col-sm-7,.col-sm-8,.col-sm-9,.col-sm-10,.col-sm-11,.col-sm-12,.col-xs-1,.col-xs-2,.col-xs-3,.col-xs-4,.col-xs-5,.col-xs-6,.col-xs-7,.col-xs-8,.col-xs-9,.col-xs-10,.col-xs-11,.col-xs-12{position:relative;min-height:1px;padding-left:15px;padding-right:15px}.col-xs-1,.col-xs-2,.col-xs-3,.col-xs-4,.col-xs-5,.col-xs-6,.col-xs-7,.col-xs-8,.col-xs-9,.col-xs-10,.col-xs-11,.col-xs-12{float:left}.col-xs-1{width:8.33333333%}.col-xs-2{width:16.66666667%}.col-xs-3{width:25%}.col-xs-4{width:33.33333333%}.col-xs-5{width:41.66666667%}.col-xs-6{width:50%}.col-xs-7{width:58.33333333%}.col-xs-8{width:66.66666667%}.col-xs-9{width:75%}.col-xs-10{width:83.33333333%}.col-xs-11{width:91.66666667%}.col-xs-12{width:100%}.col-xs-pull-0{right:auto}.col-xs-pull-1{right:8.33333333%}.col-xs-pull-2{right:16.66666667%}.col-xs-pull-3{right:25%}.col-xs-pull-4{right:33.33333333%}.col-xs-pull-5{right:41.66666667%}.col-xs-pull-6{right:50%}.col-xs-pull-7{right:58.33333333%}.col-xs-pull-8{right:66.66666667%}.col-xs-pull-9{right:75%}.col-xs-pull-10{right:83.33333333%}.col-xs-pull-11{right:91.66666667%}.col-xs-pull-12{right:100%}.col-xs-push-0{left:auto}.col-xs-push-1{left:8.33333333%}.col-xs-push-2{left:16.66666667%}.col-xs-push-3{left:25%}.col-xs-push-4{left:33.33333333%}.col-xs-push-5{left:41.66666667%}.col-xs-push-6{left:50%}.col-xs-push-7{left:58.33333333%}.col-xs-push-8{left:66.66666667%}.col-xs-push-9{left:75%}.col-xs-push-10{left:83.33333333%}.col-xs-push-11{left:91.66666667%}.col-xs-push-12{left:100%}.col-xs-offset-0{margin-left:0}.col-xs-offset-1{margin-left:8.33333333%}.col-xs-offset-2{margin-left:16.66666667%}.col-xs-offset-3{margin-left:25%}.col-xs-offset-4{margin-left:33.33333333%}.col-xs-offset-5{margin-left:41.66666667%}.col-xs-offset-6{margin-left:50%}.col-xs-offset-7{margin-left:58.33333333%}.col-xs-offset-8{margin-left:66.66666667%}.col-xs-offset-9{margin-left:75%}.col-xs-offset-10{margin-left:83.33333333%}.col-xs-offset-11{margin-left:91.66666667%}.col-xs-offset-12{margin-left:100%}@media (min-width:768px){.col-sm-1,.col-sm-2,.col-sm-3,.col-sm-4,.col-sm-5,.col-sm-6,.col-sm-7,.col-sm-8,.col-sm-9,.col-sm-10,.col-sm-11,.col-sm-12{float:left}.col-sm-1{width:8.33333333%}.col-sm-2{width:16.66666667%}.col-sm-3{width:25%}.col-sm-4{width:33.33333333%}.col-sm-5{width:41.66666667%}.col-sm-6{width:50%}.col-sm-7{width:58.33333333%}.col-sm-8{width:66.66666667%}.col-sm-9{width:75%}.col-sm-10{width:83.33333333%}.col-sm-11{width:91.66666667%}.col-sm-12{width:100%}.col-sm-pull-0{right:auto}.col-sm-pull-1{right:8.33333333%}.col-sm-pull-2{right:16.66666667%}.col-sm-pull-3{right:25%}.col-sm-pull-4{right:33.33333333%}.col-sm-pull-5{right:41.66666667%}.col-sm-pull-6{right:50%}.col-sm-pull-7{right:58.33333333%}.col-sm-pull-8{right:66.66666667%}.col-sm-pull-9{right:75%}.col-sm-pull-10{right:83.33333333%}.col-sm-pull-11{right:91.66666667%}.col-sm-pull-12{right:100%}.col-sm-push-0{left:auto}.col-sm-push-1{left:8.33333333%}.col-sm-push-2{left:16.66666667%}.col-sm-push-3{left:25%}.col-sm-push-4{left:33.33333333%}.col-sm-push-5{left:41.66666667%}.col-sm-push-6{left:50%}.col-sm-push-7{left:58.33333333%}.col-sm-push-8{left:66.66666667%}.col-sm-push-9{left:75%}.col-sm-push-10{left:83.33333333%}.col-sm-push-11{left:91.66666667%}.col-sm-push-12{left:100%}.col-sm-offset-0{margin-left:0}.col-sm-offset-1{margin-left:8.33333333%}.col-sm-offset-2{margin-left:16.66666667%}.col-sm-offset-3{margin-left:25%}.col-sm-offset-4{margin-left:33.33333333%}.col-sm-offset-5{margin-left:41.66666667%}.col-sm-offset-6{margin-left:50%}.col-sm-offset-7{margin-left:58.33333333%}.col-sm-offset-8{margin-left:66.66666667%}.col-sm-offset-9{margin-left:75%}.col-sm-offset-10{margin-left:83.33333333%}.col-sm-offset-11{margin-left:91.66666667%}.col-sm-offset-12{margin-left:100%}}@media (min-width:992px){.col-md-1,.col-md-2,.col-md-3,.col-md-4,.col-md-5,.col-md-6,.col-md-7,.col-md-8,.col-md-9,.col-md-10,.col-md-11,.col-md-12{float:left}.col-md-1{width:8.33333333%}.col-md-2{width:16.66666667%}.col-md-3{width:25%}.col-md-4{width:33.33333333%}.col-md-5{width:41.66666667%}.col-md-6{width:50%}.col-md-7{width:58.33333333%}.col-md-8{width:66.66666667%}.col-md-9{width:75%}.col-md-10{width:83.33333333%}.col-md-11{width:91.66666667%}.col-md-12{width:100%}.col-md-pull-0{right:auto}.col-md-pull-1{right:8.33333333%}.col-md-pull-2{right:16.66666667%}.col-md-pull-3{right:25%}.col-md-pull-4{right:33.33333333%}.col-md-pull-5{right:41.66666667%}.col-md-pull-6{right:50%}.col-md-pull-7{right:58.33333333%}.col-md-pull-8{right:66.66666667%}.col-md-pull-9{right:75%}.col-md-pull-10{right:83.33333333%}.col-md-pull-11{right:91.66666667%}.col-md-pull-12{right:100%}.col-md-push-0{left:auto}.col-md-push-1{left:8.33333333%}.col-md-push-2{left:16.66666667%}.col-md-push-3{left:25%}.col-md-push-4{left:33.33333333%}.col-md-push-5{left:41.66666667%}.col-md-push-6{left:50%}.col-md-push-7{left:58.33333333%}.col-md-push-8{left:66.66666667%}.col-md-push-9{left:75%}.col-md-push-10{left:83.33333333%}.col-md-push-11{left:91.66666667%}.col-md-push-12{left:100%}.col-md-offset-0{margin-left:0}.col-md-offset-1{margin-left:8.33333333%}.col-md-offset-2{margin-left:16.66666667%}.col-md-offset-3{margin-left:25%}.col-md-offset-4{margin-left:33.33333333%}.col-md-offset-5{margin-left:41.66666667%}.col-md-offset-6{margin-left:50%}.col-md-offset-7{margin-left:58.33333333%}.col-md-offset-8{margin-left:66.66666667%}.col-md-offset-9{margin-left:75%}.col-md-offset-10{margin-left:83.33333333%}.col-md-offset-11{margin-left:91.66666667%}.col-md-offset-12{margin-left:100%}}@media (min-width:1200px){.col-lg-1,.col-lg-2,.col-lg-3,.col-lg-4,.col-lg-5,.col-lg-6,.col-lg-7,.col-lg-8,.col-lg-9,.col-lg-10,.col-lg-11,.col-lg-12{float:left}.col-lg-1{width:8.33333333%}.col-lg-2{width:16.66666667%}.col-lg-3{width:25%}.col-lg-4{width:33.33333333%}.col-lg-5{width:41.66666667%}.col-lg-6{width:50%}.col-lg-7{width:58.33333333%}.col-lg-8{width:66.66666667%}.col-lg-9{width:75%}.col-lg-10{width:83.33333333%}.col-lg-11{width:91.66666667%}.col-lg-12{width:100%}.col-lg-pull-0{right:auto}.col-lg-pull-1{right:8.33333333%}.col-lg-pull-2{right:16.66666667%}.col-lg-pull-3{right:25%}.col-lg-pull-4{right:33.33333333%}.col-lg-pull-5{right:41.66666667%}.col-lg-pull-6{right:50%}.col-lg-pull-7{right:58.33333333%}.col-lg-pull-8{right:66.66666667%}.col-lg-pull-9{right:75%}.col-lg-pull-10{right:83.33333333%}.col-lg-pull-11{right:91.66666667%}.col-lg-pull-12{right:100%}.col-lg-push-0{left:auto}.col-lg-push-1{left:8.33333333%}.col-lg-push-2{left:16.66666667%}.col-lg-push-3{left:25%}.col-lg-push-4{left:33.33333333%}.col-lg-push-5{left:41.66666667%}.col-lg-push-6{left:50%}.col-lg-push-7{left:58.33333333%}.col-lg-push-8{left:66.66666667%}.col-lg-push-9{left:75%}.col-lg-push-10{left:83.33333333%}.col-lg-push-11{left:91.66666667%}.col-lg-push-12{left:100%}.col-lg-offset-0{margin-left:0}.col-lg-offset-1{margin-left:8.33333333%}.col-lg-offset-2{margin-left:16.66666667%}.col-lg-offset-3{margin-left:25%}.col-lg-offset-4{margin-left:33.33333333%}.col-lg-offset-5{margin-left:41.66666667%}.col-lg-offset-6{margin-left:50%}.col-lg-offset-7{margin-left:58.33333333%}.col-lg-offset-8{margin-left:66.66666667%}.col-lg-offset-9{margin-left:75%}.col-lg-offset-10{margin-left:83.33333333%}.col-lg-offset-11{margin-left:91.66666667%}.col-lg-offset-12{margin-left:100%}}table{background-color:transparent}caption{padding-top:8px;padding-bottom:8px;color:#777}caption,th{text-align:left}.table{width:100%;max-width:100%;margin-bottom:22px}.table>tbody>tr>td,.table>tbody>tr>th,.table>tfoot>tr>td,.table>tfoot>tr>th,.table>thead>tr>td,.table>thead>tr>th{padding:8px;line-height:1.6;vertical-align:top;border-top:1px solid #ddd}.table>thead>tr>th{vertical-align:bottom;border-bottom:2px solid #ddd}.table>caption+thead>tr:first-child>td,.table>caption+thead>tr:first-child>th,.table>colgroup+thead>tr:first-child>td,.table>colgroup+thead>tr:first-child>th,.table>thead:first-child>tr:first-child>td,.table>thead:first-child>tr:first-child>th{border-top:0}.table>tbody+tbody{border-top:2px solid #ddd}.table .table{background-color:#f5f8fa}.table-condensed>tbody>tr>td,.table-condensed>tbody>tr>th,.table-condensed>tfoot>tr>td,.table-condensed>tfoot>tr>th,.table-condensed>thead>tr>td,.table-condensed>thead>tr>th{padding:5px}.table-bordered,.table-bordered>tbody>tr>td,.table-bordered>tbody>tr>th,.table-bordered>tfoot>tr>td,.table-bordered>tfoot>tr>th,.table-bordered>thead>tr>td,.table-bordered>thead>tr>th{border:1px solid #ddd}.table-bordered>thead>tr>td,.table-bordered>thead>tr>th{border-bottom-width:2px}.table-striped>tbody>tr:nth-of-type(odd){background-color:#f9f9f9}.table-hover>tbody>tr:hover{background-color:#f5f5f5}table col[class*=col-]{position:static;float:none;display:table-column}table td[class*=col-],table th[class*=col-]{position:static;float:none;display:table-cell}.table>tbody>tr.active>td,.table>tbody>tr.active>th,.table>tbody>tr>td.active,.table>tbody>tr>th.active,.table>tfoot>tr.active>td,.table>tfoot>tr.active>th,.table>tfoot>tr>td.active,.table>tfoot>tr>th.active,.table>thead>tr.active>td,.table>thead>tr.active>th,.table>thead>tr>td.active,.table>thead>tr>th.active{background-color:#f5f5f5}.table-hover>tbody>tr.active:hover>td,.table-hover>tbody>tr.active:hover>th,.table-hover>tbody>tr:hover>.active,.table-hover>tbody>tr>td.active:hover,.table-hover>tbody>tr>th.active:hover{background-color:#e8e8e8}.table>tbody>tr.success>td,.table>tbody>tr.success>th,.table>tbody>tr>td.success,.table>tbody>tr>th.success,.table>tfoot>tr.success>td,.table>tfoot>tr.success>th,.table>tfoot>tr>td.success,.table>tfoot>tr>th.success,.table>thead>tr.success>td,.table>thead>tr.success>th,.table>thead>tr>td.success,.table>thead>tr>th.success{background-color:#dff0d8}.table-hover>tbody>tr.success:hover>td,.table-hover>tbody>tr.success:hover>th,.table-hover>tbody>tr:hover>.success,.table-hover>tbody>tr>td.success:hover,.table-hover>tbody>tr>th.success:hover{background-color:#d0e9c6}.table>tbody>tr.info>td,.table>tbody>tr.info>th,.table>tbody>tr>td.info,.table>tbody>tr>th.info,.table>tfoot>tr.info>td,.table>tfoot>tr.info>th,.table>tfoot>tr>td.info,.table>tfoot>tr>th.info,.table>thead>tr.info>td,.table>thead>tr.info>th,.table>thead>tr>td.info,.table>thead>tr>th.info{background-color:#d9edf7}.table-hover>tbody>tr.info:hover>td,.table-hover>tbody>tr.info:hover>th,.table-hover>tbody>tr:hover>.info,.table-hover>tbody>tr>td.info:hover,.table-hover>tbody>tr>th.info:hover{background-color:#c4e3f3}.table>tbody>tr.warning>td,.table>tbody>tr.warning>th,.table>tbody>tr>td.warning,.table>tbody>tr>th.warning,.table>tfoot>tr.warning>td,.table>tfoot>tr.warning>th,.table>tfoot>tr>td.warning,.table>tfoot>tr>th.warning,.table>thead>tr.warning>td,.table>thead>tr.warning>th,.table>thead>tr>td.warning,.table>thead>tr>th.warning{background-color:#fcf8e3}.table-hover>tbody>tr.warning:hover>td,.table-hover>tbody>tr.warning:hover>th,.table-hover>tbody>tr:hover>.warning,.table-hover>tbody>tr>td.warning:hover,.table-hover>tbody>tr>th.warning:hover{background-color:#faf2cc}.table>tbody>tr.danger>td,.table>tbody>tr.danger>th,.table>tbody>tr>td.danger,.table>tbody>tr>th.danger,.table>tfoot>tr.danger>td,.table>tfoot>tr.danger>th,.table>tfoot>tr>td.danger,.table>tfoot>tr>th.danger,.table>thead>tr.danger>td,.table>thead>tr.danger>th,.table>thead>tr>td.danger,.table>thead>tr>th.danger{background-color:#f2dede}.table-hover>tbody>tr.danger:hover>td,.table-hover>tbody>tr.danger:hover>th,.table-hover>tbody>tr:hover>.danger,.table-hover>tbody>tr>td.danger:hover,.table-hover>tbody>tr>th.danger:hover{background-color:#ebcccc}.table-responsive{overflow-x:auto;min-height:.01%}@media screen and (max-width:767px){.table-responsive{width:100%;margin-bottom:16.5px;overflow-y:hidden;-ms-overflow-style:-ms-autohiding-scrollbar;border:1px solid #ddd}.table-responsive>.table{margin-bottom:0}.table-responsive>.table>tbody>tr>td,.table-responsive>.table>tbody>tr>th,.table-responsive>.table>tfoot>tr>td,.table-responsive>.table>tfoot>tr>th,.table-responsive>.table>thead>tr>td,.table-responsive>.table>thead>tr>th{white-space:nowrap}.table-responsive>.table-bordered{border:0}.table-responsive>.table-bordered>tbody>tr>td:first-child,.table-responsive>.table-bordered>tbody>tr>th:first-child,.table-responsive>.table-bordered>tfoot>tr>td:first-child,.table-responsive>.table-bordered>tfoot>tr>th:first-child,.table-responsive>.table-bordered>thead>tr>td:first-child,.table-responsive>.table-bordered>thead>tr>th:first-child{border-left:0}.table-responsive>.table-bordered>tbody>tr>td:last-child,.table-responsive>.table-bordered>tbody>tr>th:last-child,.table-responsive>.table-bordered>tfoot>tr>td:last-child,.table-responsive>.table-bordered>tfoot>tr>th:last-child,.table-responsive>.table-bordered>thead>tr>td:last-child,.table-responsive>.table-bordered>thead>tr>th:last-child{border-right:0}.table-responsive>.table-bordered>tbody>tr:last-child>td,.table-responsive>.table-bordered>tbody>tr:last-child>th,.table-responsive>.table-bordered>tfoot>tr:last-child>td,.table-responsive>.table-bordered>tfoot>tr:last-child>th{border-bottom:0}}fieldset{margin:0;min-width:0}fieldset,legend{padding:0;border:0}legend{display:block;width:100%;margin-bottom:22px;font-size:21px;line-height:inherit;color:#333;border-bottom:1px solid #e5e5e5}label{display:inline-block;max-width:100%;margin-bottom:5px;font-weight:700}input[type=search]{-webkit-box-sizing:border-box;box-sizing:border-box}input[type=checkbox],input[type=radio]{margin:4px 0 0;margin-top:1px\9;line-height:normal}input[type=file]{display:block}input[type=range]{display:block;width:100%}select[multiple],select[size]{height:auto}input[type=checkbox]:focus,input[type=file]:focus,input[type=radio]:focus{outline:5px auto -webkit-focus-ring-color;outline-offset:-2px}output{padding-top:7px}.form-control,output{display:block;font-size:14px;line-height:1.6;color:#555}.form-control{width:100%;height:36px;padding:6px 12px;background-color:#fff;background-image:none;border:1px solid #ccd0d2;border-radius:4px;-webkit-box-shadow:inset 0 1px 1px rgba(0,0,0,.075);box-shadow:inset 0 1px 1px rgba(0,0,0,.075);-webkit-transition:border-color .15s ease-in-out,box-shadow .15s ease-in-out;-webkit-transition:border-color .15s ease-in-out,-webkit-box-shadow .15s ease-in-out;transition:border-color .15s ease-in-out,-webkit-box-shadow .15s ease-in-out;transition:border-color .15s ease-in-out,box-shadow .15s ease-in-out;transition:border-color .15s ease-in-out,box-shadow .15s ease-in-out,-webkit-box-shadow .15s ease-in-out}.form-control:focus{border-color:#98cbe8;outline:0;-webkit-box-shadow:inset 0 1px 1px rgba(0,0,0,.075),0 0 8px rgba(152,203,232,.6);box-shadow:inset 0 1px 1px rgba(0,0,0,.075),0 0 8px rgba(152,203,232,.6)}.form-control::-moz-placeholder{color:#b1b7ba;opacity:1}.form-control:-ms-input-placeholder{color:#b1b7ba}.form-control::-webkit-input-placeholder{color:#b1b7ba}.form-control::-ms-expand{border:0;background-color:transparent}.form-control[disabled],.form-control[readonly],fieldset[disabled] .form-control{background-color:#eee;opacity:1}.form-control[disabled],fieldset[disabled] .form-control{cursor:not-allowed}textarea.form-control{height:auto}input[type=search]{-webkit-appearance:none}@media screen and (-webkit-min-device-pixel-ratio:0){input[type=date].form-control,input[type=datetime-local].form-control,input[type=month].form-control,input[type=time].form-control{line-height:36px}.input-group-sm>.input-group-btn>input[type=date].btn,.input-group-sm>.input-group-btn>input[type=datetime-local].btn,.input-group-sm>.input-group-btn>input[type=month].btn,.input-group-sm>.input-group-btn>input[type=time].btn,.input-group-sm>input[type=date].form-control,.input-group-sm>input[type=date].input-group-addon,.input-group-sm>input[type=datetime-local].form-control,.input-group-sm>input[type=datetime-local].input-group-addon,.input-group-sm>input[type=month].form-control,.input-group-sm>input[type=month].input-group-addon,.input-group-sm>input[type=time].form-control,.input-group-sm>input[type=time].input-group-addon,.input-group-sm input[type=date],.input-group-sm input[type=datetime-local],.input-group-sm input[type=month],.input-group-sm input[type=time],input[type=date].input-sm,input[type=datetime-local].input-sm,input[type=month].input-sm,input[type=time].input-sm{line-height:30px}.input-group-lg>.input-group-btn>input[type=date].btn,.input-group-lg>.input-group-btn>input[type=datetime-local].btn,.input-group-lg>.input-group-btn>input[type=month].btn,.input-group-lg>.input-group-btn>input[type=time].btn,.input-group-lg>input[type=date].form-control,.input-group-lg>input[type=date].input-group-addon,.input-group-lg>input[type=datetime-local].form-control,.input-group-lg>input[type=datetime-local].input-group-addon,.input-group-lg>input[type=month].form-control,.input-group-lg>input[type=month].input-group-addon,.input-group-lg>input[type=time].form-control,.input-group-lg>input[type=time].input-group-addon,.input-group-lg input[type=date],.input-group-lg input[type=datetime-local],.input-group-lg input[type=month],.input-group-lg input[type=time],input[type=date].input-lg,input[type=datetime-local].input-lg,input[type=month].input-lg,input[type=time].input-lg{line-height:46px}}.form-group{margin-bottom:15px}.checkbox,.radio{position:relative;display:block;margin-top:10px;margin-bottom:10px}.checkbox label,.radio label{min-height:22px;padding-left:20px;margin-bottom:0;font-weight:400;cursor:pointer}.checkbox-inline input[type=checkbox],.checkbox input[type=checkbox],.radio-inline input[type=radio],.radio input[type=radio]{position:absolute;margin-left:-20px;margin-top:4px\9}.checkbox+.checkbox,.radio+.radio{margin-top:-5px}.checkbox-inline,.radio-inline{position:relative;display:inline-block;padding-left:20px;margin-bottom:0;vertical-align:middle;font-weight:400;cursor:pointer}.checkbox-inline+.checkbox-inline,.radio-inline+.radio-inline{margin-top:0;margin-left:10px}.checkbox-inline.disabled,.checkbox.disabled label,.radio-inline.disabled,.radio.disabled label,fieldset[disabled] .checkbox-inline,fieldset[disabled] .checkbox label,fieldset[disabled] .radio-inline,fieldset[disabled] .radio label,fieldset[disabled] input[type=checkbox],fieldset[disabled] input[type=radio],input[type=checkbox].disabled,input[type=checkbox][disabled],input[type=radio].disabled,input[type=radio][disabled]{cursor:not-allowed}.form-control-static{padding-top:7px;padding-bottom:7px;margin-bottom:0;min-height:36px}.form-control-static.input-lg,.form-control-static.input-sm,.input-group-lg>.form-control-static.form-control,.input-group-lg>.form-control-static.input-group-addon,.input-group-lg>.input-group-btn>.form-control-static.btn,.input-group-sm>.form-control-static.form-control,.input-group-sm>.form-control-static.input-group-addon,.input-group-sm>.input-group-btn>.form-control-static.btn{padding-left:0;padding-right:0}.input-group-sm>.form-control,.input-group-sm>.input-group-addon,.input-group-sm>.input-group-btn>.btn,.input-sm{height:30px;padding:5px 10px;font-size:12px;line-height:1.5;border-radius:3px}.input-group-sm>.input-group-btn>select.btn,.input-group-sm>select.form-control,.input-group-sm>select.input-group-addon,select.input-sm{height:30px;line-height:30px}.input-group-sm>.input-group-btn>select[multiple].btn,.input-group-sm>.input-group-btn>textarea.btn,.input-group-sm>select[multiple].form-control,.input-group-sm>select[multiple].input-group-addon,.input-group-sm>textarea.form-control,.input-group-sm>textarea.input-group-addon,select[multiple].input-sm,textarea.input-sm{height:auto}.form-group-sm .form-control{height:30px;padding:5px 10px;font-size:12px;line-height:1.5;border-radius:3px}.form-group-sm select.form-control{height:30px;line-height:30px}.form-group-sm select[multiple].form-control,.form-group-sm textarea.form-control{height:auto}.form-group-sm .form-control-static{height:30px;min-height:34px;padding:6px 10px;font-size:12px;line-height:1.5}.input-group-lg>.form-control,.input-group-lg>.input-group-addon,.input-group-lg>.input-group-btn>.btn,.input-lg{height:46px;padding:10px 16px;font-size:18px;line-height:1.3333333;border-radius:6px}.input-group-lg>.input-group-btn>select.btn,.input-group-lg>select.form-control,.input-group-lg>select.input-group-addon,select.input-lg{height:46px;line-height:46px}.input-group-lg>.input-group-btn>select[multiple].btn,.input-group-lg>.input-group-btn>textarea.btn,.input-group-lg>select[multiple].form-control,.input-group-lg>select[multiple].input-group-addon,.input-group-lg>textarea.form-control,.input-group-lg>textarea.input-group-addon,select[multiple].input-lg,textarea.input-lg{height:auto}.form-group-lg .form-control{height:46px;padding:10px 16px;font-size:18px;line-height:1.3333333;border-radius:6px}.form-group-lg select.form-control{height:46px;line-height:46px}.form-group-lg select[multiple].form-control,.form-group-lg textarea.form-control{height:auto}.form-group-lg .form-control-static{height:46px;min-height:40px;padding:11px 16px;font-size:18px;line-height:1.3333333}.has-feedback{position:relative}.has-feedback .form-control{padding-right:45px}.form-control-feedback{position:absolute;top:0;right:0;z-index:2;display:block;width:36px;height:36px;line-height:36px;text-align:center;pointer-events:none}.form-group-lg .form-control+.form-control-feedback,.input-group-lg+.form-control-feedback,.input-group-lg>.form-control+.form-control-feedback,.input-group-lg>.input-group-addon+.form-control-feedback,.input-group-lg>.input-group-btn>.btn+.form-control-feedback,.input-lg+.form-control-feedback{width:46px;height:46px;line-height:46px}.form-group-sm .form-control+.form-control-feedback,.input-group-sm+.form-control-feedback,.input-group-sm>.form-control+.form-control-feedback,.input-group-sm>.input-group-addon+.form-control-feedback,.input-group-sm>.input-group-btn>.btn+.form-control-feedback,.input-sm+.form-control-feedback{width:30px;height:30px;line-height:30px}.has-success .checkbox,.has-success .checkbox-inline,.has-success.checkbox-inline label,.has-success.checkbox label,.has-success .control-label,.has-success .help-block,.has-success .radio,.has-success .radio-inline,.has-success.radio-inline label,.has-success.radio label{color:#3c763d}.has-success .form-control{border-color:#3c763d;-webkit-box-shadow:inset 0 1px 1px rgba(0,0,0,.075);box-shadow:inset 0 1px 1px rgba(0,0,0,.075)}.has-success .form-control:focus{border-color:#2b542c;-webkit-box-shadow:inset 0 1px 1px rgba(0,0,0,.075),0 0 6px #67b168;box-shadow:inset 0 1px 1px rgba(0,0,0,.075),0 0 6px #67b168}.has-success .input-group-addon{color:#3c763d;border-color:#3c763d;background-color:#dff0d8}.has-success .form-control-feedback{color:#3c763d}.has-warning .checkbox,.has-warning .checkbox-inline,.has-warning.checkbox-inline label,.has-warning.checkbox label,.has-warning .control-label,.has-warning .help-block,.has-warning .radio,.has-warning .radio-inline,.has-warning.radio-inline label,.has-warning.radio label{color:#8a6d3b}.has-warning .form-control{border-color:#8a6d3b;-webkit-box-shadow:inset 0 1px 1px rgba(0,0,0,.075);box-shadow:inset 0 1px 1px rgba(0,0,0,.075)}.has-warning .form-control:focus{border-color:#66512c;-webkit-box-shadow:inset 0 1px 1px rgba(0,0,0,.075),0 0 6px #c0a16b;box-shadow:inset 0 1px 1px rgba(0,0,0,.075),0 0 6px #c0a16b}.has-warning .input-group-addon{color:#8a6d3b;border-color:#8a6d3b;background-color:#fcf8e3}.has-warning .form-control-feedback{color:#8a6d3b}.has-error .checkbox,.has-error .checkbox-inline,.has-error.checkbox-inline label,.has-error.checkbox label,.has-error .control-label,.has-error .help-block,.has-error .radio,.has-error .radio-inline,.has-error.radio-inline label,.has-error.radio label{color:#a94442}.has-error .form-control{border-color:#a94442;-webkit-box-shadow:inset 0 1px 1px rgba(0,0,0,.075);box-shadow:inset 0 1px 1px rgba(0,0,0,.075)}.has-error .form-control:focus{border-color:#843534;-webkit-box-shadow:inset 0 1px 1px rgba(0,0,0,.075),0 0 6px #ce8483;box-shadow:inset 0 1px 1px rgba(0,0,0,.075),0 0 6px #ce8483}.has-error .input-group-addon{color:#a94442;border-color:#a94442;background-color:#f2dede}.has-error .form-control-feedback{color:#a94442}.has-feedback label~.form-control-feedback{top:27px}.has-feedback label.sr-only~.form-control-feedback{top:0}.help-block{display:block;margin-top:5px;margin-bottom:10px;color:#a4aaae}@media (min-width:768px){.form-inline .form-group{display:inline-block;margin-bottom:0;vertical-align:middle}.form-inline .form-control{display:inline-block;width:auto;vertical-align:middle}.form-inline .form-control-static{display:inline-block}.form-inline .input-group{display:inline-table;vertical-align:middle}.form-inline .input-group .form-control,.form-inline .input-group .input-group-addon,.form-inline .input-group .input-group-btn{width:auto}.form-inline .input-group>.form-control{width:100%}.form-inline .control-label{margin-bottom:0;vertical-align:middle}.form-inline .checkbox,.form-inline .radio{display:inline-block;margin-top:0;margin-bottom:0;vertical-align:middle}.form-inline .checkbox label,.form-inline .radio label{padding-left:0}.form-inline .checkbox input[type=checkbox],.form-inline .radio input[type=radio]{position:relative;margin-left:0}.form-inline .has-feedback .form-control-feedback{top:0}}.form-horizontal .checkbox,.form-horizontal .checkbox-inline,.form-horizontal .radio,.form-horizontal .radio-inline{margin-top:0;margin-bottom:0;padding-top:7px}.form-horizontal .checkbox,.form-horizontal .radio{min-height:29px}.form-horizontal .form-group{margin-left:-15px;margin-right:-15px}.form-horizontal .form-group:after,.form-horizontal .form-group:before{content:" ";display:table}.form-horizontal .form-group:after{clear:both}@media (min-width:768px){.form-horizontal .control-label{text-align:right;margin-bottom:0;padding-top:7px}}.form-horizontal .has-feedback .form-control-feedback{right:15px}@media (min-width:768px){.form-horizontal .form-group-lg .control-label{padding-top:11px;font-size:18px}}@media (min-width:768px){.form-horizontal .form-group-sm .control-label{padding-top:6px;font-size:12px}}.btn{display:inline-block;margin-bottom:0;font-weight:400;text-align:center;vertical-align:middle;-ms-touch-action:manipulation;touch-action:manipulation;cursor:pointer;background-image:none;border:1px solid transparent;white-space:nowrap;padding:6px 12px;font-size:14px;line-height:1.6;border-radius:4px;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none}.btn.active.focus,.btn.active:focus,.btn.focus,.btn:active.focus,.btn:active:focus,.btn:focus{outline:5px auto -webkit-focus-ring-color;outline-offset:-2px}.btn.focus,.btn:focus,.btn:hover{color:#636b6f;text-decoration:none}.btn.active,.btn:active{outline:0;background-image:none;-webkit-box-shadow:inset 0 3px 5px rgba(0,0,0,.125);box-shadow:inset 0 3px 5px rgba(0,0,0,.125)}.btn.disabled,.btn[disabled],fieldset[disabled] .btn{cursor:not-allowed;opacity:.65;filter:alpha(opacity=65);-webkit-box-shadow:none;box-shadow:none}a.btn.disabled,fieldset[disabled] a.btn{pointer-events:none}.btn-default{color:#636b6f;background-color:#fff;border-color:#ccc}.btn-default.focus,.btn-default:focus{color:#636b6f;background-color:#e6e5e5;border-color:#8c8c8c}.btn-default.active,.btn-default:active,.btn-default:hover,.open>.btn-default.dropdown-toggle{color:#636b6f;background-color:#e6e5e5;border-color:#adadad}.btn-default.active.focus,.btn-default.active:focus,.btn-default.active:hover,.btn-default:active.focus,.btn-default:active:focus,.btn-default:active:hover,.open>.btn-default.dropdown-toggle.focus,.open>.btn-default.dropdown-toggle:focus,.open>.btn-default.dropdown-toggle:hover{color:#636b6f;background-color:#d4d4d4;border-color:#8c8c8c}.btn-default.active,.btn-default:active,.open>.btn-default.dropdown-toggle{background-image:none}.btn-default.disabled.focus,.btn-default.disabled:focus,.btn-default.disabled:hover,.btn-default[disabled].focus,.btn-default[disabled]:focus,.btn-default[disabled]:hover,fieldset[disabled] .btn-default.focus,fieldset[disabled] .btn-default:focus,fieldset[disabled] .btn-default:hover{background-color:#fff;border-color:#ccc}.btn-default .badge{color:#fff;background-color:#636b6f}.btn-primary{color:#fff;background-color:#3097d1;border-color:#2a88bd}.btn-primary.focus,.btn-primary:focus{color:#fff;background-color:#2579a9;border-color:#133d55}.btn-primary.active,.btn-primary:active,.btn-primary:hover,.open>.btn-primary.dropdown-toggle{color:#fff;background-color:#2579a9;border-color:#1f648b}.btn-primary.active.focus,.btn-primary.active:focus,.btn-primary.active:hover,.btn-primary:active.focus,.btn-primary:active:focus,.btn-primary:active:hover,.open>.btn-primary.dropdown-toggle.focus,.open>.btn-primary.dropdown-toggle:focus,.open>.btn-primary.dropdown-toggle:hover{color:#fff;background-color:#1f648b;border-color:#133d55}.btn-primary.active,.btn-primary:active,.open>.btn-primary.dropdown-toggle{background-image:none}.btn-primary.disabled.focus,.btn-primary.disabled:focus,.btn-primary.disabled:hover,.btn-primary[disabled].focus,.btn-primary[disabled]:focus,.btn-primary[disabled]:hover,fieldset[disabled] .btn-primary.focus,fieldset[disabled] .btn-primary:focus,fieldset[disabled] .btn-primary:hover{background-color:#3097d1;border-color:#2a88bd}.btn-primary .badge{color:#3097d1;background-color:#fff}.btn-success{color:#fff;background-color:#2ab27b;border-color:#259d6d}.btn-success.focus,.btn-success:focus{color:#fff;background-color:#20895e;border-color:#0d3625}.btn-success.active,.btn-success:active,.btn-success:hover,.open>.btn-success.dropdown-toggle{color:#fff;background-color:#20895e;border-color:#196c4b}.btn-success.active.focus,.btn-success.active:focus,.btn-success.active:hover,.btn-success:active.focus,.btn-success:active:focus,.btn-success:active:hover,.open>.btn-success.dropdown-toggle.focus,.open>.btn-success.dropdown-toggle:focus,.open>.btn-success.dropdown-toggle:hover{color:#fff;background-color:#196c4b;border-color:#0d3625}.btn-success.active,.btn-success:active,.open>.btn-success.dropdown-toggle{background-image:none}.btn-success.disabled.focus,.btn-success.disabled:focus,.btn-success.disabled:hover,.btn-success[disabled].focus,.btn-success[disabled]:focus,.btn-success[disabled]:hover,fieldset[disabled] .btn-success.focus,fieldset[disabled] .btn-success:focus,fieldset[disabled] .btn-success:hover{background-color:#2ab27b;border-color:#259d6d}.btn-success .badge{color:#2ab27b;background-color:#fff}.btn-info{color:#fff;background-color:#8eb4cb;border-color:#7da8c3}.btn-info.focus,.btn-info:focus{color:#fff;background-color:#6b9dbb;border-color:#3d6983}.btn-info.active,.btn-info:active,.btn-info:hover,.open>.btn-info.dropdown-toggle{color:#fff;background-color:#6b9dbb;border-color:#538db0}.btn-info.active.focus,.btn-info.active:focus,.btn-info.active:hover,.btn-info:active.focus,.btn-info:active:focus,.btn-info:active:hover,.open>.btn-info.dropdown-toggle.focus,.open>.btn-info.dropdown-toggle:focus,.open>.btn-info.dropdown-toggle:hover{color:#fff;background-color:#538db0;border-color:#3d6983}.btn-info.active,.btn-info:active,.open>.btn-info.dropdown-toggle{background-image:none}.btn-info.disabled.focus,.btn-info.disabled:focus,.btn-info.disabled:hover,.btn-info[disabled].focus,.btn-info[disabled]:focus,.btn-info[disabled]:hover,fieldset[disabled] .btn-info.focus,fieldset[disabled] .btn-info:focus,fieldset[disabled] .btn-info:hover{background-color:#8eb4cb;border-color:#7da8c3}.btn-info .badge{color:#8eb4cb;background-color:#fff}.btn-warning{color:#fff;background-color:#cbb956;border-color:#c5b143}.btn-warning.focus,.btn-warning:focus{color:#fff;background-color:#b6a338;border-color:#685d20}.btn-warning.active,.btn-warning:active,.btn-warning:hover,.open>.btn-warning.dropdown-toggle{color:#fff;background-color:#b6a338;border-color:#9b8a30}.btn-warning.active.focus,.btn-warning.active:focus,.btn-warning.active:hover,.btn-warning:active.focus,.btn-warning:active:focus,.btn-warning:active:hover,.open>.btn-warning.dropdown-toggle.focus,.open>.btn-warning.dropdown-toggle:focus,.open>.btn-warning.dropdown-toggle:hover{color:#fff;background-color:#9b8a30;border-color:#685d20}.btn-warning.active,.btn-warning:active,.open>.btn-warning.dropdown-toggle{background-image:none}.btn-warning.disabled.focus,.btn-warning.disabled:focus,.btn-warning.disabled:hover,.btn-warning[disabled].focus,.btn-warning[disabled]:focus,.btn-warning[disabled]:hover,fieldset[disabled] .btn-warning.focus,fieldset[disabled] .btn-warning:focus,fieldset[disabled] .btn-warning:hover{background-color:#cbb956;border-color:#c5b143}.btn-warning .badge{color:#cbb956;background-color:#fff}.btn-danger{color:#fff;background-color:#bf5329;border-color:#aa4a24}.btn-danger.focus,.btn-danger:focus{color:#fff;background-color:#954120;border-color:#411c0e}.btn-danger.active,.btn-danger:active,.btn-danger:hover,.open>.btn-danger.dropdown-toggle{color:#fff;background-color:#954120;border-color:#78341a}.btn-danger.active.focus,.btn-danger.active:focus,.btn-danger.active:hover,.btn-danger:active.focus,.btn-danger:active:focus,.btn-danger:active:hover,.open>.btn-danger.dropdown-toggle.focus,.open>.btn-danger.dropdown-toggle:focus,.open>.btn-danger.dropdown-toggle:hover{color:#fff;background-color:#78341a;border-color:#411c0e}.btn-danger.active,.btn-danger:active,.open>.btn-danger.dropdown-toggle{background-image:none}.btn-danger.disabled.focus,.btn-danger.disabled:focus,.btn-danger.disabled:hover,.btn-danger[disabled].focus,.btn-danger[disabled]:focus,.btn-danger[disabled]:hover,fieldset[disabled] .btn-danger.focus,fieldset[disabled] .btn-danger:focus,fieldset[disabled] .btn-danger:hover{background-color:#bf5329;border-color:#aa4a24}.btn-danger .badge{color:#bf5329;background-color:#fff}.btn-link{color:#3097d1;font-weight:400;border-radius:0}.btn-link,.btn-link.active,.btn-link:active,.btn-link[disabled],fieldset[disabled] .btn-link{background-color:transparent;-webkit-box-shadow:none;box-shadow:none}.btn-link,.btn-link:active,.btn-link:focus,.btn-link:hover{border-color:transparent}.btn-link:focus,.btn-link:hover{color:#216a94;text-decoration:underline;background-color:transparent}.btn-link[disabled]:focus,.btn-link[disabled]:hover,fieldset[disabled] .btn-link:focus,fieldset[disabled] .btn-link:hover{color:#777;text-decoration:none}.btn-group-lg>.btn,.btn-lg{padding:10px 16px;font-size:18px;line-height:1.3333333;border-radius:6px}.btn-group-sm>.btn,.btn-sm{padding:5px 10px;font-size:12px;line-height:1.5;border-radius:3px}.btn-group-xs>.btn,.btn-xs{padding:1px 5px;font-size:12px;line-height:1.5;border-radius:3px}.btn-block{display:block;width:100%}.btn-block+.btn-block{margin-top:5px}input[type=button].btn-block,input[type=reset].btn-block,input[type=submit].btn-block{width:100%}.fade{opacity:0;-webkit-transition:opacity .15s linear;transition:opacity .15s linear}.fade.in{opacity:1}.collapse{display:none}.collapse.in{display:block}tr.collapse.in{display:table-row}tbody.collapse.in{display:table-row-group}.collapsing{position:relative;height:0;overflow:hidden;-webkit-transition-property:height,visibility;transition-property:height,visibility;-webkit-transition-duration:.35s;transition-duration:.35s;-webkit-transition-timing-function:ease;transition-timing-function:ease}.caret{display:inline-block;width:0;height:0;margin-left:2px;vertical-align:middle;border-top:4px dashed;border-top:4px solid\9;border-right:4px solid transparent;border-left:4px solid transparent}.dropdown,.dropup{position:relative}.dropdown-toggle:focus{outline:0}.dropdown-menu{position:absolute;top:100%;left:0;z-index:1000;display:none;float:left;min-width:160px;padding:5px 0;margin:2px 0 0;list-style:none;font-size:14px;text-align:left;background-color:#fff;border:1px solid #ccc;border:1px solid rgba(0,0,0,.15);border-radius:4px;-webkit-box-shadow:0 6px 12px rgba(0,0,0,.175);box-shadow:0 6px 12px rgba(0,0,0,.175);background-clip:padding-box}.dropdown-menu.pull-right{right:0;left:auto}.dropdown-menu .divider{height:1px;margin:10px 0;overflow:hidden;background-color:#e5e5e5}.dropdown-menu>li>a{display:block;padding:3px 20px;clear:both;font-weight:400;line-height:1.6;color:#333;white-space:nowrap}.dropdown-menu>li>a:focus,.dropdown-menu>li>a:hover{text-decoration:none;color:#262626;background-color:#f5f5f5}.dropdown-menu>.active>a,.dropdown-menu>.active>a:focus,.dropdown-menu>.active>a:hover{color:#fff;text-decoration:none;outline:0;background-color:#3097d1}.dropdown-menu>.disabled>a,.dropdown-menu>.disabled>a:focus,.dropdown-menu>.disabled>a:hover{color:#777}.dropdown-menu>.disabled>a:focus,.dropdown-menu>.disabled>a:hover{text-decoration:none;background-color:transparent;background-image:none;filter:progid:DXImageTransform.Microsoft.gradient(enabled = false);cursor:not-allowed}.open>.dropdown-menu{display:block}.open>a{outline:0}.dropdown-menu-right{left:auto;right:0}.dropdown-menu-left{left:0;right:auto}.dropdown-header{display:block;padding:3px 20px;font-size:12px;line-height:1.6;color:#777;white-space:nowrap}.dropdown-backdrop{position:fixed;left:0;right:0;bottom:0;top:0;z-index:990}.pull-right>.dropdown-menu{right:0;left:auto}.dropup .caret,.navbar-fixed-bottom .dropdown .caret{border-top:0;border-bottom:4px dashed;border-bottom:4px solid\9;content:""}.dropup .dropdown-menu,.navbar-fixed-bottom .dropdown .dropdown-menu{top:auto;bottom:100%;margin-bottom:2px}@media (min-width:768px){.navbar-right .dropdown-menu{right:0;left:auto}.navbar-right .dropdown-menu-left{left:0;right:auto}}.btn-group,.btn-group-vertical{position:relative;display:inline-block;vertical-align:middle}.btn-group-vertical>.btn,.btn-group>.btn{position:relative;float:left}.btn-group-vertical>.btn.active,.btn-group-vertical>.btn:active,.btn-group-vertical>.btn:focus,.btn-group-vertical>.btn:hover,.btn-group>.btn.active,.btn-group>.btn:active,.btn-group>.btn:focus,.btn-group>.btn:hover{z-index:2}.btn-group .btn+.btn,.btn-group .btn+.btn-group,.btn-group .btn-group+.btn,.btn-group .btn-group+.btn-group{margin-left:-1px}.btn-toolbar{margin-left:-5px}.btn-toolbar:after,.btn-toolbar:before{content:" ";display:table}.btn-toolbar:after{clear:both}.btn-toolbar .btn,.btn-toolbar .btn-group,.btn-toolbar .input-group{float:left}.btn-toolbar>.btn,.btn-toolbar>.btn-group,.btn-toolbar>.input-group{margin-left:5px}.btn-group>.btn:not(:first-child):not(:last-child):not(.dropdown-toggle){border-radius:0}.btn-group>.btn:first-child{margin-left:0}.btn-group>.btn:first-child:not(:last-child):not(.dropdown-toggle){border-bottom-right-radius:0;border-top-right-radius:0}.btn-group>.btn:last-child:not(:first-child),.btn-group>.dropdown-toggle:not(:first-child){border-bottom-left-radius:0;border-top-left-radius:0}.btn-group>.btn-group{float:left}.btn-group>.btn-group:not(:first-child):not(:last-child)>.btn{border-radius:0}.btn-group>.btn-group:first-child:not(:last-child)>.btn:last-child,.btn-group>.btn-group:first-child:not(:last-child)>.dropdown-toggle{border-bottom-right-radius:0;border-top-right-radius:0}.btn-group>.btn-group:last-child:not(:first-child)>.btn:first-child{border-bottom-left-radius:0;border-top-left-radius:0}.btn-group .dropdown-toggle:active,.btn-group.open .dropdown-toggle{outline:0}.btn-group>.btn+.dropdown-toggle{padding-left:8px;padding-right:8px}.btn-group-lg.btn-group>.btn+.dropdown-toggle,.btn-group>.btn-lg+.dropdown-toggle{padding-left:12px;padding-right:12px}.btn-group.open .dropdown-toggle{-webkit-box-shadow:inset 0 3px 5px rgba(0,0,0,.125);box-shadow:inset 0 3px 5px rgba(0,0,0,.125)}.btn-group.open .dropdown-toggle.btn-link{-webkit-box-shadow:none;box-shadow:none}.btn .caret{margin-left:0}.btn-group-lg>.btn .caret,.btn-lg .caret{border-width:5px 5px 0;border-bottom-width:0}.dropup .btn-group-lg>.btn .caret,.dropup .btn-lg .caret{border-width:0 5px 5px}.btn-group-vertical>.btn,.btn-group-vertical>.btn-group,.btn-group-vertical>.btn-group>.btn{display:block;float:none;width:100%;max-width:100%}.btn-group-vertical>.btn-group:after,.btn-group-vertical>.btn-group:before{content:" ";display:table}.btn-group-vertical>.btn-group:after{clear:both}.btn-group-vertical>.btn-group>.btn{float:none}.btn-group-vertical>.btn+.btn,.btn-group-vertical>.btn+.btn-group,.btn-group-vertical>.btn-group+.btn,.btn-group-vertical>.btn-group+.btn-group{margin-top:-1px;margin-left:0}.btn-group-vertical>.btn:not(:first-child):not(:last-child){border-radius:0}.btn-group-vertical>.btn:first-child:not(:last-child){border-top-right-radius:4px;border-top-left-radius:4px;border-bottom-right-radius:0;border-bottom-left-radius:0}.btn-group-vertical>.btn:last-child:not(:first-child){border-top-right-radius:0;border-top-left-radius:0;border-bottom-right-radius:4px;border-bottom-left-radius:4px}.btn-group-vertical>.btn-group:not(:first-child):not(:last-child)>.btn{border-radius:0}.btn-group-vertical>.btn-group:first-child:not(:last-child)>.btn:last-child,.btn-group-vertical>.btn-group:first-child:not(:last-child)>.dropdown-toggle{border-bottom-right-radius:0;border-bottom-left-radius:0}.btn-group-vertical>.btn-group:last-child:not(:first-child)>.btn:first-child{border-top-right-radius:0;border-top-left-radius:0}.btn-group-justified{display:table;width:100%;table-layout:fixed;border-collapse:separate}.btn-group-justified>.btn,.btn-group-justified>.btn-group{float:none;display:table-cell;width:1%}.btn-group-justified>.btn-group .btn{width:100%}.btn-group-justified>.btn-group .dropdown-menu{left:auto}[data-toggle=buttons]>.btn-group>.btn input[type=checkbox],[data-toggle=buttons]>.btn-group>.btn input[type=radio],[data-toggle=buttons]>.btn input[type=checkbox],[data-toggle=buttons]>.btn input[type=radio]{position:absolute;clip:rect(0,0,0,0);pointer-events:none}.input-group{position:relative;display:table;border-collapse:separate}.input-group[class*=col-]{float:none;padding-left:0;padding-right:0}.input-group .form-control{position:relative;z-index:2;float:left;width:100%;margin-bottom:0}.input-group .form-control:focus{z-index:3}.input-group-addon,.input-group-btn,.input-group .form-control{display:table-cell}.input-group-addon:not(:first-child):not(:last-child),.input-group-btn:not(:first-child):not(:last-child),.input-group .form-control:not(:first-child):not(:last-child){border-radius:0}.input-group-addon,.input-group-btn{width:1%;white-space:nowrap;vertical-align:middle}.input-group-addon{padding:6px 12px;font-size:14px;font-weight:400;line-height:1;color:#555;text-align:center;background-color:#eee;border:1px solid #ccd0d2;border-radius:4px}.input-group-addon.input-sm,.input-group-sm>.input-group-addon,.input-group-sm>.input-group-btn>.input-group-addon.btn{padding:5px 10px;font-size:12px;border-radius:3px}.input-group-addon.input-lg,.input-group-lg>.input-group-addon,.input-group-lg>.input-group-btn>.input-group-addon.btn{padding:10px 16px;font-size:18px;border-radius:6px}.input-group-addon input[type=checkbox],.input-group-addon input[type=radio]{margin-top:0}.input-group-addon:first-child,.input-group-btn:first-child>.btn,.input-group-btn:first-child>.btn-group>.btn,.input-group-btn:first-child>.dropdown-toggle,.input-group-btn:last-child>.btn-group:not(:last-child)>.btn,.input-group-btn:last-child>.btn:not(:last-child):not(.dropdown-toggle),.input-group .form-control:first-child{border-bottom-right-radius:0;border-top-right-radius:0}.input-group-addon:first-child{border-right:0}.input-group-addon:last-child,.input-group-btn:first-child>.btn-group:not(:first-child)>.btn,.input-group-btn:first-child>.btn:not(:first-child),.input-group-btn:last-child>.btn,.input-group-btn:last-child>.btn-group>.btn,.input-group-btn:last-child>.dropdown-toggle,.input-group .form-control:last-child{border-bottom-left-radius:0;border-top-left-radius:0}.input-group-addon:last-child{border-left:0}.input-group-btn{font-size:0;white-space:nowrap}.input-group-btn,.input-group-btn>.btn{position:relative}.input-group-btn>.btn+.btn{margin-left:-1px}.input-group-btn>.btn:active,.input-group-btn>.btn:focus,.input-group-btn>.btn:hover{z-index:2}.input-group-btn:first-child>.btn,.input-group-btn:first-child>.btn-group{margin-right:-1px}.input-group-btn:last-child>.btn,.input-group-btn:last-child>.btn-group{z-index:2;margin-left:-1px}.nav{margin-bottom:0;padding-left:0;list-style:none}.nav:after,.nav:before{content:" ";display:table}.nav:after{clear:both}.nav>li,.nav>li>a{position:relative;display:block}.nav>li>a{padding:10px 15px}.nav>li>a:focus,.nav>li>a:hover{text-decoration:none;background-color:#eee}.nav>li.disabled>a{color:#777}.nav>li.disabled>a:focus,.nav>li.disabled>a:hover{color:#777;text-decoration:none;background-color:transparent;cursor:not-allowed}.nav .open>a,.nav .open>a:focus,.nav .open>a:hover{background-color:#eee;border-color:#3097d1}.nav .nav-divider{height:1px;margin:10px 0;overflow:hidden;background-color:#e5e5e5}.nav>li>a>img{max-width:none}.nav-tabs{border-bottom:1px solid #ddd}.nav-tabs>li{float:left;margin-bottom:-1px}.nav-tabs>li>a{margin-right:2px;line-height:1.6;border:1px solid transparent;border-radius:4px 4px 0 0}.nav-tabs>li>a:hover{border-color:#eee #eee #ddd}.nav-tabs>li.active>a,.nav-tabs>li.active>a:focus,.nav-tabs>li.active>a:hover{color:#555;background-color:#f5f8fa;border:1px solid #ddd;border-bottom-color:transparent;cursor:default}.nav-pills>li{float:left}.nav-pills>li>a{border-radius:4px}.nav-pills>li+li{margin-left:2px}.nav-pills>li.active>a,.nav-pills>li.active>a:focus,.nav-pills>li.active>a:hover{color:#fff;background-color:#3097d1}.nav-stacked>li{float:none}.nav-stacked>li+li{margin-top:2px;margin-left:0}.nav-justified,.nav-tabs.nav-justified{width:100%}.nav-justified>li,.nav-tabs.nav-justified>li{float:none}.nav-justified>li>a,.nav-tabs.nav-justified>li>a{text-align:center;margin-bottom:5px}.nav-justified>.dropdown .dropdown-menu{top:auto;left:auto}@media (min-width:768px){.nav-justified>li,.nav-tabs.nav-justified>li{display:table-cell;width:1%}.nav-justified>li>a,.nav-tabs.nav-justified>li>a{margin-bottom:0}}.nav-tabs-justified,.nav-tabs.nav-justified{border-bottom:0}.nav-tabs-justified>li>a,.nav-tabs.nav-justified>li>a{margin-right:0;border-radius:4px}.nav-tabs-justified>.active>a,.nav-tabs-justified>.active>a:focus,.nav-tabs-justified>.active>a:hover,.nav-tabs.nav-justified>.active>a,.nav-tabs.nav-justified>.active>a:focus,.nav-tabs.nav-justified>.active>a:hover{border:1px solid #ddd}@media (min-width:768px){.nav-tabs-justified>li>a,.nav-tabs.nav-justified>li>a{border-bottom:1px solid #ddd;border-radius:4px 4px 0 0}.nav-tabs-justified>.active>a,.nav-tabs-justified>.active>a:focus,.nav-tabs-justified>.active>a:hover,.nav-tabs.nav-justified>.active>a,.nav-tabs.nav-justified>.active>a:focus,.nav-tabs.nav-justified>.active>a:hover{border-bottom-color:#f5f8fa}}.tab-content>.tab-pane{display:none}.tab-content>.active{display:block}.nav-tabs .dropdown-menu{margin-top:-1px;border-top-right-radius:0;border-top-left-radius:0}.navbar{position:relative;min-height:50px;margin-bottom:22px;border:1px solid transparent}.navbar:after,.navbar:before{content:" ";display:table}.navbar:after{clear:both}@media (min-width:768px){.navbar{border-radius:4px}}.navbar-header:after,.navbar-header:before{content:" ";display:table}.navbar-header:after{clear:both}@media (min-width:768px){.navbar-header{float:left}}.navbar-collapse{overflow-x:visible;padding-right:15px;padding-left:15px;border-top:1px solid transparent;-webkit-box-shadow:inset 0 1px 0 hsla(0,0%,100%,.1);box-shadow:inset 0 1px 0 hsla(0,0%,100%,.1);-webkit-overflow-scrolling:touch}.navbar-collapse:after,.navbar-collapse:before{content:" ";display:table}.navbar-collapse:after{clear:both}.navbar-collapse.in{overflow-y:auto}@media (min-width:768px){.navbar-collapse{width:auto;border-top:0;-webkit-box-shadow:none;box-shadow:none}.navbar-collapse.collapse{display:block!important;height:auto!important;padding-bottom:0;overflow:visible!important}.navbar-collapse.in{overflow-y:visible}.navbar-fixed-bottom .navbar-collapse,.navbar-fixed-top .navbar-collapse,.navbar-static-top .navbar-collapse{padding-left:0;padding-right:0}}.navbar-fixed-bottom .navbar-collapse,.navbar-fixed-top .navbar-collapse{max-height:340px}@media (max-device-width:480px) and (orientation:landscape){.navbar-fixed-bottom .navbar-collapse,.navbar-fixed-top .navbar-collapse{max-height:200px}}.container-fluid>.navbar-collapse,.container-fluid>.navbar-header,.container>.navbar-collapse,.container>.navbar-header{margin-right:-15px;margin-left:-15px}@media (min-width:768px){.container-fluid>.navbar-collapse,.container-fluid>.navbar-header,.container>.navbar-collapse,.container>.navbar-header{margin-right:0;margin-left:0}}.navbar-static-top{z-index:1000;border-width:0 0 1px}@media (min-width:768px){.navbar-static-top{border-radius:0}}.navbar-fixed-bottom,.navbar-fixed-top{position:fixed;right:0;left:0;z-index:1030}@media (min-width:768px){.navbar-fixed-bottom,.navbar-fixed-top{border-radius:0}}.navbar-fixed-top{top:0;border-width:0 0 1px}.navbar-fixed-bottom{bottom:0;margin-bottom:0;border-width:1px 0 0}.navbar-brand{float:left;padding:14px 15px;font-size:18px;line-height:22px;height:50px}.navbar-brand:focus,.navbar-brand:hover{text-decoration:none}.navbar-brand>img{display:block}@media (min-width:768px){.navbar>.container-fluid .navbar-brand,.navbar>.container .navbar-brand{margin-left:-15px}}.navbar-toggle{position:relative;float:right;margin-right:15px;padding:9px 10px;margin-top:8px;margin-bottom:8px;background-color:transparent;background-image:none;border:1px solid transparent;border-radius:4px}.navbar-toggle:focus{outline:0}.navbar-toggle .icon-bar{display:block;width:22px;height:2px;border-radius:1px}.navbar-toggle .icon-bar+.icon-bar{margin-top:4px}@media (min-width:768px){.navbar-toggle{display:none}}.navbar-nav{margin:7px -15px}.navbar-nav>li>a{padding-top:10px;padding-bottom:10px;line-height:22px}@media (max-width:767px){.navbar-nav .open .dropdown-menu{position:static;float:none;width:auto;margin-top:0;background-color:transparent;border:0;-webkit-box-shadow:none;box-shadow:none}.navbar-nav .open .dropdown-menu .dropdown-header,.navbar-nav .open .dropdown-menu>li>a{padding:5px 15px 5px 25px}.navbar-nav .open .dropdown-menu>li>a{line-height:22px}.navbar-nav .open .dropdown-menu>li>a:focus,.navbar-nav .open .dropdown-menu>li>a:hover{background-image:none}}@media (min-width:768px){.navbar-nav{float:left;margin:0}.navbar-nav>li{float:left}.navbar-nav>li>a{padding-top:14px;padding-bottom:14px}}.navbar-form{margin:7px -15px;padding:10px 15px;border-top:1px solid transparent;border-bottom:1px solid transparent;-webkit-box-shadow:inset 0 1px 0 hsla(0,0%,100%,.1),0 1px 0 hsla(0,0%,100%,.1);box-shadow:inset 0 1px 0 hsla(0,0%,100%,.1),0 1px 0 hsla(0,0%,100%,.1)}@media (min-width:768px){.navbar-form .form-group{display:inline-block;margin-bottom:0;vertical-align:middle}.navbar-form .form-control{display:inline-block;width:auto;vertical-align:middle}.navbar-form .form-control-static{display:inline-block}.navbar-form .input-group{display:inline-table;vertical-align:middle}.navbar-form .input-group .form-control,.navbar-form .input-group .input-group-addon,.navbar-form .input-group .input-group-btn{width:auto}.navbar-form .input-group>.form-control{width:100%}.navbar-form .control-label{margin-bottom:0;vertical-align:middle}.navbar-form .checkbox,.navbar-form .radio{display:inline-block;margin-top:0;margin-bottom:0;vertical-align:middle}.navbar-form .checkbox label,.navbar-form .radio label{padding-left:0}.navbar-form .checkbox input[type=checkbox],.navbar-form .radio input[type=radio]{position:relative;margin-left:0}.navbar-form .has-feedback .form-control-feedback{top:0}}@media (max-width:767px){.navbar-form .form-group{margin-bottom:5px}.navbar-form .form-group:last-child{margin-bottom:0}}@media (min-width:768px){.navbar-form{width:auto;border:0;margin-left:0;margin-right:0;padding-top:0;padding-bottom:0;-webkit-box-shadow:none;box-shadow:none}}.navbar-nav>li>.dropdown-menu{margin-top:0;border-top-right-radius:0;border-top-left-radius:0}.navbar-fixed-bottom .navbar-nav>li>.dropdown-menu{margin-bottom:0;border-top-right-radius:4px;border-top-left-radius:4px;border-bottom-right-radius:0;border-bottom-left-radius:0}.navbar-btn{margin-top:7px;margin-bottom:7px}.btn-group-sm>.navbar-btn.btn,.navbar-btn.btn-sm{margin-top:10px;margin-bottom:10px}.btn-group-xs>.navbar-btn.btn,.navbar-btn.btn-xs,.navbar-text{margin-top:14px;margin-bottom:14px}@media (min-width:768px){.navbar-text{float:left;margin-left:15px;margin-right:15px}}@media (min-width:768px){.navbar-left{float:left!important}.navbar-right{float:right!important;margin-right:-15px}.navbar-right~.navbar-right{margin-right:0}}.navbar-default{background-color:#fff;border-color:#d3e0e9}.navbar-default .navbar-brand{color:#777}.navbar-default .navbar-brand:focus,.navbar-default .navbar-brand:hover{color:#5e5d5d;background-color:transparent}.navbar-default .navbar-nav>li>a,.navbar-default .navbar-text{color:#777}.navbar-default .navbar-nav>li>a:focus,.navbar-default .navbar-nav>li>a:hover{color:#333;background-color:transparent}.navbar-default .navbar-nav>.active>a,.navbar-default .navbar-nav>.active>a:focus,.navbar-default .navbar-nav>.active>a:hover{color:#555;background-color:#eee}.navbar-default .navbar-nav>.disabled>a,.navbar-default .navbar-nav>.disabled>a:focus,.navbar-default .navbar-nav>.disabled>a:hover{color:#ccc;background-color:transparent}.navbar-default .navbar-toggle{border-color:#ddd}.navbar-default .navbar-toggle:focus,.navbar-default .navbar-toggle:hover{background-color:#ddd}.navbar-default .navbar-toggle .icon-bar{background-color:#888}.navbar-default .navbar-collapse,.navbar-default .navbar-form{border-color:#d3e0e9}.navbar-default .navbar-nav>.open>a,.navbar-default .navbar-nav>.open>a:focus,.navbar-default .navbar-nav>.open>a:hover{background-color:#eee;color:#555}@media (max-width:767px){.navbar-default .navbar-nav .open .dropdown-menu>li>a{color:#777}.navbar-default .navbar-nav .open .dropdown-menu>li>a:focus,.navbar-default .navbar-nav .open .dropdown-menu>li>a:hover{color:#333;background-color:transparent}.navbar-default .navbar-nav .open .dropdown-menu>.active>a,.navbar-default .navbar-nav .open .dropdown-menu>.active>a:focus,.navbar-default .navbar-nav .open .dropdown-menu>.active>a:hover{color:#555;background-color:#eee}.navbar-default .navbar-nav .open .dropdown-menu>.disabled>a,.navbar-default .navbar-nav .open .dropdown-menu>.disabled>a:focus,.navbar-default .navbar-nav .open .dropdown-menu>.disabled>a:hover{color:#ccc;background-color:transparent}}.navbar-default .navbar-link{color:#777}.navbar-default .navbar-link:hover{color:#333}.navbar-default .btn-link{color:#777}.navbar-default .btn-link:focus,.navbar-default .btn-link:hover{color:#333}.navbar-default .btn-link[disabled]:focus,.navbar-default .btn-link[disabled]:hover,fieldset[disabled] .navbar-default .btn-link:focus,fieldset[disabled] .navbar-default .btn-link:hover{color:#ccc}.navbar-inverse{background-color:#222;border-color:#090909}.navbar-inverse .navbar-brand{color:#9d9d9d}.navbar-inverse .navbar-brand:focus,.navbar-inverse .navbar-brand:hover{color:#fff;background-color:transparent}.navbar-inverse .navbar-nav>li>a,.navbar-inverse .navbar-text{color:#9d9d9d}.navbar-inverse .navbar-nav>li>a:focus,.navbar-inverse .navbar-nav>li>a:hover{color:#fff;background-color:transparent}.navbar-inverse .navbar-nav>.active>a,.navbar-inverse .navbar-nav>.active>a:focus,.navbar-inverse .navbar-nav>.active>a:hover{color:#fff;background-color:#090909}.navbar-inverse .navbar-nav>.disabled>a,.navbar-inverse .navbar-nav>.disabled>a:focus,.navbar-inverse .navbar-nav>.disabled>a:hover{color:#444;background-color:transparent}.navbar-inverse .navbar-toggle{border-color:#333}.navbar-inverse .navbar-toggle:focus,.navbar-inverse .navbar-toggle:hover{background-color:#333}.navbar-inverse .navbar-toggle .icon-bar{background-color:#fff}.navbar-inverse .navbar-collapse,.navbar-inverse .navbar-form{border-color:#101010}.navbar-inverse .navbar-nav>.open>a,.navbar-inverse .navbar-nav>.open>a:focus,.navbar-inverse .navbar-nav>.open>a:hover{background-color:#090909;color:#fff}@media (max-width:767px){.navbar-inverse .navbar-nav .open .dropdown-menu>.dropdown-header{border-color:#090909}.navbar-inverse .navbar-nav .open .dropdown-menu .divider{background-color:#090909}.navbar-inverse .navbar-nav .open .dropdown-menu>li>a{color:#9d9d9d}.navbar-inverse .navbar-nav .open .dropdown-menu>li>a:focus,.navbar-inverse .navbar-nav .open .dropdown-menu>li>a:hover{color:#fff;background-color:transparent}.navbar-inverse .navbar-nav .open .dropdown-menu>.active>a,.navbar-inverse .navbar-nav .open .dropdown-menu>.active>a:focus,.navbar-inverse .navbar-nav .open .dropdown-menu>.active>a:hover{color:#fff;background-color:#090909}.navbar-inverse .navbar-nav .open .dropdown-menu>.disabled>a,.navbar-inverse .navbar-nav .open .dropdown-menu>.disabled>a:focus,.navbar-inverse .navbar-nav .open .dropdown-menu>.disabled>a:hover{color:#444;background-color:transparent}}.navbar-inverse .navbar-link{color:#9d9d9d}.navbar-inverse .navbar-link:hover{color:#fff}.navbar-inverse .btn-link{color:#9d9d9d}.navbar-inverse .btn-link:focus,.navbar-inverse .btn-link:hover{color:#fff}.navbar-inverse .btn-link[disabled]:focus,.navbar-inverse .btn-link[disabled]:hover,fieldset[disabled] .navbar-inverse .btn-link:focus,fieldset[disabled] .navbar-inverse .btn-link:hover{color:#444}.breadcrumb{padding:8px 15px;margin-bottom:22px;list-style:none;background-color:#f5f5f5;border-radius:4px}.breadcrumb>li{display:inline-block}.breadcrumb>li+li:before{content:"/\A0";padding:0 5px;color:#ccc}.breadcrumb>.active{color:#777}.pagination{display:inline-block;padding-left:0;margin:22px 0;border-radius:4px}.pagination>li{display:inline}.pagination>li>a,.pagination>li>span{position:relative;float:left;padding:6px 12px;line-height:1.6;text-decoration:none;color:#3097d1;background-color:#fff;border:1px solid #ddd;margin-left:-1px}.pagination>li:first-child>a,.pagination>li:first-child>span{margin-left:0;border-bottom-left-radius:4px;border-top-left-radius:4px}.pagination>li:last-child>a,.pagination>li:last-child>span{border-bottom-right-radius:4px;border-top-right-radius:4px}.pagination>li>a:focus,.pagination>li>a:hover,.pagination>li>span:focus,.pagination>li>span:hover{z-index:2;color:#216a94;background-color:#eee;border-color:#ddd}.pagination>.active>a,.pagination>.active>a:focus,.pagination>.active>a:hover,.pagination>.active>span,.pagination>.active>span:focus,.pagination>.active>span:hover{z-index:3;color:#fff;background-color:#3097d1;border-color:#3097d1;cursor:default}.pagination>.disabled>a,.pagination>.disabled>a:focus,.pagination>.disabled>a:hover,.pagination>.disabled>span,.pagination>.disabled>span:focus,.pagination>.disabled>span:hover{color:#777;background-color:#fff;border-color:#ddd;cursor:not-allowed}.pagination-lg>li>a,.pagination-lg>li>span{padding:10px 16px;font-size:18px;line-height:1.3333333}.pagination-lg>li:first-child>a,.pagination-lg>li:first-child>span{border-bottom-left-radius:6px;border-top-left-radius:6px}.pagination-lg>li:last-child>a,.pagination-lg>li:last-child>span{border-bottom-right-radius:6px;border-top-right-radius:6px}.pagination-sm>li>a,.pagination-sm>li>span{padding:5px 10px;font-size:12px;line-height:1.5}.pagination-sm>li:first-child>a,.pagination-sm>li:first-child>span{border-bottom-left-radius:3px;border-top-left-radius:3px}.pagination-sm>li:last-child>a,.pagination-sm>li:last-child>span{border-bottom-right-radius:3px;border-top-right-radius:3px}.pager{padding-left:0;margin:22px 0;list-style:none;text-align:center}.pager:after,.pager:before{content:" ";display:table}.pager:after{clear:both}.pager li{display:inline}.pager li>a,.pager li>span{display:inline-block;padding:5px 14px;background-color:#fff;border:1px solid #ddd;border-radius:15px}.pager li>a:focus,.pager li>a:hover{text-decoration:none;background-color:#eee}.pager .next>a,.pager .next>span{float:right}.pager .previous>a,.pager .previous>span{float:left}.pager .disabled>a,.pager .disabled>a:focus,.pager .disabled>a:hover,.pager .disabled>span{color:#777;background-color:#fff;cursor:not-allowed}.label{display:inline;padding:.2em .6em .3em;font-size:75%;font-weight:700;line-height:1;color:#fff;text-align:center;white-space:nowrap;vertical-align:baseline;border-radius:.25em}.label:empty{display:none}.btn .label{position:relative;top:-1px}a.label:focus,a.label:hover{color:#fff;text-decoration:none;cursor:pointer}.label-default{background-color:#777}.label-default[href]:focus,.label-default[href]:hover{background-color:#5e5e5e}.label-primary{background-color:#3097d1}.label-primary[href]:focus,.label-primary[href]:hover{background-color:#2579a9}.label-success{background-color:#2ab27b}.label-success[href]:focus,.label-success[href]:hover{background-color:#20895e}.label-info{background-color:#8eb4cb}.label-info[href]:focus,.label-info[href]:hover{background-color:#6b9dbb}.label-warning{background-color:#cbb956}.label-warning[href]:focus,.label-warning[href]:hover{background-color:#b6a338}.label-danger{background-color:#bf5329}.label-danger[href]:focus,.label-danger[href]:hover{background-color:#954120}.badge{display:inline-block;min-width:10px;padding:3px 7px;font-size:12px;font-weight:700;color:#fff;line-height:1;vertical-align:middle;white-space:nowrap;text-align:center;background-color:#777;border-radius:10px}.badge:empty{display:none}.btn .badge{position:relative;top:-1px}.btn-group-xs>.btn .badge,.btn-xs .badge{top:0;padding:1px 5px}.list-group-item.active>.badge,.nav-pills>.active>a>.badge{color:#3097d1;background-color:#fff}.list-group-item>.badge{float:right}.list-group-item>.badge+.badge{margin-right:5px}.nav-pills>li>a>.badge{margin-left:3px}a.badge:focus,a.badge:hover{color:#fff;text-decoration:none;cursor:pointer}.jumbotron{padding-top:30px;padding-bottom:30px;margin-bottom:30px;background-color:#eee}.jumbotron,.jumbotron .h1,.jumbotron h1{color:inherit}.jumbotron p{margin-bottom:15px;font-size:21px;font-weight:200}.jumbotron>hr{border-top-color:#d5d5d5}.container-fluid .jumbotron,.container .jumbotron{border-radius:6px;padding-left:15px;padding-right:15px}.jumbotron .container{max-width:100%}@media screen and (min-width:768px){.jumbotron{padding-top:48px;padding-bottom:48px}.container-fluid .jumbotron,.container .jumbotron{padding-left:60px;padding-right:60px}.jumbotron .h1,.jumbotron h1{font-size:63px}}.thumbnail{display:block;padding:4px;margin-bottom:22px;line-height:1.6;background-color:#f5f8fa;border:1px solid #ddd;border-radius:4px;-webkit-transition:border .2s ease-in-out;transition:border .2s ease-in-out}.thumbnail>img,.thumbnail a>img{display:block;max-width:100%;height:auto;margin-left:auto;margin-right:auto}.thumbnail .caption{padding:9px;color:#636b6f}a.thumbnail.active,a.thumbnail:focus,a.thumbnail:hover{border-color:#3097d1}.alert{padding:15px;margin-bottom:22px;border:1px solid transparent;border-radius:4px}.alert h4{margin-top:0;color:inherit}.alert .alert-link{font-weight:700}.alert>p,.alert>ul{margin-bottom:0}.alert>p+p{margin-top:5px}.alert-dismissable,.alert-dismissible{padding-right:35px}.alert-dismissable .close,.alert-dismissible .close{position:relative;top:-2px;right:-21px;color:inherit}.alert-success{background-color:#dff0d8;border-color:#d6e9c6;color:#3c763d}.alert-success hr{border-top-color:#c9e2b3}.alert-success .alert-link{color:#2b542c}.alert-info{background-color:#d9edf7;border-color:#bce8f1;color:#31708f}.alert-info hr{border-top-color:#a6e1ec}.alert-info .alert-link{color:#245269}.alert-warning{background-color:#fcf8e3;border-color:#faebcc;color:#8a6d3b}.alert-warning hr{border-top-color:#f7e1b5}.alert-warning .alert-link{color:#66512c}.alert-danger{background-color:#f2dede;border-color:#ebccd1;color:#a94442}.alert-danger hr{border-top-color:#e4b9c0}.alert-danger .alert-link{color:#843534}@-webkit-keyframes progress-bar-stripes{0%{background-position:40px 0}to{background-position:0 0}}@keyframes progress-bar-stripes{0%{background-position:40px 0}to{background-position:0 0}}.progress{overflow:hidden;height:22px;margin-bottom:22px;background-color:#f5f5f5;border-radius:4px;-webkit-box-shadow:inset 0 1px 2px rgba(0,0,0,.1);box-shadow:inset 0 1px 2px rgba(0,0,0,.1)}.progress-bar{float:left;width:0;height:100%;font-size:12px;line-height:22px;color:#fff;text-align:center;background-color:#3097d1;-webkit-box-shadow:inset 0 -1px 0 rgba(0,0,0,.15);box-shadow:inset 0 -1px 0 rgba(0,0,0,.15);-webkit-transition:width .6s ease;transition:width .6s ease}.progress-bar-striped,.progress-striped .progress-bar{background-image:linear-gradient(45deg,hsla(0,0%,100%,.15) 25%,transparent 0,transparent 50%,hsla(0,0%,100%,.15) 0,hsla(0,0%,100%,.15) 75%,transparent 0,transparent);background-size:40px 40px}.progress-bar.active,.progress.active .progress-bar{-webkit-animation:progress-bar-stripes 2s linear infinite;animation:progress-bar-stripes 2s linear infinite}.progress-bar-success{background-color:#2ab27b}.progress-striped .progress-bar-success{background-image:linear-gradient(45deg,hsla(0,0%,100%,.15) 25%,transparent 0,transparent 50%,hsla(0,0%,100%,.15) 0,hsla(0,0%,100%,.15) 75%,transparent 0,transparent)}.progress-bar-info{background-color:#8eb4cb}.progress-striped .progress-bar-info{background-image:linear-gradient(45deg,hsla(0,0%,100%,.15) 25%,transparent 0,transparent 50%,hsla(0,0%,100%,.15) 0,hsla(0,0%,100%,.15) 75%,transparent 0,transparent)}.progress-bar-warning{background-color:#cbb956}.progress-striped .progress-bar-warning{background-image:linear-gradient(45deg,hsla(0,0%,100%,.15) 25%,transparent 0,transparent 50%,hsla(0,0%,100%,.15) 0,hsla(0,0%,100%,.15) 75%,transparent 0,transparent)}.progress-bar-danger{background-color:#bf5329}.progress-striped .progress-bar-danger{background-image:linear-gradient(45deg,hsla(0,0%,100%,.15) 25%,transparent 0,transparent 50%,hsla(0,0%,100%,.15) 0,hsla(0,0%,100%,.15) 75%,transparent 0,transparent)}.media{margin-top:15px}.media:first-child{margin-top:0}.media,.media-body{zoom:1;overflow:hidden}.media-body{width:10000px}.media-object{display:block}.media-object.img-thumbnail{max-width:none}.media-right,.media>.pull-right{padding-left:10px}.media-left,.media>.pull-left{padding-right:10px}.media-body,.media-left,.media-right{display:table-cell;vertical-align:top}.media-middle{vertical-align:middle}.media-bottom{vertical-align:bottom}.media-heading{margin-top:0;margin-bottom:5px}.media-list{padding-left:0;list-style:none}.list-group{margin-bottom:20px;padding-left:0}.list-group-item{position:relative;display:block;padding:10px 15px;margin-bottom:-1px;background-color:#fff;border:1px solid #d3e0e9}.list-group-item:first-child{border-top-right-radius:4px;border-top-left-radius:4px}.list-group-item:last-child{margin-bottom:0;border-bottom-right-radius:4px;border-bottom-left-radius:4px}a.list-group-item,button.list-group-item{color:#555}a.list-group-item .list-group-item-heading,button.list-group-item .list-group-item-heading{color:#333}a.list-group-item:focus,a.list-group-item:hover,button.list-group-item:focus,button.list-group-item:hover{text-decoration:none;color:#555;background-color:#f5f5f5}button.list-group-item{width:100%;text-align:left}.list-group-item.disabled,.list-group-item.disabled:focus,.list-group-item.disabled:hover{background-color:#eee;color:#777;cursor:not-allowed}.list-group-item.disabled .list-group-item-heading,.list-group-item.disabled:focus .list-group-item-heading,.list-group-item.disabled:hover .list-group-item-heading{color:inherit}.list-group-item.disabled .list-group-item-text,.list-group-item.disabled:focus .list-group-item-text,.list-group-item.disabled:hover .list-group-item-text{color:#777}.list-group-item.active,.list-group-item.active:focus,.list-group-item.active:hover{z-index:2;color:#fff;background-color:#3097d1;border-color:#3097d1}.list-group-item.active .list-group-item-heading,.list-group-item.active .list-group-item-heading>.small,.list-group-item.active .list-group-item-heading>small,.list-group-item.active:focus .list-group-item-heading,.list-group-item.active:focus .list-group-item-heading>.small,.list-group-item.active:focus .list-group-item-heading>small,.list-group-item.active:hover .list-group-item-heading,.list-group-item.active:hover .list-group-item-heading>.small,.list-group-item.active:hover .list-group-item-heading>small{color:inherit}.list-group-item.active .list-group-item-text,.list-group-item.active:focus .list-group-item-text,.list-group-item.active:hover .list-group-item-text{color:#d7ebf6}.list-group-item-success{color:#3c763d;background-color:#dff0d8}a.list-group-item-success,button.list-group-item-success{color:#3c763d}a.list-group-item-success .list-group-item-heading,button.list-group-item-success .list-group-item-heading{color:inherit}a.list-group-item-success:focus,a.list-group-item-success:hover,button.list-group-item-success:focus,button.list-group-item-success:hover{color:#3c763d;background-color:#d0e9c6}a.list-group-item-success.active,a.list-group-item-success.active:focus,a.list-group-item-success.active:hover,button.list-group-item-success.active,button.list-group-item-success.active:focus,button.list-group-item-success.active:hover{color:#fff;background-color:#3c763d;border-color:#3c763d}.list-group-item-info{color:#31708f;background-color:#d9edf7}a.list-group-item-info,button.list-group-item-info{color:#31708f}a.list-group-item-info .list-group-item-heading,button.list-group-item-info .list-group-item-heading{color:inherit}a.list-group-item-info:focus,a.list-group-item-info:hover,button.list-group-item-info:focus,button.list-group-item-info:hover{color:#31708f;background-color:#c4e3f3}a.list-group-item-info.active,a.list-group-item-info.active:focus,a.list-group-item-info.active:hover,button.list-group-item-info.active,button.list-group-item-info.active:focus,button.list-group-item-info.active:hover{color:#fff;background-color:#31708f;border-color:#31708f}.list-group-item-warning{color:#8a6d3b;background-color:#fcf8e3}a.list-group-item-warning,button.list-group-item-warning{color:#8a6d3b}a.list-group-item-warning .list-group-item-heading,button.list-group-item-warning .list-group-item-heading{color:inherit}a.list-group-item-warning:focus,a.list-group-item-warning:hover,button.list-group-item-warning:focus,button.list-group-item-warning:hover{color:#8a6d3b;background-color:#faf2cc}a.list-group-item-warning.active,a.list-group-item-warning.active:focus,a.list-group-item-warning.active:hover,button.list-group-item-warning.active,button.list-group-item-warning.active:focus,button.list-group-item-warning.active:hover{color:#fff;background-color:#8a6d3b;border-color:#8a6d3b}.list-group-item-danger{color:#a94442;background-color:#f2dede}a.list-group-item-danger,button.list-group-item-danger{color:#a94442}a.list-group-item-danger .list-group-item-heading,button.list-group-item-danger .list-group-item-heading{color:inherit}a.list-group-item-danger:focus,a.list-group-item-danger:hover,button.list-group-item-danger:focus,button.list-group-item-danger:hover{color:#a94442;background-color:#ebcccc}a.list-group-item-danger.active,a.list-group-item-danger.active:focus,a.list-group-item-danger.active:hover,button.list-group-item-danger.active,button.list-group-item-danger.active:focus,button.list-group-item-danger.active:hover{color:#fff;background-color:#a94442;border-color:#a94442}.list-group-item-heading{margin-top:0;margin-bottom:5px}.list-group-item-text{margin-bottom:0;line-height:1.3}.panel{margin-bottom:22px;background-color:#fff;border:1px solid transparent;border-radius:4px;-webkit-box-shadow:0 1px 1px rgba(0,0,0,.05);box-shadow:0 1px 1px rgba(0,0,0,.05)}.panel-body{padding:15px}.panel-body:after,.panel-body:before{content:" ";display:table}.panel-body:after{clear:both}.panel-heading{padding:10px 15px;border-bottom:1px solid transparent;border-top-right-radius:3px;border-top-left-radius:3px}.panel-heading>.dropdown .dropdown-toggle,.panel-title{color:inherit}.panel-title{margin-top:0;margin-bottom:0;font-size:16px}.panel-title>.small,.panel-title>.small>a,.panel-title>a,.panel-title>small,.panel-title>small>a{color:inherit}.panel-footer{padding:10px 15px;background-color:#f5f5f5;border-top:1px solid #d3e0e9;border-bottom-right-radius:3px;border-bottom-left-radius:3px}.panel>.list-group,.panel>.panel-collapse>.list-group{margin-bottom:0}.panel>.list-group .list-group-item,.panel>.panel-collapse>.list-group .list-group-item{border-width:1px 0;border-radius:0}.panel>.list-group:first-child .list-group-item:first-child,.panel>.panel-collapse>.list-group:first-child .list-group-item:first-child{border-top:0;border-top-right-radius:3px;border-top-left-radius:3px}.panel>.list-group:last-child .list-group-item:last-child,.panel>.panel-collapse>.list-group:last-child .list-group-item:last-child{border-bottom:0;border-bottom-right-radius:3px;border-bottom-left-radius:3px}.panel>.panel-heading+.panel-collapse>.list-group .list-group-item:first-child{border-top-right-radius:0;border-top-left-radius:0}.list-group+.panel-footer,.panel-heading+.list-group .list-group-item:first-child{border-top-width:0}.panel>.panel-collapse>.table,.panel>.table,.panel>.table-responsive>.table{margin-bottom:0}.panel>.panel-collapse>.table caption,.panel>.table-responsive>.table caption,.panel>.table caption{padding-left:15px;padding-right:15px}.panel>.table-responsive:first-child>.table:first-child,.panel>.table-responsive:first-child>.table:first-child>tbody:first-child>tr:first-child,.panel>.table-responsive:first-child>.table:first-child>thead:first-child>tr:first-child,.panel>.table:first-child,.panel>.table:first-child>tbody:first-child>tr:first-child,.panel>.table:first-child>thead:first-child>tr:first-child{border-top-right-radius:3px;border-top-left-radius:3px}.panel>.table-responsive:first-child>.table:first-child>tbody:first-child>tr:first-child td:first-child,.panel>.table-responsive:first-child>.table:first-child>tbody:first-child>tr:first-child th:first-child,.panel>.table-responsive:first-child>.table:first-child>thead:first-child>tr:first-child td:first-child,.panel>.table-responsive:first-child>.table:first-child>thead:first-child>tr:first-child th:first-child,.panel>.table:first-child>tbody:first-child>tr:first-child td:first-child,.panel>.table:first-child>tbody:first-child>tr:first-child th:first-child,.panel>.table:first-child>thead:first-child>tr:first-child td:first-child,.panel>.table:first-child>thead:first-child>tr:first-child th:first-child{border-top-left-radius:3px}.panel>.table-responsive:first-child>.table:first-child>tbody:first-child>tr:first-child td:last-child,.panel>.table-responsive:first-child>.table:first-child>tbody:first-child>tr:first-child th:last-child,.panel>.table-responsive:first-child>.table:first-child>thead:first-child>tr:first-child td:last-child,.panel>.table-responsive:first-child>.table:first-child>thead:first-child>tr:first-child th:last-child,.panel>.table:first-child>tbody:first-child>tr:first-child td:last-child,.panel>.table:first-child>tbody:first-child>tr:first-child th:last-child,.panel>.table:first-child>thead:first-child>tr:first-child td:last-child,.panel>.table:first-child>thead:first-child>tr:first-child th:last-child{border-top-right-radius:3px}.panel>.table-responsive:last-child>.table:last-child,.panel>.table-responsive:last-child>.table:last-child>tbody:last-child>tr:last-child,.panel>.table-responsive:last-child>.table:last-child>tfoot:last-child>tr:last-child,.panel>.table:last-child,.panel>.table:last-child>tbody:last-child>tr:last-child,.panel>.table:last-child>tfoot:last-child>tr:last-child{border-bottom-right-radius:3px;border-bottom-left-radius:3px}.panel>.table-responsive:last-child>.table:last-child>tbody:last-child>tr:last-child td:first-child,.panel>.table-responsive:last-child>.table:last-child>tbody:last-child>tr:last-child th:first-child,.panel>.table-responsive:last-child>.table:last-child>tfoot:last-child>tr:last-child td:first-child,.panel>.table-responsive:last-child>.table:last-child>tfoot:last-child>tr:last-child th:first-child,.panel>.table:last-child>tbody:last-child>tr:last-child td:first-child,.panel>.table:last-child>tbody:last-child>tr:last-child th:first-child,.panel>.table:last-child>tfoot:last-child>tr:last-child td:first-child,.panel>.table:last-child>tfoot:last-child>tr:last-child th:first-child{border-bottom-left-radius:3px}.panel>.table-responsive:last-child>.table:last-child>tbody:last-child>tr:last-child td:last-child,.panel>.table-responsive:last-child>.table:last-child>tbody:last-child>tr:last-child th:last-child,.panel>.table-responsive:last-child>.table:last-child>tfoot:last-child>tr:last-child td:last-child,.panel>.table-responsive:last-child>.table:last-child>tfoot:last-child>tr:last-child th:last-child,.panel>.table:last-child>tbody:last-child>tr:last-child td:last-child,.panel>.table:last-child>tbody:last-child>tr:last-child th:last-child,.panel>.table:last-child>tfoot:last-child>tr:last-child td:last-child,.panel>.table:last-child>tfoot:last-child>tr:last-child th:last-child{border-bottom-right-radius:3px}.panel>.panel-body+.table,.panel>.panel-body+.table-responsive,.panel>.table+.panel-body,.panel>.table-responsive+.panel-body{border-top:1px solid #ddd}.panel>.table>tbody:first-child>tr:first-child td,.panel>.table>tbody:first-child>tr:first-child th{border-top:0}.panel>.table-bordered,.panel>.table-responsive>.table-bordered{border:0}.panel>.table-bordered>tbody>tr>td:first-child,.panel>.table-bordered>tbody>tr>th:first-child,.panel>.table-bordered>tfoot>tr>td:first-child,.panel>.table-bordered>tfoot>tr>th:first-child,.panel>.table-bordered>thead>tr>td:first-child,.panel>.table-bordered>thead>tr>th:first-child,.panel>.table-responsive>.table-bordered>tbody>tr>td:first-child,.panel>.table-responsive>.table-bordered>tbody>tr>th:first-child,.panel>.table-responsive>.table-bordered>tfoot>tr>td:first-child,.panel>.table-responsive>.table-bordered>tfoot>tr>th:first-child,.panel>.table-responsive>.table-bordered>thead>tr>td:first-child,.panel>.table-responsive>.table-bordered>thead>tr>th:first-child{border-left:0}.panel>.table-bordered>tbody>tr>td:last-child,.panel>.table-bordered>tbody>tr>th:last-child,.panel>.table-bordered>tfoot>tr>td:last-child,.panel>.table-bordered>tfoot>tr>th:last-child,.panel>.table-bordered>thead>tr>td:last-child,.panel>.table-bordered>thead>tr>th:last-child,.panel>.table-responsive>.table-bordered>tbody>tr>td:last-child,.panel>.table-responsive>.table-bordered>tbody>tr>th:last-child,.panel>.table-responsive>.table-bordered>tfoot>tr>td:last-child,.panel>.table-responsive>.table-bordered>tfoot>tr>th:last-child,.panel>.table-responsive>.table-bordered>thead>tr>td:last-child,.panel>.table-responsive>.table-bordered>thead>tr>th:last-child{border-right:0}.panel>.table-bordered>tbody>tr:first-child>td,.panel>.table-bordered>tbody>tr:first-child>th,.panel>.table-bordered>tbody>tr:last-child>td,.panel>.table-bordered>tbody>tr:last-child>th,.panel>.table-bordered>tfoot>tr:last-child>td,.panel>.table-bordered>tfoot>tr:last-child>th,.panel>.table-bordered>thead>tr:first-child>td,.panel>.table-bordered>thead>tr:first-child>th,.panel>.table-responsive>.table-bordered>tbody>tr:first-child>td,.panel>.table-responsive>.table-bordered>tbody>tr:first-child>th,.panel>.table-responsive>.table-bordered>tbody>tr:last-child>td,.panel>.table-responsive>.table-bordered>tbody>tr:last-child>th,.panel>.table-responsive>.table-bordered>tfoot>tr:last-child>td,.panel>.table-responsive>.table-bordered>tfoot>tr:last-child>th,.panel>.table-responsive>.table-bordered>thead>tr:first-child>td,.panel>.table-responsive>.table-bordered>thead>tr:first-child>th{border-bottom:0}.panel>.table-responsive{border:0;margin-bottom:0}.panel-group{margin-bottom:22px}.panel-group .panel{margin-bottom:0;border-radius:4px}.panel-group .panel+.panel{margin-top:5px}.panel-group .panel-heading{border-bottom:0}.panel-group .panel-heading+.panel-collapse>.list-group,.panel-group .panel-heading+.panel-collapse>.panel-body{border-top:1px solid #d3e0e9}.panel-group .panel-footer{border-top:0}.panel-group .panel-footer+.panel-collapse .panel-body{border-bottom:1px solid #d3e0e9}.panel-default{border-color:#d3e0e9}.panel-default>.panel-heading{color:#333;background-color:#fff;border-color:#d3e0e9}.panel-default>.panel-heading+.panel-collapse>.panel-body{border-top-color:#d3e0e9}.panel-default>.panel-heading .badge{color:#fff;background-color:#333}.panel-default>.panel-footer+.panel-collapse>.panel-body{border-bottom-color:#d3e0e9}.panel-primary{border-color:#3097d1}.panel-primary>.panel-heading{color:#fff;background-color:#3097d1;border-color:#3097d1}.panel-primary>.panel-heading+.panel-collapse>.panel-body{border-top-color:#3097d1}.panel-primary>.panel-heading .badge{color:#3097d1;background-color:#fff}.panel-primary>.panel-footer+.panel-collapse>.panel-body{border-bottom-color:#3097d1}.panel-success{border-color:#d6e9c6}.panel-success>.panel-heading{color:#3c763d;background-color:#dff0d8;border-color:#d6e9c6}.panel-success>.panel-heading+.panel-collapse>.panel-body{border-top-color:#d6e9c6}.panel-success>.panel-heading .badge{color:#dff0d8;background-color:#3c763d}.panel-success>.panel-footer+.panel-collapse>.panel-body{border-bottom-color:#d6e9c6}.panel-info{border-color:#bce8f1}.panel-info>.panel-heading{color:#31708f;background-color:#d9edf7;border-color:#bce8f1}.panel-info>.panel-heading+.panel-collapse>.panel-body{border-top-color:#bce8f1}.panel-info>.panel-heading .badge{color:#d9edf7;background-color:#31708f}.panel-info>.panel-footer+.panel-collapse>.panel-body{border-bottom-color:#bce8f1}.panel-warning{border-color:#faebcc}.panel-warning>.panel-heading{color:#8a6d3b;background-color:#fcf8e3;border-color:#faebcc}.panel-warning>.panel-heading+.panel-collapse>.panel-body{border-top-color:#faebcc}.panel-warning>.panel-heading .badge{color:#fcf8e3;background-color:#8a6d3b}.panel-warning>.panel-footer+.panel-collapse>.panel-body{border-bottom-color:#faebcc}.panel-danger{border-color:#ebccd1}.panel-danger>.panel-heading{color:#a94442;background-color:#f2dede;border-color:#ebccd1}.panel-danger>.panel-heading+.panel-collapse>.panel-body{border-top-color:#ebccd1}.panel-danger>.panel-heading .badge{color:#f2dede;background-color:#a94442}.panel-danger>.panel-footer+.panel-collapse>.panel-body{border-bottom-color:#ebccd1}.embed-responsive{position:relative;display:block;height:0;padding:0;overflow:hidden}.embed-responsive .embed-responsive-item,.embed-responsive embed,.embed-responsive iframe,.embed-responsive object,.embed-responsive video{position:absolute;top:0;left:0;bottom:0;height:100%;width:100%;border:0}.embed-responsive-16by9{padding-bottom:56.25%}.embed-responsive-4by3{padding-bottom:75%}.well{min-height:20px;padding:19px;margin-bottom:20px;background-color:#f5f5f5;border:1px solid #e3e3e3;border-radius:4px;-webkit-box-shadow:inset 0 1px 1px rgba(0,0,0,.05);box-shadow:inset 0 1px 1px rgba(0,0,0,.05)}.well blockquote{border-color:#ddd;border-color:rgba(0,0,0,.15)}.well-lg{padding:24px;border-radius:6px}.well-sm{padding:9px;border-radius:3px}.close{float:right;font-size:21px;font-weight:700;line-height:1;color:#000;text-shadow:0 1px 0 #fff;opacity:.2;filter:alpha(opacity=20)}.close:focus,.close:hover{color:#000;text-decoration:none;cursor:pointer;opacity:.5;filter:alpha(opacity=50)}button.close{padding:0;cursor:pointer;background:transparent;border:0;-webkit-appearance:none}.modal,.modal-open{overflow:hidden}.modal{display:none;position:fixed;top:0;right:0;bottom:0;left:0;z-index:1050;-webkit-overflow-scrolling:touch;outline:0}.modal.fade .modal-dialog{-webkit-transform:translateY(-25%);transform:translateY(-25%);-webkit-transition:-webkit-transform .3s ease-out;transition:-webkit-transform .3s ease-out;transition:transform .3s ease-out;transition:transform .3s ease-out,-webkit-transform .3s ease-out}.modal.in .modal-dialog{-webkit-transform:translate(0);transform:translate(0)}.modal-open .modal{overflow-x:hidden;overflow-y:auto}.modal-dialog{position:relative;width:auto;margin:10px}.modal-content{position:relative;background-color:#fff;border:1px solid #999;border:1px solid rgba(0,0,0,.2);border-radius:6px;-webkit-box-shadow:0 3px 9px rgba(0,0,0,.5);box-shadow:0 3px 9px rgba(0,0,0,.5);background-clip:padding-box;outline:0}.modal-backdrop{position:fixed;top:0;right:0;bottom:0;left:0;z-index:1040;background-color:#000}.modal-backdrop.fade{opacity:0;filter:alpha(opacity=0)}.modal-backdrop.in{opacity:.5;filter:alpha(opacity=50)}.modal-header{padding:15px;border-bottom:1px solid #e5e5e5}.modal-header:after,.modal-header:before{content:" ";display:table}.modal-header:after{clear:both}.modal-header .close{margin-top:-2px}.modal-title{margin:0;line-height:1.6}.modal-body{position:relative;padding:15px}.modal-footer{padding:15px;text-align:right;border-top:1px solid #e5e5e5}.modal-footer:after,.modal-footer:before{content:" ";display:table}.modal-footer:after{clear:both}.modal-footer .btn+.btn{margin-left:5px;margin-bottom:0}.modal-footer .btn-group .btn+.btn{margin-left:-1px}.modal-footer .btn-block+.btn-block{margin-left:0}.modal-scrollbar-measure{position:absolute;top:-9999px;width:50px;height:50px;overflow:scroll}@media (min-width:768px){.modal-dialog{width:600px;margin:30px auto}.modal-content{-webkit-box-shadow:0 5px 15px rgba(0,0,0,.5);box-shadow:0 5px 15px rgba(0,0,0,.5)}.modal-sm{width:300px}}@media (min-width:992px){.modal-lg{width:900px}}.tooltip{position:absolute;z-index:1070;display:block;font-family:Raleway,sans-serif;font-style:normal;font-weight:400;letter-spacing:normal;line-break:auto;line-height:1.6;text-align:left;text-align:start;text-decoration:none;text-shadow:none;text-transform:none;white-space:normal;word-break:normal;word-spacing:normal;word-wrap:normal;font-size:12px;opacity:0;filter:alpha(opacity=0)}.tooltip.in{opacity:.9;filter:alpha(opacity=90)}.tooltip.top{margin-top:-3px;padding:5px 0}.tooltip.right{margin-left:3px;padding:0 5px}.tooltip.bottom{margin-top:3px;padding:5px 0}.tooltip.left{margin-left:-3px;padding:0 5px}.tooltip-inner{max-width:200px;padding:3px 8px;color:#fff;text-align:center;background-color:#000;border-radius:4px}.tooltip-arrow{position:absolute;width:0;height:0;border-color:transparent;border-style:solid}.tooltip.top .tooltip-arrow{bottom:0;left:50%;margin-left:-5px;border-width:5px 5px 0;border-top-color:#000}.tooltip.top-left .tooltip-arrow{right:5px}.tooltip.top-left .tooltip-arrow,.tooltip.top-right .tooltip-arrow{bottom:0;margin-bottom:-5px;border-width:5px 5px 0;border-top-color:#000}.tooltip.top-right .tooltip-arrow{left:5px}.tooltip.right .tooltip-arrow{top:50%;left:0;margin-top:-5px;border-width:5px 5px 5px 0;border-right-color:#000}.tooltip.left .tooltip-arrow{top:50%;right:0;margin-top:-5px;border-width:5px 0 5px 5px;border-left-color:#000}.tooltip.bottom .tooltip-arrow{top:0;left:50%;margin-left:-5px;border-width:0 5px 5px;border-bottom-color:#000}.tooltip.bottom-left .tooltip-arrow{top:0;right:5px;margin-top:-5px;border-width:0 5px 5px;border-bottom-color:#000}.tooltip.bottom-right .tooltip-arrow{top:0;left:5px;margin-top:-5px;border-width:0 5px 5px;border-bottom-color:#000}.popover{position:absolute;top:0;left:0;z-index:1060;display:none;max-width:276px;padding:1px;font-family:Raleway,sans-serif;font-style:normal;font-weight:400;letter-spacing:normal;line-break:auto;line-height:1.6;text-align:left;text-align:start;text-decoration:none;text-shadow:none;text-transform:none;white-space:normal;word-break:normal;word-spacing:normal;word-wrap:normal;font-size:14px;background-color:#fff;background-clip:padding-box;border:1px solid #ccc;border:1px solid rgba(0,0,0,.2);border-radius:6px;-webkit-box-shadow:0 5px 10px rgba(0,0,0,.2);box-shadow:0 5px 10px rgba(0,0,0,.2)}.popover.top{margin-top:-10px}.popover.right{margin-left:10px}.popover.bottom{margin-top:10px}.popover.left{margin-left:-10px}.popover-title{margin:0;padding:8px 14px;font-size:14px;background-color:#f7f7f7;border-bottom:1px solid #ebebeb;border-radius:5px 5px 0 0}.popover-content{padding:9px 14px}.popover>.arrow,.popover>.arrow:after{position:absolute;display:block;width:0;height:0;border-color:transparent;border-style:solid}.popover>.arrow{border-width:11px}.popover>.arrow:after{border-width:10px;content:""}.popover.top>.arrow{left:50%;margin-left:-11px;border-bottom-width:0;border-top-color:#999;border-top-color:rgba(0,0,0,.25);bottom:-11px}.popover.top>.arrow:after{content:" ";bottom:1px;margin-left:-10px;border-bottom-width:0;border-top-color:#fff}.popover.right>.arrow{top:50%;left:-11px;margin-top:-11px;border-left-width:0;border-right-color:#999;border-right-color:rgba(0,0,0,.25)}.popover.right>.arrow:after{content:" ";left:1px;bottom:-10px;border-left-width:0;border-right-color:#fff}.popover.bottom>.arrow{left:50%;margin-left:-11px;border-top-width:0;border-bottom-color:#999;border-bottom-color:rgba(0,0,0,.25);top:-11px}.popover.bottom>.arrow:after{content:" ";top:1px;margin-left:-10px;border-top-width:0;border-bottom-color:#fff}.popover.left>.arrow{top:50%;right:-11px;margin-top:-11px;border-right-width:0;border-left-color:#999;border-left-color:rgba(0,0,0,.25)}.popover.left>.arrow:after{content:" ";right:1px;border-right-width:0;border-left-color:#fff;bottom:-10px}.carousel,.carousel-inner{position:relative}.carousel-inner{overflow:hidden;width:100%}.carousel-inner>.item{display:none;position:relative;-webkit-transition:left .6s ease-in-out;transition:left .6s ease-in-out}.carousel-inner>.item>a>img,.carousel-inner>.item>img{display:block;max-width:100%;height:auto;line-height:1}@media (-webkit-transform-3d),(transform-3d){.carousel-inner>.item{-webkit-transition:-webkit-transform .6s ease-in-out;transition:-webkit-transform .6s ease-in-out;transition:transform .6s ease-in-out;transition:transform .6s ease-in-out,-webkit-transform .6s ease-in-out;-webkit-backface-visibility:hidden;backface-visibility:hidden;-webkit-perspective:1000px;perspective:1000px}.carousel-inner>.item.active.right,.carousel-inner>.item.next{-webkit-transform:translate3d(100%,0,0);transform:translate3d(100%,0,0);left:0}.carousel-inner>.item.active.left,.carousel-inner>.item.prev{-webkit-transform:translate3d(-100%,0,0);transform:translate3d(-100%,0,0);left:0}.carousel-inner>.item.active,.carousel-inner>.item.next.left,.carousel-inner>.item.prev.right{-webkit-transform:translateZ(0);transform:translateZ(0);left:0}}.carousel-inner>.active,.carousel-inner>.next,.carousel-inner>.prev{display:block}.carousel-inner>.active{left:0}.carousel-inner>.next,.carousel-inner>.prev{position:absolute;top:0;width:100%}.carousel-inner>.next{left:100%}.carousel-inner>.prev{left:-100%}.carousel-inner>.next.left,.carousel-inner>.prev.right{left:0}.carousel-inner>.active.left{left:-100%}.carousel-inner>.active.right{left:100%}.carousel-control{position:absolute;top:0;left:0;bottom:0;width:15%;opacity:.5;filter:alpha(opacity=50);font-size:20px;color:#fff;text-align:center;text-shadow:0 1px 2px rgba(0,0,0,.6);background-color:transparent}.carousel-control.left{background-image:-webkit-gradient(linear,left top,right top,from(rgba(0,0,0,.5)),to(rgba(0,0,0,.0001)));background-image:linear-gradient(90deg,rgba(0,0,0,.5) 0,rgba(0,0,0,.0001));background-repeat:repeat-x;filter:progid:DXImageTransform.Microsoft.gradient(startColorstr="#80000000",endColorstr="#00000000",GradientType=1)}.carousel-control.right{left:auto;right:0;background-image:-webkit-gradient(linear,left top,right top,from(rgba(0,0,0,.0001)),to(rgba(0,0,0,.5)));background-image:linear-gradient(90deg,rgba(0,0,0,.0001) 0,rgba(0,0,0,.5));background-repeat:repeat-x;filter:progid:DXImageTransform.Microsoft.gradient(startColorstr="#00000000",endColorstr="#80000000",GradientType=1)}.carousel-control:focus,.carousel-control:hover{outline:0;color:#fff;text-decoration:none;opacity:.9;filter:alpha(opacity=90)}.carousel-control .glyphicon-chevron-left,.carousel-control .glyphicon-chevron-right,.carousel-control .icon-next,.carousel-control .icon-prev{position:absolute;top:50%;margin-top:-10px;z-index:5;display:inline-block}.carousel-control .glyphicon-chevron-left,.carousel-control .icon-prev{left:50%;margin-left:-10px}.carousel-control .glyphicon-chevron-right,.carousel-control .icon-next{right:50%;margin-right:-10px}.carousel-control .icon-next,.carousel-control .icon-prev{width:20px;height:20px;line-height:1;font-family:serif}.carousel-control .icon-prev:before{content:"\2039"}.carousel-control .icon-next:before{content:"\203A"}.carousel-indicators{position:absolute;bottom:10px;left:50%;z-index:15;width:60%;margin-left:-30%;padding-left:0;list-style:none;text-align:center}.carousel-indicators li{display:inline-block;width:10px;height:10px;margin:1px;text-indent:-999px;border:1px solid #fff;border-radius:10px;cursor:pointer;background-color:#000\9;background-color:transparent}.carousel-indicators .active{margin:0;width:12px;height:12px;background-color:#fff}.carousel-caption{position:absolute;left:15%;right:15%;bottom:20px;z-index:10;padding-top:20px;padding-bottom:20px;color:#fff;text-align:center;text-shadow:0 1px 2px rgba(0,0,0,.6)}.carousel-caption .btn{text-shadow:none}@media screen and (min-width:768px){.carousel-control .glyphicon-chevron-left,.carousel-control .glyphicon-chevron-right,.carousel-control .icon-next,.carousel-control .icon-prev{width:30px;height:30px;margin-top:-10px;font-size:30px}.carousel-control .glyphicon-chevron-left,.carousel-control .icon-prev{margin-left:-10px}.carousel-control .glyphicon-chevron-right,.carousel-control .icon-next{margin-right:-10px}.carousel-caption{left:20%;right:20%;padding-bottom:30px}.carousel-indicators{bottom:20px}}.clearfix:after,.clearfix:before{content:" ";display:table}.clearfix:after{clear:both}.center-block{display:block;margin-left:auto;margin-right:auto}.pull-right{float:right!important}.pull-left{float:left!important}.hide{display:none!important}.show{display:block!important}.invisible{visibility:hidden}.text-hide{font:0/0 a;color:transparent;text-shadow:none;background-color:transparent;border:0}.hidden{display:none!important}.affix{position:fixed}@-ms-viewport{width:device-width}.visible-lg,.visible-lg-block,.visible-lg-inline,.visible-lg-inline-block,.visible-md,.visible-md-block,.visible-md-inline,.visible-md-inline-block,.visible-sm,.visible-sm-block,.visible-sm-inline,.visible-sm-inline-block,.visible-xs,.visible-xs-block,.visible-xs-inline,.visible-xs-inline-block{display:none!important}@media (max-width:767px){.visible-xs{display:block!important}table.visible-xs{display:table!important}tr.visible-xs{display:table-row!important}td.visible-xs,th.visible-xs{display:table-cell!important}}@media (max-width:767px){.visible-xs-block{display:block!important}}@media (max-width:767px){.visible-xs-inline{display:inline!important}}@media (max-width:767px){.visible-xs-inline-block{display:inline-block!important}}@media (min-width:768px) and (max-width:991px){.visible-sm{display:block!important}table.visible-sm{display:table!important}tr.visible-sm{display:table-row!important}td.visible-sm,th.visible-sm{display:table-cell!important}}@media (min-width:768px) and (max-width:991px){.visible-sm-block{display:block!important}}@media (min-width:768px) and (max-width:991px){.visible-sm-inline{display:inline!important}}@media (min-width:768px) and (max-width:991px){.visible-sm-inline-block{display:inline-block!important}}@media (min-width:992px) and (max-width:1199px){.visible-md{display:block!important}table.visible-md{display:table!important}tr.visible-md{display:table-row!important}td.visible-md,th.visible-md{display:table-cell!important}}@media (min-width:992px) and (max-width:1199px){.visible-md-block{display:block!important}}@media (min-width:992px) and (max-width:1199px){.visible-md-inline{display:inline!important}}@media (min-width:992px) and (max-width:1199px){.visible-md-inline-block{display:inline-block!important}}@media (min-width:1200px){.visible-lg{display:block!important}table.visible-lg{display:table!important}tr.visible-lg{display:table-row!important}td.visible-lg,th.visible-lg{display:table-cell!important}}@media (min-width:1200px){.visible-lg-block{display:block!important}}@media (min-width:1200px){.visible-lg-inline{display:inline!important}}@media (min-width:1200px){.visible-lg-inline-block{display:inline-block!important}}@media (max-width:767px){.hidden-xs{display:none!important}}@media (min-width:768px) and (max-width:991px){.hidden-sm{display:none!important}}@media (min-width:992px) and (max-width:1199px){.hidden-md{display:none!important}}@media (min-width:1200px){.hidden-lg{display:none!important}}.visible-print{display:none!important}@media print{.visible-print{display:block!important}table.visible-print{display:table!important}tr.visible-print{display:table-row!important}td.visible-print,th.visible-print{display:table-cell!important}}.visible-print-block{display:none!important}@media print{.visible-print-block{display:block!important}}.visible-print-inline{display:none!important}@media print{.visible-print-inline{display:inline!important}}.visible-print-inline-block{display:none!important}@media print{.visible-print-inline-block{display:inline-block!important}}@media print{.hidden-print{display:none!important}}
   11  =======
   12: /*! Source: https://github.com/h5bp/html5-boilerplate/blob/master/src/css/main.css */@media print{*,:after,:before{background:transparent!important;color:#000!important;-webkit-box-shadow:none!important;box-shadow:none!important;text-shadow:none!important}a,a:visited{text-decoration:underline}a[href]:after{content:" (" attr(href) ")"}abbr[title]:after{content:" (" attr(title) ")"}a[href^="#"]:after,a[href^="javascript:"]:after{content:""}blockquote,pre{border:1px solid #999;page-break-inside:avoid}thead{display:table-header-group}img,tr{page-break-inside:avoid}img{max-width:100%!important}h2,h3,p{orphans:3;widows:3}h2,h3{page-break-after:avoid}.navbar{display:none}.btn>.caret,.dropup>.btn>.caret{border-top-color:#000!important}.label{border:1px solid #000}.table{border-collapse:collapse!important}.table td,.table th{background-color:#fff!important}.table-bordered td,.table-bordered th{border:1px solid #ddd!important}}@font-face{font-family:Glyphicons Halflings;src:url(/fonts/vendor/bootstrap-sass/bootstrap/glyphicons-halflings-regular.eot?f4769f9bdb7466be65088239c12046d1);src:url(/fonts/vendor/bootstrap-sass/bootstrap/glyphicons-halflings-regular.eot?f4769f9bdb7466be65088239c12046d1?#iefix) format("embedded-opentype"),url(/fonts/vendor/bootstrap-sass/bootstrap/glyphicons-halflings-regular.woff2?448c34a56d699c29117adc64c43affeb) format("woff2"),url(/fonts/vendor/bootstrap-sass/bootstrap/glyphicons-halflings-regular.woff?fa2772327f55d8198301fdb8bcfc8158) format("woff"),url(/fonts/vendor/bootstrap-sass/bootstrap/glyphicons-halflings-regular.ttf?e18bbf611f2a2e43afc071aa2f4e1512) format("truetype"),url(/fonts/vendor/bootstrap-sass/bootstrap/glyphicons-halflings-regular.svg?89889688147bd7575d6327160d64e760#glyphicons_halflingsregular) format("svg")}.glyphicon{position:relative;top:1px;display:inline-block;font-family:Glyphicons Halflings;font-style:normal;font-weight:400;line-height:1;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale}.glyphicon-asterisk:before{content:"*"}.glyphicon-plus:before{content:"+"}.glyphicon-eur:before,.glyphicon-euro:before{content:"\20AC"}.glyphicon-minus:before{content:"\2212"}.glyphicon-cloud:before{content:"\2601"}.glyphicon-envelope:before{content:"\2709"}.glyphicon-pencil:before{content:"\270F"}.glyphicon-glass:before{content:"\E001"}.glyphicon-music:before{content:"\E002"}.glyphicon-search:before{content:"\E003"}.glyphicon-heart:before{content:"\E005"}.glyphicon-star:before{content:"\E006"}.glyphicon-star-empty:before{content:"\E007"}.glyphicon-user:before{content:"\E008"}.glyphicon-film:before{content:"\E009"}.glyphicon-th-large:before{content:"\E010"}.glyphicon-th:before{content:"\E011"}.glyphicon-th-list:before{content:"\E012"}.glyphicon-ok:before{content:"\E013"}.glyphicon-remove:before{content:"\E014"}.glyphicon-zoom-in:before{content:"\E015"}.glyphicon-zoom-out:before{content:"\E016"}.glyphicon-off:before{content:"\E017"}.glyphicon-signal:before{content:"\E018"}.glyphicon-cog:before{content:"\E019"}.glyphicon-trash:before{content:"\E020"}.glyphicon-home:before{content:"\E021"}.glyphicon-file:before{content:"\E022"}.glyphicon-time:before{content:"\E023"}.glyphicon-road:before{content:"\E024"}.glyphicon-download-alt:before{content:"\E025"}.glyphicon-download:before{content:"\E026"}.glyphicon-upload:before{content:"\E027"}.glyphicon-inbox:before{content:"\E028"}.glyphicon-play-circle:before{content:"\E029"}.glyphicon-repeat:before{content:"\E030"}.glyphicon-refresh:before{content:"\E031"}.glyphicon-list-alt:before{content:"\E032"}.glyphicon-lock:before{content:"\E033"}.glyphicon-flag:before{content:"\E034"}.glyphicon-headphones:before{content:"\E035"}.glyphicon-volume-off:before{content:"\E036"}.glyphicon-volume-down:before{content:"\E037"}.glyphicon-volume-up:before{content:"\E038"}.glyphicon-qrcode:before{content:"\E039"}.glyphicon-barcode:before{content:"\E040"}.glyphicon-tag:before{content:"\E041"}.glyphicon-tags:before{content:"\E042"}.glyphicon-book:before{content:"\E043"}.glyphicon-bookmark:before{content:"\E044"}.glyphicon-print:before{content:"\E045"}.glyphicon-camera:before{content:"\E046"}.glyphicon-font:before{content:"\E047"}.glyphicon-bold:before{content:"\E048"}.glyphicon-italic:before{content:"\E049"}.glyphicon-text-height:before{content:"\E050"}.glyphicon-text-width:before{content:"\E051"}.glyphicon-align-left:before{content:"\E052"}.glyphicon-align-center:before{content:"\E053"}.glyphicon-align-right:before{content:"\E054"}.glyphicon-align-justify:before{content:"\E055"}.glyphicon-list:before{content:"\E056"}.glyphicon-indent-left:before{content:"\E057"}.glyphicon-indent-right:before{content:"\E058"}.glyphicon-facetime-video:before{content:"\E059"}.glyphicon-picture:before{content:"\E060"}.glyphicon-map-marker:before{content:"\E062"}.glyphicon-adjust:before{content:"\E063"}.glyphicon-tint:before{content:"\E064"}.glyphicon-edit:before{content:"\E065"}.glyphicon-share:before{content:"\E066"}.glyphicon-check:before{content:"\E067"}.glyphicon-move:before{content:"\E068"}.glyphicon-step-backward:before{content:"\E069"}.glyphicon-fast-backward:before{content:"\E070"}.glyphicon-backward:before{content:"\E071"}.glyphicon-play:before{content:"\E072"}.glyphicon-pause:before{content:"\E073"}.glyphicon-stop:before{content:"\E074"}.glyphicon-forward:before{content:"\E075"}.glyphicon-fast-forward:before{content:"\E076"}.glyphicon-step-forward:before{content:"\E077"}.glyphicon-eject:before{content:"\E078"}.glyphicon-chevron-left:before{content:"\E079"}.glyphicon-chevron-right:before{content:"\E080"}.glyphicon-plus-sign:before{content:"\E081"}.glyphicon-minus-sign:before{content:"\E082"}.glyphicon-remove-sign:before{content:"\E083"}.glyphicon-ok-sign:before{content:"\E084"}.glyphicon-question-sign:before{content:"\E085"}.glyphicon-info-sign:before{content:"\E086"}.glyphicon-screenshot:before{content:"\E087"}.glyphicon-remove-circle:before{content:"\E088"}.glyphicon-ok-circle:before{content:"\E089"}.glyphicon-ban-circle:before{content:"\E090"}.glyphicon-arrow-left:before{content:"\E091"}.glyphicon-arrow-right:before{content:"\E092"}.glyphicon-arrow-up:before{content:"\E093"}.glyphicon-arrow-down:before{content:"\E094"}.glyphicon-share-alt:before{content:"\E095"}.glyphicon-resize-full:before{content:"\E096"}.glyphicon-resize-small:before{content:"\E097"}.glyphicon-exclamation-sign:before{content:"\E101"}.glyphicon-gift:before{content:"\E102"}.glyphicon-leaf:before{content:"\E103"}.glyphicon-fire:before{content:"\E104"}.glyphicon-eye-open:before{content:"\E105"}.glyphicon-eye-close:before{content:"\E106"}.glyphicon-warning-sign:before{content:"\E107"}.glyphicon-plane:before{content:"\E108"}.glyphicon-calendar:before{content:"\E109"}.glyphicon-random:before{content:"\E110"}.glyphicon-comment:before{content:"\E111"}.glyphicon-magnet:before{content:"\E112"}.glyphicon-chevron-up:before{content:"\E113"}.glyphicon-chevron-down:before{content:"\E114"}.glyphicon-retweet:before{content:"\E115"}.glyphicon-shopping-cart:before{content:"\E116"}.glyphicon-folder-close:before{content:"\E117"}.glyphicon-folder-open:before{content:"\E118"}.glyphicon-resize-vertical:before{content:"\E119"}.glyphicon-resize-horizontal:before{content:"\E120"}.glyphicon-hdd:before{content:"\E121"}.glyphicon-bullhorn:before{content:"\E122"}.glyphicon-bell:before{content:"\E123"}.glyphicon-certificate:before{content:"\E124"}.glyphicon-thumbs-up:before{content:"\E125"}.glyphicon-thumbs-down:before{content:"\E126"}.glyphicon-hand-right:before{content:"\E127"}.glyphicon-hand-left:before{content:"\E128"}.glyphicon-hand-up:before{content:"\E129"}.glyphicon-hand-down:before{content:"\E130"}.glyphicon-circle-arrow-right:before{content:"\E131"}.glyphicon-circle-arrow-left:before{content:"\E132"}.glyphicon-circle-arrow-up:before{content:"\E133"}.glyphicon-circle-arrow-down:before{content:"\E134"}.glyphicon-globe:before{content:"\E135"}.glyphicon-wrench:before{content:"\E136"}.glyphicon-tasks:before{content:"\E137"}.glyphicon-filter:before{content:"\E138"}.glyphicon-briefcase:before{content:"\E139"}.glyphicon-fullscreen:before{content:"\E140"}.glyphicon-dashboard:before{content:"\E141"}.glyphicon-paperclip:before{content:"\E142"}.glyphicon-heart-empty:before{content:"\E143"}.glyphicon-link:before{content:"\E144"}.glyphicon-phone:before{content:"\E145"}.glyphicon-pushpin:before{content:"\E146"}.glyphicon-usd:before{content:"\E148"}.glyphicon-gbp:before{content:"\E149"}.glyphicon-sort:before{content:"\E150"}.glyphicon-sort-by-alphabet:before{content:"\E151"}.glyphicon-sort-by-alphabet-alt:before{content:"\E152"}.glyphicon-sort-by-order:before{content:"\E153"}.glyphicon-sort-by-order-alt:before{content:"\E154"}.glyphicon-sort-by-attributes:before{content:"\E155"}.glyphicon-sort-by-attributes-alt:before{content:"\E156"}.glyphicon-unchecked:before{content:"\E157"}.glyphicon-expand:before{content:"\E158"}.glyphicon-collapse-down:before{content:"\E159"}.glyphicon-collapse-up:before{content:"\E160"}.glyphicon-log-in:before{content:"\E161"}.glyphicon-flash:before{content:"\E162"}.glyphicon-log-out:before{content:"\E163"}.glyphicon-new-window:before{content:"\E164"}.glyphicon-record:before{content:"\E165"}.glyphicon-save:before{content:"\E166"}.glyphicon-open:before{content:"\E167"}.glyphicon-saved:before{content:"\E168"}.glyphicon-import:before{content:"\E169"}.glyphicon-export:before{content:"\E170"}.glyphicon-send:before{content:"\E171"}.glyphicon-floppy-disk:before{content:"\E172"}.glyphicon-floppy-saved:before{content:"\E173"}.glyphicon-floppy-remove:before{content:"\E174"}.glyphicon-floppy-save:before{content:"\E175"}.glyphicon-floppy-open:before{content:"\E176"}.glyphicon-credit-card:before{content:"\E177"}.glyphicon-transfer:before{content:"\E178"}.glyphicon-cutlery:before{content:"\E179"}.glyphicon-header:before{content:"\E180"}.glyphicon-compressed:before{content:"\E181"}.glyphicon-earphone:before{content:"\E182"}.glyphicon-phone-alt:before{content:"\E183"}.glyphicon-tower:before{content:"\E184"}.glyphicon-stats:before{content:"\E185"}.glyphicon-sd-video:before{content:"\E186"}.glyphicon-hd-video:before{content:"\E187"}.glyphicon-subtitles:before{content:"\E188"}.glyphicon-sound-stereo:before{content:"\E189"}.glyphicon-sound-dolby:before{content:"\E190"}.glyphicon-sound-5-1:before{content:"\E191"}.glyphicon-sound-6-1:before{content:"\E192"}.glyphicon-sound-7-1:before{content:"\E193"}.glyphicon-copyright-mark:before{content:"\E194"}.glyphicon-registration-mark:before{content:"\E195"}.glyphicon-cloud-download:before{content:"\E197"}.glyphicon-cloud-upload:before{content:"\E198"}.glyphicon-tree-conifer:before{content:"\E199"}.glyphicon-tree-deciduous:before{content:"\E200"}.glyphicon-cd:before{content:"\E201"}.glyphicon-save-file:before{content:"\E202"}.glyphicon-open-file:before{content:"\E203"}.glyphicon-level-up:before{content:"\E204"}.glyphicon-copy:before{content:"\E205"}.glyphicon-paste:before{content:"\E206"}.glyphicon-alert:before{content:"\E209"}.glyphicon-equalizer:before{content:"\E210"}.glyphicon-king:before{content:"\E211"}.glyphicon-queen:before{content:"\E212"}.glyphicon-pawn:before{content:"\E213"}.glyphicon-bishop:before{content:"\E214"}.glyphicon-knight:before{content:"\E215"}.glyphicon-baby-formula:before{content:"\E216"}.glyphicon-tent:before{content:"\26FA"}.glyphicon-blackboard:before{content:"\E218"}.glyphicon-bed:before{content:"\E219"}.glyphicon-apple:before{content:"\F8FF"}.glyphicon-erase:before{content:"\E221"}.glyphicon-hourglass:before{content:"\231B"}.glyphicon-lamp:before{content:"\E223"}.glyphicon-duplicate:before{content:"\E224"}.glyphicon-piggy-bank:before{content:"\E225"}.glyphicon-scissors:before{content:"\E226"}.glyphicon-bitcoin:before,.glyphicon-btc:before,.glyphicon-xbt:before{content:"\E227"}.glyphicon-jpy:before,.glyphicon-yen:before{content:"\A5"}.glyphicon-rub:before,.glyphicon-ruble:before{content:"\20BD"}.glyphicon-scale:before{content:"\E230"}.glyphicon-ice-lolly:before{content:"\E231"}.glyphicon-ice-lolly-tasted:before{content:"\E232"}.glyphicon-education:before{content:"\E233"}.glyphicon-option-horizontal:before{content:"\E234"}.glyphicon-option-vertical:before{content:"\E235"}.glyphicon-menu-hamburger:before{content:"\E236"}.glyphicon-modal-window:before{content:"\E237"}.glyphicon-oil:before{content:"\E238"}.glyphicon-grain:before{content:"\E239"}.glyphicon-sunglasses:before{content:"\E240"}.glyphicon-text-size:before{content:"\E241"}.glyphicon-text-color:before{content:"\E242"}.glyphicon-text-background:before{content:"\E243"}.glyphicon-object-align-top:before{content:"\E244"}.glyphicon-object-align-bottom:before{content:"\E245"}.glyphicon-object-align-horizontal:before{content:"\E246"}.glyphicon-object-align-left:before{content:"\E247"}.glyphicon-object-align-vertical:before{content:"\E248"}.glyphicon-object-align-right:before{content:"\E249"}.glyphicon-triangle-right:before{content:"\E250"}.glyphicon-triangle-left:before{content:"\E251"}.glyphicon-triangle-bottom:before{content:"\E252"}.glyphicon-triangle-top:before{content:"\E253"}.glyphicon-console:before{content:"\E254"}.glyphicon-superscript:before{content:"\E255"}.glyphicon-subscript:before{content:"\E256"}.glyphicon-menu-left:before{content:"\E257"}.glyphicon-menu-right:before{content:"\E258"}.glyphicon-menu-down:before{content:"\E259"}.glyphicon-menu-up:before{content:"\E260"}*,:after,:before{-webkit-box-sizing:border-box;box-sizing:border-box}html{font-size:10px;-webkit-tap-highlight-color:transparent}body{font-family:Raleway,sans-serif;font-size:14px;line-height:1.6;color:#636b6f;background-color:#f5f8fa}button,input,select,textarea{font-family:inherit;font-size:inherit;line-height:inherit}a{color:#3097d1;text-decoration:none}a:focus,a:hover{color:#216a94;text-decoration:underline}a:focus{outline:5px auto -webkit-focus-ring-color;outline-offset:-2px}figure{margin:0}img{vertical-align:middle}.img-responsive{display:block;max-width:100%;height:auto}.img-rounded{border-radius:6px}.img-thumbnail{padding:4px;line-height:1.6;background-color:#f5f8fa;border:1px solid #ddd;border-radius:4px;-webkit-transition:all .2s ease-in-out;transition:all .2s ease-in-out;display:inline-block;max-width:100%;height:auto}.img-circle{border-radius:50%}hr{margin-top:22px;margin-bottom:22px;border:0;border-top:1px solid #eee}.sr-only{position:absolute;width:1px;height:1px;margin:-1px;padding:0;overflow:hidden;clip:rect(0,0,0,0);border:0}.sr-only-focusable:active,.sr-only-focusable:focus{position:static;width:auto;height:auto;margin:0;overflow:visible;clip:auto}[role=button]{cursor:pointer}.h1,.h2,.h3,.h4,.h5,.h6,h1,h2,h3,h4,h5,h6{font-family:inherit;font-weight:500;line-height:1.1;color:inherit}.h1 .small,.h1 small,.h2 .small,.h2 small,.h3 .small,.h3 small,.h4 .small,.h4 small,.h5 .small,.h5 small,.h6 .small,.h6 small,h1 .small,h1 small,h2 .small,h2 small,h3 .small,h3 small,h4 .small,h4 small,h5 .small,h5 small,h6 .small,h6 small{font-weight:400;line-height:1;color:#777}.h1,.h2,.h3,h1,h2,h3{margin-top:22px;margin-bottom:11px}.h1 .small,.h1 small,.h2 .small,.h2 small,.h3 .small,.h3 small,h1 .small,h1 small,h2 .small,h2 small,h3 .small,h3 small{font-size:65%}.h4,.h5,.h6,h4,h5,h6{margin-top:11px;margin-bottom:11px}.h4 .small,.h4 small,.h5 .small,.h5 small,.h6 .small,.h6 small,h4 .small,h4 small,h5 .small,h5 small,h6 .small,h6 small{font-size:75%}.h1,h1{font-size:36px}.h2,h2{font-size:30px}.h3,h3{font-size:24px}.h4,h4{font-size:18px}.h5,h5{font-size:14px}.h6,h6{font-size:12px}p{margin:0 0 11px}.lead{margin-bottom:22px;font-size:16px;font-weight:300;line-height:1.4}@media (min-width:768px){.lead{font-size:21px}}.small,small{font-size:85%}.mark,mark{background-color:#fcf8e3;padding:.2em}.text-left{text-align:left}.text-right{text-align:right}.text-center{text-align:center}.text-justify{text-align:justify}.text-nowrap{white-space:nowrap}.text-lowercase{text-transform:lowercase}.initialism,.text-uppercase{text-transform:uppercase}.text-capitalize{text-transform:capitalize}.text-muted{color:#777}.text-primary{color:#3097d1}a.text-primary:focus,a.text-primary:hover{color:#2579a9}.text-success{color:#3c763d}a.text-success:focus,a.text-success:hover{color:#2b542c}.text-info{color:#31708f}a.text-info:focus,a.text-info:hover{color:#245269}.text-warning{color:#8a6d3b}a.text-warning:focus,a.text-warning:hover{color:#66512c}.text-danger{color:#a94442}a.text-danger:focus,a.text-danger:hover{color:#843534}.bg-primary{color:#fff;background-color:#3097d1}a.bg-primary:focus,a.bg-primary:hover{background-color:#2579a9}.bg-success{background-color:#dff0d8}a.bg-success:focus,a.bg-success:hover{background-color:#c1e2b3}.bg-info{background-color:#d9edf7}a.bg-info:focus,a.bg-info:hover{background-color:#afd9ee}.bg-warning{background-color:#fcf8e3}a.bg-warning:focus,a.bg-warning:hover{background-color:#f7ecb5}.bg-danger{background-color:#f2dede}a.bg-danger:focus,a.bg-danger:hover{background-color:#e4b9b9}.page-header{padding-bottom:10px;margin:44px 0 22px;border-bottom:1px solid #eee}ol,ul{margin-top:0;margin-bottom:11px}ol ol,ol ul,ul ol,ul ul{margin-bottom:0}.list-inline,.list-unstyled{padding-left:0;list-style:none}.list-inline{margin-left:-5px}.list-inline>li{display:inline-block;padding-left:5px;padding-right:5px}dl{margin-top:0;margin-bottom:22px}dd,dt{line-height:1.6}dt{font-weight:700}dd{margin-left:0}.dl-horizontal dd:after,.dl-horizontal dd:before{content:" ";display:table}.dl-horizontal dd:after{clear:both}@media (min-width:768px){.dl-horizontal dt{float:left;width:160px;clear:left;text-align:right;overflow:hidden;text-overflow:ellipsis;white-space:nowrap}.dl-horizontal dd{margin-left:180px}}abbr[data-original-title],abbr[title]{cursor:help;border-bottom:1px dotted #777}.initialism{font-size:90%}blockquote{padding:11px 22px;margin:0 0 22px;font-size:17.5px;border-left:5px solid #eee}blockquote ol:last-child,blockquote p:last-child,blockquote ul:last-child{margin-bottom:0}blockquote .small,blockquote footer,blockquote small{display:block;font-size:80%;line-height:1.6;color:#777}blockquote .small:before,blockquote footer:before,blockquote small:before{content:"\2014   \A0"}.blockquote-reverse,blockquote.pull-right{padding-right:15px;padding-left:0;border-right:5px solid #eee;border-left:0;text-align:right}.blockquote-reverse .small:before,.blockquote-reverse footer:before,.blockquote-reverse small:before,blockquote.pull-right .small:before,blockquote.pull-right footer:before,blockquote.pull-right small:before{content:""}.blockquote-reverse .small:after,.blockquote-reverse footer:after,.blockquote-reverse small:after,blockquote.pull-right .small:after,blockquote.pull-right footer:after,blockquote.pull-right small:after{content:"\A0   \2014"}address{margin-bottom:22px;font-style:normal;line-height:1.6}code,kbd,pre,samp{font-family:Menlo,Monaco,Consolas,Courier New,monospace}code{color:#c7254e;background-color:#f9f2f4;border-radius:4px}code,kbd{padding:2px 4px;font-size:90%}kbd{color:#fff;background-color:#333;border-radius:3px;-webkit-box-shadow:inset 0 -1px 0 rgba(0,0,0,.25);box-shadow:inset 0 -1px 0 rgba(0,0,0,.25)}kbd kbd{padding:0;font-size:100%;font-weight:700;-webkit-box-shadow:none;box-shadow:none}pre{display:block;padding:10.5px;margin:0 0 11px;font-size:13px;line-height:1.6;word-break:break-all;word-wrap:break-word;color:#333;background-color:#f5f5f5;border:1px solid #ccc;border-radius:4px}pre code{padding:0;font-size:inherit;color:inherit;white-space:pre-wrap;background-color:transparent;border-radius:0}.pre-scrollable{max-height:340px;overflow-y:scroll}.container{margin-right:auto;margin-left:auto;padding-left:15px;padding-right:15px}.container:after,.container:before{content:" ";display:table}.container:after{clear:both}@media (min-width:768px){.container{width:750px}}@media (min-width:992px){.container{width:970px}}@media (min-width:1200px){.container{width:1170px}}.container-fluid{margin-right:auto;margin-left:auto;padding-left:15px;padding-right:15px}.container-fluid:after,.container-fluid:before{content:" ";display:table}.container-fluid:after{clear:both}.row{margin-left:-15px;margin-right:-15px}.row:after,.row:before{content:" ";display:table}.row:after{clear:both}.col-lg-1,.col-lg-2,.col-lg-3,.col-lg-4,.col-lg-5,.col-lg-6,.col-lg-7,.col-lg-8,.col-lg-9,.col-lg-10,.col-lg-11,.col-lg-12,.col-md-1,.col-md-2,.col-md-3,.col-md-4,.col-md-5,.col-md-6,.col-md-7,.col-md-8,.col-md-9,.col-md-10,.col-md-11,.col-md-12,.col-sm-1,.col-sm-2,.col-sm-3,.col-sm-4,.col-sm-5,.col-sm-6,.col-sm-7,.col-sm-8,.col-sm-9,.col-sm-10,.col-sm-11,.col-sm-12,.col-xs-1,.col-xs-2,.col-xs-3,.col-xs-4,.col-xs-5,.col-xs-6,.col-xs-7,.col-xs-8,.col-xs-9,.col-xs-10,.col-xs-11,.col-xs-12{position:relative;min-height:1px;padding-left:15px;padding-right:15px}.col-xs-1,.col-xs-2,.col-xs-3,.col-xs-4,.col-xs-5,.col-xs-6,.col-xs-7,.col-xs-8,.col-xs-9,.col-xs-10,.col-xs-11,.col-xs-12{float:left}.col-xs-1{width:8.33333333%}.col-xs-2{width:16.66666667%}.col-xs-3{width:25%}.col-xs-4{width:33.33333333%}.col-xs-5{width:41.66666667%}.col-xs-6{width:50%}.col-xs-7{width:58.33333333%}.col-xs-8{width:66.66666667%}.col-xs-9{width:75%}.col-xs-10{width:83.33333333%}.col-xs-11{width:91.66666667%}.col-xs-12{width:100%}.col-xs-pull-0{right:auto}.col-xs-pull-1{right:8.33333333%}.col-xs-pull-2{right:16.66666667%}.col-xs-pull-3{right:25%}.col-xs-pull-4{right:33.33333333%}.col-xs-pull-5{right:41.66666667%}.col-xs-pull-6{right:50%}.col-xs-pull-7{right:58.33333333%}.col-xs-pull-8{right:66.66666667%}.col-xs-pull-9{right:75%}.col-xs-pull-10{right:83.33333333%}.col-xs-pull-11{right:91.66666667%}.col-xs-pull-12{right:100%}.col-xs-push-0{left:auto}.col-xs-push-1{left:8.33333333%}.col-xs-push-2{left:16.66666667%}.col-xs-push-3{left:25%}.col-xs-push-4{left:33.33333333%}.col-xs-push-5{left:41.66666667%}.col-xs-push-6{left:50%}.col-xs-push-7{left:58.33333333%}.col-xs-push-8{left:66.66666667%}.col-xs-push-9{left:75%}.col-xs-push-10{left:83.33333333%}.col-xs-push-11{left:91.66666667%}.col-xs-push-12{left:100%}.col-xs-offset-0{margin-left:0}.col-xs-offset-1{margin-left:8.33333333%}.col-xs-offset-2{margin-left:16.66666667%}.col-xs-offset-3{margin-left:25%}.col-xs-offset-4{margin-left:33.33333333%}.col-xs-offset-5{margin-left:41.66666667%}.col-xs-offset-6{margin-left:50%}.col-xs-offset-7{margin-left:58.33333333%}.col-xs-offset-8{margin-left:66.66666667%}.col-xs-offset-9{margin-left:75%}.col-xs-offset-10{margin-left:83.33333333%}.col-xs-offset-11{margin-left:91.66666667%}.col-xs-offset-12{margin-left:100%}@media (min-width:768px){.col-sm-1,.col-sm-2,.col-sm-3,.col-sm-4,.col-sm-5,.col-sm-6,.col-sm-7,.col-sm-8,.col-sm-9,.col-sm-10,.col-sm-11,.col-sm-12{float:left}.col-sm-1{width:8.33333333%}.col-sm-2{width:16.66666667%}.col-sm-3{width:25%}.col-sm-4{width:33.33333333%}.col-sm-5{width:41.66666667%}.col-sm-6{width:50%}.col-sm-7{width:58.33333333%}.col-sm-8{width:66.66666667%}.col-sm-9{width:75%}.col-sm-10{width:83.33333333%}.col-sm-11{width:91.66666667%}.col-sm-12{width:100%}.col-sm-pull-0{right:auto}.col-sm-pull-1{right:8.33333333%}.col-sm-pull-2{right:16.66666667%}.col-sm-pull-3{right:25%}.col-sm-pull-4{right:33.33333333%}.col-sm-pull-5{right:41.66666667%}.col-sm-pull-6{right:50%}.col-sm-pull-7{right:58.33333333%}.col-sm-pull-8{right:66.66666667%}.col-sm-pull-9{right:75%}.col-sm-pull-10{right:83.33333333%}.col-sm-pull-11{right:91.66666667%}.col-sm-pull-12{right:100%}.col-sm-push-0{left:auto}.col-sm-push-1{left:8.33333333%}.col-sm-push-2{left:16.66666667%}.col-sm-push-3{left:25%}.col-sm-push-4{left:33.33333333%}.col-sm-push-5{left:41.66666667%}.col-sm-push-6{left:50%}.col-sm-push-7{left:58.33333333%}.col-sm-push-8{left:66.66666667%}.col-sm-push-9{left:75%}.col-sm-push-10{left:83.33333333%}.col-sm-push-11{left:91.66666667%}.col-sm-push-12{left:100%}.col-sm-offset-0{margin-left:0}.col-sm-offset-1{margin-left:8.33333333%}.col-sm-offset-2{margin-left:16.66666667%}.col-sm-offset-3{margin-left:25%}.col-sm-offset-4{margin-left:33.33333333%}.col-sm-offset-5{margin-left:41.66666667%}.col-sm-offset-6{margin-left:50%}.col-sm-offset-7{margin-left:58.33333333%}.col-sm-offset-8{margin-left:66.66666667%}.col-sm-offset-9{margin-left:75%}.col-sm-offset-10{margin-left:83.33333333%}.col-sm-offset-11{margin-left:91.66666667%}.col-sm-offset-12{margin-left:100%}}@media (min-width:992px){.col-md-1,.col-md-2,.col-md-3,.col-md-4,.col-md-5,.col-md-6,.col-md-7,.col-md-8,.col-md-9,.col-md-10,.col-md-11,.col-md-12{float:left}.col-md-1{width:8.33333333%}.col-md-2{width:16.66666667%}.col-md-3{width:25%}.col-md-4{width:33.33333333%}.col-md-5{width:41.66666667%}.col-md-6{width:50%}.col-md-7{width:58.33333333%}.col-md-8{width:66.66666667%}.col-md-9{width:75%}.col-md-10{width:83.33333333%}.col-md-11{width:91.66666667%}.col-md-12{width:100%}.col-md-pull-0{right:auto}.col-md-pull-1{right:8.33333333%}.col-md-pull-2{right:16.66666667%}.col-md-pull-3{right:25%}.col-md-pull-4{right:33.33333333%}.col-md-pull-5{right:41.66666667%}.col-md-pull-6{right:50%}.col-md-pull-7{right:58.33333333%}.col-md-pull-8{right:66.66666667%}.col-md-pull-9{right:75%}.col-md-pull-10{right:83.33333333%}.col-md-pull-11{right:91.66666667%}.col-md-pull-12{right:100%}.col-md-push-0{left:auto}.col-md-push-1{left:8.33333333%}.col-md-push-2{left:16.66666667%}.col-md-push-3{left:25%}.col-md-push-4{left:33.33333333%}.col-md-push-5{left:41.66666667%}.col-md-push-6{left:50%}.col-md-push-7{left:58.33333333%}.col-md-push-8{left:66.66666667%}.col-md-push-9{left:75%}.col-md-push-10{left:83.33333333%}.col-md-push-11{left:91.66666667%}.col-md-push-12{left:100%}.col-md-offset-0{margin-left:0}.col-md-offset-1{margin-left:8.33333333%}.col-md-offset-2{margin-left:16.66666667%}.col-md-offset-3{margin-left:25%}.col-md-offset-4{margin-left:33.33333333%}.col-md-offset-5{margin-left:41.66666667%}.col-md-offset-6{margin-left:50%}.col-md-offset-7{margin-left:58.33333333%}.col-md-offset-8{margin-left:66.66666667%}.col-md-offset-9{margin-left:75%}.col-md-offset-10{margin-left:83.33333333%}.col-md-offset-11{margin-left:91.66666667%}.col-md-offset-12{margin-left:100%}}@media (min-width:1200px){.col-lg-1,.col-lg-2,.col-lg-3,.col-lg-4,.col-lg-5,.col-lg-6,.col-lg-7,.col-lg-8,.col-lg-9,.col-lg-10,.col-lg-11,.col-lg-12{float:left}.col-lg-1{width:8.33333333%}.col-lg-2{width:16.66666667%}.col-lg-3{width:25%}.col-lg-4{width:33.33333333%}.col-lg-5{width:41.66666667%}.col-lg-6{width:50%}.col-lg-7{width:58.33333333%}.col-lg-8{width:66.66666667%}.col-lg-9{width:75%}.col-lg-10{width:83.33333333%}.col-lg-11{width:91.66666667%}.col-lg-12{width:100%}.col-lg-pull-0{right:auto}.col-lg-pull-1{right:8.33333333%}.col-lg-pull-2{right:16.66666667%}.col-lg-pull-3{right:25%}.col-lg-pull-4{right:33.33333333%}.col-lg-pull-5{right:41.66666667%}.col-lg-pull-6{right:50%}.col-lg-pull-7{right:58.33333333%}.col-lg-pull-8{right:66.66666667%}.col-lg-pull-9{right:75%}.col-lg-pull-10{right:83.33333333%}.col-lg-pull-11{right:91.66666667%}.col-lg-pull-12{right:100%}.col-lg-push-0{left:auto}.col-lg-push-1{left:8.33333333%}.col-lg-push-2{left:16.66666667%}.col-lg-push-3{left:25%}.col-lg-push-4{left:33.33333333%}.col-lg-push-5{left:41.66666667%}.col-lg-push-6{left:50%}.col-lg-push-7{left:58.33333333%}.col-lg-push-8{left:66.66666667%}.col-lg-push-9{left:75%}.col-lg-push-10{left:83.33333333%}.col-lg-push-11{left:91.66666667%}.col-lg-push-12{left:100%}.col-lg-offset-0{margin-left:0}.col-lg-offset-1{margin-left:8.33333333%}.col-lg-offset-2{margin-left:16.66666667%}.col-lg-offset-3{margin-left:25%}.col-lg-offset-4{margin-left:33.33333333%}.col-lg-offset-5{margin-left:41.66666667%}.col-lg-offset-6{margin-left:50%}.col-lg-offset-7{margin-left:58.33333333%}.col-lg-offset-8{margin-left:66.66666667%}.col-lg-offset-9{margin-left:75%}.col-lg-offset-10{margin-left:83.33333333%}.col-lg-offset-11{margin-left:91.66666667%}.col-lg-offset-12{margin-left:100%}}table{background-color:transparent}caption{padding-top:8px;padding-bottom:8px;color:#777}caption,th{text-align:left}.table{width:100%;max-width:100%;margin-bottom:22px}.table>tbody>tr>td,.table>tbody>tr>th,.table>tfoot>tr>td,.table>tfoot>tr>th,.table>thead>tr>td,.table>thead>tr>th{padding:8px;line-height:1.6;vertical-align:top;border-top:1px solid #ddd}.table>thead>tr>th{vertical-align:bottom;border-bottom:2px solid #ddd}.table>caption+thead>tr:first-child>td,.table>caption+thead>tr:first-child>th,.table>colgroup+thead>tr:first-child>td,.table>colgroup+thead>tr:first-child>th,.table>thead:first-child>tr:first-child>td,.table>thead:first-child>tr:first-child>th{border-top:0}.table>tbody+tbody{border-top:2px solid #ddd}.table .table{background-color:#f5f8fa}.table-condensed>tbody>tr>td,.table-condensed>tbody>tr>th,.table-condensed>tfoot>tr>td,.table-condensed>tfoot>tr>th,.table-condensed>thead>tr>td,.table-condensed>thead>tr>th{padding:5px}.table-bordered,.table-bordered>tbody>tr>td,.table-bordered>tbody>tr>th,.table-bordered>tfoot>tr>td,.table-bordered>tfoot>tr>th,.table-bordered>thead>tr>td,.table-bordered>thead>tr>th{border:1px solid #ddd}.table-bordered>thead>tr>td,.table-bordered>thead>tr>th{border-bottom-width:2px}.table-striped>tbody>tr:nth-of-type(odd){background-color:#f9f9f9}.table-hover>tbody>tr:hover{background-color:#f5f5f5}table col[class*=col-]{position:static;float:none;display:table-column}table td[class*=col-],table th[class*=col-]{position:static;float:none;display:table-cell}.table>tbody>tr.active>td,.table>tbody>tr.active>th,.table>tbody>tr>td.active,.table>tbody>tr>th.active,.table>tfoot>tr.active>td,.table>tfoot>tr.active>th,.table>tfoot>tr>td.active,.table>tfoot>tr>th.active,.table>thead>tr.active>td,.table>thead>tr.active>th,.table>thead>tr>td.active,.table>thead>tr>th.active{background-color:#f5f5f5}.table-hover>tbody>tr.active:hover>td,.table-hover>tbody>tr.active:hover>th,.table-hover>tbody>tr:hover>.active,.table-hover>tbody>tr>td.active:hover,.table-hover>tbody>tr>th.active:hover{background-color:#e8e8e8}.table>tbody>tr.success>td,.table>tbody>tr.success>th,.table>tbody>tr>td.success,.table>tbody>tr>th.success,.table>tfoot>tr.success>td,.table>tfoot>tr.success>th,.table>tfoot>tr>td.success,.table>tfoot>tr>th.success,.table>thead>tr.success>td,.table>thead>tr.success>th,.table>thead>tr>td.success,.table>thead>tr>th.success{background-color:#dff0d8}.table-hover>tbody>tr.success:hover>td,.table-hover>tbody>tr.success:hover>th,.table-hover>tbody>tr:hover>.success,.table-hover>tbody>tr>td.success:hover,.table-hover>tbody>tr>th.success:hover{background-color:#d0e9c6}.table>tbody>tr.info>td,.table>tbody>tr.info>th,.table>tbody>tr>td.info,.table>tbody>tr>th.info,.table>tfoot>tr.info>td,.table>tfoot>tr.info>th,.table>tfoot>tr>td.info,.table>tfoot>tr>th.info,.table>thead>tr.info>td,.table>thead>tr.info>th,.table>thead>tr>td.info,.table>thead>tr>th.info{background-color:#d9edf7}.table-hover>tbody>tr.info:hover>td,.table-hover>tbody>tr.info:hover>th,.table-hover>tbody>tr:hover>.info,.table-hover>tbody>tr>td.info:hover,.table-hover>tbody>tr>th.info:hover{background-color:#c4e3f3}.table>tbody>tr.warning>td,.table>tbody>tr.warning>th,.table>tbody>tr>td.warning,.table>tbody>tr>th.warning,.table>tfoot>tr.warning>td,.table>tfoot>tr.warning>th,.table>tfoot>tr>td.warning,.table>tfoot>tr>th.warning,.table>thead>tr.warning>td,.table>thead>tr.warning>th,.table>thead>tr>td.warning,.table>thead>tr>th.warning{background-color:#fcf8e3}.table-hover>tbody>tr.warning:hover>td,.table-hover>tbody>tr.warning:hover>th,.table-hover>tbody>tr:hover>.warning,.table-hover>tbody>tr>td.warning:hover,.table-hover>tbody>tr>th.warning:hover{background-color:#faf2cc}.table>tbody>tr.danger>td,.table>tbody>tr.danger>th,.table>tbody>tr>td.danger,.table>tbody>tr>th.danger,.table>tfoot>tr.danger>td,.table>tfoot>tr.danger>th,.table>tfoot>tr>td.danger,.table>tfoot>tr>th.danger,.table>thead>tr.danger>td,.table>thead>tr.danger>th,.table>thead>tr>td.danger,.table>thead>tr>th.danger{background-color:#f2dede}.table-hover>tbody>tr.danger:hover>td,.table-hover>tbody>tr.danger:hover>th,.table-hover>tbody>tr:hover>.danger,.table-hover>tbody>tr>td.danger:hover,.table-hover>tbody>tr>th.danger:hover{background-color:#ebcccc}.table-responsive{overflow-x:auto;min-height:.01%}@media screen and (max-width:767px){.table-responsive{width:100%;margin-bottom:16.5px;overflow-y:hidden;-ms-overflow-style:-ms-autohiding-scrollbar;border:1px solid #ddd}.table-responsive>.table{margin-bottom:0}.table-responsive>.table>tbody>tr>td,.table-responsive>.table>tbody>tr>th,.table-responsive>.table>tfoot>tr>td,.table-responsive>.table>tfoot>tr>th,.table-responsive>.table>thead>tr>td,.table-responsive>.table>thead>tr>th{white-space:nowrap}.table-responsive>.table-bordered{border:0}.table-responsive>.table-bordered>tbody>tr>td:first-child,.table-responsive>.table-bordered>tbody>tr>th:first-child,.table-responsive>.table-bordered>tfoot>tr>td:first-child,.table-responsive>.table-bordered>tfoot>tr>th:first-child,.table-responsive>.table-bordered>thead>tr>td:first-child,.table-responsive>.table-bordered>thead>tr>th:first-child{border-left:0}.table-responsive>.table-bordered>tbody>tr>td:last-child,.table-responsive>.table-bordered>tbody>tr>th:last-child,.table-responsive>.table-bordered>tfoot>tr>td:last-child,.table-responsive>.table-bordered>tfoot>tr>th:last-child,.table-responsive>.table-bordered>thead>tr>td:last-child,.table-responsive>.table-bordered>thead>tr>th:last-child{border-right:0}.table-responsive>.table-bordered>tbody>tr:last-child>td,.table-responsive>.table-bordered>tbody>tr:last-child>th,.table-responsive>.table-bordered>tfoot>tr:last-child>td,.table-responsive>.table-bordered>tfoot>tr:last-child>th{border-bottom:0}}fieldset{margin:0;min-width:0}fieldset,legend{padding:0;border:0}legend{display:block;width:100%;margin-bottom:22px;font-size:21px;line-height:inherit;color:#333;border-bottom:1px solid #e5e5e5}label{display:inline-block;max-width:100%;margin-bottom:5px;font-weight:700}input[type=search]{-webkit-box-sizing:border-box;box-sizing:border-box}input[type=checkbox],input[type=radio]{margin:4px 0 0;margin-top:1px\9;line-height:normal}input[type=file]{display:block}input[type=range]{display:block;width:100%}select[multiple],select[size]{height:auto}input[type=checkbox]:focus,input[type=file]:focus,input[type=radio]:focus{outline:5px auto -webkit-focus-ring-color;outline-offset:-2px}output{padding-top:7px}.form-control,output{display:block;font-size:14px;line-height:1.6;color:#555}.form-control{width:100%;height:36px;padding:6px 12px;background-color:#fff;background-image:none;border:1px solid #ccd0d2;border-radius:4px;-webkit-box-shadow:inset 0 1px 1px rgba(0,0,0,.075);box-shadow:inset 0 1px 1px rgba(0,0,0,.075);-webkit-transition:border-color .15s ease-in-out,box-shadow .15s ease-in-out;-webkit-transition:border-color .15s ease-in-out,-webkit-box-shadow .15s ease-in-out;transition:border-color .15s ease-in-out,-webkit-box-shadow .15s ease-in-out;transition:border-color .15s ease-in-out,box-shadow .15s ease-in-out;transition:border-color .15s ease-in-out,box-shadow .15s ease-in-out,-webkit-box-shadow .15s ease-in-out}.form-control:focus{border-color:#98cbe8;outline:0;-webkit-box-shadow:inset 0 1px 1px rgba(0,0,0,.075),0 0 8px rgba(152,203,232,.6);box-shadow:inset 0 1px 1px rgba(0,0,0,.075),0 0 8px rgba(152,203,232,.6)}.form-control::-moz-placeholder{color:#b1b7ba;opacity:1}.form-control:-ms-input-placeholder{color:#b1b7ba}.form-control::-webkit-input-placeholder{color:#b1b7ba}.form-control::-ms-expand{border:0;background-color:transparent}.form-control[disabled],.form-control[readonly],fieldset[disabled] .form-control{background-color:#eee;opacity:1}.form-control[disabled],fieldset[disabled] .form-control{cursor:not-allowed}textarea.form-control{height:auto}input[type=search]{-webkit-appearance:none}@media screen and (-webkit-min-device-pixel-ratio:0){input[type=date].form-control,input[type=datetime-local].form-control,input[type=month].form-control,input[type=time].form-control{line-height:36px}.input-group-sm>.input-group-btn>input[type=date].btn,.input-group-sm>.input-group-btn>input[type=datetime-local].btn,.input-group-sm>.input-group-btn>input[type=month].btn,.input-group-sm>.input-group-btn>input[type=time].btn,.input-group-sm>input[type=date].form-control,.input-group-sm>input[type=date].input-group-addon,.input-group-sm>input[type=datetime-local].form-control,.input-group-sm>input[type=datetime-local].input-group-addon,.input-group-sm>input[type=month].form-control,.input-group-sm>input[type=month].input-group-addon,.input-group-sm>input[type=time].form-control,.input-group-sm>input[type=time].input-group-addon,.input-group-sm input[type=date],.input-group-sm input[type=datetime-local],.input-group-sm input[type=month],.input-group-sm input[type=time],input[type=date].input-sm,input[type=datetime-local].input-sm,input[type=month].input-sm,input[type=time].input-sm{line-height:30px}.input-group-lg>.input-group-btn>input[type=date].btn,.input-group-lg>.input-group-btn>input[type=datetime-local].btn,.input-group-lg>.input-group-btn>input[type=month].btn,.input-group-lg>.input-group-btn>input[type=time].btn,.input-group-lg>input[type=date].form-control,.input-group-lg>input[type=date].input-group-addon,.input-group-lg>input[type=datetime-local].form-control,.input-group-lg>input[type=datetime-local].input-group-addon,.input-group-lg>input[type=month].form-control,.input-group-lg>input[type=month].input-group-addon,.input-group-lg>input[type=time].form-control,.input-group-lg>input[type=time].input-group-addon,.input-group-lg input[type=date],.input-group-lg input[type=datetime-local],.input-group-lg input[type=month],.input-group-lg input[type=time],input[type=date].input-lg,input[type=datetime-local].input-lg,input[type=month].input-lg,input[type=time].input-lg{line-height:46px}}.form-group{margin-bottom:15px}.checkbox,.radio{position:relative;display:block;margin-top:10px;margin-bottom:10px}.checkbox label,.radio label{min-height:22px;padding-left:20px;margin-bottom:0;font-weight:400;cursor:pointer}.checkbox-inline input[type=checkbox],.checkbox input[type=checkbox],.radio-inline input[type=radio],.radio input[type=radio]{position:absolute;margin-left:-20px;margin-top:4px\9}.checkbox+.checkbox,.radio+.radio{margin-top:-5px}.checkbox-inline,.radio-inline{position:relative;display:inline-block;padding-left:20px;margin-bottom:0;vertical-align:middle;font-weight:400;cursor:pointer}.checkbox-inline+.checkbox-inline,.radio-inline+.radio-inline{margin-top:0;margin-left:10px}.checkbox-inline.disabled,.checkbox.disabled label,.radio-inline.disabled,.radio.disabled label,fieldset[disabled] .checkbox-inline,fieldset[disabled] .checkbox label,fieldset[disabled] .radio-inline,fieldset[disabled] .radio label,fieldset[disabled] input[type=checkbox],fieldset[disabled] input[type=radio],input[type=checkbox].disabled,input[type=checkbox][disabled],input[type=radio].disabled,input[type=radio][disabled]{cursor:not-allowed}.form-control-static{padding-top:7px;padding-bottom:7px;margin-bottom:0;min-height:36px}.form-control-static.input-lg,.form-control-static.input-sm,.input-group-lg>.form-control-static.form-control,.input-group-lg>.form-control-static.input-group-addon,.input-group-lg>.input-group-btn>.form-control-static.btn,.input-group-sm>.form-control-static.form-control,.input-group-sm>.form-control-static.input-group-addon,.input-group-sm>.input-group-btn>.form-control-static.btn{padding-left:0;padding-right:0}.input-group-sm>.form-control,.input-group-sm>.input-group-addon,.input-group-sm>.input-group-btn>.btn,.input-sm{height:30px;padding:5px 10px;font-size:12px;line-height:1.5;border-radius:3px}.input-group-sm>.input-group-btn>select.btn,.input-group-sm>select.form-control,.input-group-sm>select.input-group-addon,select.input-sm{height:30px;line-height:30px}.input-group-sm>.input-group-btn>select[multiple].btn,.input-group-sm>.input-group-btn>textarea.btn,.input-group-sm>select[multiple].form-control,.input-group-sm>select[multiple].input-group-addon,.input-group-sm>textarea.form-control,.input-group-sm>textarea.input-group-addon,select[multiple].input-sm,textarea.input-sm{height:auto}.form-group-sm .form-control{height:30px;padding:5px 10px;font-size:12px;line-height:1.5;border-radius:3px}.form-group-sm select.form-control{height:30px;line-height:30px}.form-group-sm select[multiple].form-control,.form-group-sm textarea.form-control{height:auto}.form-group-sm .form-control-static{height:30px;min-height:34px;padding:6px 10px;font-size:12px;line-height:1.5}.input-group-lg>.form-control,.input-group-lg>.input-group-addon,.input-group-lg>.input-group-btn>.btn,.input-lg{height:46px;padding:10px 16px;font-size:18px;line-height:1.3333333;border-radius:6px}.input-group-lg>.input-group-btn>select.btn,.input-group-lg>select.form-control,.input-group-lg>select.input-group-addon,select.input-lg{height:46px;line-height:46px}.input-group-lg>.input-group-btn>select[multiple].btn,.input-group-lg>.input-group-btn>textarea.btn,.input-group-lg>select[multiple].form-control,.input-group-lg>select[multiple].input-group-addon,.input-group-lg>textarea.form-control,.input-group-lg>textarea.input-group-addon,select[multiple].input-lg,textarea.input-lg{height:auto}.form-group-lg .form-control{height:46px;padding:10px 16px;font-size:18px;line-height:1.3333333;border-radius:6px}.form-group-lg select.form-control{height:46px;line-height:46px}.form-group-lg select[multiple].form-control,.form-group-lg textarea.form-control{height:auto}.form-group-lg .form-control-static{height:46px;min-height:40px;padding:11px 16px;font-size:18px;line-height:1.3333333}.has-feedback{position:relative}.has-feedback .form-control{padding-right:45px}.form-control-feedback{position:absolute;top:0;right:0;z-index:2;display:block;width:36px;height:36px;line-height:36px;text-align:center;pointer-events:none}.form-group-lg .form-control+.form-control-feedback,.input-group-lg+.form-control-feedback,.input-group-lg>.form-control+.form-control-feedback,.input-group-lg>.input-group-addon+.form-control-feedback,.input-group-lg>.input-group-btn>.btn+.form-control-feedback,.input-lg+.form-control-feedback{width:46px;height:46px;line-height:46px}.form-group-sm .form-control+.form-control-feedback,.input-group-sm+.form-control-feedback,.input-group-sm>.form-control+.form-control-feedback,.input-group-sm>.input-group-addon+.form-control-feedback,.input-group-sm>.input-group-btn>.btn+.form-control-feedback,.input-sm+.form-control-feedback{width:30px;height:30px;line-height:30px}.has-success .checkbox,.has-success .checkbox-inline,.has-success.checkbox-inline label,.has-success.checkbox label,.has-success .control-label,.has-success .help-block,.has-success .radio,.has-success .radio-inline,.has-success.radio-inline label,.has-success.radio label{color:#3c763d}.has-success .form-control{border-color:#3c763d;-webkit-box-shadow:inset 0 1px 1px rgba(0,0,0,.075);box-shadow:inset 0 1px 1px rgba(0,0,0,.075)}.has-success .form-control:focus{border-color:#2b542c;-webkit-box-shadow:inset 0 1px 1px rgba(0,0,0,.075),0 0 6px #67b168;box-shadow:inset 0 1px 1px rgba(0,0,0,.075),0 0 6px #67b168}.has-success .input-group-addon{color:#3c763d;border-color:#3c763d;background-color:#dff0d8}.has-success .form-control-feedback{color:#3c763d}.has-warning .checkbox,.has-warning .checkbox-inline,.has-warning.checkbox-inline label,.has-warning.checkbox label,.has-warning .control-label,.has-warning .help-block,.has-warning .radio,.has-warning .radio-inline,.has-warning.radio-inline label,.has-warning.radio label{color:#8a6d3b}.has-warning .form-control{border-color:#8a6d3b;-webkit-box-shadow:inset 0 1px 1px rgba(0,0,0,.075);box-shadow:inset 0 1px 1px rgba(0,0,0,.075)}.has-warning .form-control:focus{border-color:#66512c;-webkit-box-shadow:inset 0 1px 1px rgba(0,0,0,.075),0 0 6px #c0a16b;box-shadow:inset 0 1px 1px rgba(0,0,0,.075),0 0 6px #c0a16b}.has-warning .input-group-addon{color:#8a6d3b;border-color:#8a6d3b;background-color:#fcf8e3}.has-warning .form-control-feedback{color:#8a6d3b}.has-error .checkbox,.has-error .checkbox-inline,.has-error.checkbox-inline label,.has-error.checkbox label,.has-error .control-label,.has-error .help-block,.has-error .radio,.has-error .radio-inline,.has-error.radio-inline label,.has-error.radio label{color:#a94442}.has-error .form-control{border-color:#a94442;-webkit-box-shadow:inset 0 1px 1px rgba(0,0,0,.075);box-shadow:inset 0 1px 1px rgba(0,0,0,.075)}.has-error .form-control:focus{border-color:#843534;-webkit-box-shadow:inset 0 1px 1px rgba(0,0,0,.075),0 0 6px #ce8483;box-shadow:inset 0 1px 1px rgba(0,0,0,.075),0 0 6px #ce8483}.has-error .input-group-addon{color:#a94442;border-color:#a94442;background-color:#f2dede}.has-error .form-control-feedback{color:#a94442}.has-feedback label~.form-control-feedback{top:27px}.has-feedback label.sr-only~.form-control-feedback{top:0}.help-block{display:block;margin-top:5px;margin-bottom:10px;color:#a4aaae}@media (min-width:768px){.form-inline .form-group{display:inline-block;margin-bottom:0;vertical-align:middle}.form-inline .form-control{display:inline-block;width:auto;vertical-align:middle}.form-inline .form-control-static{display:inline-block}.form-inline .input-group{display:inline-table;vertical-align:middle}.form-inline .input-group .form-control,.form-inline .input-group .input-group-addon,.form-inline .input-group .input-group-btn{width:auto}.form-inline .input-group>.form-control{width:100%}.form-inline .control-label{margin-bottom:0;vertical-align:middle}.form-inline .checkbox,.form-inline .radio{display:inline-block;margin-top:0;margin-bottom:0;vertical-align:middle}.form-inline .checkbox label,.form-inline .radio label{padding-left:0}.form-inline .checkbox input[type=checkbox],.form-inline .radio input[type=radio]{position:relative;margin-left:0}.form-inline .has-feedback .form-control-feedback{top:0}}.form-horizontal .checkbox,.form-horizontal .checkbox-inline,.form-horizontal .radio,.form-horizontal .radio-inline{margin-top:0;margin-bottom:0;padding-top:7px}.form-horizontal .checkbox,.form-horizontal .radio{min-height:29px}.form-horizontal .form-group{margin-left:-15px;margin-right:-15px}.form-horizontal .form-group:after,.form-horizontal .form-group:before{content:" ";display:table}.form-horizontal .form-group:after{clear:both}@media (min-width:768px){.form-horizontal .control-label{text-align:right;margin-bottom:0;padding-top:7px}}.form-horizontal .has-feedback .form-control-feedback{right:15px}@media (min-width:768px){.form-horizontal .form-group-lg .control-label{padding-top:11px;font-size:18px}}@media (min-width:768px){.form-horizontal .form-group-sm .control-label{padding-top:6px;font-size:12px}}.btn{display:inline-block;margin-bottom:0;font-weight:400;text-align:center;vertical-align:middle;-ms-touch-action:manipulation;touch-action:manipulation;cursor:pointer;background-image:none;border:1px solid transparent;white-space:nowrap;padding:6px 12px;font-size:14px;line-height:1.6;border-radius:4px;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none}.btn.active.focus,.btn.active:focus,.btn.focus,.btn:active.focus,.btn:active:focus,.btn:focus{outline:5px auto -webkit-focus-ring-color;outline-offset:-2px}.btn.focus,.btn:focus,.btn:hover{color:#636b6f;text-decoration:none}.btn.active,.btn:active{outline:0;background-image:none;-webkit-box-shadow:inset 0 3px 5px rgba(0,0,0,.125);box-shadow:inset 0 3px 5px rgba(0,0,0,.125)}.btn.disabled,.btn[disabled],fieldset[disabled] .btn{cursor:not-allowed;opacity:.65;filter:alpha(opacity=65);-webkit-box-shadow:none;box-shadow:none}a.btn.disabled,fieldset[disabled] a.btn{pointer-events:none}.btn-default{color:#636b6f;background-color:#fff;border-color:#ccc}.btn-default.focus,.btn-default:focus{color:#636b6f;background-color:#e6e5e5;border-color:#8c8c8c}.btn-default.active,.btn-default:active,.btn-default:hover,.open>.btn-default.dropdown-toggle{color:#636b6f;background-color:#e6e5e5;border-color:#adadad}.btn-default.active.focus,.btn-default.active:focus,.btn-default.active:hover,.btn-default:active.focus,.btn-default:active:focus,.btn-default:active:hover,.open>.btn-default.dropdown-toggle.focus,.open>.btn-default.dropdown-toggle:focus,.open>.btn-default.dropdown-toggle:hover{color:#636b6f;background-color:#d4d4d4;border-color:#8c8c8c}.btn-default.active,.btn-default:active,.open>.btn-default.dropdown-toggle{background-image:none}.btn-default.disabled.focus,.btn-default.disabled:focus,.btn-default.disabled:hover,.btn-default[disabled].focus,.btn-default[disabled]:focus,.btn-default[disabled]:hover,fieldset[disabled] .btn-default.focus,fieldset[disabled] .btn-default:focus,fieldset[disabled] .btn-default:hover{background-color:#fff;border-color:#ccc}.btn-default .badge{color:#fff;background-color:#636b6f}.btn-primary{color:#fff;background-color:#3097d1;border-color:#2a88bd}.btn-primary.focus,.btn-primary:focus{color:#fff;background-color:#2579a9;border-color:#133d55}.btn-primary.active,.btn-primary:active,.btn-primary:hover,.open>.btn-primary.dropdown-toggle{color:#fff;background-color:#2579a9;border-color:#1f648b}.btn-primary.active.focus,.btn-primary.active:focus,.btn-primary.active:hover,.btn-primary:active.focus,.btn-primary:active:focus,.btn-primary:active:hover,.open>.btn-primary.dropdown-toggle.focus,.open>.btn-primary.dropdown-toggle:focus,.open>.btn-primary.dropdown-toggle:hover{color:#fff;background-color:#1f648b;border-color:#133d55}.btn-primary.active,.btn-primary:active,.open>.btn-primary.dropdown-toggle{background-image:none}.btn-primary.disabled.focus,.btn-primary.disabled:focus,.btn-primary.disabled:hover,.btn-primary[disabled].focus,.btn-primary[disabled]:focus,.btn-primary[disabled]:hover,fieldset[disabled] .btn-primary.focus,fieldset[disabled] .btn-primary:focus,fieldset[disabled] .btn-primary:hover{background-color:#3097d1;border-color:#2a88bd}.btn-primary .badge{color:#3097d1;background-color:#fff}.btn-success{color:#fff;background-color:#2ab27b;border-color:#259d6d}.btn-success.focus,.btn-success:focus{color:#fff;background-color:#20895e;border-color:#0d3625}.btn-success.active,.btn-success:active,.btn-success:hover,.open>.btn-success.dropdown-toggle{color:#fff;background-color:#20895e;border-color:#196c4b}.btn-success.active.focus,.btn-success.active:focus,.btn-success.active:hover,.btn-success:active.focus,.btn-success:active:focus,.btn-success:active:hover,.open>.btn-success.dropdown-toggle.focus,.open>.btn-success.dropdown-toggle:focus,.open>.btn-success.dropdown-toggle:hover{color:#fff;background-color:#196c4b;border-color:#0d3625}.btn-success.active,.btn-success:active,.open>.btn-success.dropdown-toggle{background-image:none}.btn-success.disabled.focus,.btn-success.disabled:focus,.btn-success.disabled:hover,.btn-success[disabled].focus,.btn-success[disabled]:focus,.btn-success[disabled]:hover,fieldset[disabled] .btn-success.focus,fieldset[disabled] .btn-success:focus,fieldset[disabled] .btn-success:hover{background-color:#2ab27b;border-color:#259d6d}.btn-success .badge{color:#2ab27b;background-color:#fff}.btn-info{color:#fff;background-color:#8eb4cb;border-color:#7da8c3}.btn-info.focus,.btn-info:focus{color:#fff;background-color:#6b9dbb;border-color:#3d6983}.btn-info.active,.btn-info:active,.btn-info:hover,.open>.btn-info.dropdown-toggle{color:#fff;background-color:#6b9dbb;border-color:#538db0}.btn-info.active.focus,.btn-info.active:focus,.btn-info.active:hover,.btn-info:active.focus,.btn-info:active:focus,.btn-info:active:hover,.open>.btn-info.dropdown-toggle.focus,.open>.btn-info.dropdown-toggle:focus,.open>.btn-info.dropdown-toggle:hover{color:#fff;background-color:#538db0;border-color:#3d6983}.btn-info.active,.btn-info:active,.open>.btn-info.dropdown-toggle{background-image:none}.btn-info.disabled.focus,.btn-info.disabled:focus,.btn-info.disabled:hover,.btn-info[disabled].focus,.btn-info[disabled]:focus,.btn-info[disabled]:hover,fieldset[disabled] .btn-info.focus,fieldset[disabled] .btn-info:focus,fieldset[disabled] .btn-info:hover{background-color:#8eb4cb;border-color:#7da8c3}.btn-info .badge{color:#8eb4cb;background-color:#fff}.btn-warning{color:#fff;background-color:#cbb956;border-color:#c5b143}.btn-warning.focus,.btn-warning:focus{color:#fff;background-color:#b6a338;border-color:#685d20}.btn-warning.active,.btn-warning:active,.btn-warning:hover,.open>.btn-warning.dropdown-toggle{color:#fff;background-color:#b6a338;border-color:#9b8a30}.btn-warning.active.focus,.btn-warning.active:focus,.btn-warning.active:hover,.btn-warning:active.focus,.btn-warning:active:focus,.btn-warning:active:hover,.open>.btn-warning.dropdown-toggle.focus,.open>.btn-warning.dropdown-toggle:focus,.open>.btn-warning.dropdown-toggle:hover{color:#fff;background-color:#9b8a30;border-color:#685d20}.btn-warning.active,.btn-warning:active,.open>.btn-warning.dropdown-toggle{background-image:none}.btn-warning.disabled.focus,.btn-warning.disabled:focus,.btn-warning.disabled:hover,.btn-warning[disabled].focus,.btn-warning[disabled]:focus,.btn-warning[disabled]:hover,fieldset[disabled] .btn-warning.focus,fieldset[disabled] .btn-warning:focus,fieldset[disabled] .btn-warning:hover{background-color:#cbb956;border-color:#c5b143}.btn-warning .badge{color:#cbb956;background-color:#fff}.btn-danger{color:#fff;background-color:#bf5329;border-color:#aa4a24}.btn-danger.focus,.btn-danger:focus{color:#fff;background-color:#954120;border-color:#411c0e}.btn-danger.active,.btn-danger:active,.btn-danger:hover,.open>.btn-danger.dropdown-toggle{color:#fff;background-color:#954120;border-color:#78341a}.btn-danger.active.focus,.btn-danger.active:focus,.btn-danger.active:hover,.btn-danger:active.focus,.btn-danger:active:focus,.btn-danger:active:hover,.open>.btn-danger.dropdown-toggle.focus,.open>.btn-danger.dropdown-toggle:focus,.open>.btn-danger.dropdown-toggle:hover{color:#fff;background-color:#78341a;border-color:#411c0e}.btn-danger.active,.btn-danger:active,.open>.btn-danger.dropdown-toggle{background-image:none}.btn-danger.disabled.focus,.btn-danger.disabled:focus,.btn-danger.disabled:hover,.btn-danger[disabled].focus,.btn-danger[disabled]:focus,.btn-danger[disabled]:hover,fieldset[disabled] .btn-danger.focus,fieldset[disabled] .btn-danger:focus,fieldset[disabled] .btn-danger:hover{background-color:#bf5329;border-color:#aa4a24}.btn-danger .badge{color:#bf5329;background-color:#fff}.btn-link{color:#3097d1;font-weight:400;border-radius:0}.btn-link,.btn-link.active,.btn-link:active,.btn-link[disabled],fieldset[disabled] .btn-link{background-color:transparent;-webkit-box-shadow:none;box-shadow:none}.btn-link,.btn-link:active,.btn-link:focus,.btn-link:hover{border-color:transparent}.btn-link:focus,.btn-link:hover{color:#216a94;text-decoration:underline;background-color:transparent}.btn-link[disabled]:focus,.btn-link[disabled]:hover,fieldset[disabled] .btn-link:focus,fieldset[disabled] .btn-link:hover{color:#777;text-decoration:none}.btn-group-lg>.btn,.btn-lg{padding:10px 16px;font-size:18px;line-height:1.3333333;border-radius:6px}.btn-group-sm>.btn,.btn-sm{padding:5px 10px;font-size:12px;line-height:1.5;border-radius:3px}.btn-group-xs>.btn,.btn-xs{padding:1px 5px;font-size:12px;line-height:1.5;border-radius:3px}.btn-block{display:block;width:100%}.btn-block+.btn-block{margin-top:5px}input[type=button].btn-block,input[type=reset].btn-block,input[type=submit].btn-block{width:100%}.fade{opacity:0;-webkit-transition:opacity .15s linear;transition:opacity .15s linear}.fade.in{opacity:1}.collapse{display:none}.collapse.in{display:block}tr.collapse.in{display:table-row}tbody.collapse.in{display:table-row-group}.collapsing{position:relative;height:0;overflow:hidden;-webkit-transition-property:height,visibility;transition-property:height,visibility;-webkit-transition-duration:.35s;transition-duration:.35s;-webkit-transition-timing-function:ease;transition-timing-function:ease}.caret{display:inline-block;width:0;height:0;margin-left:2px;vertical-align:middle;border-top:4px dashed;border-top:4px solid\9;border-right:4px solid transparent;border-left:4px solid transparent}.dropdown,.dropup{position:relative}.dropdown-toggle:focus{outline:0}.dropdown-menu{position:absolute;top:100%;left:0;z-index:1000;display:none;float:left;min-width:160px;padding:5px 0;margin:2px 0 0;list-style:none;font-size:14px;text-align:left;background-color:#fff;border:1px solid #ccc;border:1px solid rgba(0,0,0,.15);border-radius:4px;-webkit-box-shadow:0 6px 12px rgba(0,0,0,.175);box-shadow:0 6px 12px rgba(0,0,0,.175);background-clip:padding-box}.dropdown-menu.pull-right{right:0;left:auto}.dropdown-menu .divider{height:1px;margin:10px 0;overflow:hidden;background-color:#e5e5e5}.dropdown-menu>li>a{display:block;padding:3px 20px;clear:both;font-weight:400;line-height:1.6;color:#333;white-space:nowrap}.dropdown-menu>li>a:focus,.dropdown-menu>li>a:hover{text-decoration:none;color:#262626;background-color:#f5f5f5}.dropdown-menu>.active>a,.dropdown-menu>.active>a:focus,.dropdown-menu>.active>a:hover{color:#fff;text-decoration:none;outline:0;background-color:#3097d1}.dropdown-menu>.disabled>a,.dropdown-menu>.disabled>a:focus,.dropdown-menu>.disabled>a:hover{color:#777}.dropdown-menu>.disabled>a:focus,.dropdown-menu>.disabled>a:hover{text-decoration:none;background-color:transparent;background-image:none;filter:progid:DXImageTransform.Microsoft.gradient(enabled = false);cursor:not-allowed}.open>.dropdown-menu{display:block}.open>a{outline:0}.dropdown-menu-right{left:auto;right:0}.dropdown-menu-left{left:0;right:auto}.dropdown-header{display:block;padding:3px 20px;font-size:12px;line-height:1.6;color:#777;white-space:nowrap}.dropdown-backdrop{position:fixed;left:0;right:0;bottom:0;top:0;z-index:990}.pull-right>.dropdown-menu{right:0;left:auto}.dropup .caret,.navbar-fixed-bottom .dropdown .caret{border-top:0;border-bottom:4px dashed;border-bottom:4px solid\9;content:""}.dropup .dropdown-menu,.navbar-fixed-bottom .dropdown .dropdown-menu{top:auto;bottom:100%;margin-bottom:2px}@media (min-width:768px){.navbar-right .dropdown-menu{right:0;left:auto}.navbar-right .dropdown-menu-left{left:0;right:auto}}.btn-group,.btn-group-vertical{position:relative;display:inline-block;vertical-align:middle}.btn-group-vertical>.btn,.btn-group>.btn{position:relative;float:left}.btn-group-vertical>.btn.active,.btn-group-vertical>.btn:active,.btn-group-vertical>.btn:focus,.btn-group-vertical>.btn:hover,.btn-group>.btn.active,.btn-group>.btn:active,.btn-group>.btn:focus,.btn-group>.btn:hover{z-index:2}.btn-group .btn+.btn,.btn-group .btn+.btn-group,.btn-group .btn-group+.btn,.btn-group .btn-group+.btn-group{margin-left:-1px}.btn-toolbar{margin-left:-5px}.btn-toolbar:after,.btn-toolbar:before{content:" ";display:table}.btn-toolbar:after{clear:both}.btn-toolbar .btn,.btn-toolbar .btn-group,.btn-toolbar .input-group{float:left}.btn-toolbar>.btn,.btn-toolbar>.btn-group,.btn-toolbar>.input-group{margin-left:5px}.btn-group>.btn:not(:first-child):not(:last-child):not(.dropdown-toggle){border-radius:0}.btn-group>.btn:first-child{margin-left:0}.btn-group>.btn:first-child:not(:last-child):not(.dropdown-toggle){border-bottom-right-radius:0;border-top-right-radius:0}.btn-group>.btn:last-child:not(:first-child),.btn-group>.dropdown-toggle:not(:first-child){border-bottom-left-radius:0;border-top-left-radius:0}.btn-group>.btn-group{float:left}.btn-group>.btn-group:not(:first-child):not(:last-child)>.btn{border-radius:0}.btn-group>.btn-group:first-child:not(:last-child)>.btn:last-child,.btn-group>.btn-group:first-child:not(:last-child)>.dropdown-toggle{border-bottom-right-radius:0;border-top-right-radius:0}.btn-group>.btn-group:last-child:not(:first-child)>.btn:first-child{border-bottom-left-radius:0;border-top-left-radius:0}.btn-group .dropdown-toggle:active,.btn-group.open .dropdown-toggle{outline:0}.btn-group>.btn+.dropdown-toggle{padding-left:8px;padding-right:8px}.btn-group-lg.btn-group>.btn+.dropdown-toggle,.btn-group>.btn-lg+.dropdown-toggle{padding-left:12px;padding-right:12px}.btn-group.open .dropdown-toggle{-webkit-box-shadow:inset 0 3px 5px rgba(0,0,0,.125);box-shadow:inset 0 3px 5px rgba(0,0,0,.125)}.btn-group.open .dropdown-toggle.btn-link{-webkit-box-shadow:none;box-shadow:none}.btn .caret{margin-left:0}.btn-group-lg>.btn .caret,.btn-lg .caret{border-width:5px 5px 0;border-bottom-width:0}.dropup .btn-group-lg>.btn .caret,.dropup .btn-lg .caret{border-width:0 5px 5px}.btn-group-vertical>.btn,.btn-group-vertical>.btn-group,.btn-group-vertical>.btn-group>.btn{display:block;float:none;width:100%;max-width:100%}.btn-group-vertical>.btn-group:after,.btn-group-vertical>.btn-group:before{content:" ";display:table}.btn-group-vertical>.btn-group:after{clear:both}.btn-group-vertical>.btn-group>.btn{float:none}.btn-group-vertical>.btn+.btn,.btn-group-vertical>.btn+.btn-group,.btn-group-vertical>.btn-group+.btn,.btn-group-vertical>.btn-group+.btn-group{margin-top:-1px;margin-left:0}.btn-group-vertical>.btn:not(:first-child):not(:last-child){border-radius:0}.btn-group-vertical>.btn:first-child:not(:last-child){border-top-right-radius:4px;border-top-left-radius:4px;border-bottom-right-radius:0;border-bottom-left-radius:0}.btn-group-vertical>.btn:last-child:not(:first-child){border-top-right-radius:0;border-top-left-radius:0;border-bottom-right-radius:4px;border-bottom-left-radius:4px}.btn-group-vertical>.btn-group:not(:first-child):not(:last-child)>.btn{border-radius:0}.btn-group-vertical>.btn-group:first-child:not(:last-child)>.btn:last-child,.btn-group-vertical>.btn-group:first-child:not(:last-child)>.dropdown-toggle{border-bottom-right-radius:0;border-bottom-left-radius:0}.btn-group-vertical>.btn-group:last-child:not(:first-child)>.btn:first-child{border-top-right-radius:0;border-top-left-radius:0}.btn-group-justified{display:table;width:100%;table-layout:fixed;border-collapse:separate}.btn-group-justified>.btn,.btn-group-justified>.btn-group{float:none;display:table-cell;width:1%}.btn-group-justified>.btn-group .btn{width:100%}.btn-group-justified>.btn-group .dropdown-menu{left:auto}[data-toggle=buttons]>.btn-group>.btn input[type=checkbox],[data-toggle=buttons]>.btn-group>.btn input[type=radio],[data-toggle=buttons]>.btn input[type=checkbox],[data-toggle=buttons]>.btn input[type=radio]{position:absolute;clip:rect(0,0,0,0);pointer-events:none}.input-group{position:relative;display:table;border-collapse:separate}.input-group[class*=col-]{float:none;padding-left:0;padding-right:0}.input-group .form-control{position:relative;z-index:2;float:left;width:100%;margin-bottom:0}.input-group .form-control:focus{z-index:3}.input-group-addon,.input-group-btn,.input-group .form-control{display:table-cell}.input-group-addon:not(:first-child):not(:last-child),.input-group-btn:not(:first-child):not(:last-child),.input-group .form-control:not(:first-child):not(:last-child){border-radius:0}.input-group-addon,.input-group-btn{width:1%;white-space:nowrap;vertical-align:middle}.input-group-addon{padding:6px 12px;font-size:14px;font-weight:400;line-height:1;color:#555;text-align:center;background-color:#eee;border:1px solid #ccd0d2;border-radius:4px}.input-group-addon.input-sm,.input-group-sm>.input-group-addon,.input-group-sm>.input-group-btn>.input-group-addon.btn{padding:5px 10px;font-size:12px;border-radius:3px}.input-group-addon.input-lg,.input-group-lg>.input-group-addon,.input-group-lg>.input-group-btn>.input-group-addon.btn{padding:10px 16px;font-size:18px;border-radius:6px}.input-group-addon input[type=checkbox],.input-group-addon input[type=radio]{margin-top:0}.input-group-addon:first-child,.input-group-btn:first-child>.btn,.input-group-btn:first-child>.btn-group>.btn,.input-group-btn:first-child>.dropdown-toggle,.input-group-btn:last-child>.btn-group:not(:last-child)>.btn,.input-group-btn:last-child>.btn:not(:last-child):not(.dropdown-toggle),.input-group .form-control:first-child{border-bottom-right-radius:0;border-top-right-radius:0}.input-group-addon:first-child{border-right:0}.input-group-addon:last-child,.input-group-btn:first-child>.btn-group:not(:first-child)>.btn,.input-group-btn:first-child>.btn:not(:first-child),.input-group-btn:last-child>.btn,.input-group-btn:last-child>.btn-group>.btn,.input-group-btn:last-child>.dropdown-toggle,.input-group .form-control:last-child{border-bottom-left-radius:0;border-top-left-radius:0}.input-group-addon:last-child{border-left:0}.input-group-btn{font-size:0;white-space:nowrap}.input-group-btn,.input-group-btn>.btn{position:relative}.input-group-btn>.btn+.btn{margin-left:-1px}.input-group-btn>.btn:active,.input-group-btn>.btn:focus,.input-group-btn>.btn:hover{z-index:2}.input-group-btn:first-child>.btn,.input-group-btn:first-child>.btn-group{margin-right:-1px}.input-group-btn:last-child>.btn,.input-group-btn:last-child>.btn-group{z-index:2;margin-left:-1px}.nav{margin-bottom:0;padding-left:0;list-style:none}.nav:after,.nav:before{content:" ";display:table}.nav:after{clear:both}.nav>li,.nav>li>a{position:relative;display:block}.nav>li>a{padding:10px 15px}.nav>li>a:focus,.nav>li>a:hover{text-decoration:none;background-color:#eee}.nav>li.disabled>a{color:#777}.nav>li.disabled>a:focus,.nav>li.disabled>a:hover{color:#777;text-decoration:none;background-color:transparent;cursor:not-allowed}.nav .open>a,.nav .open>a:focus,.nav .open>a:hover{background-color:#eee;border-color:#3097d1}.nav .nav-divider{height:1px;margin:10px 0;overflow:hidden;background-color:#e5e5e5}.nav>li>a>img{max-width:none}.nav-tabs{border-bottom:1px solid #ddd}.nav-tabs>li{float:left;margin-bottom:-1px}.nav-tabs>li>a{margin-right:2px;line-height:1.6;border:1px solid transparent;border-radius:4px 4px 0 0}.nav-tabs>li>a:hover{border-color:#eee #eee #ddd}.nav-tabs>li.active>a,.nav-tabs>li.active>a:focus,.nav-tabs>li.active>a:hover{color:#555;background-color:#f5f8fa;border:1px solid #ddd;border-bottom-color:transparent;cursor:default}.nav-pills>li{float:left}.nav-pills>li>a{border-radius:4px}.nav-pills>li+li{margin-left:2px}.nav-pills>li.active>a,.nav-pills>li.active>a:focus,.nav-pills>li.active>a:hover{color:#fff;background-color:#3097d1}.nav-stacked>li{float:none}.nav-stacked>li+li{margin-top:2px;margin-left:0}.nav-justified,.nav-tabs.nav-justified{width:100%}.nav-justified>li,.nav-tabs.nav-justified>li{float:none}.nav-justified>li>a,.nav-tabs.nav-justified>li>a{text-align:center;margin-bottom:5px}.nav-justified>.dropdown .dropdown-menu{top:auto;left:auto}@media (min-width:768px){.nav-justified>li,.nav-tabs.nav-justified>li{display:table-cell;width:1%}.nav-justified>li>a,.nav-tabs.nav-justified>li>a{margin-bottom:0}}.nav-tabs-justified,.nav-tabs.nav-justified{border-bottom:0}.nav-tabs-justified>li>a,.nav-tabs.nav-justified>li>a{margin-right:0;border-radius:4px}.nav-tabs-justified>.active>a,.nav-tabs-justified>.active>a:focus,.nav-tabs-justified>.active>a:hover,.nav-tabs.nav-justified>.active>a,.nav-tabs.nav-justified>.active>a:focus,.nav-tabs.nav-justified>.active>a:hover{border:1px solid #ddd}@media (min-width:768px){.nav-tabs-justified>li>a,.nav-tabs.nav-justified>li>a{border-bottom:1px solid #ddd;border-radius:4px 4px 0 0}.nav-tabs-justified>.active>a,.nav-tabs-justified>.active>a:focus,.nav-tabs-justified>.active>a:hover,.nav-tabs.nav-justified>.active>a,.nav-tabs.nav-justified>.active>a:focus,.nav-tabs.nav-justified>.active>a:hover{border-bottom-color:#f5f8fa}}.tab-content>.tab-pane{display:none}.tab-content>.active{display:block}.nav-tabs .dropdown-menu{margin-top:-1px;border-top-right-radius:0;border-top-left-radius:0}.navbar{position:relative;min-height:50px;margin-bottom:22px;border:1px solid transparent}.navbar:after,.navbar:before{content:" ";display:table}.navbar:after{clear:both}@media (min-width:768px){.navbar{border-radius:4px}}.navbar-header:after,.navbar-header:before{content:" ";display:table}.navbar-header:after{clear:both}@media (min-width:768px){.navbar-header{float:left}}.navbar-collapse{overflow-x:visible;padding-right:15px;padding-left:15px;border-top:1px solid transparent;-webkit-box-shadow:inset 0 1px 0 hsla(0,0%,100%,.1);box-shadow:inset 0 1px 0 hsla(0,0%,100%,.1);-webkit-overflow-scrolling:touch}.navbar-collapse:after,.navbar-collapse:before{content:" ";display:table}.navbar-collapse:after{clear:both}.navbar-collapse.in{overflow-y:auto}@media (min-width:768px){.navbar-collapse{width:auto;border-top:0;-webkit-box-shadow:none;box-shadow:none}.navbar-collapse.collapse{display:block!important;height:auto!important;padding-bottom:0;overflow:visible!important}.navbar-collapse.in{overflow-y:visible}.navbar-fixed-bottom .navbar-collapse,.navbar-fixed-top .navbar-collapse,.navbar-static-top .navbar-collapse{padding-left:0;padding-right:0}}.navbar-fixed-bottom .navbar-collapse,.navbar-fixed-top .navbar-collapse{max-height:340px}@media (max-device-width:480px) and (orientation:landscape){.navbar-fixed-bottom .navbar-collapse,.navbar-fixed-top .navbar-collapse{max-height:200px}}.container-fluid>.navbar-collapse,.container-fluid>.navbar-header,.container>.navbar-collapse,.container>.navbar-header{margin-right:-15px;margin-left:-15px}@media (min-width:768px){.container-fluid>.navbar-collapse,.container-fluid>.navbar-header,.container>.navbar-collapse,.container>.navbar-header{margin-right:0;margin-left:0}}.navbar-static-top{z-index:1000;border-width:0 0 1px}@media (min-width:768px){.navbar-static-top{border-radius:0}}.navbar-fixed-bottom,.navbar-fixed-top{position:fixed;right:0;left:0;z-index:1030}@media (min-width:768px){.navbar-fixed-bottom,.navbar-fixed-top{border-radius:0}}.navbar-fixed-top{top:0;border-width:0 0 1px}.navbar-fixed-bottom{bottom:0;margin-bottom:0;border-width:1px 0 0}.navbar-brand{float:left;padding:14px 15px;font-size:18px;line-height:22px;height:50px}.navbar-brand:focus,.navbar-brand:hover{text-decoration:none}.navbar-brand>img{display:block}@media (min-width:768px){.navbar>.container-fluid .navbar-brand,.navbar>.container .navbar-brand{margin-left:-15px}}.navbar-toggle{position:relative;float:right;margin-right:15px;padding:9px 10px;margin-top:8px;margin-bottom:8px;background-color:transparent;background-image:none;border:1px solid transparent;border-radius:4px}.navbar-toggle:focus{outline:0}.navbar-toggle .icon-bar{display:block;width:22px;height:2px;border-radius:1px}.navbar-toggle .icon-bar+.icon-bar{margin-top:4px}@media (min-width:768px){.navbar-toggle{display:none}}.navbar-nav{margin:7px -15px}.navbar-nav>li>a{padding-top:10px;padding-bottom:10px;line-height:22px}@media (max-width:767px){.navbar-nav .open .dropdown-menu{position:static;float:none;width:auto;margin-top:0;background-color:transparent;border:0;-webkit-box-shadow:none;box-shadow:none}.navbar-nav .open .dropdown-menu .dropdown-header,.navbar-nav .open .dropdown-menu>li>a{padding:5px 15px 5px 25px}.navbar-nav .open .dropdown-menu>li>a{line-height:22px}.navbar-nav .open .dropdown-menu>li>a:focus,.navbar-nav .open .dropdown-menu>li>a:hover{background-image:none}}@media (min-width:768px){.navbar-nav{float:left;margin:0}.navbar-nav>li{float:left}.navbar-nav>li>a{padding-top:14px;padding-bottom:14px}}.navbar-form{margin:7px -15px;padding:10px 15px;border-top:1px solid transparent;border-bottom:1px solid transparent;-webkit-box-shadow:inset 0 1px 0 hsla(0,0%,100%,.1),0 1px 0 hsla(0,0%,100%,.1);box-shadow:inset 0 1px 0 hsla(0,0%,100%,.1),0 1px 0 hsla(0,0%,100%,.1)}@media (min-width:768px){.navbar-form .form-group{display:inline-block;margin-bottom:0;vertical-align:middle}.navbar-form .form-control{display:inline-block;width:auto;vertical-align:middle}.navbar-form .form-control-static{display:inline-block}.navbar-form .input-group{display:inline-table;vertical-align:middle}.navbar-form .input-group .form-control,.navbar-form .input-group .input-group-addon,.navbar-form .input-group .input-group-btn{width:auto}.navbar-form .input-group>.form-control{width:100%}.navbar-form .control-label{margin-bottom:0;vertical-align:middle}.navbar-form .checkbox,.navbar-form .radio{display:inline-block;margin-top:0;margin-bottom:0;vertical-align:middle}.navbar-form .checkbox label,.navbar-form .radio label{padding-left:0}.navbar-form .checkbox input[type=checkbox],.navbar-form .radio input[type=radio]{position:relative;margin-left:0}.navbar-form .has-feedback .form-control-feedback{top:0}}@media (max-width:767px){.navbar-form .form-group{margin-bottom:5px}.navbar-form .form-group:last-child{margin-bottom:0}}@media (min-width:768px){.navbar-form{width:auto;border:0;margin-left:0;margin-right:0;padding-top:0;padding-bottom:0;-webkit-box-shadow:none;box-shadow:none}}.navbar-nav>li>.dropdown-menu{margin-top:0;border-top-right-radius:0;border-top-left-radius:0}.navbar-fixed-bottom .navbar-nav>li>.dropdown-menu{margin-bottom:0;border-top-right-radius:4px;border-top-left-radius:4px;border-bottom-right-radius:0;border-bottom-left-radius:0}.navbar-btn{margin-top:7px;margin-bottom:7px}.btn-group-sm>.navbar-btn.btn,.navbar-btn.btn-sm{margin-top:10px;margin-bottom:10px}.btn-group-xs>.navbar-btn.btn,.navbar-btn.btn-xs,.navbar-text{margin-top:14px;margin-bottom:14px}@media (min-width:768px){.navbar-text{float:left;margin-left:15px;margin-right:15px}}@media (min-width:768px){.navbar-left{float:left!important}.navbar-right{float:right!important;margin-right:-15px}.navbar-right~.navbar-right{margin-right:0}}.navbar-default{background-color:#fff;border-color:#d3e0e9}.navbar-default .navbar-brand{color:#777}.navbar-default .navbar-brand:focus,.navbar-default .navbar-brand:hover{color:#5e5d5d;background-color:transparent}.navbar-default .navbar-nav>li>a,.navbar-default .navbar-text{color:#777}.navbar-default .navbar-nav>li>a:focus,.navbar-default .navbar-nav>li>a:hover{color:#333;background-color:transparent}.navbar-default .navbar-nav>.active>a,.navbar-default .navbar-nav>.active>a:focus,.navbar-default .navbar-nav>.active>a:hover{color:#555;background-color:#eee}.navbar-default .navbar-nav>.disabled>a,.navbar-default .navbar-nav>.disabled>a:focus,.navbar-default .navbar-nav>.disabled>a:hover{color:#ccc;background-color:transparent}.navbar-default .navbar-toggle{border-color:#ddd}.navbar-default .navbar-toggle:focus,.navbar-default .navbar-toggle:hover{background-color:#ddd}.navbar-default .navbar-toggle .icon-bar{background-color:#888}.navbar-default .navbar-collapse,.navbar-default .navbar-form{border-color:#d3e0e9}.navbar-default .navbar-nav>.open>a,.navbar-default .navbar-nav>.open>a:focus,.navbar-default .navbar-nav>.open>a:hover{background-color:#eee;color:#555}@media (max-width:767px){.navbar-default .navbar-nav .open .dropdown-menu>li>a{color:#777}.navbar-default .navbar-nav .open .dropdown-menu>li>a:focus,.navbar-default .navbar-nav .open .dropdown-menu>li>a:hover{color:#333;background-color:transparent}.navbar-default .navbar-nav .open .dropdown-menu>.active>a,.navbar-default .navbar-nav .open .dropdown-menu>.active>a:focus,.navbar-default .navbar-nav .open .dropdown-menu>.active>a:hover{color:#555;background-color:#eee}.navbar-default .navbar-nav .open .dropdown-menu>.disabled>a,.navbar-default .navbar-nav .open .dropdown-menu>.disabled>a:focus,.navbar-default .navbar-nav .open .dropdown-menu>.disabled>a:hover{color:#ccc;background-color:transparent}}.navbar-default .navbar-link{color:#777}.navbar-default .navbar-link:hover{color:#333}.navbar-default .btn-link{color:#777}.navbar-default .btn-link:focus,.navbar-default .btn-link:hover{color:#333}.navbar-default .btn-link[disabled]:focus,.navbar-default .btn-link[disabled]:hover,fieldset[disabled] .navbar-default .btn-link:focus,fieldset[disabled] .navbar-default .btn-link:hover{color:#ccc}.navbar-inverse{background-color:#222;border-color:#090909}.navbar-inverse .navbar-brand{color:#9d9d9d}.navbar-inverse .navbar-brand:focus,.navbar-inverse .navbar-brand:hover{color:#fff;background-color:transparent}.navbar-inverse .navbar-nav>li>a,.navbar-inverse .navbar-text{color:#9d9d9d}.navbar-inverse .navbar-nav>li>a:focus,.navbar-inverse .navbar-nav>li>a:hover{color:#fff;background-color:transparent}.navbar-inverse .navbar-nav>.active>a,.navbar-inverse .navbar-nav>.active>a:focus,.navbar-inverse .navbar-nav>.active>a:hover{color:#fff;background-color:#090909}.navbar-inverse .navbar-nav>.disabled>a,.navbar-inverse .navbar-nav>.disabled>a:focus,.navbar-inverse .navbar-nav>.disabled>a:hover{color:#444;background-color:transparent}.navbar-inverse .navbar-toggle{border-color:#333}.navbar-inverse .navbar-toggle:focus,.navbar-inverse .navbar-toggle:hover{background-color:#333}.navbar-inverse .navbar-toggle .icon-bar{background-color:#fff}.navbar-inverse .navbar-collapse,.navbar-inverse .navbar-form{border-color:#101010}.navbar-inverse .navbar-nav>.open>a,.navbar-inverse .navbar-nav>.open>a:focus,.navbar-inverse .navbar-nav>.open>a:hover{background-color:#090909;color:#fff}@media (max-width:767px){.navbar-inverse .navbar-nav .open .dropdown-menu>.dropdown-header{border-color:#090909}.navbar-inverse .navbar-nav .open .dropdown-menu .divider{background-color:#090909}.navbar-inverse .navbar-nav .open .dropdown-menu>li>a{color:#9d9d9d}.navbar-inverse .navbar-nav .open .dropdown-menu>li>a:focus,.navbar-inverse .navbar-nav .open .dropdown-menu>li>a:hover{color:#fff;background-color:transparent}.navbar-inverse .navbar-nav .open .dropdown-menu>.active>a,.navbar-inverse .navbar-nav .open .dropdown-menu>.active>a:focus,.navbar-inverse .navbar-nav .open .dropdown-menu>.active>a:hover{color:#fff;background-color:#090909}.navbar-inverse .navbar-nav .open .dropdown-menu>.disabled>a,.navbar-inverse .navbar-nav .open .dropdown-menu>.disabled>a:focus,.navbar-inverse .navbar-nav .open .dropdown-menu>.disabled>a:hover{color:#444;background-color:transparent}}.navbar-inverse .navbar-link{color:#9d9d9d}.navbar-inverse .navbar-link:hover{color:#fff}.navbar-inverse .btn-link{color:#9d9d9d}.navbar-inverse .btn-link:focus,.navbar-inverse .btn-link:hover{color:#fff}.navbar-inverse .btn-link[disabled]:focus,.navbar-inverse .btn-link[disabled]:hover,fieldset[disabled] .navbar-inverse .btn-link:focus,fieldset[disabled] .navbar-inverse .btn-link:hover{color:#444}.breadcrumb{padding:8px 15px;margin-bottom:22px;list-style:none;background-color:#f5f5f5;border-radius:4px}.breadcrumb>li{display:inline-block}.breadcrumb>li+li:before{content:"/\A0";padding:0 5px;color:#ccc}.breadcrumb>.active{color:#777}.pagination{display:inline-block;padding-left:0;margin:22px 0;border-radius:4px}.pagination>li{display:inline}.pagination>li>a,.pagination>li>span{position:relative;float:left;padding:6px 12px;line-height:1.6;text-decoration:none;color:#3097d1;background-color:#fff;border:1px solid #ddd;margin-left:-1px}.pagination>li:first-child>a,.pagination>li:first-child>span{margin-left:0;border-bottom-left-radius:4px;border-top-left-radius:4px}.pagination>li:last-child>a,.pagination>li:last-child>span{border-bottom-right-radius:4px;border-top-right-radius:4px}.pagination>li>a:focus,.pagination>li>a:hover,.pagination>li>span:focus,.pagination>li>span:hover{z-index:2;color:#216a94;background-color:#eee;border-color:#ddd}.pagination>.active>a,.pagination>.active>a:focus,.pagination>.active>a:hover,.pagination>.active>span,.pagination>.active>span:focus,.pagination>.active>span:hover{z-index:3;color:#fff;background-color:#3097d1;border-color:#3097d1;cursor:default}.pagination>.disabled>a,.pagination>.disabled>a:focus,.pagination>.disabled>a:hover,.pagination>.disabled>span,.pagination>.disabled>span:focus,.pagination>.disabled>span:hover{color:#777;background-color:#fff;border-color:#ddd;cursor:not-allowed}.pagination-lg>li>a,.pagination-lg>li>span{padding:10px 16px;font-size:18px;line-height:1.3333333}.pagination-lg>li:first-child>a,.pagination-lg>li:first-child>span{border-bottom-left-radius:6px;border-top-left-radius:6px}.pagination-lg>li:last-child>a,.pagination-lg>li:last-child>span{border-bottom-right-radius:6px;border-top-right-radius:6px}.pagination-sm>li>a,.pagination-sm>li>span{padding:5px 10px;font-size:12px;line-height:1.5}.pagination-sm>li:first-child>a,.pagination-sm>li:first-child>span{border-bottom-left-radius:3px;border-top-left-radius:3px}.pagination-sm>li:last-child>a,.pagination-sm>li:last-child>span{border-bottom-right-radius:3px;border-top-right-radius:3px}.pager{padding-left:0;margin:22px 0;list-style:none;text-align:center}.pager:after,.pager:before{content:" ";display:table}.pager:after{clear:both}.pager li{display:inline}.pager li>a,.pager li>span{display:inline-block;padding:5px 14px;background-color:#fff;border:1px solid #ddd;border-radius:15px}.pager li>a:focus,.pager li>a:hover{text-decoration:none;background-color:#eee}.pager .next>a,.pager .next>span{float:right}.pager .previous>a,.pager .previous>span{float:left}.pager .disabled>a,.pager .disabled>a:focus,.pager .disabled>a:hover,.pager .disabled>span{color:#777;background-color:#fff;cursor:not-allowed}.label{display:inline;padding:.2em .6em .3em;font-size:75%;font-weight:700;line-height:1;color:#fff;text-align:center;white-space:nowrap;vertical-align:baseline;border-radius:.25em}.label:empty{display:none}.btn .label{position:relative;top:-1px}a.label:focus,a.label:hover{color:#fff;text-decoration:none;cursor:pointer}.label-default{background-color:#777}.label-default[href]:focus,.label-default[href]:hover{background-color:#5e5e5e}.label-primary{background-color:#3097d1}.label-primary[href]:focus,.label-primary[href]:hover{background-color:#2579a9}.label-success{background-color:#2ab27b}.label-success[href]:focus,.label-success[href]:hover{background-color:#20895e}.label-info{background-color:#8eb4cb}.label-info[href]:focus,.label-info[href]:hover{background-color:#6b9dbb}.label-warning{background-color:#cbb956}.label-warning[href]:focus,.label-warning[href]:hover{background-color:#b6a338}.label-danger{background-color:#bf5329}.label-danger[href]:focus,.label-danger[href]:hover{background-color:#954120}.badge{display:inline-block;min-width:10px;padding:3px 7px;font-size:12px;font-weight:700;color:#fff;line-height:1;vertical-align:middle;white-space:nowrap;text-align:center;background-color:#777;border-radius:10px}.badge:empty{display:none}.btn .badge{position:relative;top:-1px}.btn-group-xs>.btn .badge,.btn-xs .badge{top:0;padding:1px 5px}.list-group-item.active>.badge,.nav-pills>.active>a>.badge{color:#3097d1;background-color:#fff}.list-group-item>.badge{float:right}.list-group-item>.badge+.badge{margin-right:5px}.nav-pills>li>a>.badge{margin-left:3px}a.badge:focus,a.badge:hover{color:#fff;text-decoration:none;cursor:pointer}.jumbotron{padding-top:30px;padding-bottom:30px;margin-bottom:30px;background-color:#eee}.jumbotron,.jumbotron .h1,.jumbotron h1{color:inherit}.jumbotron p{margin-bottom:15px;font-size:21px;font-weight:200}.jumbotron>hr{border-top-color:#d5d5d5}.container-fluid .jumbotron,.container .jumbotron{border-radius:6px;padding-left:15px;padding-right:15px}.jumbotron .container{max-width:100%}@media screen and (min-width:768px){.jumbotron{padding-top:48px;padding-bottom:48px}.container-fluid .jumbotron,.container .jumbotron{padding-left:60px;padding-right:60px}.jumbotron .h1,.jumbotron h1{font-size:63px}}.thumbnail{display:block;padding:4px;margin-bottom:22px;line-height:1.6;background-color:#f5f8fa;border:1px solid #ddd;border-radius:4px;-webkit-transition:border .2s ease-in-out;transition:border .2s ease-in-out}.thumbnail>img,.thumbnail a>img{display:block;max-width:100%;height:auto;margin-left:auto;margin-right:auto}.thumbnail .caption{padding:9px;color:#636b6f}a.thumbnail.active,a.thumbnail:focus,a.thumbnail:hover{border-color:#3097d1}.alert{padding:15px;margin-bottom:22px;border:1px solid transparent;border-radius:4px}.alert h4{margin-top:0;color:inherit}.alert .alert-link{font-weight:700}.alert>p,.alert>ul{margin-bottom:0}.alert>p+p{margin-top:5px}.alert-dismissable,.alert-dismissible{padding-right:35px}.alert-dismissable .close,.alert-dismissible .close{position:relative;top:-2px;right:-21px;color:inherit}.alert-success{background-color:#dff0d8;border-color:#d6e9c6;color:#3c763d}.alert-success hr{border-top-color:#c9e2b3}.alert-success .alert-link{color:#2b542c}.alert-info{background-color:#d9edf7;border-color:#bce8f1;color:#31708f}.alert-info hr{border-top-color:#a6e1ec}.alert-info .alert-link{color:#245269}.alert-warning{background-color:#fcf8e3;border-color:#faebcc;color:#8a6d3b}.alert-warning hr{border-top-color:#f7e1b5}.alert-warning .alert-link{color:#66512c}.alert-danger{background-color:#f2dede;border-color:#ebccd1;color:#a94442}.alert-danger hr{border-top-color:#e4b9c0}.alert-danger .alert-link{color:#843534}@-webkit-keyframes progress-bar-stripes{0%{background-position:40px 0}to{background-position:0 0}}@keyframes progress-bar-stripes{0%{background-position:40px 0}to{background-position:0 0}}.progress{overflow:hidden;height:22px;margin-bottom:22px;background-color:#f5f5f5;border-radius:4px;-webkit-box-shadow:inset 0 1px 2px rgba(0,0,0,.1);box-shadow:inset 0 1px 2px rgba(0,0,0,.1)}.progress-bar{float:left;width:0;height:100%;font-size:12px;line-height:22px;color:#fff;text-align:center;background-color:#3097d1;-webkit-box-shadow:inset 0 -1px 0 rgba(0,0,0,.15);box-shadow:inset 0 -1px 0 rgba(0,0,0,.15);-webkit-transition:width .6s ease;transition:width .6s ease}.progress-bar-striped,.progress-striped .progress-bar{background-image:linear-gradient(45deg,hsla(0,0%,100%,.15) 25%,transparent 0,transparent 50%,hsla(0,0%,100%,.15) 0,hsla(0,0%,100%,.15) 75%,transparent 0,transparent);background-size:40px 40px}.progress-bar.active,.progress.active .progress-bar{-webkit-animation:progress-bar-stripes 2s linear infinite;animation:progress-bar-stripes 2s linear infinite}.progress-bar-success{background-color:#2ab27b}.progress-striped .progress-bar-success{background-image:linear-gradient(45deg,hsla(0,0%,100%,.15) 25%,transparent 0,transparent 50%,hsla(0,0%,100%,.15) 0,hsla(0,0%,100%,.15) 75%,transparent 0,transparent)}.progress-bar-info{background-color:#8eb4cb}.progress-striped .progress-bar-info{background-image:linear-gradient(45deg,hsla(0,0%,100%,.15) 25%,transparent 0,transparent 50%,hsla(0,0%,100%,.15) 0,hsla(0,0%,100%,.15) 75%,transparent 0,transparent)}.progress-bar-warning{background-color:#cbb956}.progress-striped .progress-bar-warning{background-image:linear-gradient(45deg,hsla(0,0%,100%,.15) 25%,transparent 0,transparent 50%,hsla(0,0%,100%,.15) 0,hsla(0,0%,100%,.15) 75%,transparent 0,transparent)}.progress-bar-danger{background-color:#bf5329}.progress-striped .progress-bar-danger{background-image:linear-gradient(45deg,hsla(0,0%,100%,.15) 25%,transparent 0,transparent 50%,hsla(0,0%,100%,.15) 0,hsla(0,0%,100%,.15) 75%,transparent 0,transparent)}.media{margin-top:15px}.media:first-child{margin-top:0}.media,.media-body{zoom:1;overflow:hidden}.media-body{width:10000px}.media-object{display:block}.media-object.img-thumbnail{max-width:none}.media-right,.media>.pull-right{padding-left:10px}.media-left,.media>.pull-left{padding-right:10px}.media-body,.media-left,.media-right{display:table-cell;vertical-align:top}.media-middle{vertical-align:middle}.media-bottom{vertical-align:bottom}.media-heading{margin-top:0;margin-bottom:5px}.media-list{padding-left:0;list-style:none}.list-group{margin-bottom:20px;padding-left:0}.list-group-item{position:relative;display:block;padding:10px 15px;margin-bottom:-1px;background-color:#fff;border:1px solid #d3e0e9}.list-group-item:first-child{border-top-right-radius:4px;border-top-left-radius:4px}.list-group-item:last-child{margin-bottom:0;border-bottom-right-radius:4px;border-bottom-left-radius:4px}a.list-group-item,button.list-group-item{color:#555}a.list-group-item .list-group-item-heading,button.list-group-item .list-group-item-heading{color:#333}a.list-group-item:focus,a.list-group-item:hover,button.list-group-item:focus,button.list-group-item:hover{text-decoration:none;color:#555;background-color:#f5f5f5}button.list-group-item{width:100%;text-align:left}.list-group-item.disabled,.list-group-item.disabled:focus,.list-group-item.disabled:hover{background-color:#eee;color:#777;cursor:not-allowed}.list-group-item.disabled .list-group-item-heading,.list-group-item.disabled:focus .list-group-item-heading,.list-group-item.disabled:hover .list-group-item-heading{color:inherit}.list-group-item.disabled .list-group-item-text,.list-group-item.disabled:focus .list-group-item-text,.list-group-item.disabled:hover .list-group-item-text{color:#777}.list-group-item.active,.list-group-item.active:focus,.list-group-item.active:hover{z-index:2;color:#fff;background-color:#3097d1;border-color:#3097d1}.list-group-item.active .list-group-item-heading,.list-group-item.active .list-group-item-heading>.small,.list-group-item.active .list-group-item-heading>small,.list-group-item.active:focus .list-group-item-heading,.list-group-item.active:focus .list-group-item-heading>.small,.list-group-item.active:focus .list-group-item-heading>small,.list-group-item.active:hover .list-group-item-heading,.list-group-item.active:hover .list-group-item-heading>.small,.list-group-item.active:hover .list-group-item-heading>small{color:inherit}.list-group-item.active .list-group-item-text,.list-group-item.active:focus .list-group-item-text,.list-group-item.active:hover .list-group-item-text{color:#d7ebf6}.list-group-item-success{color:#3c763d;background-color:#dff0d8}a.list-group-item-success,button.list-group-item-success{color:#3c763d}a.list-group-item-success .list-group-item-heading,button.list-group-item-success .list-group-item-heading{color:inherit}a.list-group-item-success:focus,a.list-group-item-success:hover,button.list-group-item-success:focus,button.list-group-item-success:hover{color:#3c763d;background-color:#d0e9c6}a.list-group-item-success.active,a.list-group-item-success.active:focus,a.list-group-item-success.active:hover,button.list-group-item-success.active,button.list-group-item-success.active:focus,button.list-group-item-success.active:hover{color:#fff;background-color:#3c763d;border-color:#3c763d}.list-group-item-info{color:#31708f;background-color:#d9edf7}a.list-group-item-info,button.list-group-item-info{color:#31708f}a.list-group-item-info .list-group-item-heading,button.list-group-item-info .list-group-item-heading{color:inherit}a.list-group-item-info:focus,a.list-group-item-info:hover,button.list-group-item-info:focus,button.list-group-item-info:hover{color:#31708f;background-color:#c4e3f3}a.list-group-item-info.active,a.list-group-item-info.active:focus,a.list-group-item-info.active:hover,button.list-group-item-info.active,button.list-group-item-info.active:focus,button.list-group-item-info.active:hover{color:#fff;background-color:#31708f;border-color:#31708f}.list-group-item-warning{color:#8a6d3b;background-color:#fcf8e3}a.list-group-item-warning,button.list-group-item-warning{color:#8a6d3b}a.list-group-item-warning .list-group-item-heading,button.list-group-item-warning .list-group-item-heading{color:inherit}a.list-group-item-warning:focus,a.list-group-item-warning:hover,button.list-group-item-warning:focus,button.list-group-item-warning:hover{color:#8a6d3b;background-color:#faf2cc}a.list-group-item-warning.active,a.list-group-item-warning.active:focus,a.list-group-item-warning.active:hover,button.list-group-item-warning.active,button.list-group-item-warning.active:focus,button.list-group-item-warning.active:hover{color:#fff;background-color:#8a6d3b;border-color:#8a6d3b}.list-group-item-danger{color:#a94442;background-color:#f2dede}a.list-group-item-danger,button.list-group-item-danger{color:#a94442}a.list-group-item-danger .list-group-item-heading,button.list-group-item-danger .list-group-item-heading{color:inherit}a.list-group-item-danger:focus,a.list-group-item-danger:hover,button.list-group-item-danger:focus,button.list-group-item-danger:hover{color:#a94442;background-color:#ebcccc}a.list-group-item-danger.active,a.list-group-item-danger.active:focus,a.list-group-item-danger.active:hover,button.list-group-item-danger.active,button.list-group-item-danger.active:focus,button.list-group-item-danger.active:hover{color:#fff;background-color:#a94442;border-color:#a94442}.list-group-item-heading{margin-top:0;margin-bottom:5px}.list-group-item-text{margin-bottom:0;line-height:1.3}.panel{margin-bottom:22px;background-color:#fff;border:1px solid transparent;border-radius:4px;-webkit-box-shadow:0 1px 1px rgba(0,0,0,.05);box-shadow:0 1px 1px rgba(0,0,0,.05)}.panel-body{padding:15px}.panel-body:after,.panel-body:before{content:" ";display:table}.panel-body:after{clear:both}.panel-heading{padding:10px 15px;border-bottom:1px solid transparent;border-top-right-radius:3px;border-top-left-radius:3px}.panel-heading>.dropdown .dropdown-toggle,.panel-title{color:inherit}.panel-title{margin-top:0;margin-bottom:0;font-size:16px}.panel-title>.small,.panel-title>.small>a,.panel-title>a,.panel-title>small,.panel-title>small>a{color:inherit}.panel-footer{padding:10px 15px;background-color:#f5f5f5;border-top:1px solid #d3e0e9;border-bottom-right-radius:3px;border-bottom-left-radius:3px}.panel>.list-group,.panel>.panel-collapse>.list-group{margin-bottom:0}.panel>.list-group .list-group-item,.panel>.panel-collapse>.list-group .list-group-item{border-width:1px 0;border-radius:0}.panel>.list-group:first-child .list-group-item:first-child,.panel>.panel-collapse>.list-group:first-child .list-group-item:first-child{border-top:0;border-top-right-radius:3px;border-top-left-radius:3px}.panel>.list-group:last-child .list-group-item:last-child,.panel>.panel-collapse>.list-group:last-child .list-group-item:last-child{border-bottom:0;border-bottom-right-radius:3px;border-bottom-left-radius:3px}.panel>.panel-heading+.panel-collapse>.list-group .list-group-item:first-child{border-top-right-radius:0;border-top-left-radius:0}.list-group+.panel-footer,.panel-heading+.list-group .list-group-item:first-child{border-top-width:0}.panel>.panel-collapse>.table,.panel>.table,.panel>.table-responsive>.table{margin-bottom:0}.panel>.panel-collapse>.table caption,.panel>.table-responsive>.table caption,.panel>.table caption{padding-left:15px;padding-right:15px}.panel>.table-responsive:first-child>.table:first-child,.panel>.table-responsive:first-child>.table:first-child>tbody:first-child>tr:first-child,.panel>.table-responsive:first-child>.table:first-child>thead:first-child>tr:first-child,.panel>.table:first-child,.panel>.table:first-child>tbody:first-child>tr:first-child,.panel>.table:first-child>thead:first-child>tr:first-child{border-top-right-radius:3px;border-top-left-radius:3px}.panel>.table-responsive:first-child>.table:first-child>tbody:first-child>tr:first-child td:first-child,.panel>.table-responsive:first-child>.table:first-child>tbody:first-child>tr:first-child th:first-child,.panel>.table-responsive:first-child>.table:first-child>thead:first-child>tr:first-child td:first-child,.panel>.table-responsive:first-child>.table:first-child>thead:first-child>tr:first-child th:first-child,.panel>.table:first-child>tbody:first-child>tr:first-child td:first-child,.panel>.table:first-child>tbody:first-child>tr:first-child th:first-child,.panel>.table:first-child>thead:first-child>tr:first-child td:first-child,.panel>.table:first-child>thead:first-child>tr:first-child th:first-child{border-top-left-radius:3px}.panel>.table-responsive:first-child>.table:first-child>tbody:first-child>tr:first-child td:last-child,.panel>.table-responsive:first-child>.table:first-child>tbody:first-child>tr:first-child th:last-child,.panel>.table-responsive:first-child>.table:first-child>thead:first-child>tr:first-child td:last-child,.panel>.table-responsive:first-child>.table:first-child>thead:first-child>tr:first-child th:last-child,.panel>.table:first-child>tbody:first-child>tr:first-child td:last-child,.panel>.table:first-child>tbody:first-child>tr:first-child th:last-child,.panel>.table:first-child>thead:first-child>tr:first-child td:last-child,.panel>.table:first-child>thead:first-child>tr:first-child th:last-child{border-top-right-radius:3px}.panel>.table-responsive:last-child>.table:last-child,.panel>.table-responsive:last-child>.table:last-child>tbody:last-child>tr:last-child,.panel>.table-responsive:last-child>.table:last-child>tfoot:last-child>tr:last-child,.panel>.table:last-child,.panel>.table:last-child>tbody:last-child>tr:last-child,.panel>.table:last-child>tfoot:last-child>tr:last-child{border-bottom-right-radius:3px;border-bottom-left-radius:3px}.panel>.table-responsive:last-child>.table:last-child>tbody:last-child>tr:last-child td:first-child,.panel>.table-responsive:last-child>.table:last-child>tbody:last-child>tr:last-child th:first-child,.panel>.table-responsive:last-child>.table:last-child>tfoot:last-child>tr:last-child td:first-child,.panel>.table-responsive:last-child>.table:last-child>tfoot:last-child>tr:last-child th:first-child,.panel>.table:last-child>tbody:last-child>tr:last-child td:first-child,.panel>.table:last-child>tbody:last-child>tr:last-child th:first-child,.panel>.table:last-child>tfoot:last-child>tr:last-child td:first-child,.panel>.table:last-child>tfoot:last-child>tr:last-child th:first-child{border-bottom-left-radius:3px}.panel>.table-responsive:last-child>.table:last-child>tbody:last-child>tr:last-child td:last-child,.panel>.table-responsive:last-child>.table:last-child>tbody:last-child>tr:last-child th:last-child,.panel>.table-responsive:last-child>.table:last-child>tfoot:last-child>tr:last-child td:last-child,.panel>.table-responsive:last-child>.table:last-child>tfoot:last-child>tr:last-child th:last-child,.panel>.table:last-child>tbody:last-child>tr:last-child td:last-child,.panel>.table:last-child>tbody:last-child>tr:last-child th:last-child,.panel>.table:last-child>tfoot:last-child>tr:last-child td:last-child,.panel>.table:last-child>tfoot:last-child>tr:last-child th:last-child{border-bottom-right-radius:3px}.panel>.panel-body+.table,.panel>.panel-body+.table-responsive,.panel>.table+.panel-body,.panel>.table-responsive+.panel-body{border-top:1px solid #ddd}.panel>.table>tbody:first-child>tr:first-child td,.panel>.table>tbody:first-child>tr:first-child th{border-top:0}.panel>.table-bordered,.panel>.table-responsive>.table-bordered{border:0}.panel>.table-bordered>tbody>tr>td:first-child,.panel>.table-bordered>tbody>tr>th:first-child,.panel>.table-bordered>tfoot>tr>td:first-child,.panel>.table-bordered>tfoot>tr>th:first-child,.panel>.table-bordered>thead>tr>td:first-child,.panel>.table-bordered>thead>tr>th:first-child,.panel>.table-responsive>.table-bordered>tbody>tr>td:first-child,.panel>.table-responsive>.table-bordered>tbody>tr>th:first-child,.panel>.table-responsive>.table-bordered>tfoot>tr>td:first-child,.panel>.table-responsive>.table-bordered>tfoot>tr>th:first-child,.panel>.table-responsive>.table-bordered>thead>tr>td:first-child,.panel>.table-responsive>.table-bordered>thead>tr>th:first-child{border-left:0}.panel>.table-bordered>tbody>tr>td:last-child,.panel>.table-bordered>tbody>tr>th:last-child,.panel>.table-bordered>tfoot>tr>td:last-child,.panel>.table-bordered>tfoot>tr>th:last-child,.panel>.table-bordered>thead>tr>td:last-child,.panel>.table-bordered>thead>tr>th:last-child,.panel>.table-responsive>.table-bordered>tbody>tr>td:last-child,.panel>.table-responsive>.table-bordered>tbody>tr>th:last-child,.panel>.table-responsive>.table-bordered>tfoot>tr>td:last-child,.panel>.table-responsive>.table-bordered>tfoot>tr>th:last-child,.panel>.table-responsive>.table-bordered>thead>tr>td:last-child,.panel>.table-responsive>.table-bordered>thead>tr>th:last-child{border-right:0}.panel>.table-bordered>tbody>tr:first-child>td,.panel>.table-bordered>tbody>tr:first-child>th,.panel>.table-bordered>tbody>tr:last-child>td,.panel>.table-bordered>tbody>tr:last-child>th,.panel>.table-bordered>tfoot>tr:last-child>td,.panel>.table-bordered>tfoot>tr:last-child>th,.panel>.table-bordered>thead>tr:first-child>td,.panel>.table-bordered>thead>tr:first-child>th,.panel>.table-responsive>.table-bordered>tbody>tr:first-child>td,.panel>.table-responsive>.table-bordered>tbody>tr:first-child>th,.panel>.table-responsive>.table-bordered>tbody>tr:last-child>td,.panel>.table-responsive>.table-bordered>tbody>tr:last-child>th,.panel>.table-responsive>.table-bordered>tfoot>tr:last-child>td,.panel>.table-responsive>.table-bordered>tfoot>tr:last-child>th,.panel>.table-responsive>.table-bordered>thead>tr:first-child>td,.panel>.table-responsive>.table-bordered>thead>tr:first-child>th{border-bottom:0}.panel>.table-responsive{border:0;margin-bottom:0}.panel-group{margin-bottom:22px}.panel-group .panel{margin-bottom:0;border-radius:4px}.panel-group .panel+.panel{margin-top:5px}.panel-group .panel-heading{border-bottom:0}.panel-group .panel-heading+.panel-collapse>.list-group,.panel-group .panel-heading+.panel-collapse>.panel-body{border-top:1px solid #d3e0e9}.panel-group .panel-footer{border-top:0}.panel-group .panel-footer+.panel-collapse .panel-body{border-bottom:1px solid #d3e0e9}.panel-default{border-color:#d3e0e9}.panel-default>.panel-heading{color:#333;background-color:#fff;border-color:#d3e0e9}.panel-default>.panel-heading+.panel-collapse>.panel-body{border-top-color:#d3e0e9}.panel-default>.panel-heading .badge{color:#fff;background-color:#333}.panel-default>.panel-footer+.panel-collapse>.panel-body{border-bottom-color:#d3e0e9}.panel-primary{border-color:#3097d1}.panel-primary>.panel-heading{color:#fff;background-color:#3097d1;border-color:#3097d1}.panel-primary>.panel-heading+.panel-collapse>.panel-body{border-top-color:#3097d1}.panel-primary>.panel-heading .badge{color:#3097d1;background-color:#fff}.panel-primary>.panel-footer+.panel-collapse>.panel-body{border-bottom-color:#3097d1}.panel-success{border-color:#d6e9c6}.panel-success>.panel-heading{color:#3c763d;background-color:#dff0d8;border-color:#d6e9c6}.panel-success>.panel-heading+.panel-collapse>.panel-body{border-top-color:#d6e9c6}.panel-success>.panel-heading .badge{color:#dff0d8;background-color:#3c763d}.panel-success>.panel-footer+.panel-collapse>.panel-body{border-bottom-color:#d6e9c6}.panel-info{border-color:#bce8f1}.panel-info>.panel-heading{color:#31708f;background-color:#d9edf7;border-color:#bce8f1}.panel-info>.panel-heading+.panel-collapse>.panel-body{border-top-color:#bce8f1}.panel-info>.panel-heading .badge{color:#d9edf7;background-color:#31708f}.panel-info>.panel-footer+.panel-collapse>.panel-body{border-bottom-color:#bce8f1}.panel-warning{border-color:#faebcc}.panel-warning>.panel-heading{color:#8a6d3b;background-color:#fcf8e3;border-color:#faebcc}.panel-warning>.panel-heading+.panel-collapse>.panel-body{border-top-color:#faebcc}.panel-warning>.panel-heading .badge{color:#fcf8e3;background-color:#8a6d3b}.panel-warning>.panel-footer+.panel-collapse>.panel-body{border-bottom-color:#faebcc}.panel-danger{border-color:#ebccd1}.panel-danger>.panel-heading{color:#a94442;background-color:#f2dede;border-color:#ebccd1}.panel-danger>.panel-heading+.panel-collapse>.panel-body{border-top-color:#ebccd1}.panel-danger>.panel-heading .badge{color:#f2dede;background-color:#a94442}.panel-danger>.panel-footer+.panel-collapse>.panel-body{border-bottom-color:#ebccd1}.embed-responsive{position:relative;display:block;height:0;padding:0;overflow:hidden}.embed-responsive .embed-responsive-item,.embed-responsive embed,.embed-responsive iframe,.embed-responsive object,.embed-responsive video{position:absolute;top:0;left:0;bottom:0;height:100%;width:100%;border:0}.embed-responsive-16by9{padding-bottom:56.25%}.embed-responsive-4by3{padding-bottom:75%}.well{min-height:20px;padding:19px;margin-bottom:20px;background-color:#f5f5f5;border:1px solid #e3e3e3;border-radius:4px;-webkit-box-shadow:inset 0 1px 1px rgba(0,0,0,.05);box-shadow:inset 0 1px 1px rgba(0,0,0,.05)}.well blockquote{border-color:#ddd;border-color:rgba(0,0,0,.15)}.well-lg{padding:24px;border-radius:6px}.well-sm{padding:9px;border-radius:3px}.close{float:right;font-size:21px;font-weight:700;line-height:1;color:#000;text-shadow:0 1px 0 #fff;opacity:.2;filter:alpha(opacity=20)}.close:focus,.close:hover{color:#000;text-decoration:none;cursor:pointer;opacity:.5;filter:alpha(opacity=50)}button.close{padding:0;cursor:pointer;background:transparent;border:0;-webkit-appearance:none}.modal,.modal-open{overflow:hidden}.modal{display:none;position:fixed;top:0;right:0;bottom:0;left:0;z-index:1050;-webkit-overflow-scrolling:touch;outline:0}.modal.fade .modal-dialog{-webkit-transform:translateY(-25%);transform:translateY(-25%);-webkit-transition:-webkit-transform .3s ease-out;transition:-webkit-transform .3s ease-out;transition:transform .3s ease-out;transition:transform .3s ease-out,-webkit-transform .3s ease-out}.modal.in .modal-dialog{-webkit-transform:translate(0);transform:translate(0)}.modal-open .modal{overflow-x:hidden;overflow-y:auto}.modal-dialog{position:relative;width:auto;margin:10px}.modal-content{position:relative;background-color:#fff;border:1px solid #999;border:1px solid rgba(0,0,0,.2);border-radius:6px;-webkit-box-shadow:0 3px 9px rgba(0,0,0,.5);box-shadow:0 3px 9px rgba(0,0,0,.5);background-clip:padding-box;outline:0}.modal-backdrop{position:fixed;top:0;right:0;bottom:0;left:0;z-index:1040;background-color:#000}.modal-backdrop.fade{opacity:0;filter:alpha(opacity=0)}.modal-backdrop.in{opacity:.5;filter:alpha(opacity=50)}.modal-header{padding:15px;border-bottom:1px solid #e5e5e5}.modal-header:after,.modal-header:before{content:" ";display:table}.modal-header:after{clear:both}.modal-header .close{margin-top:-2px}.modal-title{margin:0;line-height:1.6}.modal-body{position:relative;padding:15px}.modal-footer{padding:15px;text-align:right;border-top:1px solid #e5e5e5}.modal-footer:after,.modal-footer:before{content:" ";display:table}.modal-footer:after{clear:both}.modal-footer .btn+.btn{margin-left:5px;margin-bottom:0}.modal-footer .btn-group .btn+.btn{margin-left:-1px}.modal-footer .btn-block+.btn-block{margin-left:0}.modal-scrollbar-measure{position:absolute;top:-9999px;width:50px;height:50px;overflow:scroll}@media (min-width:768px){.modal-dialog{width:600px;margin:30px auto}.modal-content{-webkit-box-shadow:0 5px 15px rgba(0,0,0,.5);box-shadow:0 5px 15px rgba(0,0,0,.5)}.modal-sm{width:300px}}@media (min-width:992px){.modal-lg{width:900px}}.tooltip{position:absolute;z-index:1070;display:block;font-family:Raleway,sans-serif;font-style:normal;font-weight:400;letter-spacing:normal;line-break:auto;line-height:1.6;text-align:left;text-align:start;text-decoration:none;text-shadow:none;text-transform:none;white-space:normal;word-break:normal;word-spacing:normal;word-wrap:normal;font-size:12px;opacity:0;filter:alpha(opacity=0)}.tooltip.in{opacity:.9;filter:alpha(opacity=90)}.tooltip.top{margin-top:-3px;padding:5px 0}.tooltip.right{margin-left:3px;padding:0 5px}.tooltip.bottom{margin-top:3px;padding:5px 0}.tooltip.left{margin-left:-3px;padding:0 5px}.tooltip-inner{max-width:200px;padding:3px 8px;color:#fff;text-align:center;background-color:#000;border-radius:4px}.tooltip-arrow{position:absolute;width:0;height:0;border-color:transparent;border-style:solid}.tooltip.top .tooltip-arrow{bottom:0;left:50%;margin-left:-5px;border-width:5px 5px 0;border-top-color:#000}.tooltip.top-left .tooltip-arrow{right:5px}.tooltip.top-left .tooltip-arrow,.tooltip.top-right .tooltip-arrow{bottom:0;margin-bottom:-5px;border-width:5px 5px 0;border-top-color:#000}.tooltip.top-right .tooltip-arrow{left:5px}.tooltip.right .tooltip-arrow{top:50%;left:0;margin-top:-5px;border-width:5px 5px 5px 0;border-right-color:#000}.tooltip.left .tooltip-arrow{top:50%;right:0;margin-top:-5px;border-width:5px 0 5px 5px;border-left-color:#000}.tooltip.bottom .tooltip-arrow{top:0;left:50%;margin-left:-5px;border-width:0 5px 5px;border-bottom-color:#000}.tooltip.bottom-left .tooltip-arrow{top:0;right:5px;margin-top:-5px;border-width:0 5px 5px;border-bottom-color:#000}.tooltip.bottom-right .tooltip-arrow{top:0;left:5px;margin-top:-5px;border-width:0 5px 5px;border-bottom-color:#000}.popover{position:absolute;top:0;left:0;z-index:1060;display:none;max-width:276px;padding:1px;font-family:Raleway,sans-serif;font-style:normal;font-weight:400;letter-spacing:normal;line-break:auto;line-height:1.6;text-align:left;text-align:start;text-decoration:none;text-shadow:none;text-transform:none;white-space:normal;word-break:normal;word-spacing:normal;word-wrap:normal;font-size:14px;background-color:#fff;background-clip:padding-box;border:1px solid #ccc;border:1px solid rgba(0,0,0,.2);border-radius:6px;-webkit-box-shadow:0 5px 10px rgba(0,0,0,.2);box-shadow:0 5px 10px rgba(0,0,0,.2)}.popover.top{margin-top:-10px}.popover.right{margin-left:10px}.popover.bottom{margin-top:10px}.popover.left{margin-left:-10px}.popover-title{margin:0;padding:8px 14px;font-size:14px;background-color:#f7f7f7;border-bottom:1px solid #ebebeb;border-radius:5px 5px 0 0}.popover-content{padding:9px 14px}.popover>.arrow,.popover>.arrow:after{position:absolute;display:block;width:0;height:0;border-color:transparent;border-style:solid}.popover>.arrow{border-width:11px}.popover>.arrow:after{border-width:10px;content:""}.popover.top>.arrow{left:50%;margin-left:-11px;border-bottom-width:0;border-top-color:#999;border-top-color:rgba(0,0,0,.25);bottom:-11px}.popover.top>.arrow:after{content:" ";bottom:1px;margin-left:-10px;border-bottom-width:0;border-top-color:#fff}.popover.right>.arrow{top:50%;left:-11px;margin-top:-11px;border-left-width:0;border-right-color:#999;border-right-color:rgba(0,0,0,.25)}.popover.right>.arrow:after{content:" ";left:1px;bottom:-10px;border-left-width:0;border-right-color:#fff}.popover.bottom>.arrow{left:50%;margin-left:-11px;border-top-width:0;border-bottom-color:#999;border-bottom-color:rgba(0,0,0,.25);top:-11px}.popover.bottom>.arrow:after{content:" ";top:1px;margin-left:-10px;border-top-width:0;border-bottom-color:#fff}.popover.left>.arrow{top:50%;right:-11px;margin-top:-11px;border-right-width:0;border-left-color:#999;border-left-color:rgba(0,0,0,.25)}.popover.left>.arrow:after{content:" ";right:1px;border-right-width:0;border-left-color:#fff;bottom:-10px}.carousel,.carousel-inner{position:relative}.carousel-inner{overflow:hidden;width:100%}.carousel-inner>.item{display:none;position:relative;-webkit-transition:left .6s ease-in-out;transition:left .6s ease-in-out}.carousel-inner>.item>a>img,.carousel-inner>.item>img{display:block;max-width:100%;height:auto;line-height:1}@media (-webkit-transform-3d),(transform-3d){.carousel-inner>.item{-webkit-transition:-webkit-transform .6s ease-in-out;transition:-webkit-transform .6s ease-in-out;transition:transform .6s ease-in-out;transition:transform .6s ease-in-out,-webkit-transform .6s ease-in-out;-webkit-backface-visibility:hidden;backface-visibility:hidden;-webkit-perspective:1000px;perspective:1000px}.carousel-inner>.item.active.right,.carousel-inner>.item.next{-webkit-transform:translate3d(100%,0,0);transform:translate3d(100%,0,0);left:0}.carousel-inner>.item.active.left,.carousel-inner>.item.prev{-webkit-transform:translate3d(-100%,0,0);transform:translate3d(-100%,0,0);left:0}.carousel-inner>.item.active,.carousel-inner>.item.next.left,.carousel-inner>.item.prev.right{-webkit-transform:translateZ(0);transform:translateZ(0);left:0}}.carousel-inner>.active,.carousel-inner>.next,.carousel-inner>.prev{display:block}.carousel-inner>.active{left:0}.carousel-inner>.next,.carousel-inner>.prev{position:absolute;top:0;width:100%}.carousel-inner>.next{left:100%}.carousel-inner>.prev{left:-100%}.carousel-inner>.next.left,.carousel-inner>.prev.right{left:0}.carousel-inner>.active.left{left:-100%}.carousel-inner>.active.right{left:100%}.carousel-control{position:absolute;top:0;left:0;bottom:0;width:15%;opacity:.5;filter:alpha(opacity=50);font-size:20px;color:#fff;text-align:center;text-shadow:0 1px 2px rgba(0,0,0,.6);background-color:transparent}.carousel-control.left{background-image:-webkit-gradient(linear,left top,right top,from(rgba(0,0,0,.5)),to(rgba(0,0,0,.0001)));background-image:linear-gradient(90deg,rgba(0,0,0,.5) 0,rgba(0,0,0,.0001));background-repeat:repeat-x;filter:progid:DXImageTransform.Microsoft.gradient(startColorstr="#80000000",endColorstr="#00000000",GradientType=1)}.carousel-control.right{left:auto;right:0;background-image:-webkit-gradient(linear,left top,right top,from(rgba(0,0,0,.0001)),to(rgba(0,0,0,.5)));background-image:linear-gradient(90deg,rgba(0,0,0,.0001) 0,rgba(0,0,0,.5));background-repeat:repeat-x;filter:progid:DXImageTransform.Microsoft.gradient(startColorstr="#00000000",endColorstr="#80000000",GradientType=1)}.carousel-control:focus,.carousel-control:hover{outline:0;color:#fff;text-decoration:none;opacity:.9;filter:alpha(opacity=90)}.carousel-control .glyphicon-chevron-left,.carousel-control .glyphicon-chevron-right,.carousel-control .icon-next,.carousel-control .icon-prev{position:absolute;top:50%;margin-top:-10px;z-index:5;display:inline-block}.carousel-control .glyphicon-chevron-left,.carousel-control .icon-prev{left:50%;margin-left:-10px}.carousel-control .glyphicon-chevron-right,.carousel-control .icon-next{right:50%;margin-right:-10px}.carousel-control .icon-next,.carousel-control .icon-prev{width:20px;height:20px;line-height:1;font-family:serif}.carousel-control .icon-prev:before{content:"\2039"}.carousel-control .icon-next:before{content:"\203A"}.carousel-indicators{position:absolute;bottom:10px;left:50%;z-index:15;width:60%;margin-left:-30%;padding-left:0;list-style:none;text-align:center}.carousel-indicators li{display:inline-block;width:10px;height:10px;margin:1px;text-indent:-999px;border:1px solid #fff;border-radius:10px;cursor:pointer;background-color:#000\9;background-color:transparent}.carousel-indicators .active{margin:0;width:12px;height:12px;background-color:#fff}.carousel-caption{position:absolute;left:15%;right:15%;bottom:20px;z-index:10;padding-top:20px;padding-bottom:20px;color:#fff;text-align:center;text-shadow:0 1px 2px rgba(0,0,0,.6)}.carousel-caption .btn{text-shadow:none}@media screen and (min-width:768px){.carousel-control .glyphicon-chevron-left,.carousel-control .glyphicon-chevron-right,.carousel-control .icon-next,.carousel-control .icon-prev{width:30px;height:30px;margin-top:-10px;font-size:30px}.carousel-control .glyphicon-chevron-left,.carousel-control .icon-prev{margin-left:-10px}.carousel-control .glyphicon-chevron-right,.carousel-control .icon-next{margin-right:-10px}.carousel-caption{left:20%;right:20%;padding-bottom:30px}.carousel-indicators{bottom:20px}}.clearfix:after,.clearfix:before{content:" ";display:table}.clearfix:after{clear:both}.center-block{display:block;margin-left:auto;margin-right:auto}.pull-right{float:right!important}.pull-left{float:left!important}.hide{display:none!important}.show{display:block!important}.invisible{visibility:hidden}.text-hide{font:0/0 a;color:transparent;text-shadow:none;background-color:transparent;border:0}.hidden{display:none!important}.affix{position:fixed}@-ms-viewport{width:device-width}.visible-lg,.visible-lg-block,.visible-lg-inline,.visible-lg-inline-block,.visible-md,.visible-md-block,.visible-md-inline,.visible-md-inline-block,.visible-sm,.visible-sm-block,.visible-sm-inline,.visible-sm-inline-block,.visible-xs,.visible-xs-block,.visible-xs-inline,.visible-xs-inline-block{display:none!important}@media (max-width:767px){.visible-xs{display:block!important}table.visible-xs{display:table!important}tr.visible-xs{display:table-row!important}td.visible-xs,th.visible-xs{display:table-cell!important}}@media (max-width:767px){.visible-xs-block{display:block!important}}@media (max-width:767px){.visible-xs-inline{display:inline!important}}@media (max-width:767px){.visible-xs-inline-block{display:inline-block!important}}@media (min-width:768px) and (max-width:991px){.visible-sm{display:block!important}table.visible-sm{display:table!important}tr.visible-sm{display:table-row!important}td.visible-sm,th.visible-sm{display:table-cell!important}}@media (min-width:768px) and (max-width:991px){.visible-sm-block{display:block!important}}@media (min-width:768px) and (max-width:991px){.visible-sm-inline{display:inline!important}}@media (min-width:768px) and (max-width:991px){.visible-sm-inline-block{display:inline-block!important}}@media (min-width:992px) and (max-width:1199px){.visible-md{display:block!important}table.visible-md{display:table!important}tr.visible-md{display:table-row!important}td.visible-md,th.visible-md{display:table-cell!important}}@media (min-width:992px) and (max-width:1199px){.visible-md-block{display:block!important}}@media (min-width:992px) and (max-width:1199px){.visible-md-inline{display:inline!important}}@media (min-width:992px) and (max-width:1199px){.visible-md-inline-block{display:inline-block!important}}@media (min-width:1200px){.visible-lg{display:block!important}table.visible-lg{display:table!important}tr.visible-lg{display:table-row!important}td.visible-lg,th.visible-lg{display:table-cell!important}}@media (min-width:1200px){.visible-lg-block{display:block!important}}@media (min-width:1200px){.visible-lg-inline{display:inline!important}}@media (min-width:1200px){.visible-lg-inline-block{display:inline-block!important}}@media (max-width:767px){.hidden-xs{display:none!important}}@media (min-width:768px) and (max-width:991px){.hidden-sm{display:none!important}}@media (min-width:992px) and (max-width:1199px){.hidden-md{display:none!important}}@media (min-width:1200px){.hidden-lg{display:none!important}}.visible-print{display:none!important}@media print{.visible-print{display:block!important}table.visible-print{display:table!important}tr.visible-print{display:table-row!important}td.visible-print,th.visible-print{display:table-cell!important}}.visible-print-block{display:none!important}@media print{.visible-print-block{display:block!important}}.visible-print-inline{display:none!important}@media print{.visible-print-inline{display:inline!important}}.visible-print-inline-block{display:none!important}@media print{.visible-print-inline-block{display:inline-block!important}}@media print{.hidden-print{display:none!important}}
   13  
   14  

/home/genis/Proyectos/ProyectoXat/public/js/app.js:
    1: !function(t){function e(r){if(n[r])return n[r].exports;var i=n[r]={i:r,l:!1,exports:{}};return t[r].call(i.exports,i,i.exports,e),i.l=!0,i.exports}var n={};e.m=t,e.c=n,e.d=function(t,n,r){e.o(t,n)||Object.defineProperty(t,n,{configurable:!1,enumerable:!0,get:r})},e.n=function(t){var n=t&&t.__esModule?function(){return t.default}:function(){return t};return e.d(n,"a",n),n},e.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},e.p="",e(e.s=8)}([function(t,e,n){"use strict";function r(t){return"[object Array]"===T.call(t)}function i(t){return"[object ArrayBuffer]"===T.call(t)}function o(t){return"undefined"!=typeof FormData&&t instanceof FormData}function a(t){return"undefined"!=typeof ArrayBuffer&&ArrayBuffer.isView?ArrayBuffer.isView(t):t&&t.buffer&&t.buffer instanceof ArrayBuffer}function s(t){return"string"==typeof t}function u(t){return"number"==typeof t}function c(t){return void 0===t}function l(t){return null!==t&&"object"==typeof t}function f(t){return"[object Date]"===T.call(t)}function p(t){return"[object File]"===T.call(t)}function d(t){return"[object Blob]"===T.call(t)}function h(t){return"[object Function]"===T.call(t)}function v(t){return l(t)&&h(t.pipe)}function g(t){return"undefined"!=typeof URLSearchParams&&t instanceof URLSearchParams}function m(t){return t.replace(/^\s*/,"").replace(/\s*$/,"")}function y(){return("undefined"==typeof navigator||"ReactNative"!==navigator.product)&&("undefined"!=typeof window&&"undefined"!=typeof document)}function b(t,e){if(null!==t&&void 0!==t)if("object"==typeof t||r(t)||(t=[t]),r(t))for(var n=0,i=t.length;n<i;n++)e.call(null,t[n],n,t);else for(var o in t)Object.prototype.hasOwnProperty.call(t,o)&&e.call(null,t[o],o,t)}function _(){function t(t,n){"object"==typeof e[n]&&"object"==typeof t?e[n]=_(e[n],t):e[n]=t}for(var e={},n=0,r=arguments.length;n<r;n++)b(arguments[n],t);return e}function w(t,e,n){return b(e,function(e,r){t[r]=n&&"function"==typeof e?x(e,n):e}),t}var x=n(3),C=n(17),T=Object.prototype.toString;t.exports={isArray:r,isArrayBuffer:i,isBuffer:C,isFormData:o,isArrayBufferView:a,isString:s,isNumber:u,isObject:l,isUndefined:c,isDate:f,isFile:p,isBlob:d,isFunction:h,isStream:v,isURLSearchParams:g,isStandardBrowserEnv:y,forEach:b,merge:_,extend:w,trim:m}},function(t,e,n){"use strict";(function(e){function r(t,e){!i.isUndefined(t)&&i.isUndefined(t["Content-Type"])&&(t["Content-Type"]=e)}var i=n(0),o=n(20),a={"Content-Type":"application/x-www-form-urlencoded"},s={adapter:function(){var t;return"undefined"!=typeof XMLHttpRequest?t=n(4):void 0!==e&&(t=n(4)),t}(),transformRequest:[function(t,e){return o(e,"Content-Type"),i.isFormData(t)||i.isArrayBuffer(t)||i.isBuffer(t)||i.isStream(t)||i.isFile(t)||i.isBlob(t)?t:i.isArrayBufferView(t)?t.buffer:i.isURLSearchParams(t)?(r(e,"application/x-www-form-urlencoded;charset=utf-8"),t.toString()):i.isObject(t)?(r(e,"application/json;charset=utf-8"),JSON.stringify(t)):t}],transformResponse:[function(t){if("string"==typeof t)try{t=JSON.parse(t)}catch(t){}return t}],timeout:0,xsrfCookieName:"XSRF-TOKEN",xsrfHeaderName:"X-XSRF-TOKEN",maxContentLength:-1,validateStatus:function(t){return t>=200&&t<300}};s.headers={common:{Accept:"application/json, text/plain, */*"}},i.forEach(["delete","get","head"],function(t){s.headers[t]={}}),i.forEach(["post","put","patch"],function(t){s.headers[t]=i.merge(a)}),t.exports=s}).call(e,n(19))},function(t,e){var n;n=function(){return this}();try{n=n||Function("return this")()||(0,eval)("this")}catch(t){"object"==typeof window&&(n=window)}t.exports=n},function(t,e,n){"use strict";t.exports=function(t,e){return function(){for(var n=new Array(arguments.length),r=0;r<n.length;r++)n[r]=arguments[r];return t.apply(e,n)}}},function(t,e,n){"use strict";var r=n(0),i=n(21),o=n(23),a=n(24),s=n(25),u=n(5),c="undefined"!=typeof window&&window.btoa&&window.btoa.bind(window)||n(26);t.exports=function(t){return new Promise(function(e,l){var f=t.data,p=t.headers;r.isFormData(f)&&delete p["Content-Type"];var d=new XMLHttpRequest,h="onreadystatechange",v=!1;if("undefined"==typeof window||!window.XDomainRequest||"withCredentials"in d||s(t.url)||(d=new window.XDomainRequest,h="onload",v=!0,d.onprogress=function(){},d.ontimeout=function(){}),t.auth){var g=t.auth.username||"",m=t.auth.password||"";p.Authorization="Basic "+c(g+":"+m)}if(d.open(t.method.toUpperCase(),o(t.url,t.params,t.paramsSerializer),!0),d.timeout=t.timeout,d[h]=function(){if(d&&(4===d.readyState||v)&&(0!==d.status||d.responseURL&&0===d.responseURL.indexOf("file:"))){var n="getAllResponseHeaders"in d?a(d.getAllResponseHeaders()):null,r=t.responseType&&"text"!==t.responseType?d.response:d.responseText,o={data:r,status:1223===d.status?204:d.status,statusText:1223===d.status?"No Content":d.statusText,headers:n,config:t,request:d};i(e,l,o),d=null}},d.onerror=function(){l(u("Network Error",t,null,d)),d=null},d.ontimeout=function(){l(u("timeout of "+t.timeout+"ms exceeded",t,"ECONNABORTED",d)),d=null},r.isStandardBrowserEnv()){var y=n(27),b=(t.withCredentials||s(t.url))&&t.xsrfCookieName?y.read(t.xsrfCookieName):void 0;b&&(p[t.xsrfHeaderName]=b)}if("setRequestHeader"in d&&r.forEach(p,function(t,e){void 0===f&&"content-type"===e.toLowerCase()?delete p[e]:d.setRequestHeader(e,t)}),t.withCredentials&&(d.withCredentials=!0),t.responseType)try{d.responseType=t.responseType}catch(e){if("json"!==t.responseType)throw e}"function"==typeof t.onDownloadProgress&&d.addEventListener("progress",t.onDownloadProgress),"function"==typeof t.onUploadProgress&&d.upload&&d.upload.addEventListener("progress",t.onUploadProgress),t.cancelToken&&t.cancelToken.promise.then(function(t){d&&(d.abort(),l(t),d=null)}),void 0===f&&(f=null),d.send(f)})}},function(t,e,n){"use strict";var r=n(22);t.exports=function(t,e,n,i,o){var a=new Error(t);return r(a,e,n,i,o)}},function(t,e,n){"use strict";t.exports=function(t){return!(!t||!t.__CANCEL__)}},function(t,e,n){"use strict";function r(t){this.message=t}r.prototype.toString=function(){return"Cancel"+(this.message?": "+this.message:"")},r.prototype.__CANCEL__=!0,t.exports=r},function(t,e,n){n(9),t.exports=n(40)},function(t,e,n){n(10),window.Vue=n(35),Vue.component("example-component",n(36));new Vue({el:"#app"})},function(t,e,n){window._=n(11);try{window.$=window.jQuery=n(13),n(14)}catch(t){}window.axios=n(15),window.axios.defaults.headers.common["X-Requested-With"]="XMLHttpRequest";var r=document.head.querySelector('meta[name="csrf-token"]');r&&(window.axios.defaults.headers.common["X-CSRF-TOKEN"]=r.content)},function(t,e,n){(function(t,r){var i;(function(){function o(t,e){return t.set(e[0],e[1]),t}function a(t,e){return t.add(e),t}function s(t,e,n){switch(n.length){case 0:return t.call(e);case 1:return t.call(e,n[0]);case 2:return t.call(e,n[0],n[1]);case 3:return t.call(e,n[0],n[1],n[2])}return t.apply(e,n)}function u(t,e,n,r){for(var i=-1,o=null==t?0:t.length;++i<o;){var a=t[i];e(r,a,n(a),t)}return r}function c(t,e){for(var n=-1,r=null==t?0:t.length;++n<r&&!1!==e(t[n],n,t););return t}function l(t,e){for(var n=null==t?0:t.length;n--&&!1!==e(t[n],n,t););return t}function f(t,e){for(var n=-1,r=null==t?0:t.length;++n<r;)if(!e(t[n],n,t))return!1;return!0}function p(t,e){for(var n=-1,r=null==t?0:t.length,i=0,o=[];++n<r;){var a=t[n];e(a,n,t)&&(o[i++]=a)}return o}function d(t,e){return!!(null==t?0:t.length)&&T(t,e,0)>-1}function h(t,e,n){for(var r=-1,i=null==t?0:t.length;++r<i;)if(n(e,t[r]))return!0;return!1}function v(t,e){for(var n=-1,r=null==t?0:t.length,i=Array(r);++n<r;)i[n]=e(t[n],n,t);return i}function g(t,e){for(var n=-1,r=e.length,i=t.length;++n<r;)t[i+n]=e[n];return t}function m(t,e,n,r){var i=-1,o=null==t?0:t.length;for(r&&o&&(n=t[++i]);++i<o;)n=e(n,t[i],i,t);return n}function y(t,e,n,r){var i=null==t?0:t.length;for(r&&i&&(n=t[--i]);i--;)n=e(n,t[i],i,t);return n}function b(t,e){for(var n=-1,r=null==t?0:t.length;++n<r;)if(e(t[n],n,t))return!0;return!1}function _(t){return t.split("")}function w(t){return t.match(qe)||[]}function x(t,e,n){var r;return n(t,function(t,n,i){if(e(t,n,i))return r=n,!1}),r}function C(t,e,n,r){for(var i=t.length,o=n+(r?1:-1);r?o--:++o<i;)if(e(t[o],o,t))return o;return-1}function T(t,e,n){return e===e?G(t,e,n):C(t,A,n)}function $(t,e,n,r){for(var i=n-1,o=t.length;++i<o;)if(r(t[i],e))return i;return-1}function A(t){return t!==t}function k(t,e){var n=null==t?0:t.length;return n?N(t,e)/n:Lt}function E(t){return function(e){return null==e?it:e[t]}}function S(t){return function(e){return null==t?it:t[e]}}function O(t,e,n,r,i){return i(t,function(t,i,o){n=r?(r=!1,t):e(n,t,i,o)}),n}function j(t,e){var n=t.length;for(t.sort(e);n--;)t[n]=t[n].value;return t}function N(t,e){for(var n,r=-1,i=t.length;++r<i;){var o=e(t[r]);o!==it&&(n=n===it?o:n+o)}return n}function D(t,e){for(var n=-1,r=Array(t);++n<t;)r[n]=e(n);return r}function I(t,e){return v(e,function(e){return[e,t[e]]})}function L(t){return function(e){return t(e)}}function R(t,e){return v(e,function(e){return t[e]})}function P(t,e){return t.has(e)}function F(t,e){for(var n=-1,r=t.length;++n<r&&T(e,t[n],0)>-1;);return n}function M(t,e){for(var n=t.length;n--&&T(e,t[n],0)>-1;);return n}function q(t,e){for(var n=t.length,r=0;n--;)t[n]===e&&++r;return r}function H(t){return"\\"+En[t]}function B(t,e){return null==t?it:t[e]}function U(t){return bn.test(t)}function W(t){return _n.test(t)}function z(t){for(var e,n=[];!(e=t.next()).done;)n.push(e.value);return n}function V(t){var e=-1,n=Array(t.size);return t.forEach(function(t,r){n[++e]=[r,t]}),n}function X(t,e){return function(n){return t(e(n))}}function K(t,e){for(var n=-1,r=t.length,i=0,o=[];++n<r;){var a=t[n];a!==e&&a!==lt||(t[n]=lt,o[i++]=n)}return o}function J(t){var e=-1,n=Array(t.size);return t.forEach(function(t){n[++e]=t}),n}function Q(t){var e=-1,n=Array(t.size);return t.forEach(function(t){n[++e]=[t,t]}),n}function G(t,e,n){for(var r=n-1,i=t.length;++r<i;)if(t[r]===e)return r;return-1}function Z(t,e,n){for(var r=n+1;r--;)if(t[r]===e)return r;return r}function Y(t){return U(t)?et(t):zn(t)}function tt(t){return U(t)?nt(t):_(t)}function et(t){for(var e=mn.lastIndex=0;mn.test(t);)++e;return e}function nt(t){return t.match(mn)||[]}function rt(t){return t.match(yn)||[]}var it,ot=200,at="Unsupported core-js use. Try https://npms.io/search?q=ponyfill.",st="Expected a function",ut="__lodash_hash_undefined__",ct=500,lt="__lodash_placeholder__",ft=1,pt=2,dt=4,ht=1,vt=2,gt=1,mt=2,yt=4,bt=8,_t=16,wt=32,xt=64,Ct=128,Tt=256,$t=512,At=30,kt="...",Et=800,St=16,Ot=1,jt=2,Nt=1/0,Dt=9007199254740991,It=1.7976931348623157e308,Lt=NaN,Rt=4294967295,Pt=Rt-1,Ft=Rt>>>1,Mt=[["ary",Ct],["bind",gt],["bindKey",mt],["curry",bt],["curryRight",_t],["flip",$t],["partial",wt],["partialRight",xt],["rearg",Tt]],qt="[object Arguments]",Ht="[object Array]",Bt="[object AsyncFunction]",Ut="[object Boolean]",Wt="[object Date]",zt="[object DOMException]",Vt="[object Error]",Xt="[object Function]",Kt="[object GeneratorFunction]",Jt="[object Map]",Qt="[object Number]",Gt="[object Null]",Zt="[object Object]",Yt="[object Proxy]",te="[object RegExp]",ee="[object Set]",ne="[object String]",re="[object Symbol]",ie="[object Undefined]",oe="[object WeakMap]",ae="[object WeakSet]",se="[object ArrayBuffer]",ue="[object DataView]",ce="[object Float32Array]",le="[object Float64Array]",fe="[object Int8Array]",pe="[object Int16Array]",de="[object Int32Array]",he="[object Uint8Array]",ve="[object Uint8ClampedArray]",ge="[object Uint16Array]",me="[object Uint32Array]",ye=/\b__p \+= '';/g,be=/\b(__p \+=) '' \+/g,_e=/(__e\(.*?\)|\b__t\)) \+\n'';/g,we=/&(?:amp|lt|gt|quot|#39);/g,xe=/[&<>"']/g,Ce=RegExp(we.source),Te=RegExp(xe.source),$e=/<%-([\s\S]+?)%>/g,Ae=/<%([\s\S]+?)%>/g,ke=/<%=([\s\S]+?)%>/g,Ee=/\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/,Se=/^\w*$/,Oe=/^\./,je=/[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g,Ne=/[\\^$.*+?()[\]{}|]/g,De=RegExp(Ne.source),Ie=/^\s+|\s+$/g,Le=/^\s+/,Re=/\s+$/,Pe=/\{(?:\n\/\* \[wrapped with .+\] \*\/)?\n?/,Fe=/\{\n\/\* \[wrapped with (.+)\] \*/,Me=/,? & /,qe=/[^\x00-\x2f\x3a-\x40\x5b-\x60\x7b-\x7f]+/g,He=/\\(\\)?/g,Be=/\$\{([^\\}]*(?:\\.[^\\}]*)*)\}/g,Ue=/\w*$/,We=/^[-+]0x[0-9a-f]+$/i,ze=/^0b[01]+$/i,Ve=/^\[object .+?Constructor\]$/,Xe=/^0o[0-7]+$/i,Ke=/^(?:0|[1-9]\d*)$/,Je=/[\xc0-\xd6\xd8-\xf6\xf8-\xff\u0100-\u017f]/g,Qe=/($^)/,Ge=/['\n\r\u2028\u2029\\]/g,Ze="\\u0300-\\u036f\\ufe20-\\ufe2f\\u20d0-\\u20ff",Ye="\\xac\\xb1\\xd7\\xf7\\x00-\\x2f\\x3a-\\x40\\x5b-\\x60\\x7b-\\xbf\\u2000-\\u206f \\t\\x0b\\f\\xa0\\ufeff\\n\\r\\u2028\\u2029\\u1680\\u180e\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\u202f\\u205f\\u3000",tn="["+Ye+"]",en="["+Ze+"]",nn="[a-z\\xdf-\\xf6\\xf8-\\xff]",rn="[^\\ud800-\\udfff"+Ye+"\\d+\\u2700-\\u27bfa-z\\xdf-\\xf6\\xf8-\\xffA-Z\\xc0-\\xd6\\xd8-\\xde]",on="\\ud83c[\\udffb-\\udfff]",an="(?:\\ud83c[\\udde6-\\uddff]){2}",sn="[\\ud800-\\udbff][\\udc00-\\udfff]",un="[A-Z\\xc0-\\xd6\\xd8-\\xde]",cn="(?:"+nn+"|"+rn+")",ln="(?:[\\u0300-\\u036f\\ufe20-\\ufe2f\\u20d0-\\u20ff]|\\ud83c[\\udffb-\\udfff])?",fn="(?:\\u200d(?:"+["[^\\ud800-\\udfff]",an,sn].join("|")+")[\\ufe0e\\ufe0f]?"+ln+")*",pn="[\\ufe0e\\ufe0f]?"+ln+fn,dn="(?:"+["[\\u2700-\\u27bf]",an,sn].join("|")+")"+pn,hn="(?:"+["[^\\ud800-\\udfff]"+en+"?",en,an,sn,"[\\ud800-\\udfff]"].join("|")+")",vn=RegExp("['’]","g"),gn=RegExp(en,"g"),mn=RegExp(on+"(?="+on+")|"+hn+pn,"g"),yn=RegExp([un+"?"+nn+"+(?:['’](?:d|ll|m|re|s|t|ve))?(?="+[tn,un,"$"].join("|")+")","(?:[A-Z\\xc0-\\xd6\\xd8-\\xde]|[^\\ud800-\\udfff\\xac\\xb1\\xd7\\xf7\\x00-\\x2f\\x3a-\\x40\\x5b-\\x60\\x7b-\\xbf\\u2000-\\u206f \\t\\x0b\\f\\xa0\\ufeff\\n\\r\\u2028\\u2029\\u1680\\u180e\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\u202f\\u205f\\u3000\\d+\\u2700-\\u27bfa-z\\xdf-\\xf6\\xf8-\\xffA-Z\\xc0-\\xd6\\xd8-\\xde])+(?:['’](?:D|LL|M|RE|S|T|VE))?(?="+[tn,un+cn,"$"].join("|")+")",un+"?"+cn+"+(?:['’](?:d|ll|m|re|s|t|ve))?",un+"+(?:['’](?:D|LL|M|RE|S|T|VE))?","\\d*(?:(?:1ST|2ND|3RD|(?![123])\\dTH)\\b)","\\d*(?:(?:1st|2nd|3rd|(?![123])\\dth)\\b)","\\d+",dn].join("|"),"g"),bn=RegExp("[\\u200d\\ud800-\\udfff"+Ze+"\\ufe0e\\ufe0f]"),_n=/[a-z][A-Z]|[A-Z]{2,}[a-z]|[0-9][a-zA-Z]|[a-zA-Z][0-9]|[^a-zA-Z0-9 ]/,wn=["Array","Buffer","DataView","Date","Error","Float32Array","Float64Array","Function","Int8Array","Int16Array","Int32Array","Map","Math","Object","Promise","RegExp","Set","String","Symbol","TypeError","Uint8Array","Uint8ClampedArray","Uint16Array","Uint32Array","WeakMap","_","clearTimeout","isFinite","parseInt","setTimeout"],xn=-1,Cn={};Cn[ce]=Cn[le]=Cn[fe]=Cn[pe]=Cn[de]=Cn[he]=Cn[ve]=Cn[ge]=Cn[me]=!0,Cn[qt]=Cn[Ht]=Cn[se]=Cn[Ut]=Cn[ue]=Cn[Wt]=Cn[Vt]=Cn[Xt]=Cn[Jt]=Cn[Qt]=Cn[Zt]=Cn[te]=Cn[ee]=Cn[ne]=Cn[oe]=!1;var Tn={};Tn[qt]=Tn[Ht]=Tn[se]=Tn[ue]=Tn[Ut]=Tn[Wt]=Tn[ce]=Tn[le]=Tn[fe]=Tn[pe]=Tn[de]=Tn[Jt]=Tn[Qt]=Tn[Zt]=Tn[te]=Tn[ee]=Tn[ne]=Tn[re]=Tn[he]=Tn[ve]=Tn[ge]=Tn[me]=!0,Tn[Vt]=Tn[Xt]=Tn[oe]=!1;var $n={"À":"A","Á":"A","Â":"A","Ã":"A","Ä":"A","Å":"A","à":"a","á":"a","â":"a","ã":"a","ä":"a","å":"a","Ç":"C","ç":"c","Ð":"D","ð":"d","È":"E","É":"E","Ê":"E","Ë":"E","è":"e","é":"e","ê":"e","ë":"e","Ì":"I","Í":"I","Î":"I","Ï":"I","ì":"i","í":"i","î":"i","ï":"i","Ñ":"N","ñ":"n","Ò":"O","Ó":"O","Ô":"O","Õ":"O","Ö":"O","Ø":"O","ò":"o","ó":"o","ô":"o","õ":"o","ö":"o","ø":"o","Ù":"U","Ú":"U","Û":"U","Ü":"U","ù":"u","ú":"u","û":"u","ü":"u","Ý":"Y","ý":"y","ÿ":"y","Æ":"Ae","æ":"ae","Þ":"Th","þ":"th","ß":"ss","Ā":"A","Ă":"A","Ą":"A","ā":"a","ă":"a","ą":"a","Ć":"C","Ĉ":"C","Ċ":"C","Č":"C","ć":"c","ĉ":"c","ċ":"c","č":"c","Ď":"D","Đ":"D","ď":"d","đ":"d","Ē":"E","Ĕ":"E","Ė":"E","Ę":"E","Ě":"E","ē":"e","ĕ":"e","ė":"e","ę":"e","ě":"e","Ĝ":"G","Ğ":"G","Ġ":"G","Ģ":"G","ĝ":"g","ğ":"g","ġ":"g","ģ":"g","Ĥ":"H","Ħ":"H","ĥ":"h","ħ":"h","Ĩ":"I","Ī":"I","Ĭ":"I","Į":"I","İ":"I","ĩ":"i","ī":"i","ĭ":"i","į":"i","ı":"i","Ĵ":"J","ĵ":"j","Ķ":"K","ķ":"k","ĸ":"k","Ĺ":"L","Ļ":"L","Ľ":"L","Ŀ":"L","Ł":"L","ĺ":"l","ļ":"l","ľ":"l","ŀ":"l","ł":"l","Ń":"N","Ņ":"N","Ň":"N","Ŋ":"N","ń":"n","ņ":"n","ň":"n","ŋ":"n","Ō":"O","Ŏ":"O","Ő":"O","ō":"o","ŏ":"o","ő":"o","Ŕ":"R","Ŗ":"R","Ř":"R","ŕ":"r","ŗ":"r","ř":"r","Ś":"S","Ŝ":"S","Ş":"S","Š":"S","ś":"s","ŝ":"s","ş":"s","š":"s","Ţ":"T","Ť":"T","Ŧ":"T","ţ":"t","ť":"t","ŧ":"t","Ũ":"U","Ū":"U","Ŭ":"U","Ů":"U","Ű":"U","Ų":"U","ũ":"u","ū":"u","ŭ":"u","ů":"u","ű":"u","ų":"u","Ŵ":"W","ŵ":"w","Ŷ":"Y","ŷ":"y","Ÿ":"Y","Ź":"Z","Ż":"Z","Ž":"Z","ź":"z","ż":"z","ž":"z","Ĳ":"IJ","ĳ":"ij","Œ":"Oe","œ":"oe","ŉ":"'n","ſ":"s"},An={"&":"&amp;","<":"&lt;",">":"&gt;",'"':"&quot;","'":"&#39;"},kn={"&amp;":"&","&lt;":"<","&gt;":">","&quot;":'"',"&#39;":"'"},En={"\\":"\\","'":"'","\n":"n","\r":"r","\u2028":"u2028","\u2029":"u2029"},Sn=parseFloat,On=parseInt,jn="object"==typeof t&&t&&t.Object===Object&&t,Nn="object"==typeof self&&self&&self.Object===Object&&self,Dn=jn||Nn||Function("return this")(),In="object"==typeof e&&e&&!e.nodeType&&e,Ln=In&&"object"==typeof r&&r&&!r.nodeType&&r,Rn=Ln&&Ln.exports===In,Pn=Rn&&jn.process,Fn=function(){try{return Pn&&Pn.binding&&Pn.binding("util")}catch(t){}}(),Mn=Fn&&Fn.isArrayBuffer,qn=Fn&&Fn.isDate,Hn=Fn&&Fn.isMap,Bn=Fn&&Fn.isRegExp,Un=Fn&&Fn.isSet,Wn=Fn&&Fn.isTypedArray,zn=E("length"),Vn=S($n),Xn=S(An),Kn=S(kn),Jn=function t(e){function n(t){if(ou(t)&&!mp(t)&&!(t instanceof _)){if(t instanceof i)return t;if(gl.call(t,"__wrapped__"))return na(t)}return new i(t)}function r(){}function i(t,e){this.__wrapped__=t,this.__actions__=[],this.__chain__=!!e,this.__index__=0,this.__values__=it}function _(t){this.__wrapped__=t,this.__actions__=[],this.__dir__=1,this.__filtered__=!1,this.__iteratees__=[],this.__takeCount__=Rt,this.__views__=[]}function S(){var t=new _(this.__wrapped__);return t.__actions__=Pi(this.__actions__),t.__dir__=this.__dir__,t.__filtered__=this.__filtered__,t.__iteratees__=Pi(this.__iteratees__),t.__takeCount__=this.__takeCount__,t.__views__=Pi(this.__views__),t}function G(){if(this.__filtered__){var t=new _(this);t.__dir__=-1,t.__filtered__=!0}else t=this.clone(),t.__dir__*=-1;return t}function et(){var t=this.__wrapped__.value(),e=this.__dir__,n=mp(t),r=e<0,i=n?t.length:0,o=ko(0,i,this.__views__),a=o.start,s=o.end,u=s-a,c=r?s:a-1,l=this.__iteratees__,f=l.length,p=0,d=Vl(u,this.__takeCount__);if(!n||!r&&i==u&&d==u)return yi(t,this.__actions__);var h=[];t:for(;u--&&p<d;){c+=e;for(var v=-1,g=t[c];++v<f;){var m=l[v],y=m.iteratee,b=m.type,_=y(g);if(b==jt)g=_;else if(!_){if(b==Ot)continue t;break t}}h[p++]=g}return h}function nt(t){var e=-1,n=null==t?0:t.length;for(this.clear();++e<n;){var r=t[e];this.set(r[0],r[1])}}function qe(){this.__data__=nf?nf(null):{},this.size=0}function Ze(t){var e=this.has(t)&&delete this.__data__[t];return this.size-=e?1:0,e}function Ye(t){var e=this.__data__;if(nf){var n=e[t];return n===ut?it:n}return gl.call(e,t)?e[t]:it}function tn(t){var e=this.__data__;return nf?e[t]!==it:gl.call(e,t)}function en(t,e){var n=this.__data__;return this.size+=this.has(t)?0:1,n[t]=nf&&e===it?ut:e,this}function nn(t){var e=-1,n=null==t?0:t.length;for(this.clear();++e<n;){var r=t[e];this.set(r[0],r[1])}}function rn(){this.__data__=[],this.size=0}function on(t){var e=this.__data__,n=Qn(e,t);return!(n<0)&&(n==e.length-1?e.pop():Ol.call(e,n,1),--this.size,!0)}function an(t){var e=this.__data__,n=Qn(e,t);return n<0?it:e[n][1]}function sn(t){return Qn(this.__data__,t)>-1}function un(t,e){var n=this.__data__,r=Qn(n,t);return r<0?(++this.size,n.push([t,e])):n[r][1]=e,this}function cn(t){var e=-1,n=null==t?0:t.length;for(this.clear();++e<n;){var r=t[e];this.set(r[0],r[1])}}function ln(){this.size=0,this.__data__={hash:new nt,map:new(Zl||nn),string:new nt}}function fn(t){var e=Co(this,t).delete(t);return this.size-=e?1:0,e}function pn(t){return Co(this,t).get(t)}function dn(t){return Co(this,t).has(t)}function hn(t,e){var n=Co(this,t),r=n.size;return n.set(t,e),this.size+=n.size==r?0:1,this}function mn(t){var e=-1,n=null==t?0:t.length;for(this.__data__=new cn;++e<n;)this.add(t[e])}function yn(t){return this.__data__.set(t,ut),this}function bn(t){return this.__data__.has(t)}function _n(t){var e=this.__data__=new nn(t);this.size=e.size}function $n(){this.__data__=new nn,this.size=0}function An(t){var e=this.__data__,n=e.delete(t);return this.size=e.size,n}function kn(t){return this.__data__.get(t)}function En(t){return this.__data__.has(t)}function jn(t,e){var n=this.__data__;if(n instanceof nn){var r=n.__data__;if(!Zl||r.length<ot-1)return r.push([t,e]),this.size=++n.size,this;n=this.__data__=new cn(r)}return n.set(t,e),this.size=n.size,this}function Nn(t,e){var n=mp(t),r=!n&&gp(t),i=!n&&!r&&bp(t),o=!n&&!r&&!i&&Tp(t),a=n||r||i||o,s=a?D(t.length,cl):[],u=s.length;for(var c in t)!e&&!gl.call(t,c)||a&&("length"==c||i&&("offset"==c||"parent"==c)||o&&("buffer"==c||"byteLength"==c||"byteOffset"==c)||Lo(c,u))||s.push(c);return s}function In(t){var e=t.length;return e?t[Yr(0,e-1)]:it}function Ln(t,e){return Zo(Pi(t),nr(e,0,t.length))}function Pn(t){return Zo(Pi(t))}function Fn(t,e,n){(n===it||zs(t[e],n))&&(n!==it||e in t)||tr(t,e,n)}function zn(t,e,n){var r=t[e];gl.call(t,e)&&zs(r,n)&&(n!==it||e in t)||tr(t,e,n)}function Qn(t,e){for(var n=t.length;n--;)if(zs(t[n][0],e))return n;return-1}function Gn(t,e,n,r){return vf(t,function(t,i,o){e(r,t,n(t),o)}),r}function Zn(t,e){return t&&Fi(e,qu(e),t)}function Yn(t,e){return t&&Fi(e,Hu(e),t)}function tr(t,e,n){"__proto__"==e&&Il?Il(t,e,{configurable:!0,enumerable:!0,value:n,writable:!0}):t[e]=n}function er(t,e){for(var n=-1,r=e.length,i=nl(r),o=null==t;++n<r;)i[n]=o?it:Pu(t,e[n]);return i}function nr(t,e,n){return t===t&&(n!==it&&(t=t<=n?t:n),e!==it&&(t=t>=e?t:e)),t}function rr(t,e,n,r,i,o){var a,s=e&ft,u=e&pt,l=e&dt;if(n&&(a=i?n(t,r,i,o):n(t)),a!==it)return a;if(!iu(t))return t;var f=mp(t);if(f){if(a=Oo(t),!s)return Pi(t,a)}else{var p=kf(t),d=p==Xt||p==Kt;if(bp(t))return $i(t,s);if(p==Zt||p==qt||d&&!i){if(a=u||d?{}:jo(t),!s)return u?qi(t,Yn(a,t)):Mi(t,Zn(a,t))}else{if(!Tn[p])return i?t:{};a=No(t,p,rr,s)}}o||(o=new _n);var h=o.get(t);if(h)return h;o.set(t,a);var v=l?u?bo:yo:u?Hu:qu,g=f?it:v(t);return c(g||t,function(r,i){g&&(i=r,r=t[i]),zn(a,i,rr(r,e,n,i,t,o))}),a}function ir(t){var e=qu(t);return function(n){return or(n,t,e)}}function or(t,e,n){var r=n.length;if(null==t)return!r;for(t=sl(t);r--;){var i=n[r],o=e[i],a=t[i];if(a===it&&!(i in t)||!o(a))return!1}return!0}function ar(t,e,n){if("function"!=typeof t)throw new ll(st);return Of(function(){t.apply(it,n)},e)}function sr(t,e,n,r){var i=-1,o=d,a=!0,s=t.length,u=[],c=e.length;if(!s)return u;n&&(e=v(e,L(n))),r?(o=h,a=!1):e.length>=ot&&(o=P,a=!1,e=new mn(e));t:for(;++i<s;){var l=t[i],f=null==n?l:n(l);if(l=r||0!==l?l:0,a&&f===f){for(var p=c;p--;)if(e[p]===f)continue t;u.push(l)}else o(e,f,r)||u.push(l)}return u}function ur(t,e){var n=!0;return vf(t,function(t,r,i){return n=!!e(t,r,i)}),n}function cr(t,e,n){for(var r=-1,i=t.length;++r<i;){var o=t[r],a=e(o);if(null!=a&&(s===it?a===a&&!gu(a):n(a,s)))var s=a,u=o}return u}function lr(t,e,n,r){var i=t.length;for(n=xu(n),n<0&&(n=-n>i?0:i+n),r=r===it||r>i?i:xu(r),r<0&&(r+=i),r=n>r?0:Cu(r);n<r;)t[n++]=e;return t}function fr(t,e){var n=[];return vf(t,function(t,r,i){e(t,r,i)&&n.push(t)}),n}function pr(t,e,n,r,i){var o=-1,a=t.length;for(n||(n=Io),i||(i=[]);++o<a;){var s=t[o];e>0&&n(s)?e>1?pr(s,e-1,n,r,i):g(i,s):r||(i[i.length]=s)}return i}function dr(t,e){return t&&mf(t,e,qu)}function hr(t,e){return t&&yf(t,e,qu)}function vr(t,e){return p(e,function(e){return eu(t[e])})}function gr(t,e){e=Ci(e,t);for(var n=0,r=e.length;null!=t&&n<r;)t=t[Yo(e[n++])];return n&&n==r?t:it}function mr(t,e,n){var r=e(t);return mp(t)?r:g(r,n(t))}function yr(t){return null==t?t===it?ie:Gt:Dl&&Dl in sl(t)?Ao(t):Vo(t)}function br(t,e){return t>e}function _r(t,e){return null!=t&&gl.call(t,e)}function wr(t,e){return null!=t&&e in sl(t)}function xr(t,e,n){return t>=Vl(e,n)&&t<zl(e,n)}function Cr(t,e,n){for(var r=n?h:d,i=t[0].length,o=t.length,a=o,s=nl(o),u=1/0,c=[];a--;){var l=t[a];a&&e&&(l=v(l,L(e))),u=Vl(l.length,u),s[a]=!n&&(e||i>=120&&l.length>=120)?new mn(a&&l):it}l=t[0];var f=-1,p=s[0];t:for(;++f<i&&c.length<u;){var g=l[f],m=e?e(g):g;if(g=n||0!==g?g:0,!(p?P(p,m):r(c,m,n))){for(a=o;--a;){var y=s[a];if(!(y?P(y,m):r(t[a],m,n)))continue t}p&&p.push(m),c.push(g)}}return c}function Tr(t,e,n,r){return dr(t,function(t,i,o){e(r,n(t),i,o)}),r}function $r(t,e,n){e=Ci(e,t),t=Ko(t,e);var r=null==t?t:t[Yo(wa(e))];return null==r?it:s(r,t,n)}function Ar(t){return ou(t)&&yr(t)==qt}function kr(t){return ou(t)&&yr(t)==se}function Er(t){return ou(t)&&yr(t)==Wt}function Sr(t,e,n,r,i){return t===e||(null==t||null==e||!ou(t)&&!ou(e)?t!==t&&e!==e:Or(t,e,n,r,Sr,i))}function Or(t,e,n,r,i,o){var a=mp(t),s=mp(e),u=a?Ht:kf(t),c=s?Ht:kf(e);u=u==qt?Zt:u,c=c==qt?Zt:c;var l=u==Zt,f=c==Zt,p=u==c;if(p&&bp(t)){if(!bp(e))return!1;a=!0,l=!1}if(p&&!l)return o||(o=new _n),a||Tp(t)?ho(t,e,n,r,i,o):vo(t,e,u,n,r,i,o);if(!(n&ht)){var d=l&&gl.call(t,"__wrapped__"),h=f&&gl.call(e,"__wrapped__");if(d||h){var v=d?t.value():t,g=h?e.value():e;return o||(o=new _n),i(v,g,n,r,o)}}return!!p&&(o||(o=new _n),go(t,e,n,r,i,o))}function jr(t){return ou(t)&&kf(t)==Jt}function Nr(t,e,n,r){var i=n.length,o=i,a=!r;if(null==t)return!o;for(t=sl(t);i--;){var s=n[i];if(a&&s[2]?s[1]!==t[s[0]]:!(s[0]in t))return!1}for(;++i<o;){s=n[i];var u=s[0],c=t[u],l=s[1];if(a&&s[2]){if(c===it&&!(u in t))return!1}else{var f=new _n;if(r)var p=r(c,l,u,t,e,f);if(!(p===it?Sr(l,c,ht|vt,r,f):p))return!1}}return!0}function Dr(t){return!(!iu(t)||qo(t))&&(eu(t)?xl:Ve).test(ta(t))}function Ir(t){return ou(t)&&yr(t)==te}function Lr(t){return ou(t)&&kf(t)==ee}function Rr(t){return ou(t)&&ru(t.length)&&!!Cn[yr(t)]}function Pr(t){return"function"==typeof t?t:null==t?Oc:"object"==typeof t?mp(t)?Ur(t[0],t[1]):Br(t):Fc(t)}function Fr(t){if(!Ho(t))return Wl(t);var e=[];for(var n in sl(t))gl.call(t,n)&&"constructor"!=n&&e.push(n);return e}function Mr(t){if(!iu(t))return zo(t);var e=Ho(t),n=[];for(var r in t)("constructor"!=r||!e&&gl.call(t,r))&&n.push(r);return n}function qr(t,e){return t<e}function Hr(t,e){var n=-1,r=Vs(t)?nl(t.length):[];return vf(t,function(t,i,o){r[++n]=e(t,i,o)}),r}function Br(t){var e=To(t);return 1==e.length&&e[0][2]?Uo(e[0][0],e[0][1]):function(n){return n===t||Nr(n,t,e)}}function Ur(t,e){return Po(t)&&Bo(e)?Uo(Yo(t),e):function(n){var r=Pu(n,t);return r===it&&r===e?Mu(n,t):Sr(e,r,ht|vt)}}function Wr(t,e,n,r,i){t!==e&&mf(e,function(o,a){if(iu(o))i||(i=new _n),zr(t,e,a,n,Wr,r,i);else{var s=r?r(t[a],o,a+"",t,e,i):it;s===it&&(s=o),Fn(t,a,s)}},Hu)}function zr(t,e,n,r,i,o,a){var s=t[n],u=e[n],c=a.get(u);if(c)return void Fn(t,n,c);var l=o?o(s,u,n+"",t,e,a):it,f=l===it;if(f){var p=mp(u),d=!p&&bp(u),h=!p&&!d&&Tp(u);l=u,p||d||h?mp(s)?l=s:Xs(s)?l=Pi(s):d?(f=!1,l=$i(u,!0)):h?(f=!1,l=Ni(u,!0)):l=[]:du(u)||gp(u)?(l=s,gp(s)?l=$u(s):(!iu(s)||r&&eu(s))&&(l=jo(u))):f=!1}f&&(a.set(u,l),i(l,u,r,o,a),a.delete(u)),Fn(t,n,l)}function Vr(t,e){var n=t.length;if(n)return e+=e<0?n:0,Lo(e,n)?t[e]:it}function Xr(t,e,n){var r=-1;return e=v(e.length?e:[Oc],L(xo())),j(Hr(t,function(t,n,i){return{criteria:v(e,function(e){return e(t)}),index:++r,value:t}}),function(t,e){return Ii(t,e,n)})}function Kr(t,e){return Jr(t,e,function(e,n){return Mu(t,n)})}function Jr(t,e,n){for(var r=-1,i=e.length,o={};++r<i;){var a=e[r],s=gr(t,a);n(s,a)&&oi(o,Ci(a,t),s)}return o}function Qr(t){return function(e){return gr(e,t)}}function Gr(t,e,n,r){var i=r?$:T,o=-1,a=e.length,s=t;for(t===e&&(e=Pi(e)),n&&(s=v(t,L(n)));++o<a;)for(var u=0,c=e[o],l=n?n(c):c;(u=i(s,l,u,r))>-1;)s!==t&&Ol.call(s,u,1),Ol.call(t,u,1);return t}function Zr(t,e){for(var n=t?e.length:0,r=n-1;n--;){var i=e[n];if(n==r||i!==o){var o=i;Lo(i)?Ol.call(t,i,1):vi(t,i)}}return t}function Yr(t,e){return t+Ml(Jl()*(e-t+1))}function ti(t,e,n,r){for(var i=-1,o=zl(Fl((e-t)/(n||1)),0),a=nl(o);o--;)a[r?o:++i]=t,t+=n;return a}function ei(t,e){var n="";if(!t||e<1||e>Dt)return n;do{e%2&&(n+=t),(e=Ml(e/2))&&(t+=t)}while(e);return n}function ni(t,e){return jf(Xo(t,e,Oc),t+"")}function ri(t){return In(Yu(t))}function ii(t,e){var n=Yu(t);return Zo(n,nr(e,0,n.length))}function oi(t,e,n,r){if(!iu(t))return t;e=Ci(e,t);for(var i=-1,o=e.length,a=o-1,s=t;null!=s&&++i<o;){var u=Yo(e[i]),c=n;if(i!=a){var l=s[u];c=r?r(l,u,s):it,c===it&&(c=iu(l)?l:Lo(e[i+1])?[]:{})}zn(s,u,c),s=s[u]}return t}function ai(t){return Zo(Yu(t))}function si(t,e,n){var r=-1,i=t.length;e<0&&(e=-e>i?0:i+e),n=n>i?i:n,n<0&&(n+=i),i=e>n?0:n-e>>>0,e>>>=0;for(var o=nl(i);++r<i;)o[r]=t[r+e];return o}function ui(t,e){var n;return vf(t,function(t,r,i){return!(n=e(t,r,i))}),!!n}function ci(t,e,n){var r=0,i=null==t?r:t.length;if("number"==typeof e&&e===e&&i<=Ft){for(;r<i;){var o=r+i>>>1,a=t[o];null!==a&&!gu(a)&&(n?a<=e:a<e)?r=o+1:i=o}return i}return li(t,e,Oc,n)}function li(t,e,n,r){e=n(e);for(var i=0,o=null==t?0:t.length,a=e!==e,s=null===e,u=gu(e),c=e===it;i<o;){var l=Ml((i+o)/2),f=n(t[l]),p=f!==it,d=null===f,h=f===f,v=gu(f);if(a)var g=r||h;else g=c?h&&(r||p):s?h&&p&&(r||!d):u?h&&p&&!d&&(r||!v):!d&&!v&&(r?f<=e:f<e);g?i=l+1:o=l}return Vl(o,Pt)}function fi(t,e){for(var n=-1,r=t.length,i=0,o=[];++n<r;){var a=t[n],s=e?e(a):a;if(!n||!zs(s,u)){var u=s;o[i++]=0===a?0:a}}return o}function pi(t){return"number"==typeof t?t:gu(t)?Lt:+t}function di(t){if("string"==typeof t)return t;if(mp(t))return v(t,di)+"";if(gu(t))return df?df.call(t):"";var e=t+"";return"0"==e&&1/t==-Nt?"-0":e}function hi(t,e,n){var r=-1,i=d,o=t.length,a=!0,s=[],u=s;if(n)a=!1,i=h;else if(o>=ot){var c=e?null:Cf(t);if(c)return J(c);a=!1,i=P,u=new mn}else u=e?[]:s;t:for(;++r<o;){var l=t[r],f=e?e(l):l;if(l=n||0!==l?l:0,a&&f===f){for(var p=u.length;p--;)if(u[p]===f)continue t;e&&u.push(f),s.push(l)}else i(u,f,n)||(u!==s&&u.push(f),s.push(l))}return s}function vi(t,e){return e=Ci(e,t),null==(t=Ko(t,e))||delete t[Yo(wa(e))]}function gi(t,e,n,r){return oi(t,e,n(gr(t,e)),r)}function mi(t,e,n,r){for(var i=t.length,o=r?i:-1;(r?o--:++o<i)&&e(t[o],o,t););return n?si(t,r?0:o,r?o+1:i):si(t,r?o+1:0,r?i:o)}function yi(t,e){var n=t;return n instanceof _&&(n=n.value()),m(e,function(t,e){return e.func.apply(e.thisArg,g([t],e.args))},n)}function bi(t,e,n){var r=t.length;if(r<2)return r?hi(t[0]):[];for(var i=-1,o=nl(r);++i<r;)for(var a=t[i],s=-1;++s<r;)s!=i&&(o[i]=sr(o[i]||a,t[s],e,n));return hi(pr(o,1),e,n)}function _i(t,e,n){for(var r=-1,i=t.length,o=e.length,a={};++r<i;){var s=r<o?e[r]:it;n(a,t[r],s)}return a}function wi(t){return Xs(t)?t:[]}function xi(t){return"function"==typeof t?t:Oc}function Ci(t,e){return mp(t)?t:Po(t,e)?[t]:Nf(ku(t))}function Ti(t,e,n){var r=t.length;return n=n===it?r:n,!e&&n>=r?t:si(t,e,n)}function $i(t,e){if(e)return t.slice();var n=t.length,r=Al?Al(n):new t.constructor(n);return t.copy(r),r}function Ai(t){var e=new t.constructor(t.byteLength);return new $l(e).set(new $l(t)),e}function ki(t,e){var n=e?Ai(t.buffer):t.buffer;return new t.constructor(n,t.byteOffset,t.byteLength)}function Ei(t,e,n){return m(e?n(V(t),ft):V(t),o,new t.constructor)}function Si(t){var e=new t.constructor(t.source,Ue.exec(t));return e.lastIndex=t.lastIndex,e}function Oi(t,e,n){return m(e?n(J(t),ft):J(t),a,new t.constructor)}function ji(t){return pf?sl(pf.call(t)):{}}function Ni(t,e){var n=e?Ai(t.buffer):t.buffer;return new t.constructor(n,t.byteOffset,t.length)}function Di(t,e){if(t!==e){var n=t!==it,r=null===t,i=t===t,o=gu(t),a=e!==it,s=null===e,u=e===e,c=gu(e);if(!s&&!c&&!o&&t>e||o&&a&&u&&!s&&!c||r&&a&&u||!n&&u||!i)return 1;if(!r&&!o&&!c&&t<e||c&&n&&i&&!r&&!o||s&&n&&i||!a&&i||!u)return-1}return 0}function Ii(t,e,n){for(var r=-1,i=t.criteria,o=e.criteria,a=i.length,s=n.length;++r<a;){var u=Di(i[r],o[r]);if(u){if(r>=s)return u;return u*("desc"==n[r]?-1:1)}}return t.index-e.index}function Li(t,e,n,r){for(var i=-1,o=t.length,a=n.length,s=-1,u=e.length,c=zl(o-a,0),l=nl(u+c),f=!r;++s<u;)l[s]=e[s];for(;++i<a;)(f||i<o)&&(l[n[i]]=t[i]);for(;c--;)l[s++]=t[i++];return l}function Ri(t,e,n,r){for(var i=-1,o=t.length,a=-1,s=n.length,u=-1,c=e.length,l=zl(o-s,0),f=nl(l+c),p=!r;++i<l;)f[i]=t[i];for(var d=i;++u<c;)f[d+u]=e[u];for(;++a<s;)(p||i<o)&&(f[d+n[a]]=t[i++]);return f}function Pi(t,e){var n=-1,r=t.length;for(e||(e=nl(r));++n<r;)e[n]=t[n];return e}function Fi(t,e,n,r){var i=!n;n||(n={});for(var o=-1,a=e.length;++o<a;){var s=e[o],u=r?r(n[s],t[s],s,n,t):it;u===it&&(u=t[s]),i?tr(n,s,u):zn(n,s,u)}return n}function Mi(t,e){return Fi(t,$f(t),e)}function qi(t,e){return Fi(t,Af(t),e)}function Hi(t,e){return function(n,r){var i=mp(n)?u:Gn,o=e?e():{};return i(n,t,xo(r,2),o)}}function Bi(t){return ni(function(e,n){var r=-1,i=n.length,o=i>1?n[i-1]:it,a=i>2?n[2]:it;for(o=t.length>3&&"function"==typeof o?(i--,o):it,a&&Ro(n[0],n[1],a)&&(o=i<3?it:o,i=1),e=sl(e);++r<i;){var s=n[r];s&&t(e,s,r,o)}return e})}function Ui(t,e){return function(n,r){if(null==n)return n;if(!Vs(n))return t(n,r);for(var i=n.length,o=e?i:-1,a=sl(n);(e?o--:++o<i)&&!1!==r(a[o],o,a););return n}}function Wi(t){return function(e,n,r){for(var i=-1,o=sl(e),a=r(e),s=a.length;s--;){var u=a[t?s:++i];if(!1===n(o[u],u,o))break}return e}}function zi(t,e,n){function r(){return(this&&this!==Dn&&this instanceof r?o:t).apply(i?n:this,arguments)}var i=e&gt,o=Ki(t);return r}function Vi(t){return function(e){e=ku(e);var n=U(e)?tt(e):it,r=n?n[0]:e.charAt(0),i=n?Ti(n,1).join(""):e.slice(1);return r[t]()+i}}function Xi(t){return function(e){return m($c(oc(e).replace(vn,"")),t,"")}}function Ki(t){return function(){var e=arguments;switch(e.length){case 0:return new t;case 1:return new t(e[0]);case 2:return new t(e[0],e[1]);case 3:return new t(e[0],e[1],e[2]);case 4:return new t(e[0],e[1],e[2],e[3]);case 5:return new t(e[0],e[1],e[2],e[3],e[4]);case 6:return new t(e[0],e[1],e[2],e[3],e[4],e[5]);case 7:return new t(e[0],e[1],e[2],e[3],e[4],e[5],e[6])}var n=hf(t.prototype),r=t.apply(n,e);return iu(r)?r:n}}function Ji(t,e,n){function r(){for(var o=arguments.length,a=nl(o),u=o,c=wo(r);u--;)a[u]=arguments[u];var l=o<3&&a[0]!==c&&a[o-1]!==c?[]:K(a,c);return(o-=l.length)<n?ao(t,e,Zi,r.placeholder,it,a,l,it,it,n-o):s(this&&this!==Dn&&this instanceof r?i:t,this,a)}var i=Ki(t);return r}function Qi(t){return function(e,n,r){var i=sl(e);if(!Vs(e)){var o=xo(n,3);e=qu(e),n=function(t){return o(i[t],t,i)}}var a=t(e,n,r);return a>-1?i[o?e[a]:a]:it}}function Gi(t){return mo(function(e){var n=e.length,r=n,o=i.prototype.thru;for(t&&e.reverse();r--;){var a=e[r];if("function"!=typeof a)throw new ll(st);if(o&&!s&&"wrapper"==_o(a))var s=new i([],!0)}for(r=s?r:n;++r<n;){a=e[r];var u=_o(a),c="wrapper"==u?Tf(a):it;s=c&&Mo(c[0])&&c[1]==(Ct|bt|wt|Tt)&&!c[4].length&&1==c[9]?s[_o(c[0])].apply(s,c[3]):1==a.length&&Mo(a)?s[u]():s.thru(a)}return function(){var t=arguments,r=t[0];if(s&&1==t.length&&mp(r))return s.plant(r).value();for(var i=0,o=n?e[i].apply(this,t):r;++i<n;)o=e[i].call(this,o);return o}})}function Zi(t,e,n,r,i,o,a,s,u,c){function l(){for(var m=arguments.length,y=nl(m),b=m;b--;)y[b]=arguments[b];if(h)var _=wo(l),w=q(y,_);if(r&&(y=Li(y,r,i,h)),o&&(y=Ri(y,o,a,h)),m-=w,h&&m<c){var x=K(y,_);return ao(t,e,Zi,l.placeholder,n,y,x,s,u,c-m)}var C=p?n:this,T=d?C[t]:t;return m=y.length,s?y=Jo(y,s):v&&m>1&&y.reverse(),f&&u<m&&(y.length=u),this&&this!==Dn&&this instanceof l&&(T=g||Ki(T)),T.apply(C,y)}var f=e&Ct,p=e&gt,d=e&mt,h=e&(bt|_t),v=e&$t,g=d?it:Ki(t);return l}function Yi(t,e){return function(n,r){return Tr(n,t,e(r),{})}}function to(t,e){return function(n,r){var i;if(n===it&&r===it)return e;if(n!==it&&(i=n),r!==it){if(i===it)return r;"string"==typeof n||"string"==typeof r?(n=di(n),r=di(r)):(n=pi(n),r=pi(r)),i=t(n,r)}return i}}function eo(t){return mo(function(e){return e=v(e,L(xo())),ni(function(n){var r=this;return t(e,function(t){return s(t,r,n)})})})}function no(t,e){e=e===it?" ":di(e);var n=e.length;if(n<2)return n?ei(e,t):e;var r=ei(e,Fl(t/Y(e)));return U(e)?Ti(tt(r),0,t).join(""):r.slice(0,t)}function ro(t,e,n,r){function i(){for(var e=-1,u=arguments.length,c=-1,l=r.length,f=nl(l+u),p=this&&this!==Dn&&this instanceof i?a:t;++c<l;)f[c]=r[c];for(;u--;)f[c++]=arguments[++e];return s(p,o?n:this,f)}var o=e&gt,a=Ki(t);return i}function io(t){return function(e,n,r){return r&&"number"!=typeof r&&Ro(e,n,r)&&(n=r=it),e=wu(e),n===it?(n=e,e=0):n=wu(n),r=r===it?e<n?1:-1:wu(r),ti(e,n,r,t)}}function oo(t){return function(e,n){return"string"==typeof e&&"string"==typeof n||(e=Tu(e),n=Tu(n)),t(e,n)}}function ao(t,e,n,r,i,o,a,s,u,c){var l=e&bt,f=l?a:it,p=l?it:a,d=l?o:it,h=l?it:o;e|=l?wt:xt,(e&=~(l?xt:wt))&yt||(e&=~(gt|mt));var v=[t,e,i,d,f,h,p,s,u,c],g=n.apply(it,v);return Mo(t)&&Sf(g,v),g.placeholder=r,Qo(g,t,e)}function so(t){var e=al[t];return function(t,n){if(t=Tu(t),n=null==n?0:Vl(xu(n),292)){var r=(ku(t)+"e").split("e");return r=(ku(e(r[0]+"e"+(+r[1]+n)))+"e").split("e"),+(r[0]+"e"+(+r[1]-n))}return e(t)}}function uo(t){return function(e){var n=kf(e);return n==Jt?V(e):n==ee?Q(e):I(e,t(e))}}function co(t,e,n,r,i,o,a,s){var u=e&mt;if(!u&&"function"!=typeof t)throw new ll(st);var c=r?r.length:0;if(c||(e&=~(wt|xt),r=i=it),a=a===it?a:zl(xu(a),0),s=s===it?s:xu(s),c-=i?i.length:0,e&xt){var l=r,f=i;r=i=it}var p=u?it:Tf(t),d=[t,e,n,r,i,l,f,o,a,s];if(p&&Wo(d,p),t=d[0],e=d[1],n=d[2],r=d[3],i=d[4],s=d[9]=d[9]===it?u?0:t.length:zl(d[9]-c,0),!s&&e&(bt|_t)&&(e&=~(bt|_t)),e&&e!=gt)h=e==bt||e==_t?Ji(t,e,s):e!=wt&&e!=(gt|wt)||i.length?Zi.apply(it,d):ro(t,e,n,r);else var h=zi(t,e,n);return Qo((p?bf:Sf)(h,d),t,e)}function lo(t,e,n,r){return t===it||zs(t,dl[n])&&!gl.call(r,n)?e:t}function fo(t,e,n,r,i,o){return iu(t)&&iu(e)&&(o.set(e,t),Wr(t,e,it,fo,o),o.delete(e)),t}function po(t){return du(t)?it:t}function ho(t,e,n,r,i,o){var a=n&ht,s=t.length,u=e.length;if(s!=u&&!(a&&u>s))return!1;var c=o.get(t);if(c&&o.get(e))return c==e;var l=-1,f=!0,p=n&vt?new mn:it;for(o.set(t,e),o.set(e,t);++l<s;){var d=t[l],h=e[l];if(r)var v=a?r(h,d,l,e,t,o):r(d,h,l,t,e,o);if(v!==it){if(v)continue;f=!1;break}if(p){if(!b(e,function(t,e){if(!P(p,e)&&(d===t||i(d,t,n,r,o)))return p.push(e)})){f=!1;break}}else if(d!==h&&!i(d,h,n,r,o)){f=!1;break}}return o.delete(t),o.delete(e),f}function vo(t,e,n,r,i,o,a){switch(n){case ue:if(t.byteLength!=e.byteLength||t.byteOffset!=e.byteOffset)return!1;t=t.buffer,e=e.buffer;case se:return!(t.byteLength!=e.byteLength||!o(new $l(t),new $l(e)));case Ut:case Wt:case Qt:return zs(+t,+e);case Vt:return t.name==e.name&&t.message==e.message;case te:case ne:return t==e+"";case Jt:var s=V;case ee:var u=r&ht;if(s||(s=J),t.size!=e.size&&!u)return!1;var c=a.get(t);if(c)return c==e;r|=vt,a.set(t,e);var l=ho(s(t),s(e),r,i,o,a);return a.delete(t),l;case re:if(pf)return pf.call(t)==pf.call(e)}return!1}function go(t,e,n,r,i,o){var a=n&ht,s=yo(t),u=s.length;if(u!=yo(e).length&&!a)return!1;for(var c=u;c--;){var l=s[c];if(!(a?l in e:gl.call(e,l)))return!1}var f=o.get(t);if(f&&o.get(e))return f==e;var p=!0;o.set(t,e),o.set(e,t);for(var d=a;++c<u;){l=s[c];var h=t[l],v=e[l];if(r)var g=a?r(v,h,l,e,t,o):r(h,v,l,t,e,o);if(!(g===it?h===v||i(h,v,n,r,o):g)){p=!1;break}d||(d="constructor"==l)}if(p&&!d){var m=t.constructor,y=e.constructor;m!=y&&"constructor"in t&&"constructor"in e&&!("function"==typeof m&&m instanceof m&&"function"==typeof y&&y instanceof y)&&(p=!1)}return o.delete(t),o.delete(e),p}function mo(t){return jf(Xo(t,it,da),t+"")}function yo(t){return mr(t,qu,$f)}function bo(t){return mr(t,Hu,Af)}function _o(t){for(var e=t.name+"",n=of[e],r=gl.call(of,e)?n.length:0;r--;){var i=n[r],o=i.func;if(null==o||o==t)return i.name}return e}function wo(t){return(gl.call(n,"placeholder")?n:t).placeholder}function xo(){var t=n.iteratee||jc;return t=t===jc?Pr:t,arguments.length?t(arguments[0],arguments[1]):t}function Co(t,e){var n=t.__data__;return Fo(e)?n["string"==typeof e?"string":"hash"]:n.map}function To(t){for(var e=qu(t),n=e.length;n--;){var r=e[n],i=t[r];e[n]=[r,i,Bo(i)]}return e}function $o(t,e){var n=B(t,e);return Dr(n)?n:it}function Ao(t){var e=gl.call(t,Dl),n=t[Dl];try{t[Dl]=it;var r=!0}catch(t){}var i=bl.call(t);return r&&(e?t[Dl]=n:delete t[Dl]),i}function ko(t,e,n){for(var r=-1,i=n.length;++r<i;){var o=n[r],a=o.size;switch(o.type){case"drop":t+=a;break;case"dropRight":e-=a;break;case"take":e=Vl(e,t+a);break;case"takeRight":t=zl(t,e-a)}}return{start:t,end:e}}function Eo(t){var e=t.match(Fe);return e?e[1].split(Me):[]}function So(t,e,n){e=Ci(e,t);for(var r=-1,i=e.length,o=!1;++r<i;){var a=Yo(e[r]);if(!(o=null!=t&&n(t,a)))break;t=t[a]}return o||++r!=i?o:!!(i=null==t?0:t.length)&&ru(i)&&Lo(a,i)&&(mp(t)||gp(t))}function Oo(t){var e=t.length,n=t.constructor(e);return e&&"string"==typeof t[0]&&gl.call(t,"index")&&(n.index=t.index,n.input=t.input),n}function jo(t){return"function"!=typeof t.constructor||Ho(t)?{}:hf(kl(t))}function No(t,e,n,r){var i=t.constructor;switch(e){case se:return Ai(t);case Ut:case Wt:return new i(+t);case ue:return ki(t,r);case ce:case le:case fe:case pe:case de:case he:case ve:case ge:case me:return Ni(t,r);case Jt:return Ei(t,r,n);case Qt:case ne:return new i(t);case te:return Si(t);case ee:return Oi(t,r,n);case re:return ji(t)}}function Do(t,e){var n=e.length;if(!n)return t;var r=n-1;return e[r]=(n>1?"& ":"")+e[r],e=e.join(n>2?", ":" "),t.replace(Pe,"{\n/* [wrapped with "+e+"] */\n")}function Io(t){return mp(t)||gp(t)||!!(jl&&t&&t[jl])}function Lo(t,e){return!!(e=null==e?Dt:e)&&("number"==typeof t||Ke.test(t))&&t>-1&&t%1==0&&t<e}function Ro(t,e,n){if(!iu(n))return!1;var r=typeof e;return!!("number"==r?Vs(n)&&Lo(e,n.length):"string"==r&&e in n)&&zs(n[e],t)}function Po(t,e){if(mp(t))return!1;var n=typeof t;return!("number"!=n&&"symbol"!=n&&"boolean"!=n&&null!=t&&!gu(t))||(Se.test(t)||!Ee.test(t)||null!=e&&t in sl(e))}function Fo(t){var e=typeof t;return"string"==e||"number"==e||"symbol"==e||"boolean"==e?"__proto__"!==t:null===t}function Mo(t){var e=_o(t),r=n[e];if("function"!=typeof r||!(e in _.prototype))return!1;if(t===r)return!0;var i=Tf(r);return!!i&&t===i[0]}function qo(t){return!!yl&&yl in t}function Ho(t){var e=t&&t.constructor;return t===("function"==typeof e&&e.prototype||dl)}function Bo(t){return t===t&&!iu(t)}function Uo(t,e){return function(n){return null!=n&&(n[t]===e&&(e!==it||t in sl(n)))}}function Wo(t,e){var n=t[1],r=e[1],i=n|r,o=i<(gt|mt|Ct),a=r==Ct&&n==bt||r==Ct&&n==Tt&&t[7].length<=e[8]||r==(Ct|Tt)&&e[7].length<=e[8]&&n==bt;if(!o&&!a)return t;r&gt&&(t[2]=e[2],i|=n&gt?0:yt);var s=e[3];if(s){var u=t[3];t[3]=u?Li(u,s,e[4]):s,t[4]=u?K(t[3],lt):e[4]}return s=e[5],s&&(u=t[5],t[5]=u?Ri(u,s,e[6]):s,t[6]=u?K(t[5],lt):e[6]),s=e[7],s&&(t[7]=s),r&Ct&&(t[8]=null==t[8]?e[8]:Vl(t[8],e[8])),null==t[9]&&(t[9]=e[9]),t[0]=e[0],t[1]=i,t}function zo(t){var e=[];if(null!=t)for(var n in sl(t))e.push(n);return e}function Vo(t){return bl.call(t)}function Xo(t,e,n){return e=zl(e===it?t.length-1:e,0),function(){for(var r=arguments,i=-1,o=zl(r.length-e,0),a=nl(o);++i<o;)a[i]=r[e+i];i=-1;for(var u=nl(e+1);++i<e;)u[i]=r[i];return u[e]=n(a),s(t,this,u)}}function Ko(t,e){return e.length<2?t:gr(t,si(e,0,-1))}function Jo(t,e){for(var n=t.length,r=Vl(e.length,n),i=Pi(t);r--;){var o=e[r];t[r]=Lo(o,n)?i[o]:it}return t}function Qo(t,e,n){var r=e+"";return jf(t,Do(r,ea(Eo(r),n)))}function Go(t){var e=0,n=0;return function(){var r=Xl(),i=St-(r-n);if(n=r,i>0){if(++e>=Et)return arguments[0]}else e=0;return t.apply(it,arguments)}}function Zo(t,e){var n=-1,r=t.length,i=r-1;for(e=e===it?r:e;++n<e;){var o=Yr(n,i),a=t[o];t[o]=t[n],t[n]=a}return t.length=e,t}function Yo(t){if("string"==typeof t||gu(t))return t;var e=t+"";return"0"==e&&1/t==-Nt?"-0":e}function ta(t){if(null!=t){try{return vl.call(t)}catch(t){}try{return t+""}catch(t){}}return""}function ea(t,e){return c(Mt,function(n){var r="_."+n[0];e&n[1]&&!d(t,r)&&t.push(r)}),t.sort()}function na(t){if(t instanceof _)return t.clone();var e=new i(t.__wrapped__,t.__chain__);return e.__actions__=Pi(t.__actions__),e.__index__=t.__index__,e.__values__=t.__values__,e}function ra(t,e,n){e=(n?Ro(t,e,n):e===it)?1:zl(xu(e),0);var r=null==t?0:t.length;if(!r||e<1)return[];for(var i=0,o=0,a=nl(Fl(r/e));i<r;)a[o++]=si(t,i,i+=e);return a}function ia(t){for(var e=-1,n=null==t?0:t.length,r=0,i=[];++e<n;){var o=t[e];o&&(i[r++]=o)}return i}function oa(){var t=arguments.length;if(!t)return[];for(var e=nl(t-1),n=arguments[0],r=t;r--;)e[r-1]=arguments[r];return g(mp(n)?Pi(n):[n],pr(e,1))}function aa(t,e,n){var r=null==t?0:t.length;return r?(e=n||e===it?1:xu(e),si(t,e<0?0:e,r)):[]}function sa(t,e,n){var r=null==t?0:t.length;return r?(e=n||e===it?1:xu(e),e=r-e,si(t,0,e<0?0:e)):[]}function ua(t,e){return t&&t.length?mi(t,xo(e,3),!0,!0):[]}function ca(t,e){return t&&t.length?mi(t,xo(e,3),!0):[]}function la(t,e,n,r){var i=null==t?0:t.length;return i?(n&&"number"!=typeof n&&Ro(t,e,n)&&(n=0,r=i),lr(t,e,n,r)):[]}function fa(t,e,n){var r=null==t?0:t.length;if(!r)return-1;var i=null==n?0:xu(n);return i<0&&(i=zl(r+i,0)),C(t,xo(e,3),i)}function pa(t,e,n){var r=null==t?0:t.length;if(!r)return-1;var i=r-1;return n!==it&&(i=xu(n),i=n<0?zl(r+i,0):Vl(i,r-1)),C(t,xo(e,3),i,!0)}function da(t){return(null==t?0:t.length)?pr(t,1):[]}function ha(t){return(null==t?0:t.length)?pr(t,Nt):[]}function va(t,e){return(null==t?0:t.length)?(e=e===it?1:xu(e),pr(t,e)):[]}function ga(t){for(var e=-1,n=null==t?0:t.length,r={};++e<n;){var i=t[e];r[i[0]]=i[1]}return r}function ma(t){return t&&t.length?t[0]:it}function ya(t,e,n){var r=null==t?0:t.length;if(!r)return-1;var i=null==n?0:xu(n);return i<0&&(i=zl(r+i,0)),T(t,e,i)}function ba(t){return(null==t?0:t.length)?si(t,0,-1):[]}function _a(t,e){return null==t?"":Ul.call(t,e)}function wa(t){var e=null==t?0:t.length;return e?t[e-1]:it}function xa(t,e,n){var r=null==t?0:t.length;if(!r)return-1;var i=r;return n!==it&&(i=xu(n),i=i<0?zl(r+i,0):Vl(i,r-1)),e===e?Z(t,e,i):C(t,A,i,!0)}function Ca(t,e){return t&&t.length?Vr(t,xu(e)):it}function Ta(t,e){return t&&t.length&&e&&e.length?Gr(t,e):t}function $a(t,e,n){return t&&t.length&&e&&e.length?Gr(t,e,xo(n,2)):t}function Aa(t,e,n){return t&&t.length&&e&&e.length?Gr(t,e,it,n):t}function ka(t,e){var n=[];if(!t||!t.length)return n;var r=-1,i=[],o=t.length;for(e=xo(e,3);++r<o;){var a=t[r];e(a,r,t)&&(n.push(a),i.push(r))}return Zr(t,i),n}function Ea(t){return null==t?t:Ql.call(t)}function Sa(t,e,n){var r=null==t?0:t.length;return r?(n&&"number"!=typeof n&&Ro(t,e,n)?(e=0,n=r):(e=null==e?0:xu(e),n=n===it?r:xu(n)),si(t,e,n)):[]}function Oa(t,e){return ci(t,e)}function ja(t,e,n){return li(t,e,xo(n,2))}function Na(t,e){var n=null==t?0:t.length;if(n){var r=ci(t,e);if(r<n&&zs(t[r],e))return r}return-1}function Da(t,e){return ci(t,e,!0)}function Ia(t,e,n){return li(t,e,xo(n,2),!0)}function La(t,e){if(null==t?0:t.length){var n=ci(t,e,!0)-1;if(zs(t[n],e))return n}return-1}function Ra(t){return t&&t.length?fi(t):[]}function Pa(t,e){return t&&t.length?fi(t,xo(e,2)):[]}function Fa(t){var e=null==t?0:t.length;return e?si(t,1,e):[]}function Ma(t,e,n){return t&&t.length?(e=n||e===it?1:xu(e),si(t,0,e<0?0:e)):[]}function qa(t,e,n){var r=null==t?0:t.length;return r?(e=n||e===it?1:xu(e),e=r-e,si(t,e<0?0:e,r)):[]}function Ha(t,e){return t&&t.length?mi(t,xo(e,3),!1,!0):[]}function Ba(t,e){return t&&t.length?mi(t,xo(e,3)):[]}function Ua(t){return t&&t.length?hi(t):[]}function Wa(t,e){return t&&t.length?hi(t,xo(e,2)):[]}function za(t,e){return e="function"==typeof e?e:it,t&&t.length?hi(t,it,e):[]}function Va(t){if(!t||!t.length)return[];var e=0;return t=p(t,function(t){if(Xs(t))return e=zl(t.length,e),!0}),D(e,function(e){return v(t,E(e))})}function Xa(t,e){if(!t||!t.length)return[];var n=Va(t);return null==e?n:v(n,function(t){return s(e,it,t)})}function Ka(t,e){return _i(t||[],e||[],zn)}function Ja(t,e){return _i(t||[],e||[],oi)}function Qa(t){var e=n(t);return e.__chain__=!0,e}function Ga(t,e){return e(t),t}function Za(t,e){return e(t)}function Ya(){return Qa(this)}function ts(){return new i(this.value(),this.__chain__)}function es(){this.__values__===it&&(this.__values__=_u(this.value()));var t=this.__index__>=this.__values__.length;return{done:t,value:t?it:this.__values__[this.__index__++]}}function ns(){return this}function rs(t){for(var e,n=this;n instanceof r;){var i=na(n);i.__index__=0,i.__values__=it,e?o.__wrapped__=i:e=i;var o=i;n=n.__wrapped__}return o.__wrapped__=t,e}function is(){var t=this.__wrapped__;if(t instanceof _){var e=t;return this.__actions__.length&&(e=new _(this)),e=e.reverse(),e.__actions__.push({func:Za,args:[Ea],thisArg:it}),new i(e,this.__chain__)}return this.thru(Ea)}function os(){return yi(this.__wrapped__,this.__actions__)}function as(t,e,n){var r=mp(t)?f:ur;return n&&Ro(t,e,n)&&(e=it),r(t,xo(e,3))}function ss(t,e){return(mp(t)?p:fr)(t,xo(e,3))}function us(t,e){return pr(hs(t,e),1)}function cs(t,e){return pr(hs(t,e),Nt)}function ls(t,e,n){return n=n===it?1:xu(n),pr(hs(t,e),n)}function fs(t,e){return(mp(t)?c:vf)(t,xo(e,3))}function ps(t,e){return(mp(t)?l:gf)(t,xo(e,3))}function ds(t,e,n,r){t=Vs(t)?t:Yu(t),n=n&&!r?xu(n):0;var i=t.length;return n<0&&(n=zl(i+n,0)),vu(t)?n<=i&&t.indexOf(e,n)>-1:!!i&&T(t,e,n)>-1}function hs(t,e){return(mp(t)?v:Hr)(t,xo(e,3))}function vs(t,e,n,r){return null==t?[]:(mp(e)||(e=null==e?[]:[e]),n=r?it:n,mp(n)||(n=null==n?[]:[n]),Xr(t,e,n))}function gs(t,e,n){var r=mp(t)?m:O,i=arguments.length<3;return r(t,xo(e,4),n,i,vf)}function ms(t,e,n){var r=mp(t)?y:O,i=arguments.length<3;return r(t,xo(e,4),n,i,gf)}function ys(t,e){return(mp(t)?p:fr)(t,Ns(xo(e,3)))}function bs(t){return(mp(t)?In:ri)(t)}function _s(t,e,n){return e=(n?Ro(t,e,n):e===it)?1:xu(e),(mp(t)?Ln:ii)(t,e)}function ws(t){return(mp(t)?Pn:ai)(t)}function xs(t){if(null==t)return 0;if(Vs(t))return vu(t)?Y(t):t.length;var e=kf(t);return e==Jt||e==ee?t.size:Fr(t).length}function Cs(t,e,n){var r=mp(t)?b:ui;return n&&Ro(t,e,n)&&(e=it),r(t,xo(e,3))}function Ts(t,e){if("function"!=typeof e)throw new ll(st);return t=xu(t),function(){if(--t<1)return e.apply(this,arguments)}}function $s(t,e,n){return e=n?it:e,e=t&&null==e?t.length:e,co(t,Ct,it,it,it,it,e)}function As(t,e){var n;if("function"!=typeof e)throw new ll(st);return t=xu(t),function(){return--t>0&&(n=e.apply(this,arguments)),t<=1&&(e=it),n}}function ks(t,e,n){e=n?it:e;var r=co(t,bt,it,it,it,it,it,e);return r.placeholder=ks.placeholder,r}function Es(t,e,n){e=n?it:e;var r=co(t,_t,it,it,it,it,it,e);return r.placeholder=Es.placeholder,r}function Ss(t,e,n){function r(e){var n=p,r=d;return p=d=it,y=e,v=t.apply(r,n)}function i(t){return y=t,g=Of(s,e),b?r(t):v}function o(t){var n=t-m,r=t-y,i=e-n;return _?Vl(i,h-r):i}function a(t){var n=t-m,r=t-y;return m===it||n>=e||n<0||_&&r>=h}function s(){var t=op();if(a(t))return u(t);g=Of(s,o(t))}function u(t){return g=it,w&&p?r(t):(p=d=it,v)}function c(){g!==it&&xf(g),y=0,p=m=d=g=it}function l(){return g===it?v:u(op())}function f(){var t=op(),n=a(t);if(p=arguments,d=this,m=t,n){if(g===it)return i(m);if(_)return g=Of(s,e),r(m)}return g===it&&(g=Of(s,e)),v}var p,d,h,v,g,m,y=0,b=!1,_=!1,w=!0;if("function"!=typeof t)throw new ll(st);return e=Tu(e)||0,iu(n)&&(b=!!n.leading,_="maxWait"in n,h=_?zl(Tu(n.maxWait)||0,e):h,w="trailing"in n?!!n.trailing:w),f.cancel=c,f.flush=l,f}function Os(t){return co(t,$t)}function js(t,e){if("function"!=typeof t||null!=e&&"function"!=typeof e)throw new ll(st);var n=function(){var r=arguments,i=e?e.apply(this,r):r[0],o=n.cache;if(o.has(i))return o.get(i);var a=t.apply(this,r);return n.cache=o.set(i,a)||o,a};return n.cache=new(js.Cache||cn),n}function Ns(t){if("function"!=typeof t)throw new ll(st);return function(){var e=arguments;switch(e.length){case 0:return!t.call(this);case 1:return!t.call(this,e[0]);case 2:return!t.call(this,e[0],e[1]);case 3:return!t.call(this,e[0],e[1],e[2])}return!t.apply(this,e)}}function Ds(t){return As(2,t)}function Is(t,e){if("function"!=typeof t)throw new ll(st);return e=e===it?e:xu(e),ni(t,e)}function Ls(t,e){if("function"!=typeof t)throw new ll(st);return e=null==e?0:zl(xu(e),0),ni(function(n){var r=n[e],i=Ti(n,0,e);return r&&g(i,r),s(t,this,i)})}function Rs(t,e,n){var r=!0,i=!0;if("function"!=typeof t)throw new ll(st);return iu(n)&&(r="leading"in n?!!n.leading:r,i="trailing"in n?!!n.trailing:i),Ss(t,e,{leading:r,maxWait:e,trailing:i})}function Ps(t){return $s(t,1)}function Fs(t,e){return fp(xi(e),t)}function Ms(){if(!arguments.length)return[];var t=arguments[0];return mp(t)?t:[t]}function qs(t){return rr(t,dt)}function Hs(t,e){return e="function"==typeof e?e:it,rr(t,dt,e)}function Bs(t){return rr(t,ft|dt)}function Us(t,e){return e="function"==typeof e?e:it,rr(t,ft|dt,e)}function Ws(t,e){return null==e||or(t,e,qu(e))}function zs(t,e){return t===e||t!==t&&e!==e}function Vs(t){return null!=t&&ru(t.length)&&!eu(t)}function Xs(t){return ou(t)&&Vs(t)}function Ks(t){return!0===t||!1===t||ou(t)&&yr(t)==Ut}function Js(t){return ou(t)&&1===t.nodeType&&!du(t)}function Qs(t){if(null==t)return!0;if(Vs(t)&&(mp(t)||"string"==typeof t||"function"==typeof t.splice||bp(t)||Tp(t)||gp(t)))return!t.length;var e=kf(t);if(e==Jt||e==ee)return!t.size;if(Ho(t))return!Fr(t).length;for(var n in t)if(gl.call(t,n))return!1;return!0}function Gs(t,e){return Sr(t,e)}function Zs(t,e,n){n="function"==typeof n?n:it;var r=n?n(t,e):it;return r===it?Sr(t,e,it,n):!!r}function Ys(t){if(!ou(t))return!1;var e=yr(t);return e==Vt||e==zt||"string"==typeof t.message&&"string"==typeof t.name&&!du(t)}function tu(t){return"number"==typeof t&&Bl(t)}function eu(t){if(!iu(t))return!1;var e=yr(t);return e==Xt||e==Kt||e==Bt||e==Yt}function nu(t){return"number"==typeof t&&t==xu(t)}function ru(t){return"number"==typeof t&&t>-1&&t%1==0&&t<=Dt}function iu(t){var e=typeof t;return null!=t&&("object"==e||"function"==e)}function ou(t){return null!=t&&"object"==typeof t}function au(t,e){return t===e||Nr(t,e,To(e))}function su(t,e,n){return n="function"==typeof n?n:it,Nr(t,e,To(e),n)}function uu(t){return pu(t)&&t!=+t}function cu(t){if(Ef(t))throw new il(at);return Dr(t)}function lu(t){return null===t}function fu(t){return null==t}function pu(t){return"number"==typeof t||ou(t)&&yr(t)==Qt}function du(t){if(!ou(t)||yr(t)!=Zt)return!1;var e=kl(t);if(null===e)return!0;var n=gl.call(e,"constructor")&&e.constructor;return"function"==typeof n&&n instanceof n&&vl.call(n)==_l}function hu(t){return nu(t)&&t>=-Dt&&t<=Dt}function vu(t){return"string"==typeof t||!mp(t)&&ou(t)&&yr(t)==ne}function gu(t){return"symbol"==typeof t||ou(t)&&yr(t)==re}function mu(t){return t===it}function yu(t){return ou(t)&&kf(t)==oe}function bu(t){return ou(t)&&yr(t)==ae}function _u(t){if(!t)return[];if(Vs(t))return vu(t)?tt(t):Pi(t);if(Nl&&t[Nl])return z(t[Nl]());var e=kf(t);return(e==Jt?V:e==ee?J:Yu)(t)}function wu(t){if(!t)return 0===t?t:0;if((t=Tu(t))===Nt||t===-Nt){return(t<0?-1:1)*It}return t===t?t:0}function xu(t){var e=wu(t),n=e%1;return e===e?n?e-n:e:0}function Cu(t){return t?nr(xu(t),0,Rt):0}function Tu(t){if("number"==typeof t)return t;if(gu(t))return Lt;if(iu(t)){var e="function"==typeof t.valueOf?t.valueOf():t;t=iu(e)?e+"":e}if("string"!=typeof t)return 0===t?t:+t;t=t.replace(Ie,"");var n=ze.test(t);return n||Xe.test(t)?On(t.slice(2),n?2:8):We.test(t)?Lt:+t}function $u(t){return Fi(t,Hu(t))}function Au(t){return t?nr(xu(t),-Dt,Dt):0===t?t:0}function ku(t){return null==t?"":di(t)}function Eu(t,e){var n=hf(t);return null==e?n:Zn(n,e)}function Su(t,e){return x(t,xo(e,3),dr)}function Ou(t,e){return x(t,xo(e,3),hr)}function ju(t,e){return null==t?t:mf(t,xo(e,3),Hu)}function Nu(t,e){return null==t?t:yf(t,xo(e,3),Hu)}function Du(t,e){return t&&dr(t,xo(e,3))}function Iu(t,e){return t&&hr(t,xo(e,3))}function Lu(t){return null==t?[]:vr(t,qu(t))}function Ru(t){return null==t?[]:vr(t,Hu(t))}function Pu(t,e,n){var r=null==t?it:gr(t,e);return r===it?n:r}function Fu(t,e){return null!=t&&So(t,e,_r)}function Mu(t,e){return null!=t&&So(t,e,wr)}function qu(t){return Vs(t)?Nn(t):Fr(t)}function Hu(t){return Vs(t)?Nn(t,!0):Mr(t)}function Bu(t,e){var n={};return e=xo(e,3),dr(t,function(t,r,i){tr(n,e(t,r,i),t)}),n}function Uu(t,e){var n={};return e=xo(e,3),dr(t,function(t,r,i){tr(n,r,e(t,r,i))}),n}function Wu(t,e){return zu(t,Ns(xo(e)))}function zu(t,e){if(null==t)return{};var n=v(bo(t),function(t){return[t]});return e=xo(e),Jr(t,n,function(t,n){return e(t,n[0])})}function Vu(t,e,n){e=Ci(e,t);var r=-1,i=e.length;for(i||(i=1,t=it);++r<i;){var o=null==t?it:t[Yo(e[r])];o===it&&(r=i,o=n),t=eu(o)?o.call(t):o}return t}function Xu(t,e,n){return null==t?t:oi(t,e,n)}function Ku(t,e,n,r){return r="function"==typeof r?r:it,null==t?t:oi(t,e,n,r)}function Ju(t,e,n){var r=mp(t),i=r||bp(t)||Tp(t);if(e=xo(e,4),null==n){var o=t&&t.constructor;n=i?r?new o:[]:iu(t)&&eu(o)?hf(kl(t)):{}}return(i?c:dr)(t,function(t,r,i){return e(n,t,r,i)}),n}function Qu(t,e){return null==t||vi(t,e)}function Gu(t,e,n){return null==t?t:gi(t,e,xi(n))}function Zu(t,e,n,r){return r="function"==typeof r?r:it,null==t?t:gi(t,e,xi(n),r)}function Yu(t){return null==t?[]:R(t,qu(t))}function tc(t){return null==t?[]:R(t,Hu(t))}function ec(t,e,n){return n===it&&(n=e,e=it),n!==it&&(n=Tu(n),n=n===n?n:0),e!==it&&(e=Tu(e),e=e===e?e:0),nr(Tu(t),e,n)}function nc(t,e,n){return e=wu(e),n===it?(n=e,e=0):n=wu(n),t=Tu(t),xr(t,e,n)}function rc(t,e,n){if(n&&"boolean"!=typeof n&&Ro(t,e,n)&&(e=n=it),n===it&&("boolean"==typeof e?(n=e,e=it):"boolean"==typeof t&&(n=t,t=it)),t===it&&e===it?(t=0,e=1):(t=wu(t),e===it?(e=t,t=0):e=wu(e)),t>e){var r=t;t=e,e=r}if(n||t%1||e%1){var i=Jl();return Vl(t+i*(e-t+Sn("1e-"+((i+"").length-1))),e)}return Yr(t,e)}function ic(t){return Qp(ku(t).toLowerCase())}function oc(t){return(t=ku(t))&&t.replace(Je,Vn).replace(gn,"")}function ac(t,e,n){t=ku(t),e=di(e);var r=t.length;n=n===it?r:nr(xu(n),0,r);var i=n;return(n-=e.length)>=0&&t.slice(n,i)==e}function sc(t){return t=ku(t),t&&Te.test(t)?t.replace(xe,Xn):t}function uc(t){return t=ku(t),t&&De.test(t)?t.replace(Ne,"\\$&"):t}function cc(t,e,n){t=ku(t),e=xu(e);var r=e?Y(t):0;if(!e||r>=e)return t;var i=(e-r)/2;return no(Ml(i),n)+t+no(Fl(i),n)}function lc(t,e,n){t=ku(t),e=xu(e);var r=e?Y(t):0;return e&&r<e?t+no(e-r,n):t}function fc(t,e,n){t=ku(t),e=xu(e);var r=e?Y(t):0;return e&&r<e?no(e-r,n)+t:t}function pc(t,e,n){return n||null==e?e=0:e&&(e=+e),Kl(ku(t).replace(Le,""),e||0)}function dc(t,e,n){return e=(n?Ro(t,e,n):e===it)?1:xu(e),ei(ku(t),e)}function hc(){var t=arguments,e=ku(t[0]);return t.length<3?e:e.replace(t[1],t[2])}function vc(t,e,n){return n&&"number"!=typeof n&&Ro(t,e,n)&&(e=n=it),(n=n===it?Rt:n>>>0)?(t=ku(t),t&&("string"==typeof e||null!=e&&!xp(e))&&!(e=di(e))&&U(t)?Ti(tt(t),0,n):t.split(e,n)):[]}function gc(t,e,n){return t=ku(t),n=null==n?0:nr(xu(n),0,t.length),e=di(e),t.slice(n,n+e.length)==e}function mc(t,e,r){var i=n.templateSettings;r&&Ro(t,e,r)&&(e=it),t=ku(t),e=Sp({},e,i,lo);var o,a,s=Sp({},e.imports,i.imports,lo),u=qu(s),c=R(s,u),l=0,f=e.interpolate||Qe,p="__p += '",d=ul((e.escape||Qe).source+"|"+f.source+"|"+(f===ke?Be:Qe).source+"|"+(e.evaluate||Qe).source+"|$","g"),h="//# sourceURL="+("sourceURL"in e?e.sourceURL:"lodash.templateSources["+ ++xn+"]")+"\n";t.replace(d,function(e,n,r,i,s,u){return r||(r=i),p+=t.slice(l,u).replace(Ge,H),n&&(o=!0,p+="' +\n__e("+n+") +\n'"),s&&(a=!0,p+="';\n"+s+";\n__p += '"),r&&(p+="' +\n((__t = ("+r+")) == null ? '' : __t) +\n'"),l=u+e.length,e}),p+="';\n";var v=e.variable;v||(p="with (obj) {\n"+p+"\n}\n"),p=(a?p.replace(ye,""):p).replace(be,"$1").replace(_e,"$1;"),p="function("+(v||"obj")+") {\n"+(v?"":"obj || (obj = {});\n")+"var __t, __p = ''"+(o?", __e = _.escape":"")+(a?", __j = Array.prototype.join;\nfunction print() { __p += __j.call(arguments, '') }\n":";\n")+p+"return __p\n}";var g=Gp(function(){return ol(u,h+"return "+p).apply(it,c)});if(g.source=p,Ys(g))throw g;return g}function yc(t){return ku(t).toLowerCase()}function bc(t){return ku(t).toUpperCase()}function _c(t,e,n){if((t=ku(t))&&(n||e===it))return t.replace(Ie,"");if(!t||!(e=di(e)))return t;var r=tt(t),i=tt(e);return Ti(r,F(r,i),M(r,i)+1).join("")}function wc(t,e,n){if((t=ku(t))&&(n||e===it))return t.replace(Re,"");if(!t||!(e=di(e)))return t;var r=tt(t);return Ti(r,0,M(r,tt(e))+1).join("")}function xc(t,e,n){if((t=ku(t))&&(n||e===it))return t.replace(Le,"");if(!t||!(e=di(e)))return t;var r=tt(t);return Ti(r,F(r,tt(e))).join("")}function Cc(t,e){var n=At,r=kt;if(iu(e)){var i="separator"in e?e.separator:i;n="length"in e?xu(e.length):n,r="omission"in e?di(e.omission):r}t=ku(t);var o=t.length;if(U(t)){var a=tt(t);o=a.length}if(n>=o)return t;var s=n-Y(r);if(s<1)return r;var u=a?Ti(a,0,s).join(""):t.slice(0,s);if(i===it)return u+r;if(a&&(s+=u.length-s),xp(i)){if(t.slice(s).search(i)){var c,l=u;for(i.global||(i=ul(i.source,ku(Ue.exec(i))+"g")),i.lastIndex=0;c=i.exec(l);)var f=c.index;u=u.slice(0,f===it?s:f)}}else if(t.indexOf(di(i),s)!=s){var p=u.lastIndexOf(i);p>-1&&(u=u.slice(0,p))}return u+r}function Tc(t){return t=ku(t),t&&Ce.test(t)?t.replace(we,Kn):t}function $c(t,e,n){return t=ku(t),e=n?it:e,e===it?W(t)?rt(t):w(t):t.match(e)||[]}function Ac(t){var e=null==t?0:t.length,n=xo();return t=e?v(t,function(t){if("function"!=typeof t[1])throw new ll(st);return[n(t[0]),t[1]]}):[],ni(function(n){for(var r=-1;++r<e;){var i=t[r];if(s(i[0],this,n))return s(i[1],this,n)}})}function kc(t){return ir(rr(t,ft))}function Ec(t){return function(){return t}}function Sc(t,e){return null==t||t!==t?e:t}function Oc(t){return t}function jc(t){return Pr("function"==typeof t?t:rr(t,ft))}function Nc(t){return Br(rr(t,ft))}function Dc(t,e){return Ur(t,rr(e,ft))}function Ic(t,e,n){var r=qu(e),i=vr(e,r);null!=n||iu(e)&&(i.length||!r.length)||(n=e,e=t,t=this,i=vr(e,qu(e)));var o=!(iu(n)&&"chain"in n&&!n.chain),a=eu(t);return c(i,function(n){var r=e[n];t[n]=r,a&&(t.prototype[n]=function(){var e=this.__chain__;if(o||e){var n=t(this.__wrapped__);return(n.__actions__=Pi(this.__actions__)).push({func:r,args:arguments,thisArg:t}),n.__chain__=e,n}return r.apply(t,g([this.value()],arguments))})}),t}function Lc(){return Dn._===this&&(Dn._=wl),this}function Rc(){}function Pc(t){return t=xu(t),ni(function(e){return Vr(e,t)})}function Fc(t){return Po(t)?E(Yo(t)):Qr(t)}function Mc(t){return function(e){return null==t?it:gr(t,e)}}function qc(){return[]}function Hc(){return!1}function Bc(){return{}}function Uc(){return""}function Wc(){return!0}function zc(t,e){if((t=xu(t))<1||t>Dt)return[];var n=Rt,r=Vl(t,Rt);e=xo(e),t-=Rt;for(var i=D(r,e);++n<t;)e(n);return i}function Vc(t){return mp(t)?v(t,Yo):gu(t)?[t]:Pi(Nf(ku(t)))}function Xc(t){var e=++ml;return ku(t)+e}function Kc(t){return t&&t.length?cr(t,Oc,br):it}function Jc(t,e){return t&&t.length?cr(t,xo(e,2),br):it}function Qc(t){return k(t,Oc)}function Gc(t,e){return k(t,xo(e,2))}function Zc(t){return t&&t.length?cr(t,Oc,qr):it}function Yc(t,e){return t&&t.length?cr(t,xo(e,2),qr):it}function tl(t){return t&&t.length?N(t,Oc):0}function el(t,e){return t&&t.length?N(t,xo(e,2)):0}e=null==e?Dn:Jn.defaults(Dn.Object(),e,Jn.pick(Dn,wn));var nl=e.Array,rl=e.Date,il=e.Error,ol=e.Function,al=e.Math,sl=e.Object,ul=e.RegExp,cl=e.String,ll=e.TypeError,fl=nl.prototype,pl=ol.prototype,dl=sl.prototype,hl=e["__core-js_shared__"],vl=pl.toString,gl=dl.hasOwnProperty,ml=0,yl=function(){var t=/[^.]+$/.exec(hl&&hl.keys&&hl.keys.IE_PROTO||"");return t?"Symbol(src)_1."+t:""}(),bl=dl.toString,_l=vl.call(sl),wl=Dn._,xl=ul("^"+vl.call(gl).replace(Ne,"\\$&").replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g,"$1.*?")+"$"),Cl=Rn?e.Buffer:it,Tl=e.Symbol,$l=e.Uint8Array,Al=Cl?Cl.allocUnsafe:it,kl=X(sl.getPrototypeOf,sl),El=sl.create,Sl=dl.propertyIsEnumerable,Ol=fl.splice,jl=Tl?Tl.isConcatSpreadable:it,Nl=Tl?Tl.iterator:it,Dl=Tl?Tl.toStringTag:it,Il=function(){try{var t=$o(sl,"defineProperty");return t({},"",{}),t}catch(t){}}(),Ll=e.clearTimeout!==Dn.clearTimeout&&e.clearTimeout,Rl=rl&&rl.now!==Dn.Date.now&&rl.now,Pl=e.setTimeout!==Dn.setTimeout&&e.setTimeout,Fl=al.ceil,Ml=al.floor,ql=sl.getOwnPropertySymbols,Hl=Cl?Cl.isBuffer:it,Bl=e.isFinite,Ul=fl.join,Wl=X(sl.keys,sl),zl=al.max,Vl=al.min,Xl=rl.now,Kl=e.parseInt,Jl=al.random,Ql=fl.reverse,Gl=$o(e,"DataView"),Zl=$o(e,"Map"),Yl=$o(e,"Promise"),tf=$o(e,"Set"),ef=$o(e,"WeakMap"),nf=$o(sl,"create"),rf=ef&&new ef,of={},af=ta(Gl),sf=ta(Zl),uf=ta(Yl),cf=ta(tf),lf=ta(ef),ff=Tl?Tl.prototype:it,pf=ff?ff.valueOf:it,df=ff?ff.toString:it,hf=function(){function t(){}return function(e){if(!iu(e))return{};if(El)return El(e);t.prototype=e;var n=new t;return t.prototype=it,n}}();n.templateSettings={escape:$e,evaluate:Ae,interpolate:ke,variable:"",imports:{_:n}},n.prototype=r.prototype,n.prototype.constructor=n,i.prototype=hf(r.prototype),i.prototype.constructor=i,_.prototype=hf(r.prototype),_.prototype.constructor=_,nt.prototype.clear=qe,nt.prototype.delete=Ze,nt.prototype.get=Ye,nt.prototype.has=tn,nt.prototype.set=en,nn.prototype.clear=rn,nn.prototype.delete=on,nn.prototype.get=an,nn.prototype.has=sn,nn.prototype.set=un,cn.prototype.clear=ln,cn.prototype.delete=fn,cn.prototype.get=pn,cn.prototype.has=dn,cn.prototype.set=hn,mn.prototype.add=mn.prototype.push=yn,mn.prototype.has=bn,_n.prototype.clear=$n,_n.prototype.delete=An,_n.prototype.get=kn,_n.prototype.has=En,_n.prototype.set=jn;var vf=Ui(dr),gf=Ui(hr,!0),mf=Wi(),yf=Wi(!0),bf=rf?function(t,e){return rf.set(t,e),t}:Oc,_f=Il?function(t,e){return Il(t,"toString",{configurable:!0,enumerable:!1,value:Ec(e),writable:!0})}:Oc,wf=ni,xf=Ll||function(t){return Dn.clearTimeout(t)},Cf=tf&&1/J(new tf([,-0]))[1]==Nt?function(t){return new tf(t)}:Rc,Tf=rf?function(t){return rf.get(t)}:Rc,$f=ql?function(t){return null==t?[]:(t=sl(t),p(ql(t),function(e){return Sl.call(t,e)}))}:qc,Af=ql?function(t){for(var e=[];t;)g(e,$f(t)),t=kl(t);return e}:qc,kf=yr;(Gl&&kf(new Gl(new ArrayBuffer(1)))!=ue||Zl&&kf(new Zl)!=Jt||Yl&&"[object Promise]"!=kf(Yl.resolve())||tf&&kf(new tf)!=ee||ef&&kf(new ef)!=oe)&&(kf=function(t){var e=yr(t),n=e==Zt?t.constructor:it,r=n?ta(n):"";if(r)switch(r){case af:return ue;case sf:return Jt;case uf:return"[object Promise]";case cf:return ee;case lf:return oe}return e});var Ef=hl?eu:Hc,Sf=Go(bf),Of=Pl||function(t,e){return Dn.setTimeout(t,e)},jf=Go(_f),Nf=function(t){var e=js(t,function(t){return n.size===ct&&n.clear(),t}),n=e.cache;return e}(function(t){var e=[];return Oe.test(t)&&e.push(""),t.replace(je,function(t,n,r,i){e.push(r?i.replace(He,"$1"):n||t)}),e}),Df=ni(function(t,e){return Xs(t)?sr(t,pr(e,1,Xs,!0)):[]}),If=ni(function(t,e){var n=wa(e);return Xs(n)&&(n=it),Xs(t)?sr(t,pr(e,1,Xs,!0),xo(n,2)):[]}),Lf=ni(function(t,e){var n=wa(e);return Xs(n)&&(n=it),Xs(t)?sr(t,pr(e,1,Xs,!0),it,n):[]}),Rf=ni(function(t){var e=v(t,wi);return e.length&&e[0]===t[0]?Cr(e):[]}),Pf=ni(function(t){var e=wa(t),n=v(t,wi);return e===wa(n)?e=it:n.pop(),n.length&&n[0]===t[0]?Cr(n,xo(e,2)):[]}),Ff=ni(function(t){var e=wa(t),n=v(t,wi);return e="function"==typeof e?e:it,e&&n.pop(),n.length&&n[0]===t[0]?Cr(n,it,e):[]}),Mf=ni(Ta),qf=mo(function(t,e){var n=null==t?0:t.length,r=er(t,e);return Zr(t,v(e,function(t){return Lo(t,n)?+t:t}).sort(Di)),r}),Hf=ni(function(t){return hi(pr(t,1,Xs,!0))}),Bf=ni(function(t){var e=wa(t);return Xs(e)&&(e=it),hi(pr(t,1,Xs,!0),xo(e,2))}),Uf=ni(function(t){var e=wa(t);return e="function"==typeof e?e:it,hi(pr(t,1,Xs,!0),it,e)}),Wf=ni(function(t,e){return Xs(t)?sr(t,e):[]}),zf=ni(function(t){return bi(p(t,Xs))}),Vf=ni(function(t){var e=wa(t);return Xs(e)&&(e=it),bi(p(t,Xs),xo(e,2))}),Xf=ni(function(t){var e=wa(t);return e="function"==typeof e?e:it,bi(p(t,Xs),it,e)}),Kf=ni(Va),Jf=ni(function(t){var e=t.length,n=e>1?t[e-1]:it;return n="function"==typeof n?(t.pop(),n):it,Xa(t,n)}),Qf=mo(function(t){var e=t.length,n=e?t[0]:0,r=this.__wrapped__,o=function(e){return er(e,t)};return!(e>1||this.__actions__.length)&&r instanceof _&&Lo(n)?(r=r.slice(n,+n+(e?1:0)),r.__actions__.push({func:Za,args:[o],thisArg:it}),new i(r,this.__chain__).thru(function(t){return e&&!t.length&&t.push(it),t})):this.thru(o)}),Gf=Hi(function(t,e,n){gl.call(t,n)?++t[n]:tr(t,n,1)}),Zf=Qi(fa),Yf=Qi(pa),tp=Hi(function(t,e,n){gl.call(t,n)?t[n].push(e):tr(t,n,[e])}),ep=ni(function(t,e,n){var r=-1,i="function"==typeof e,o=Vs(t)?nl(t.length):[];return vf(t,function(t){o[++r]=i?s(e,t,n):$r(t,e,n)}),o}),np=Hi(function(t,e,n){tr(t,n,e)}),rp=Hi(function(t,e,n){t[n?0:1].push(e)},function(){return[[],[]]}),ip=ni(function(t,e){if(null==t)return[];var n=e.length;return n>1&&Ro(t,e[0],e[1])?e=[]:n>2&&Ro(e[0],e[1],e[2])&&(e=[e[0]]),Xr(t,pr(e,1),[])}),op=Rl||function(){return Dn.Date.now()},ap=ni(function(t,e,n){var r=gt;if(n.length){var i=K(n,wo(ap));r|=wt}return co(t,r,e,n,i)}),sp=ni(function(t,e,n){var r=gt|mt;if(n.length){var i=K(n,wo(sp));r|=wt}return co(e,r,t,n,i)}),up=ni(function(t,e){return ar(t,1,e)}),cp=ni(function(t,e,n){return ar(t,Tu(e)||0,n)});js.Cache=cn;var lp=wf(function(t,e){e=1==e.length&&mp(e[0])?v(e[0],L(xo())):v(pr(e,1),L(xo()));var n=e.length;return ni(function(r){for(var i=-1,o=Vl(r.length,n);++i<o;)r[i]=e[i].call(this,r[i]);return s(t,this,r)})}),fp=ni(function(t,e){var n=K(e,wo(fp));return co(t,wt,it,e,n)}),pp=ni(function(t,e){var n=K(e,wo(pp));return co(t,xt,it,e,n)}),dp=mo(function(t,e){return co(t,Tt,it,it,it,e)}),hp=oo(br),vp=oo(function(t,e){return t>=e}),gp=Ar(function(){return arguments}())?Ar:function(t){return ou(t)&&gl.call(t,"callee")&&!Sl.call(t,"callee")},mp=nl.isArray,yp=Mn?L(Mn):kr,bp=Hl||Hc,_p=qn?L(qn):Er,wp=Hn?L(Hn):jr,xp=Bn?L(Bn):Ir,Cp=Un?L(Un):Lr,Tp=Wn?L(Wn):Rr,$p=oo(qr),Ap=oo(function(t,e){return t<=e}),kp=Bi(function(t,e){if(Ho(e)||Vs(e))return void Fi(e,qu(e),t);for(var n in e)gl.call(e,n)&&zn(t,n,e[n])}),Ep=Bi(function(t,e){Fi(e,Hu(e),t)}),Sp=Bi(function(t,e,n,r){Fi(e,Hu(e),t,r)}),Op=Bi(function(t,e,n,r){Fi(e,qu(e),t,r)}),jp=mo(er),Np=ni(function(t){return t.push(it,lo),s(Sp,it,t)}),Dp=ni(function(t){return t.push(it,fo),s(Fp,it,t)}),Ip=Yi(function(t,e,n){t[e]=n},Ec(Oc)),Lp=Yi(function(t,e,n){gl.call(t,e)?t[e].push(n):t[e]=[n]},xo),Rp=ni($r),Pp=Bi(function(t,e,n){Wr(t,e,n)}),Fp=Bi(function(t,e,n,r){Wr(t,e,n,r)}),Mp=mo(function(t,e){var n={};if(null==t)return n;var r=!1;e=v(e,function(e){return e=Ci(e,t),r||(r=e.length>1),e}),Fi(t,bo(t),n),r&&(n=rr(n,ft|pt|dt,po));for(var i=e.length;i--;)vi(n,e[i]);return n}),qp=mo(function(t,e){return null==t?{}:Kr(t,e)}),Hp=uo(qu),Bp=uo(Hu),Up=Xi(function(t,e,n){return e=e.toLowerCase(),t+(n?ic(e):e)}),Wp=Xi(function(t,e,n){return t+(n?"-":"")+e.toLowerCase()}),zp=Xi(function(t,e,n){return t+(n?" ":"")+e.toLowerCase()}),Vp=Vi("toLowerCase"),Xp=Xi(function(t,e,n){return t+(n?"_":"")+e.toLowerCase()}),Kp=Xi(function(t,e,n){return t+(n?" ":"")+Qp(e)}),Jp=Xi(function(t,e,n){return t+(n?" ":"")+e.toUpperCase()}),Qp=Vi("toUpperCase"),Gp=ni(function(t,e){try{return s(t,it,e)}catch(t){return Ys(t)?t:new il(t)}}),Zp=mo(function(t,e){return c(e,function(e){e=Yo(e),tr(t,e,ap(t[e],t))}),t}),Yp=Gi(),td=Gi(!0),ed=ni(function(t,e){return function(n){return $r(n,t,e)}}),nd=ni(function(t,e){return function(n){return $r(t,n,e)}}),rd=eo(v),id=eo(f),od=eo(b),ad=io(),sd=io(!0),ud=to(function(t,e){return t+e},0),cd=so("ceil"),ld=to(function(t,e){return t/e},1),fd=so("floor"),pd=to(function(t,e){return t*e},1),dd=so("round"),hd=to(function(t,e){return t-e},0);return n.after=Ts,n.ary=$s,n.assign=kp,n.assignIn=Ep,n.assignInWith=Sp,n.assignWith=Op,n.at=jp,n.before=As,n.bind=ap,n.bindAll=Zp,n.bindKey=sp,n.castArray=Ms,n.chain=Qa,n.chunk=ra,n.compact=ia,n.concat=oa,n.cond=Ac,n.conforms=kc,n.constant=Ec,n.countBy=Gf,n.create=Eu,n.curry=ks,n.curryRight=Es,n.debounce=Ss,n.defaults=Np,n.defaultsDeep=Dp,n.defer=up,n.delay=cp,n.difference=Df,n.differenceBy=If,n.differenceWith=Lf,n.drop=aa,n.dropRight=sa,n.dropRightWhile=ua,n.dropWhile=ca,n.fill=la,n.filter=ss,n.flatMap=us,n.flatMapDeep=cs,n.flatMapDepth=ls,n.flatten=da,n.flattenDeep=ha,n.flattenDepth=va,n.flip=Os,n.flow=Yp,n.flowRight=td,n.fromPairs=ga,n.functions=Lu,n.functionsIn=Ru,n.groupBy=tp,n.initial=ba,n.intersection=Rf,n.intersectionBy=Pf,n.intersectionWith=Ff,n.invert=Ip,n.invertBy=Lp,n.invokeMap=ep,n.iteratee=jc,n.keyBy=np,n.keys=qu,n.keysIn=Hu,n.map=hs,n.mapKeys=Bu,n.mapValues=Uu,n.matches=Nc,n.matchesProperty=Dc,n.memoize=js,n.merge=Pp,n.mergeWith=Fp,n.method=ed,n.methodOf=nd,n.mixin=Ic,n.negate=Ns,n.nthArg=Pc,n.omit=Mp,n.omitBy=Wu,n.once=Ds,n.orderBy=vs,n.over=rd,n.overArgs=lp,n.overEvery=id,n.overSome=od,n.partial=fp,n.partialRight=pp,n.partition=rp,n.pick=qp,n.pickBy=zu,n.property=Fc,n.propertyOf=Mc,n.pull=Mf,n.pullAll=Ta,n.pullAllBy=$a,n.pullAllWith=Aa,n.pullAt=qf,n.range=ad,n.rangeRight=sd,n.rearg=dp,n.reject=ys,n.remove=ka,n.rest=Is,n.reverse=Ea,n.sampleSize=_s,n.set=Xu,n.setWith=Ku,n.shuffle=ws,n.slice=Sa,n.sortBy=ip,n.sortedUniq=Ra,n.sortedUniqBy=Pa,n.split=vc,n.spread=Ls,n.tail=Fa,n.take=Ma,n.takeRight=qa,n.takeRightWhile=Ha,n.takeWhile=Ba,n.tap=Ga,n.throttle=Rs,n.thru=Za,n.toArray=_u,n.toPairs=Hp,n.toPairsIn=Bp,n.toPath=Vc,n.toPlainObject=$u,n.transform=Ju,n.unary=Ps,n.union=Hf,n.unionBy=Bf,n.unionWith=Uf,n.uniq=Ua,n.uniqBy=Wa,n.uniqWith=za,n.unset=Qu,n.unzip=Va,n.unzipWith=Xa,n.update=Gu,n.updateWith=Zu,n.values=Yu,n.valuesIn=tc,n.without=Wf,n.words=$c,n.wrap=Fs,n.xor=zf,n.xorBy=Vf,n.xorWith=Xf,n.zip=Kf,n.zipObject=Ka,n.zipObjectDeep=Ja,n.zipWith=Jf,n.entries=Hp,n.entriesIn=Bp,n.extend=Ep,n.extendWith=Sp,Ic(n,n),n.add=ud,n.attempt=Gp,n.camelCase=Up,n.capitalize=ic,n.ceil=cd,n.clamp=ec,n.clone=qs,n.cloneDeep=Bs,n.cloneDeepWith=Us,n.cloneWith=Hs,n.conformsTo=Ws,n.deburr=oc,n.defaultTo=Sc,n.divide=ld,n.endsWith=ac,n.eq=zs,n.escape=sc,n.escapeRegExp=uc,n.every=as,n.find=Zf,n.findIndex=fa,n.findKey=Su,n.findLast=Yf,n.findLastIndex=pa,n.findLastKey=Ou,n.floor=fd,n.forEach=fs,n.forEachRight=ps,n.forIn=ju,n.forInRight=Nu,n.forOwn=Du,n.forOwnRight=Iu,n.get=Pu,n.gt=hp,n.gte=vp,n.has=Fu,n.hasIn=Mu,n.head=ma,n.identity=Oc,n.includes=ds,n.indexOf=ya,n.inRange=nc,n.invoke=Rp,n.isArguments=gp,n.isArray=mp,n.isArrayBuffer=yp,n.isArrayLike=Vs,n.isArrayLikeObject=Xs,n.isBoolean=Ks,n.isBuffer=bp,n.isDate=_p,n.isElement=Js,n.isEmpty=Qs,n.isEqual=Gs,n.isEqualWith=Zs,n.isError=Ys,n.isFinite=tu,n.isFunction=eu,n.isInteger=nu,n.isLength=ru,n.isMap=wp,n.isMatch=au,n.isMatchWith=su,n.isNaN=uu,n.isNative=cu,n.isNil=fu,n.isNull=lu,n.isNumber=pu,n.isObject=iu,n.isObjectLike=ou,n.isPlainObject=du,n.isRegExp=xp,n.isSafeInteger=hu,n.isSet=Cp,n.isString=vu,n.isSymbol=gu,n.isTypedArray=Tp,n.isUndefined=mu,n.isWeakMap=yu,n.isWeakSet=bu,n.join=_a,n.kebabCase=Wp,n.last=wa,n.lastIndexOf=xa,n.lowerCase=zp,n.lowerFirst=Vp,n.lt=$p,n.lte=Ap,n.max=Kc,n.maxBy=Jc,n.mean=Qc,n.meanBy=Gc,n.min=Zc,n.minBy=Yc,n.stubArray=qc,n.stubFalse=Hc,n.stubObject=Bc,n.stubString=Uc,n.stubTrue=Wc,n.multiply=pd,n.nth=Ca,n.noConflict=Lc,n.noop=Rc,n.now=op,n.pad=cc,n.padEnd=lc,n.padStart=fc,n.parseInt=pc,n.random=rc,n.reduce=gs,n.reduceRight=ms,n.repeat=dc,n.replace=hc,n.result=Vu,n.round=dd,n.runInContext=t,n.sample=bs,n.size=xs,n.snakeCase=Xp,n.some=Cs,n.sortedIndex=Oa,n.sortedIndexBy=ja,n.sortedIndexOf=Na,n.sortedLastIndex=Da,n.sortedLastIndexBy=Ia,n.sortedLastIndexOf=La,n.startCase=Kp,n.startsWith=gc,n.subtract=hd,n.sum=tl,n.sumBy=el,n.template=mc,n.times=zc,n.toFinite=wu,n.toInteger=xu,n.toLength=Cu,n.toLower=yc,n.toNumber=Tu,n.toSafeInteger=Au,n.toString=ku,n.toUpper=bc,n.trim=_c,n.trimEnd=wc,n.trimStart=xc,n.truncate=Cc,n.unescape=Tc,n.uniqueId=Xc,n.upperCase=Jp,n.upperFirst=Qp,n.each=fs,n.eachRight=ps,n.first=ma,Ic(n,function(){var t={};return dr(n,function(e,r){gl.call(n.prototype,r)||(t[r]=e)}),t}(),{chain:!1}),n.VERSION="4.17.4",c(["bind","bindKey","curry","curryRight","partial","partialRight"],function(t){n[t].placeholder=n}),c(["drop","take"],function(t,e){_.prototype[t]=function(n){n=n===it?1:zl(xu(n),0);var r=this.__filtered__&&!e?new _(this):this.clone();return r.__filtered__?r.__takeCount__=Vl(n,r.__takeCount__):r.__views__.push({size:Vl(n,Rt),type:t+(r.__dir__<0?"Right":"")}),r},_.prototype[t+"Right"]=function(e){return this.reverse()[t](e).reverse()}}),c(["filter","map","takeWhile"],function(t,e){var n=e+1,r=n==Ot||3==n;_.prototype[t]=function(t){var e=this.clone();return e.__iteratees__.push({iteratee:xo(t,3),type:n}),e.__filtered__=e.__filtered__||r,e}}),c(["head","last"],function(t,e){var n="take"+(e?"Right":"");_.prototype[t]=function(){return this[n](1).value()[0]}}),c(["initial","tail"],function(t,e){var n="drop"+(e?"":"Right");_.prototype[t]=function(){return this.__filtered__?new _(this):this[n](1)}}),_.prototype.compact=function(){return this.filter(Oc)},_.prototype.find=function(t){return this.filter(t).head()},_.prototype.findLast=function(t){return this.reverse().find(t)},_.prototype.invokeMap=ni(function(t,e){return"function"==typeof t?new _(this):this.map(function(n){return $r(n,t,e)})}),_.prototype.reject=function(t){return this.filter(Ns(xo(t)))},_.prototype.slice=function(t,e){t=xu(t);var n=this;return n.__filtered__&&(t>0||e<0)?new _(n):(t<0?n=n.takeRight(-t):t&&(n=n.drop(t)),e!==it&&(e=xu(e),n=e<0?n.dropRight(-e):n.take(e-t)),n)},_.prototype.takeRightWhile=function(t){return this.reverse().takeWhile(t).reverse()},_.prototype.toArray=function(){return this.take(Rt)},dr(_.prototype,function(t,e){var r=/^(?:filter|find|map|reject)|While$/.test(e),o=/^(?:head|last)$/.test(e),a=n[o?"take"+("last"==e?"Right":""):e],s=o||/^find/.test(e);a&&(n.prototype[e]=function(){var e=this.__wrapped__,u=o?[1]:arguments,c=e instanceof _,l=u[0],f=c||mp(e),p=function(t){var e=a.apply(n,g([t],u));return o&&d?e[0]:e};f&&r&&"function"==typeof l&&1!=l.length&&(c=f=!1);var d=this.__chain__,h=!!this.__actions__.length,v=s&&!d,m=c&&!h;if(!s&&f){e=m?e:new _(this);var y=t.apply(e,u);return y.__actions__.push({func:Za,args:[p],thisArg:it}),new i(y,d)}return v&&m?t.apply(this,u):(y=this.thru(p),v?o?y.value()[0]:y.value():y)})}),c(["pop","push","shift","sort","splice","unshift"],function(t){var e=fl[t],r=/^(?:push|sort|unshift)$/.test(t)?"tap":"thru",i=/^(?:pop|shift)$/.test(t);n.prototype[t]=function(){var t=arguments;if(i&&!this.__chain__){var n=this.value();return e.apply(mp(n)?n:[],t)}return this[r](function(n){return e.apply(mp(n)?n:[],t)})}}),dr(_.prototype,function(t,e){var r=n[e];if(r){var i=r.name+"";(of[i]||(of[i]=[])).push({name:e,func:r})}}),of[Zi(it,mt).name]=[{name:"wrapper",func:it}],_.prototype.clone=S,_.prototype.reverse=G,_.prototype.value=et,n.prototype.at=Qf,n.prototype.chain=Ya,n.prototype.commit=ts,n.prototype.next=es,n.prototype.plant=rs,n.prototype.reverse=is,n.prototype.toJSON=n.prototype.valueOf=n.prototype.value=os,n.prototype.first=n.prototype.head,Nl&&(n.prototype[Nl]=ns),n}();Dn._=Jn,(i=function(){return Jn}.call(e,n,e,r))!==it&&(r.exports=i)}).call(this)}).call(e,n(2),n(12)(t))},function(t,e){t.exports=function(t){return t.webpackPolyfill||(t.deprecate=function(){},t.paths=[],t.children||(t.children=[]),Object.defineProperty(t,"loaded",{enumerable:!0,get:function(){return t.l}}),Object.defineProperty(t,"id",{enumerable:!0,get:function(){return t.i}}),t.webpackPolyfill=1),t}},function(t,e,n){var r,i;!function(e,n){"use strict";"object"==typeof t&&"object"==typeof t.exports?t.exports=e.document?n(e,!0):function(t){if(!t.document)throw new Error("jQuery requires a window with a document");return n(t)}:n(e)}("undefined"!=typeof window?window:this,function(n,o){"use strict";function a(t,e){e=e||at;var n=e.createElement("script");n.text=t,e.head.appendChild(n).parentNode.removeChild(n)}function s(t){var e=!!t&&"length"in t&&t.length,n=yt.type(t);return"function"!==n&&!yt.isWindow(t)&&("array"===n||0===e||"number"==typeof e&&e>0&&e-1 in t)}function u(t,e){return t.nodeName&&t.nodeName.toLowerCase()===e.toLowerCase()}function c(t,e,n){return yt.isFunction(e)?yt.grep(t,function(t,r){return!!e.call(t,r,t)!==n}):e.nodeType?yt.grep(t,function(t){return t===e!==n}):"string"!=typeof e?yt.grep(t,function(t){return ft.call(e,t)>-1!==n}):Et.test(e)?yt.filter(e,t,n):(e=yt.filter(e,t),yt.grep(t,function(t){return ft.call(e,t)>-1!==n&&1===t.nodeType}))}function l(t,e){for(;(t=t[e])&&1!==t.nodeType;);return t}function f(t){var e={};return yt.each(t.match(Dt)||[],function(t,n){e[n]=!0}),e}function p(t){return t}function d(t){throw t}function h(t,e,n,r){var i;try{t&&yt.isFunction(i=t.promise)?i.call(t).done(e).fail(n):t&&yt.isFunction(i=t.then)?i.call(t,e,n):e.apply(void 0,[t].slice(r))}catch(t){n.apply(void 0,[t])}}function v(){at.removeEventListener("DOMContentLoaded",v),n.removeEventListener("load",v),yt.ready()}function g(){this.expando=yt.expando+g.uid++}function m(t){return"true"===t||"false"!==t&&("null"===t?null:t===+t+""?+t:qt.test(t)?JSON.parse(t):t)}function y(t,e,n){var r;if(void 0===n&&1===t.nodeType)if(r="data-"+e.replace(Ht,"-$&").toLowerCase(),"string"==typeof(n=t.getAttribute(r))){try{n=m(n)}catch(t){}Mt.set(t,e,n)}else n=void 0;return n}function b(t,e,n,r){var i,o=1,a=20,s=r?function(){return r.cur()}:function(){return yt.css(t,e,"")},u=s(),c=n&&n[3]||(yt.cssNumber[e]?"":"px"),l=(yt.cssNumber[e]||"px"!==c&&+u)&&Ut.exec(yt.css(t,e));if(l&&l[3]!==c){c=c||l[3],n=n||[],l=+u||1;do{o=o||".5",l/=o,yt.style(t,e,l+c)}while(o!==(o=s()/u)&&1!==o&&--a)}return n&&(l=+l||+u||0,i=n[1]?l+(n[1]+1)*n[2]:+n[2],r&&(r.unit=c,r.start=l,r.end=i)),i}function _(t){var e,n=t.ownerDocument,r=t.nodeName,i=Xt[r];return i||(e=n.body.appendChild(n.createElement(r)),i=yt.css(e,"display"),e.parentNode.removeChild(e),"none"===i&&(i="block"),Xt[r]=i,i)}function w(t,e){for(var n,r,i=[],o=0,a=t.length;o<a;o++)r=t[o],r.style&&(n=r.style.display,e?("none"===n&&(i[o]=Ft.get(r,"display")||null,i[o]||(r.style.display="")),""===r.style.display&&zt(r)&&(i[o]=_(r))):"none"!==n&&(i[o]="none",Ft.set(r,"display",n)));for(o=0;o<a;o++)null!=i[o]&&(t[o].style.display=i[o]);return t}function x(t,e){var n;return n=void 0!==t.getElementsByTagName?t.getElementsByTagName(e||"*"):void 0!==t.querySelectorAll?t.querySelectorAll(e||"*"):[],void 0===e||e&&u(t,e)?yt.merge([t],n):n}function C(t,e){for(var n=0,r=t.length;n<r;n++)Ft.set(t[n],"globalEval",!e||Ft.get(e[n],"globalEval"))}function T(t,e,n,r,i){for(var o,a,s,u,c,l,f=e.createDocumentFragment(),p=[],d=0,h=t.length;d<h;d++)if((o=t[d])||0===o)if("object"===yt.type(o))yt.merge(p,o.nodeType?[o]:o);else if(Zt.test(o)){for(a=a||f.appendChild(e.createElement("div")),s=(Jt.exec(o)||["",""])[1].toLowerCase(),u=Gt[s]||Gt._default,a.innerHTML=u[1]+yt.htmlPrefilter(o)+u[2],l=u[0];l--;)a=a.lastChild;yt.merge(p,a.childNodes),a=f.firstChild,a.textContent=""}else p.push(e.createTextNode(o));for(f.textContent="",d=0;o=p[d++];)if(r&&yt.inArray(o,r)>-1)i&&i.push(o);else if(c=yt.contains(o.ownerDocument,o),a=x(f.appendChild(o),"script"),c&&C(a),n)for(l=0;o=a[l++];)Qt.test(o.type||"")&&n.push(o);return f}function $(){return!0}function A(){return!1}function k(){try{return at.activeElement}catch(t){}}function E(t,e,n,r,i,o){var a,s;if("object"==typeof e){"string"!=typeof n&&(r=r||n,n=void 0);for(s in e)E(t,s,n,r,e[s],o);return t}if(null==r&&null==i?(i=n,r=n=void 0):null==i&&("string"==typeof n?(i=r,r=void 0):(i=r,r=n,n=void 0)),!1===i)i=A;else if(!i)return t;return 1===o&&(a=i,i=function(t){return yt().off(t),a.apply(this,arguments)},i.guid=a.guid||(a.guid=yt.guid++)),t.each(function(){yt.event.add(this,e,i,r,n)})}function S(t,e){return u(t,"table")&&u(11!==e.nodeType?e:e.firstChild,"tr")?yt(">tbody",t)[0]||t:t}function O(t){return t.type=(null!==t.getAttribute("type"))+"/"+t.type,t}function j(t){var e=ae.exec(t.type);return e?t.type=e[1]:t.removeAttribute("type"),t}function N(t,e){var n,r,i,o,a,s,u,c;if(1===e.nodeType){if(Ft.hasData(t)&&(o=Ft.access(t),a=Ft.set(e,o),c=o.events)){delete a.handle,a.events={};for(i in c)for(n=0,r=c[i].length;n<r;n++)yt.event.add(e,i,c[i][n])}Mt.hasData(t)&&(s=Mt.access(t),u=yt.extend({},s),Mt.set(e,u))}}function D(t,e){var n=e.nodeName.toLowerCase();"input"===n&&Kt.test(t.type)?e.checked=t.checked:"input"!==n&&"textarea"!==n||(e.defaultValue=t.defaultValue)}function I(t,e,n,r){e=ct.apply([],e);var i,o,s,u,c,l,f=0,p=t.length,d=p-1,h=e[0],v=yt.isFunction(h);if(v||p>1&&"string"==typeof h&&!mt.checkClone&&oe.test(h))return t.each(function(i){var o=t.eq(i);v&&(e[0]=h.call(this,i,o.html())),I(o,e,n,r)});if(p&&(i=T(e,t[0].ownerDocument,!1,t,r),o=i.firstChild,1===i.childNodes.length&&(i=o),o||r)){for(s=yt.map(x(i,"script"),O),u=s.length;f<p;f++)c=i,f!==d&&(c=yt.clone(c,!0,!0),u&&yt.merge(s,x(c,"script"))),n.call(t[f],c,f);if(u)for(l=s[s.length-1].ownerDocument,yt.map(s,j),f=0;f<u;f++)c=s[f],Qt.test(c.type||"")&&!Ft.access(c,"globalEval")&&yt.contains(l,c)&&(c.src?yt._evalUrl&&yt._evalUrl(c.src):a(c.textContent.replace(se,""),l))}return t}function L(t,e,n){for(var r,i=e?yt.filter(e,t):t,o=0;null!=(r=i[o]);o++)n||1!==r.nodeType||yt.cleanData(x(r)),r.parentNode&&(n&&yt.contains(r.ownerDocument,r)&&C(x(r,"script")),r.parentNode.removeChild(r));return t}function R(t,e,n){var r,i,o,a,s=t.style;return n=n||le(t),n&&(a=n.getPropertyValue(e)||n[e],""!==a||yt.contains(t.ownerDocument,t)||(a=yt.style(t,e)),!mt.pixelMarginRight()&&ce.test(a)&&ue.test(e)&&(r=s.width,i=s.minWidth,o=s.maxWidth,s.minWidth=s.maxWidth=s.width=a,a=n.width,s.width=r,s.minWidth=i,s.maxWidth=o)),void 0!==a?a+"":a}function P(t,e){return{get:function(){return t()?void delete this.get:(this.get=e).apply(this,arguments)}}}function F(t){if(t in ge)return t;for(var e=t[0].toUpperCase()+t.slice(1),n=ve.length;n--;)if((t=ve[n]+e)in ge)return t}function M(t){var e=yt.cssProps[t];return e||(e=yt.cssProps[t]=F(t)||t),e}function q(t,e,n){var r=Ut.exec(e);return r?Math.max(0,r[2]-(n||0))+(r[3]||"px"):e}function H(t,e,n,r,i){var o,a=0;for(o=n===(r?"border":"content")?4:"width"===e?1:0;o<4;o+=2)"margin"===n&&(a+=yt.css(t,n+Wt[o],!0,i)),r?("content"===n&&(a-=yt.css(t,"padding"+Wt[o],!0,i)),"margin"!==n&&(a-=yt.css(t,"border"+Wt[o]+"Width",!0,i))):(a+=yt.css(t,"padding"+Wt[o],!0,i),"padding"!==n&&(a+=yt.css(t,"border"+Wt[o]+"Width",!0,i)));return a}function B(t,e,n){var r,i=le(t),o=R(t,e,i),a="border-box"===yt.css(t,"boxSizing",!1,i);return ce.test(o)?o:(r=a&&(mt.boxSizingReliable()||o===t.style[e]),"auto"===o&&(o=t["offset"+e[0].toUpperCase()+e.slice(1)]),(o=parseFloat(o)||0)+H(t,e,n||(a?"border":"content"),r,i)+"px")}function U(t,e,n,r,i){return new U.prototype.init(t,e,n,r,i)}function W(){ye&&(!1===at.hidden&&n.requestAnimationFrame?n.requestAnimationFrame(W):n.setTimeout(W,yt.fx.interval),yt.fx.tick())}function z(){return n.setTimeout(function(){me=void 0}),me=yt.now()}function V(t,e){var n,r=0,i={height:t};for(e=e?1:0;r<4;r+=2-e)n=Wt[r],i["margin"+n]=i["padding"+n]=t;return e&&(i.opacity=i.width=t),i}function X(t,e,n){for(var r,i=(Q.tweeners[e]||[]).concat(Q.tweeners["*"]),o=0,a=i.length;o<a;o++)if(r=i[o].call(n,e,t))return r}function K(t,e,n){var r,i,o,a,s,u,c,l,f="width"in e||"height"in e,p=this,d={},h=t.style,v=t.nodeType&&zt(t),g=Ft.get(t,"fxshow");n.queue||(a=yt._queueHooks(t,"fx"),null==a.unqueued&&(a.unqueued=0,s=a.empty.fire,a.empty.fire=function(){a.unqueued||s()}),a.unqueued++,p.always(function(){p.always(function(){a.unqueued--,yt.queue(t,"fx").length||a.empty.fire()})}));for(r in e)if(i=e[r],be.test(i)){if(delete e[r],o=o||"toggle"===i,i===(v?"hide":"show")){if("show"!==i||!g||void 0===g[r])continue;v=!0}d[r]=g&&g[r]||yt.style(t,r)}if((u=!yt.isEmptyObject(e))||!yt.isEmptyObject(d)){f&&1===t.nodeType&&(n.overflow=[h.overflow,h.overflowX,h.overflowY],c=g&&g.display,null==c&&(c=Ft.get(t,"display")),l=yt.css(t,"display"),"none"===l&&(c?l=c:(w([t],!0),c=t.style.display||c,l=yt.css(t,"display"),w([t]))),("inline"===l||"inline-block"===l&&null!=c)&&"none"===yt.css(t,"float")&&(u||(p.done(function(){h.display=c}),null==c&&(l=h.display,c="none"===l?"":l)),h.display="inline-block")),n.overflow&&(h.overflow="hidden",p.always(function(){h.overflow=n.overflow[0],h.overflowX=n.overflow[1],h.overflowY=n.overflow[2]})),u=!1;for(r in d)u||(g?"hidden"in g&&(v=g.hidden):g=Ft.access(t,"fxshow",{display:c}),o&&(g.hidden=!v),v&&w([t],!0),p.done(function(){v||w([t]),Ft.remove(t,"fxshow");for(r in d)yt.style(t,r,d[r])})),u=X(v?g[r]:0,r,p),r in g||(g[r]=u.start,v&&(u.end=u.start,u.start=0))}}function J(t,e){var n,r,i,o,a;for(n in t)if(r=yt.camelCase(n),i=e[r],o=t[n],Array.isArray(o)&&(i=o[1],o=t[n]=o[0]),n!==r&&(t[r]=o,delete t[n]),(a=yt.cssHooks[r])&&"expand"in a){o=a.expand(o),delete t[r];for(n in o)n in t||(t[n]=o[n],e[n]=i)}else e[r]=i}function Q(t,e,n){var r,i,o=0,a=Q.prefilters.length,s=yt.Deferred().always(function(){delete u.elem}),u=function(){if(i)return!1;for(var e=me||z(),n=Math.max(0,c.startTime+c.duration-e),r=n/c.duration||0,o=1-r,a=0,u=c.tweens.length;a<u;a++)c.tweens[a].run(o);return s.notifyWith(t,[c,o,n]),o<1&&u?n:(u||s.notifyWith(t,[c,1,0]),s.resolveWith(t,[c]),!1)},c=s.promise({elem:t,props:yt.extend({},e),opts:yt.extend(!0,{specialEasing:{},easing:yt.easing._default},n),originalProperties:e,originalOptions:n,startTime:me||z(),duration:n.duration,tweens:[],createTween:function(e,n){var r=yt.Tween(t,c.opts,e,n,c.opts.specialEasing[e]||c.opts.easing);return c.tweens.push(r),r},stop:function(e){var n=0,r=e?c.tweens.length:0;if(i)return this;for(i=!0;n<r;n++)c.tweens[n].run(1);return e?(s.notifyWith(t,[c,1,0]),s.resolveWith(t,[c,e])):s.rejectWith(t,[c,e]),this}}),l=c.props;for(J(l,c.opts.specialEasing);o<a;o++)if(r=Q.prefilters[o].call(c,t,l,c.opts))return yt.isFunction(r.stop)&&(yt._queueHooks(c.elem,c.opts.queue).stop=yt.proxy(r.stop,r)),r;return yt.map(l,X,c),yt.isFunction(c.opts.start)&&c.opts.start.call(t,c),c.progress(c.opts.progress).done(c.opts.done,c.opts.complete).fail(c.opts.fail).always(c.opts.always),yt.fx.timer(yt.extend(u,{elem:t,anim:c,queue:c.opts.queue})),c}function G(t){return(t.match(Dt)||[]).join(" ")}function Z(t){return t.getAttribute&&t.getAttribute("class")||""}function Y(t,e,n,r){var i;if(Array.isArray(e))yt.each(e,function(e,i){n||Oe.test(t)?r(t,i):Y(t+"["+("object"==typeof i&&null!=i?e:"")+"]",i,n,r)});else if(n||"object"!==yt.type(e))r(t,e);else for(i in e)Y(t+"["+i+"]",e[i],n,r)}function tt(t){return function(e,n){"string"!=typeof e&&(n=e,e="*");var r,i=0,o=e.toLowerCase().match(Dt)||[];if(yt.isFunction(n))for(;r=o[i++];)"+"===r[0]?(r=r.slice(1)||"*",(t[r]=t[r]||[]).unshift(n)):(t[r]=t[r]||[]).push(n)}}function et(t,e,n,r){function i(s){var u;return o[s]=!0,yt.each(t[s]||[],function(t,s){var c=s(e,n,r);return"string"!=typeof c||a||o[c]?a?!(u=c):void 0:(e.dataTypes.unshift(c),i(c),!1)}),u}var o={},a=t===Be;return i(e.dataTypes[0])||!o["*"]&&i("*")}function nt(t,e){var n,r,i=yt.ajaxSettings.flatOptions||{};for(n in e)void 0!==e[n]&&((i[n]?t:r||(r={}))[n]=e[n]);return r&&yt.extend(!0,t,r),t}function rt(t,e,n){for(var r,i,o,a,s=t.contents,u=t.dataTypes;"*"===u[0];)u.shift(),void 0===r&&(r=t.mimeType||e.getResponseHeader("Content-Type"));if(r)for(i in s)if(s[i]&&s[i].test(r)){u.unshift(i);break}if(u[0]in n)o=u[0];else{for(i in n){if(!u[0]||t.converters[i+" "+u[0]]){o=i;break}a||(a=i)}o=o||a}if(o)return o!==u[0]&&u.unshift(o),n[o]}function it(t,e,n,r){var i,o,a,s,u,c={},l=t.dataTypes.slice();if(l[1])for(a in t.converters)c[a.toLowerCase()]=t.converters[a];for(o=l.shift();o;)if(t.responseFields[o]&&(n[t.responseFields[o]]=e),!u&&r&&t.dataFilter&&(e=t.dataFilter(e,t.dataType)),u=o,o=l.shift())if("*"===o)o=u;else if("*"!==u&&u!==o){if(!(a=c[u+" "+o]||c["* "+o]))for(i in c)if(s=i.split(" "),s[1]===o&&(a=c[u+" "+s[0]]||c["* "+s[0]])){!0===a?a=c[i]:!0!==c[i]&&(o=s[0],l.unshift(s[1]));break}if(!0!==a)if(a&&t.throws)e=a(e);else try{e=a(e)}catch(t){return{state:"parsererror",error:a?t:"No conversion from "+u+" to "+o}}}return{state:"success",data:e}}var ot=[],at=n.document,st=Object.getPrototypeOf,ut=ot.slice,ct=ot.concat,lt=ot.push,ft=ot.indexOf,pt={},dt=pt.toString,ht=pt.hasOwnProperty,vt=ht.toString,gt=vt.call(Object),mt={},yt=function(t,e){return new yt.fn.init(t,e)},bt=/^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g,_t=/^-ms-/,wt=/-([a-z])/g,xt=function(t,e){return e.toUpperCase()};yt.fn=yt.prototype={jquery:"3.2.1",constructor:yt,length:0,toArray:function(){return ut.call(this)},get:function(t){return null==t?ut.call(this):t<0?this[t+this.length]:this[t]},pushStack:function(t){var e=yt.merge(this.constructor(),t);return e.prevObject=this,e},each:function(t){return yt.each(this,t)},map:function(t){return this.pushStack(yt.map(this,function(e,n){return t.call(e,n,e)}))},slice:function(){return this.pushStack(ut.apply(this,arguments))},first:function(){return this.eq(0)},last:function(){return this.eq(-1)},eq:function(t){var e=this.length,n=+t+(t<0?e:0);return this.pushStack(n>=0&&n<e?[this[n]]:[])},end:function(){return this.prevObject||this.constructor()},push:lt,sort:ot.sort,splice:ot.splice},yt.extend=yt.fn.extend=function(){var t,e,n,r,i,o,a=arguments[0]||{},s=1,u=arguments.length,c=!1;for("boolean"==typeof a&&(c=a,a=arguments[s]||{},s++),"object"==typeof a||yt.isFunction(a)||(a={}),s===u&&(a=this,s--);s<u;s++)if(null!=(t=arguments[s]))for(e in t)n=a[e],r=t[e],a!==r&&(c&&r&&(yt.isPlainObject(r)||(i=Array.isArray(r)))?(i?(i=!1,o=n&&Array.isArray(n)?n:[]):o=n&&yt.isPlainObject(n)?n:{},a[e]=yt.extend(c,o,r)):void 0!==r&&(a[e]=r));return a},yt.extend({expando:"jQuery"+("3.2.1"+Math.random()).replace(/\D/g,""),isReady:!0,error:function(t){throw new Error(t)},noop:function(){},isFunction:function(t){return"function"===yt.type(t)},isWindow:function(t){return null!=t&&t===t.window},isNumeric:function(t){var e=yt.type(t);return("number"===e||"string"===e)&&!isNaN(t-parseFloat(t))},isPlainObject:function(t){var e,n;return!(!t||"[object Object]"!==dt.call(t))&&(!(e=st(t))||"function"==typeof(n=ht.call(e,"constructor")&&e.constructor)&&vt.call(n)===gt)},isEmptyObject:function(t){var e;for(e in t)return!1;return!0},type:function(t){return null==t?t+"":"object"==typeof t||"function"==typeof t?pt[dt.call(t)]||"object":typeof t},globalEval:function(t){a(t)},camelCase:function(t){return t.replace(_t,"ms-").replace(wt,xt)},each:function(t,e){var n,r=0;if(s(t))for(n=t.length;r<n&&!1!==e.call(t[r],r,t[r]);r++);else for(r in t)if(!1===e.call(t[r],r,t[r]))break;return t},trim:function(t){return null==t?"":(t+"").replace(bt,"")},makeArray:function(t,e){var n=e||[];return null!=t&&(s(Object(t))?yt.merge(n,"string"==typeof t?[t]:t):lt.call(n,t)),n},inArray:function(t,e,n){return null==e?-1:ft.call(e,t,n)},merge:function(t,e){for(var n=+e.length,r=0,i=t.length;r<n;r++)t[i++]=e[r];return t.length=i,t},grep:function(t,e,n){for(var r=[],i=0,o=t.length,a=!n;i<o;i++)!e(t[i],i)!==a&&r.push(t[i]);return r},map:function(t,e,n){var r,i,o=0,a=[];if(s(t))for(r=t.length;o<r;o++)null!=(i=e(t[o],o,n))&&a.push(i);else for(o in t)null!=(i=e(t[o],o,n))&&a.push(i);return ct.apply([],a)},guid:1,proxy:function(t,e){var n,r,i;if("string"==typeof e&&(n=t[e],e=t,t=n),yt.isFunction(t))return r=ut.call(arguments,2),i=function(){return t.apply(e||this,r.concat(ut.call(arguments)))},i.guid=t.guid=t.guid||yt.guid++,i},now:Date.now,support:mt}),"function"==typeof Symbol&&(yt.fn[Symbol.iterator]=ot[Symbol.iterator]),yt.each("Boolean Number String Function Array Date RegExp Object Error Symbol".split(" "),function(t,e){pt["[object "+e+"]"]=e.toLowerCase()});var Ct=function(t){function e(t,e,n,r){var i,o,a,s,u,l,p,d=e&&e.ownerDocument,h=e?e.nodeType:9;if(n=n||[],"string"!=typeof t||!t||1!==h&&9!==h&&11!==h)return n;if(!r&&((e?e.ownerDocument||e:M)!==j&&O(e),e=e||j,D)){if(11!==h&&(u=vt.exec(t)))if(i=u[1]){if(9===h){if(!(a=e.getElementById(i)))return n;if(a.id===i)return n.push(a),n}else if(d&&(a=d.getElementById(i))&&P(e,a)&&a.id===i)return n.push(a),n}else{if(u[2])return Q.apply(n,e.getElementsByTagName(t)),n;if((i=u[3])&&_.getElementsByClassName&&e.getElementsByClassName)return Q.apply(n,e.getElementsByClassName(i)),n}if(_.qsa&&!W[t+" "]&&(!I||!I.test(t))){if(1!==h)d=e,p=t;else if("object"!==e.nodeName.toLowerCase()){for((s=e.getAttribute("id"))?s=s.replace(bt,_t):e.setAttribute("id",s=F),l=T(t),o=l.length;o--;)l[o]="#"+s+" "+f(l[o]);p=l.join(","),d=gt.test(t)&&c(e.parentNode)||e}if(p)try{return Q.apply(n,d.querySelectorAll(p)),n}catch(t){}finally{s===F&&e.removeAttribute("id")}}}return A(t.replace(ot,"$1"),e,n,r)}function n(){function t(n,r){return e.push(n+" ")>w.cacheLength&&delete t[e.shift()],t[n+" "]=r}var e=[];return t}function r(t){return t[F]=!0,t}function i(t){var e=j.createElement("fieldset");try{return!!t(e)}catch(t){return!1}finally{e.parentNode&&e.parentNode.removeChild(e),e=null}}function o(t,e){for(var n=t.split("|"),r=n.length;r--;)w.attrHandle[n[r]]=e}function a(t,e){var n=e&&t,r=n&&1===t.nodeType&&1===e.nodeType&&t.sourceIndex-e.sourceIndex;if(r)return r;if(n)for(;n=n.nextSibling;)if(n===e)return-1;return t?1:-1}function s(t){return function(e){return"form"in e?e.parentNode&&!1===e.disabled?"label"in e?"label"in e.parentNode?e.parentNode.disabled===t:e.disabled===t:e.isDisabled===t||e.isDisabled!==!t&&xt(e)===t:e.disabled===t:"label"in e&&e.disabled===t}}function u(t){return r(function(e){return e=+e,r(function(n,r){for(var i,o=t([],n.length,e),a=o.length;a--;)n[i=o[a]]&&(n[i]=!(r[i]=n[i]))})})}function c(t){return t&&void 0!==t.getElementsByTagName&&t}function l(){}function f(t){for(var e=0,n=t.length,r="";e<n;e++)r+=t[e].value;return r}function p(t,e,n){var r=e.dir,i=e.next,o=i||r,a=n&&"parentNode"===o,s=H++;return e.first?function(e,n,i){for(;e=e[r];)if(1===e.nodeType||a)return t(e,n,i);return!1}:function(e,n,u){var c,l,f,p=[q,s];if(u){for(;e=e[r];)if((1===e.nodeType||a)&&t(e,n,u))return!0}else for(;e=e[r];)if(1===e.nodeType||a)if(f=e[F]||(e[F]={}),l=f[e.uniqueID]||(f[e.uniqueID]={}),i&&i===e.nodeName.toLowerCase())e=e[r]||e;else{if((c=l[o])&&c[0]===q&&c[1]===s)return p[2]=c[2];if(l[o]=p,p[2]=t(e,n,u))return!0}return!1}}function d(t){return t.length>1?function(e,n,r){for(var i=t.length;i--;)if(!t[i](e,n,r))return!1;return!0}:t[0]}function h(t,n,r){for(var i=0,o=n.length;i<o;i++)e(t,n[i],r);return r}function v(t,e,n,r,i){for(var o,a=[],s=0,u=t.length,c=null!=e;s<u;s++)(o=t[s])&&(n&&!n(o,r,i)||(a.push(o),c&&e.push(s)));return a}function g(t,e,n,i,o,a){return i&&!i[F]&&(i=g(i)),o&&!o[F]&&(o=g(o,a)),r(function(r,a,s,u){var c,l,f,p=[],d=[],g=a.length,m=r||h(e||"*",s.nodeType?[s]:s,[]),y=!t||!r&&e?m:v(m,p,t,s,u),b=n?o||(r?t:g||i)?[]:a:y;if(n&&n(y,b,s,u),i)for(c=v(b,d),i(c,[],s,u),l=c.length;l--;)(f=c[l])&&(b[d[l]]=!(y[d[l]]=f));if(r){if(o||t){if(o){for(c=[],l=b.length;l--;)(f=b[l])&&c.push(y[l]=f);o(null,b=[],c,u)}for(l=b.length;l--;)(f=b[l])&&(c=o?Z(r,f):p[l])>-1&&(r[c]=!(a[c]=f))}}else b=v(b===a?b.splice(g,b.length):b),o?o(null,a,b,u):Q.apply(a,b)})}function m(t){for(var e,n,r,i=t.length,o=w.relative[t[0].type],a=o||w.relative[" "],s=o?1:0,u=p(function(t){return t===e},a,!0),c=p(function(t){return Z(e,t)>-1},a,!0),l=[function(t,n,r){var i=!o&&(r||n!==k)||((e=n).nodeType?u(t,n,r):c(t,n,r));return e=null,i}];s<i;s++)if(n=w.relative[t[s].type])l=[p(d(l),n)];else{if(n=w.filter[t[s].type].apply(null,t[s].matches),n[F]){for(r=++s;r<i&&!w.relative[t[r].type];r++);return g(s>1&&d(l),s>1&&f(t.slice(0,s-1).concat({value:" "===t[s-2].type?"*":""})).replace(ot,"$1"),n,s<r&&m(t.slice(s,r)),r<i&&m(t=t.slice(r)),r<i&&f(t))}l.push(n)}return d(l)}function y(t,n){var i=n.length>0,o=t.length>0,a=function(r,a,s,u,c){var l,f,p,d=0,h="0",g=r&&[],m=[],y=k,b=r||o&&w.find.TAG("*",c),_=q+=null==y?1:Math.random()||.1,x=b.length;for(c&&(k=a===j||a||c);h!==x&&null!=(l=b[h]);h++){if(o&&l){for(f=0,a||l.ownerDocument===j||(O(l),s=!D);p=t[f++];)if(p(l,a||j,s)){u.push(l);break}c&&(q=_)}i&&((l=!p&&l)&&d--,r&&g.push(l))}if(d+=h,i&&h!==d){for(f=0;p=n[f++];)p(g,m,a,s);if(r){if(d>0)for(;h--;)g[h]||m[h]||(m[h]=K.call(u));m=v(m)}Q.apply(u,m),c&&!r&&m.length>0&&d+n.length>1&&e.uniqueSort(u)}return c&&(q=_,k=y),g};return i?r(a):a}var b,_,w,x,C,T,$,A,k,E,S,O,j,N,D,I,L,R,P,F="sizzle"+1*new Date,M=t.document,q=0,H=0,B=n(),U=n(),W=n(),z=function(t,e){return t===e&&(S=!0),0},V={}.hasOwnProperty,X=[],K=X.pop,J=X.push,Q=X.push,G=X.slice,Z=function(t,e){for(var n=0,r=t.length;n<r;n++)if(t[n]===e)return n;return-1},Y="checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped",tt="[\\x20\\t\\r\\n\\f]",et="(?:\\\\.|[\\w-]|[^\0-\\xa0])+",nt="\\["+tt+"*("+et+")(?:"+tt+"*([*^$|!~]?=)"+tt+"*(?:'((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\"|("+et+"))|)"+tt+"*\\]",rt=":("+et+")(?:\\((('((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\")|((?:\\\\.|[^\\\\()[\\]]|"+nt+")*)|.*)\\)|)",it=new RegExp(tt+"+","g"),ot=new RegExp("^"+tt+"+|((?:^|[^\\\\])(?:\\\\.)*)"+tt+"+$","g"),at=new RegExp("^"+tt+"*,"+tt+"*"),st=new RegExp("^"+tt+"*([>+~]|"+tt+")"+tt+"*"),ut=new RegExp("="+tt+"*([^\\]'\"]*?)"+tt+"*\\]","g"),ct=new RegExp(rt),lt=new RegExp("^"+et+"$"),ft={ID:new RegExp("^#("+et+")"),CLASS:new RegExp("^\\.("+et+")"),TAG:new RegExp("^("+et+"|[*])"),ATTR:new RegExp("^"+nt),PSEUDO:new RegExp("^"+rt),CHILD:new RegExp("^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\("+tt+"*(even|odd|(([+-]|)(\\d*)n|)"+tt+"*(?:([+-]|)"+tt+"*(\\d+)|))"+tt+"*\\)|)","i"),bool:new RegExp("^(?:"+Y+")$","i"),needsContext:new RegExp("^"+tt+"*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\("+tt+"*((?:-\\d)?\\d*)"+tt+"*\\)|)(?=[^-]|$)","i")},pt=/^(?:input|select|textarea|button)$/i,dt=/^h\d$/i,ht=/^[^{]+\{\s*\[native \w/,vt=/^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/,gt=/[+~]/,mt=new RegExp("\\\\([\\da-f]{1,6}"+tt+"?|("+tt+")|.)","ig"),yt=function(t,e,n){var r="0x"+e-65536;return r!==r||n?e:r<0?String.fromCharCode(r+65536):String.fromCharCode(r>>10|55296,1023&r|56320)},bt=/([\0-\x1f\x7f]|^-?\d)|^-$|[^\0-\x1f\x7f-\uFFFF\w-]/g,_t=function(t,e){return e?"\0"===t?"�":t.slice(0,-1)+"\\"+t.charCodeAt(t.length-1).toString(16)+" ":"\\"+t},wt=function(){O()},xt=p(function(t){return!0===t.disabled&&("form"in t||"label"in t)},{dir:"parentNode",next:"legend"});try{Q.apply(X=G.call(M.childNodes),M.childNodes),X[M.childNodes.length].nodeType}catch(t){Q={apply:X.length?function(t,e){J.apply(t,G.call(e))}:function(t,e){for(var n=t.length,r=0;t[n++]=e[r++];);t.length=n-1}}}_=e.support={},C=e.isXML=function(t){var e=t&&(t.ownerDocument||t).documentElement;return!!e&&"HTML"!==e.nodeName},O=e.setDocument=function(t){var e,n,r=t?t.ownerDocument||t:M;return r!==j&&9===r.nodeType&&r.documentElement?(j=r,N=j.documentElement,D=!C(j),M!==j&&(n=j.defaultView)&&n.top!==n&&(n.addEventListener?n.addEventListener("unload",wt,!1):n.attachEvent&&n.attachEvent("onunload",wt)),_.attributes=i(function(t){return t.className="i",!t.getAttribute("className")}),_.getElementsByTagName=i(function(t){return t.appendChild(j.createComment("")),!t.getElementsByTagName("*").length}),_.getElementsByClassName=ht.test(j.getElementsByClassName),_.getById=i(function(t){return N.appendChild(t).id=F,!j.getElementsByName||!j.getElementsByName(F).length}),_.getById?(w.filter.ID=function(t){var e=t.replace(mt,yt);return function(t){return t.getAttribute("id")===e}},w.find.ID=function(t,e){if(void 0!==e.getElementById&&D){var n=e.getElementById(t);return n?[n]:[]}}):(w.filter.ID=function(t){var e=t.replace(mt,yt);return function(t){var n=void 0!==t.getAttributeNode&&t.getAttributeNode("id");return n&&n.value===e}},w.find.ID=function(t,e){if(void 0!==e.getElementById&&D){var n,r,i,o=e.getElementById(t);if(o){if((n=o.getAttributeNode("id"))&&n.value===t)return[o];for(i=e.getElementsByName(t),r=0;o=i[r++];)if((n=o.getAttributeNode("id"))&&n.value===t)return[o]}return[]}}),w.find.TAG=_.getElementsByTagName?function(t,e){return void 0!==e.getElementsByTagName?e.getElementsByTagName(t):_.qsa?e.querySelectorAll(t):void 0}:function(t,e){var n,r=[],i=0,o=e.getElementsByTagName(t);if("*"===t){for(;n=o[i++];)1===n.nodeType&&r.push(n);return r}return o},w.find.CLASS=_.getElementsByClassName&&function(t,e){if(void 0!==e.getElementsByClassName&&D)return e.getElementsByClassName(t)},L=[],I=[],(_.qsa=ht.test(j.querySelectorAll))&&(i(function(t){N.appendChild(t).innerHTML="<a id='"+F+"'></a><select id='"+F+"-\r\\' msallowcapture=''><option selected=''></option></select>",t.querySelectorAll("[msallowcapture^='']").length&&I.push("[*^$]="+tt+"*(?:''|\"\")"),t.querySelectorAll("[selected]").length||I.push("\\["+tt+"*(?:value|"+Y+")"),t.querySelectorAll("[id~="+F+"-]").length||I.push("~="),t.querySelectorAll(":checked").length||I.push(":checked"),t.querySelectorAll("a#"+F+"+*").length||I.push(".#.+[+~]")}),i(function(t){t.innerHTML="<a href='' disabled='disabled'></a><select disabled='disabled'><option/></select>";var e=j.createElement("input");e.setAttribute("type","hidden"),t.appendChild(e).setAttribute("name","D"),t.querySelectorAll("[name=d]").length&&I.push("name"+tt+"*[*^$|!~]?="),2!==t.querySelectorAll(":enabled").length&&I.push(":enabled",":disabled"),N.appendChild(t).disabled=!0,2!==t.querySelectorAll(":disabled").length&&I.push(":enabled",":disabled"),t.querySelectorAll("*,:x"),I.push(",.*:")})),(_.matchesSelector=ht.test(R=N.matches||N.webkitMatchesSelector||N.mozMatchesSelector||N.oMatchesSelector||N.msMatchesSelector))&&i(function(t){_.disconnectedMatch=R.call(t,"*"),R.call(t,"[s!='']:x"),L.push("!=",rt)}),I=I.length&&new RegExp(I.join("|")),L=L.length&&new RegExp(L.join("|")),e=ht.test(N.compareDocumentPosition),P=e||ht.test(N.contains)?function(t,e){var n=9===t.nodeType?t.documentElement:t,r=e&&e.parentNode;return t===r||!(!r||1!==r.nodeType||!(n.contains?n.contains(r):t.compareDocumentPosition&&16&t.compareDocumentPosition(r)))}:function(t,e){if(e)for(;e=e.parentNode;)if(e===t)return!0;return!1},z=e?function(t,e){if(t===e)return S=!0,0;var n=!t.compareDocumentPosition-!e.compareDocumentPosition;return n||(n=(t.ownerDocument||t)===(e.ownerDocument||e)?t.compareDocumentPosition(e):1,1&n||!_.sortDetached&&e.compareDocumentPosition(t)===n?t===j||t.ownerDocument===M&&P(M,t)?-1:e===j||e.ownerDocument===M&&P(M,e)?1:E?Z(E,t)-Z(E,e):0:4&n?-1:1)}:function(t,e){if(t===e)return S=!0,0;var n,r=0,i=t.parentNode,o=e.parentNode,s=[t],u=[e];if(!i||!o)return t===j?-1:e===j?1:i?-1:o?1:E?Z(E,t)-Z(E,e):0;if(i===o)return a(t,e);for(n=t;n=n.parentNode;)s.unshift(n);for(n=e;n=n.parentNode;)u.unshift(n);for(;s[r]===u[r];)r++;return r?a(s[r],u[r]):s[r]===M?-1:u[r]===M?1:0},j):j},e.matches=function(t,n){return e(t,null,null,n)},e.matchesSelector=function(t,n){if((t.ownerDocument||t)!==j&&O(t),n=n.replace(ut,"='$1']"),_.matchesSelector&&D&&!W[n+" "]&&(!L||!L.test(n))&&(!I||!I.test(n)))try{var r=R.call(t,n);if(r||_.disconnectedMatch||t.document&&11!==t.document.nodeType)return r}catch(t){}return e(n,j,null,[t]).length>0},e.contains=function(t,e){return(t.ownerDocument||t)!==j&&O(t),P(t,e)},e.attr=function(t,e){(t.ownerDocument||t)!==j&&O(t);var n=w.attrHandle[e.toLowerCase()],r=n&&V.call(w.attrHandle,e.toLowerCase())?n(t,e,!D):void 0;return void 0!==r?r:_.attributes||!D?t.getAttribute(e):(r=t.getAttributeNode(e))&&r.specified?r.value:null},e.escape=function(t){return(t+"").replace(bt,_t)},e.error=function(t){throw new Error("Syntax error, unrecognized expression: "+t)},e.uniqueSort=function(t){var e,n=[],r=0,i=0;if(S=!_.detectDuplicates,E=!_.sortStable&&t.slice(0),t.sort(z),S){for(;e=t[i++];)e===t[i]&&(r=n.push(i));for(;r--;)t.splice(n[r],1)}return E=null,t},x=e.getText=function(t){var e,n="",r=0,i=t.nodeType;if(i){if(1===i||9===i||11===i){if("string"==typeof t.textContent)return t.textContent;for(t=t.firstChild;t;t=t.nextSibling)n+=x(t)}else if(3===i||4===i)return t.nodeValue}else for(;e=t[r++];)n+=x(e);return n},w=e.selectors={cacheLength:50,createPseudo:r,match:ft,attrHandle:{},find:{},relative:{">":{dir:"parentNode",first:!0}," ":{dir:"parentNode"},"+":{dir:"previousSibling",first:!0},"~":{dir:"previousSibling"}},preFilter:{ATTR:function(t){return t[1]=t[1].replace(mt,yt),t[3]=(t[3]||t[4]||t[5]||"").replace(mt,yt),"~="===t[2]&&(t[3]=" "+t[3]+" "),t.slice(0,4)},CHILD:function(t){return t[1]=t[1].toLowerCase(),"nth"===t[1].slice(0,3)?(t[3]||e.error(t[0]),t[4]=+(t[4]?t[5]+(t[6]||1):2*("even"===t[3]||"odd"===t[3])),t[5]=+(t[7]+t[8]||"odd"===t[3])):t[3]&&e.error(t[0]),t},PSEUDO:function(t){var e,n=!t[6]&&t[2];return ft.CHILD.test(t[0])?null:(t[3]?t[2]=t[4]||t[5]||"":n&&ct.test(n)&&(e=T(n,!0))&&(e=n.indexOf(")",n.length-e)-n.length)&&(t[0]=t[0].slice(0,e),t[2]=n.slice(0,e)),t.slice(0,3))}},filter:{TAG:function(t){var e=t.replace(mt,yt).toLowerCase();return"*"===t?function(){return!0}:function(t){return t.nodeName&&t.nodeName.toLowerCase()===e}},CLASS:function(t){var e=B[t+" "];return e||(e=new RegExp("(^|"+tt+")"+t+"("+tt+"|$)"))&&B(t,function(t){return e.test("string"==typeof t.className&&t.className||void 0!==t.getAttribute&&t.getAttribute("class")||"")})},ATTR:function(t,n,r){return function(i){var o=e.attr(i,t);return null==o?"!="===n:!n||(o+="","="===n?o===r:"!="===n?o!==r:"^="===n?r&&0===o.indexOf(r):"*="===n?r&&o.indexOf(r)>-1:"$="===n?r&&o.slice(-r.length)===r:"~="===n?(" "+o.replace(it," ")+" ").indexOf(r)>-1:"|="===n&&(o===r||o.slice(0,r.length+1)===r+"-"))}},CHILD:function(t,e,n,r,i){var o="nth"!==t.slice(0,3),a="last"!==t.slice(-4),s="of-type"===e;return 1===r&&0===i?function(t){return!!t.parentNode}:function(e,n,u){var c,l,f,p,d,h,v=o!==a?"nextSibling":"previousSibling",g=e.parentNode,m=s&&e.nodeName.toLowerCase(),y=!u&&!s,b=!1;if(g){if(o){for(;v;){for(p=e;p=p[v];)if(s?p.nodeName.toLowerCase()===m:1===p.nodeType)return!1;h=v="only"===t&&!h&&"nextSibling"}return!0}if(h=[a?g.firstChild:g.lastChild],a&&y){for(p=g,f=p[F]||(p[F]={}),l=f[p.uniqueID]||(f[p.uniqueID]={}),c=l[t]||[],d=c[0]===q&&c[1],b=d&&c[2],p=d&&g.childNodes[d];p=++d&&p&&p[v]||(b=d=0)||h.pop();)if(1===p.nodeType&&++b&&p===e){l[t]=[q,d,b];break}}else if(y&&(p=e,f=p[F]||(p[F]={}),l=f[p.uniqueID]||(f[p.uniqueID]={}),c=l[t]||[],d=c[0]===q&&c[1],b=d),!1===b)for(;(p=++d&&p&&p[v]||(b=d=0)||h.pop())&&((s?p.nodeName.toLowerCase()!==m:1!==p.nodeType)||!++b||(y&&(f=p[F]||(p[F]={}),l=f[p.uniqueID]||(f[p.uniqueID]={}),l[t]=[q,b]),p!==e)););return(b-=i)===r||b%r==0&&b/r>=0}}},PSEUDO:function(t,n){var i,o=w.pseudos[t]||w.setFilters[t.toLowerCase()]||e.error("unsupported pseudo: "+t);return o[F]?o(n):o.length>1?(i=[t,t,"",n],w.setFilters.hasOwnProperty(t.toLowerCase())?r(function(t,e){for(var r,i=o(t,n),a=i.length;a--;)r=Z(t,i[a]),t[r]=!(e[r]=i[a])}):function(t){return o(t,0,i)}):o}},pseudos:{not:r(function(t){var e=[],n=[],i=$(t.replace(ot,"$1"));return i[F]?r(function(t,e,n,r){for(var o,a=i(t,null,r,[]),s=t.length;s--;)(o=a[s])&&(t[s]=!(e[s]=o))}):function(t,r,o){return e[0]=t,i(e,null,o,n),e[0]=null,!n.pop()}}),has:r(function(t){return function(n){return e(t,n).length>0}}),contains:r(function(t){return t=t.replace(mt,yt),function(e){return(e.textContent||e.innerText||x(e)).indexOf(t)>-1}}),lang:r(function(t){return lt.test(t||"")||e.error("unsupported lang: "+t),t=t.replace(mt,yt).toLowerCase(),function(e){var n;do{if(n=D?e.lang:e.getAttribute("xml:lang")||e.getAttribute("lang"))return(n=n.toLowerCase())===t||0===n.indexOf(t+"-")}while((e=e.parentNode)&&1===e.nodeType);return!1}}),target:function(e){var n=t.location&&t.location.hash;return n&&n.slice(1)===e.id},root:function(t){return t===N},focus:function(t){return t===j.activeElement&&(!j.hasFocus||j.hasFocus())&&!!(t.type||t.href||~t.tabIndex)},enabled:s(!1),disabled:s(!0),checked:function(t){var e=t.nodeName.toLowerCase();return"input"===e&&!!t.checked||"option"===e&&!!t.selected},selected:function(t){return t.parentNode&&t.parentNode.selectedIndex,!0===t.selected},empty:function(t){for(t=t.firstChild;t;t=t.nextSibling)if(t.nodeType<6)return!1;return!0},parent:function(t){return!w.pseudos.empty(t)},header:function(t){return dt.test(t.nodeName)},input:function(t){return pt.test(t.nodeName)},button:function(t){var e=t.nodeName.toLowerCase();return"input"===e&&"button"===t.type||"button"===e},text:function(t){var e;return"input"===t.nodeName.toLowerCase()&&"text"===t.type&&(null==(e=t.getAttribute("type"))||"text"===e.toLowerCase())},first:u(function(){return[0]}),last:u(function(t,e){return[e-1]}),eq:u(function(t,e,n){return[n<0?n+e:n]}),even:u(function(t,e){for(var n=0;n<e;n+=2)t.push(n);return t}),odd:u(function(t,e){for(var n=1;n<e;n+=2)t.push(n);return t}),lt:u(function(t,e,n){for(var r=n<0?n+e:n;--r>=0;)t.push(r);return t}),gt:u(function(t,e,n){for(var r=n<0?n+e:n;++r<e;)t.push(r);return t})}},w.pseudos.nth=w.pseudos.eq;for(b in{radio:!0,checkbox:!0,file:!0,password:!0,image:!0})w.pseudos[b]=function(t){return function(e){return"input"===e.nodeName.toLowerCase()&&e.type===t}}(b);for(b in{submit:!0,reset:!0})w.pseudos[b]=function(t){return function(e){var n=e.nodeName.toLowerCase();return("input"===n||"button"===n)&&e.type===t}}(b);return l.prototype=w.filters=w.pseudos,w.setFilters=new l,T=e.tokenize=function(t,n){var r,i,o,a,s,u,c,l=U[t+" "];if(l)return n?0:l.slice(0);for(s=t,u=[],c=w.preFilter;s;){r&&!(i=at.exec(s))||(i&&(s=s.slice(i[0].length)||s),u.push(o=[])),r=!1,(i=st.exec(s))&&(r=i.shift(),o.push({value:r,type:i[0].replace(ot," ")}),s=s.slice(r.length));for(a in w.filter)!(i=ft[a].exec(s))||c[a]&&!(i=c[a](i))||(r=i.shift(),o.push({value:r,type:a,matches:i}),s=s.slice(r.length));if(!r)break}return n?s.length:s?e.error(t):U(t,u).slice(0)},$=e.compile=function(t,e){var n,r=[],i=[],o=W[t+" "];if(!o){for(e||(e=T(t)),n=e.length;n--;)o=m(e[n]),o[F]?r.push(o):i.push(o);o=W(t,y(i,r)),o.selector=t}return o},A=e.select=function(t,e,n,r){var i,o,a,s,u,l="function"==typeof t&&t,p=!r&&T(t=l.selector||t);if(n=n||[],1===p.length){if(o=p[0]=p[0].slice(0),o.length>2&&"ID"===(a=o[0]).type&&9===e.nodeType&&D&&w.relative[o[1].type]){if(!(e=(w.find.ID(a.matches[0].replace(mt,yt),e)||[])[0]))return n;l&&(e=e.parentNode),t=t.slice(o.shift().value.length)}for(i=ft.needsContext.test(t)?0:o.length;i--&&(a=o[i],!w.relative[s=a.type]);)if((u=w.find[s])&&(r=u(a.matches[0].replace(mt,yt),gt.test(o[0].type)&&c(e.parentNode)||e))){if(o.splice(i,1),!(t=r.length&&f(o)))return Q.apply(n,r),n;break}}return(l||$(t,p))(r,e,!D,n,!e||gt.test(t)&&c(e.parentNode)||e),n},_.sortStable=F.split("").sort(z).join("")===F,_.detectDuplicates=!!S,O(),_.sortDetached=i(function(t){return 1&t.compareDocumentPosition(j.createElement("fieldset"))}),i(function(t){return t.innerHTML="<a href='#'></a>","#"===t.firstChild.getAttribute("href")})||o("type|href|height|width",function(t,e,n){if(!n)return t.getAttribute(e,"type"===e.toLowerCase()?1:2)}),_.attributes&&i(function(t){return t.innerHTML="<input/>",t.firstChild.setAttribute("value",""),""===t.firstChild.getAttribute("value")})||o("value",function(t,e,n){if(!n&&"input"===t.nodeName.toLowerCase())return t.defaultValue}),i(function(t){return null==t.getAttribute("disabled")})||o(Y,function(t,e,n){var r;if(!n)return!0===t[e]?e.toLowerCase():(r=t.getAttributeNode(e))&&r.specified?r.value:null}),e}(n);yt.find=Ct,yt.expr=Ct.selectors,yt.expr[":"]=yt.expr.pseudos,yt.uniqueSort=yt.unique=Ct.uniqueSort,yt.text=Ct.getText,yt.isXMLDoc=Ct.isXML,yt.contains=Ct.contains,yt.escapeSelector=Ct.escape;var Tt=function(t,e,n){for(var r=[],i=void 0!==n;(t=t[e])&&9!==t.nodeType;)if(1===t.nodeType){if(i&&yt(t).is(n))break;r.push(t)}return r},$t=function(t,e){for(var n=[];t;t=t.nextSibling)1===t.nodeType&&t!==e&&n.push(t);return n},At=yt.expr.match.needsContext,kt=/^<([a-z][^\/\0>:\x20\t\r\n\f]*)[\x20\t\r\n\f]*\/?>(?:<\/\1>|)$/i,Et=/^.[^:#\[\.,]*$/;yt.filter=function(t,e,n){var r=e[0];return n&&(t=":not("+t+")"),1===e.length&&1===r.nodeType?yt.find.matchesSelector(r,t)?[r]:[]:yt.find.matches(t,yt.grep(e,function(t){return 1===t.nodeType}))},yt.fn.extend({find:function(t){var e,n,r=this.length,i=this;if("string"!=typeof t)return this.pushStack(yt(t).filter(function(){for(e=0;e<r;e++)if(yt.contains(i[e],this))return!0}));for(n=this.pushStack([]),e=0;e<r;e++)yt.find(t,i[e],n);return r>1?yt.uniqueSort(n):n},filter:function(t){return this.pushStack(c(this,t||[],!1))},not:function(t){return this.pushStack(c(this,t||[],!0))},is:function(t){return!!c(this,"string"==typeof t&&At.test(t)?yt(t):t||[],!1).length}});var St,Ot=/^(?:\s*(<[\w\W]+>)[^>]*|#([\w-]+))$/;(yt.fn.init=function(t,e,n){var r,i;if(!t)return this;if(n=n||St,"string"==typeof t){if(!(r="<"===t[0]&&">"===t[t.length-1]&&t.length>=3?[null,t,null]:Ot.exec(t))||!r[1]&&e)return!e||e.jquery?(e||n).find(t):this.constructor(e).find(t);if(r[1]){if(e=e instanceof yt?e[0]:e,yt.merge(this,yt.parseHTML(r[1],e&&e.nodeType?e.ownerDocument||e:at,!0)),kt.test(r[1])&&yt.isPlainObject(e))for(r in e)yt.isFunction(this[r])?this[r](e[r]):this.attr(r,e[r]);return this}return i=at.getElementById(r[2]),i&&(this[0]=i,this.length=1),this}return t.nodeType?(this[0]=t,this.length=1,this):yt.isFunction(t)?void 0!==n.ready?n.ready(t):t(yt):yt.makeArray(t,this)}).prototype=yt.fn,St=yt(at);var jt=/^(?:parents|prev(?:Until|All))/,Nt={children:!0,contents:!0,next:!0,prev:!0};yt.fn.extend({has:function(t){var e=yt(t,this),n=e.length;return this.filter(function(){for(var t=0;t<n;t++)if(yt.contains(this,e[t]))return!0})},closest:function(t,e){var n,r=0,i=this.length,o=[],a="string"!=typeof t&&yt(t);if(!At.test(t))for(;r<i;r++)for(n=this[r];n&&n!==e;n=n.parentNode)if(n.nodeType<11&&(a?a.index(n)>-1:1===n.nodeType&&yt.find.matchesSelector(n,t))){o.push(n);break}return this.pushStack(o.length>1?yt.uniqueSort(o):o)},index:function(t){return t?"string"==typeof t?ft.call(yt(t),this[0]):ft.call(this,t.jquery?t[0]:t):this[0]&&this[0].parentNode?this.first().prevAll().length:-1},add:function(t,e){return this.pushStack(yt.uniqueSort(yt.merge(this.get(),yt(t,e))))},addBack:function(t){return this.add(null==t?this.prevObject:this.prevObject.filter(t))}}),yt.each({parent:function(t){var e=t.parentNode;return e&&11!==e.nodeType?e:null},parents:function(t){return Tt(t,"parentNode")},parentsUntil:function(t,e,n){return Tt(t,"parentNode",n)},next:function(t){return l(t,"nextSibling")},prev:function(t){return l(t,"previousSibling")},nextAll:function(t){return Tt(t,"nextSibling")},prevAll:function(t){return Tt(t,"previousSibling")},nextUntil:function(t,e,n){return Tt(t,"nextSibling",n)},prevUntil:function(t,e,n){return Tt(t,"previousSibling",n)},siblings:function(t){return $t((t.parentNode||{}).firstChild,t)},children:function(t){return $t(t.firstChild)},contents:function(t){return u(t,"iframe")?t.contentDocument:(u(t,"template")&&(t=t.content||t),yt.merge([],t.childNodes))}},function(t,e){yt.fn[t]=function(n,r){var i=yt.map(this,e,n);return"Until"!==t.slice(-5)&&(r=n),r&&"string"==typeof r&&(i=yt.filter(r,i)),this.length>1&&(Nt[t]||yt.uniqueSort(i),jt.test(t)&&i.reverse()),this.pushStack(i)}});var Dt=/[^\x20\t\r\n\f]+/g;yt.Callbacks=function(t){t="string"==typeof t?f(t):yt.extend({},t);var e,n,r,i,o=[],a=[],s=-1,u=function(){for(i=i||t.once,r=e=!0;a.length;s=-1)for(n=a.shift();++s<o.length;)!1===o[s].apply(n[0],n[1])&&t.stopOnFalse&&(s=o.length,n=!1);t.memory||(n=!1),e=!1,i&&(o=n?[]:"")},c={add:function(){return o&&(n&&!e&&(s=o.length-1,a.push(n)),function e(n){yt.each(n,function(n,r){yt.isFunction(r)?t.unique&&c.has(r)||o.push(r):r&&r.length&&"string"!==yt.type(r)&&e(r)})}(arguments),n&&!e&&u()),this},remove:function(){return yt.each(arguments,function(t,e){for(var n;(n=yt.inArray(e,o,n))>-1;)o.splice(n,1),n<=s&&s--}),this},has:function(t){return t?yt.inArray(t,o)>-1:o.length>0},empty:function(){return o&&(o=[]),this},disable:function(){return i=a=[],o=n="",this},disabled:function(){return!o},lock:function(){return i=a=[],n||e||(o=n=""),this},locked:function(){return!!i},fireWith:function(t,n){return i||(n=n||[],n=[t,n.slice?n.slice():n],a.push(n),e||u()),this},fire:function(){return c.fireWith(this,arguments),this},fired:function(){return!!r}};return c},yt.extend({Deferred:function(t){var e=[["notify","progress",yt.Callbacks("memory"),yt.Callbacks("memory"),2],["resolve","done",yt.Callbacks("once memory"),yt.Callbacks("once memory"),0,"resolved"],["reject","fail",yt.Callbacks("once memory"),yt.Callbacks("once memory"),1,"rejected"]],r="pending",i={state:function(){return r},always:function(){return o.done(arguments).fail(arguments),this},catch:function(t){return i.then(null,t)},pipe:function(){var t=arguments;return yt.Deferred(function(n){yt.each(e,function(e,r){var i=yt.isFunction(t[r[4]])&&t[r[4]];o[r[1]](function(){var t=i&&i.apply(this,arguments);t&&yt.isFunction(t.promise)?t.promise().progress(n.notify).done(n.resolve).fail(n.reject):n[r[0]+"With"](this,i?[t]:arguments)})}),t=null}).promise()},then:function(t,r,i){function o(t,e,r,i){return function(){var s=this,u=arguments,c=function(){var n,c;if(!(t<a)){if((n=r.apply(s,u))===e.promise())throw new TypeError("Thenable self-resolution");c=n&&("object"==typeof n||"function"==typeof n)&&n.then,yt.isFunction(c)?i?c.call(n,o(a,e,p,i),o(a,e,d,i)):(a++,c.call(n,o(a,e,p,i),o(a,e,d,i),o(a,e,p,e.notifyWith))):(r!==p&&(s=void 0,u=[n]),(i||e.resolveWith)(s,u))}},l=i?c:function(){try{c()}catch(n){yt.Deferred.exceptionHook&&yt.Deferred.exceptionHook(n,l.stackTrace),t+1>=a&&(r!==d&&(s=void 0,u=[n]),e.rejectWith(s,u))}};t?l():(yt.Deferred.getStackHook&&(l.stackTrace=yt.Deferred.getStackHook()),n.setTimeout(l))}}var a=0;return yt.Deferred(function(n){e[0][3].add(o(0,n,yt.isFunction(i)?i:p,n.notifyWith)),e[1][3].add(o(0,n,yt.isFunction(t)?t:p)),e[2][3].add(o(0,n,yt.isFunction(r)?r:d))}).promise()},promise:function(t){return null!=t?yt.extend(t,i):i}},o={};return yt.each(e,function(t,n){var a=n[2],s=n[5];i[n[1]]=a.add,s&&a.add(function(){r=s},e[3-t][2].disable,e[0][2].lock),a.add(n[3].fire),o[n[0]]=function(){return o[n[0]+"With"](this===o?void 0:this,arguments),this},o[n[0]+"With"]=a.fireWith}),i.promise(o),t&&t.call(o,o),o},when:function(t){var e=arguments.length,n=e,r=Array(n),i=ut.call(arguments),o=yt.Deferred(),a=function(t){return function(n){r[t]=this,i[t]=arguments.length>1?ut.call(arguments):n,--e||o.resolveWith(r,i)}};if(e<=1&&(h(t,o.done(a(n)).resolve,o.reject,!e),"pending"===o.state()||yt.isFunction(i[n]&&i[n].then)))return o.then();for(;n--;)h(i[n],a(n),o.reject);return o.promise()}});var It=/^(Eval|Internal|Range|Reference|Syntax|Type|URI)Error$/;yt.Deferred.exceptionHook=function(t,e){n.console&&n.console.warn&&t&&It.test(t.name)&&n.console.warn("jQuery.Deferred exception: "+t.message,t.stack,e)},yt.readyException=function(t){n.setTimeout(function(){throw t})};var Lt=yt.Deferred();yt.fn.ready=function(t){return Lt.then(t).catch(function(t){yt.readyException(t)}),this},yt.extend({isReady:!1,readyWait:1,ready:function(t){(!0===t?--yt.readyWait:yt.isReady)||(yt.isReady=!0,!0!==t&&--yt.readyWait>0||Lt.resolveWith(at,[yt]))}}),yt.ready.then=Lt.then,"complete"===at.readyState||"loading"!==at.readyState&&!at.documentElement.doScroll?n.setTimeout(yt.ready):(at.addEventListener("DOMContentLoaded",v),n.addEventListener("load",v));var Rt=function(t,e,n,r,i,o,a){var s=0,u=t.length,c=null==n;if("object"===yt.type(n)){i=!0;for(s in n)Rt(t,e,s,n[s],!0,o,a)}else if(void 0!==r&&(i=!0,yt.isFunction(r)||(a=!0),c&&(a?(e.call(t,r),e=null):(c=e,e=function(t,e,n){return c.call(yt(t),n)})),e))for(;s<u;s++)e(t[s],n,a?r:r.call(t[s],s,e(t[s],n)));return i?t:c?e.call(t):u?e(t[0],n):o},Pt=function(t){return 1===t.nodeType||9===t.nodeType||!+t.nodeType};g.uid=1,g.prototype={cache:function(t){var e=t[this.expando];return e||(e={},Pt(t)&&(t.nodeType?t[this.expando]=e:Object.defineProperty(t,this.expando,{value:e,configurable:!0}))),e},set:function(t,e,n){var r,i=this.cache(t);if("string"==typeof e)i[yt.camelCase(e)]=n;else for(r in e)i[yt.camelCase(r)]=e[r];return i},get:function(t,e){return void 0===e?this.cache(t):t[this.expando]&&t[this.expando][yt.camelCase(e)]},access:function(t,e,n){return void 0===e||e&&"string"==typeof e&&void 0===n?this.get(t,e):(this.set(t,e,n),void 0!==n?n:e)},remove:function(t,e){var n,r=t[this.expando];if(void 0!==r){if(void 0!==e){Array.isArray(e)?e=e.map(yt.camelCase):(e=yt.camelCase(e),e=e in r?[e]:e.match(Dt)||[]),n=e.length;for(;n--;)delete r[e[n]]}(void 0===e||yt.isEmptyObject(r))&&(t.nodeType?t[this.expando]=void 0:delete t[this.expando])}},hasData:function(t){var e=t[this.expando];return void 0!==e&&!yt.isEmptyObject(e)}};var Ft=new g,Mt=new g,qt=/^(?:\{[\w\W]*\}|\[[\w\W]*\])$/,Ht=/[A-Z]/g;yt.extend({hasData:function(t){return Mt.hasData(t)||Ft.hasData(t)},data:function(t,e,n){return Mt.access(t,e,n)},removeData:function(t,e){Mt.remove(t,e)},_data:function(t,e,n){return Ft.access(t,e,n)},_removeData:function(t,e){Ft.remove(t,e)}}),yt.fn.extend({data:function(t,e){var n,r,i,o=this[0],a=o&&o.attributes;if(void 0===t){if(this.length&&(i=Mt.get(o),1===o.nodeType&&!Ft.get(o,"hasDataAttrs"))){for(n=a.length;n--;)a[n]&&(r=a[n].name,0===r.indexOf("data-")&&(r=yt.camelCase(r.slice(5)),y(o,r,i[r])));Ft.set(o,"hasDataAttrs",!0)}return i}return"object"==typeof t?this.each(function(){Mt.set(this,t)}):Rt(this,function(e){var n;if(o&&void 0===e){if(void 0!==(n=Mt.get(o,t)))return n;if(void 0!==(n=y(o,t)))return n}else this.each(function(){Mt.set(this,t,e)})},null,e,arguments.length>1,null,!0)},removeData:function(t){return this.each(function(){Mt.remove(this,t)})}}),yt.extend({queue:function(t,e,n){var r;if(t)return e=(e||"fx")+"queue",r=Ft.get(t,e),n&&(!r||Array.isArray(n)?r=Ft.access(t,e,yt.makeArray(n)):r.push(n)),r||[]},dequeue:function(t,e){e=e||"fx";var n=yt.queue(t,e),r=n.length,i=n.shift(),o=yt._queueHooks(t,e),a=function(){yt.dequeue(t,e)};"inprogress"===i&&(i=n.shift(),r--),i&&("fx"===e&&n.unshift("inprogress"),delete o.stop,i.call(t,a,o)),!r&&o&&o.empty.fire()},_queueHooks:function(t,e){var n=e+"queueHooks";return Ft.get(t,n)||Ft.access(t,n,{empty:yt.Callbacks("once memory").add(function(){Ft.remove(t,[e+"queue",n])})})}}),yt.fn.extend({queue:function(t,e){var n=2;return"string"!=typeof t&&(e=t,t="fx",n--),arguments.length<n?yt.queue(this[0],t):void 0===e?this:this.each(function(){var n=yt.queue(this,t,e);yt._queueHooks(this,t),"fx"===t&&"inprogress"!==n[0]&&yt.dequeue(this,t)})},dequeue:function(t){return this.each(function(){yt.dequeue(this,t)})},clearQueue:function(t){return this.queue(t||"fx",[])},promise:function(t,e){var n,r=1,i=yt.Deferred(),o=this,a=this.length,s=function(){--r||i.resolveWith(o,[o])};for("string"!=typeof t&&(e=t,t=void 0),t=t||"fx";a--;)(n=Ft.get(o[a],t+"queueHooks"))&&n.empty&&(r++,n.empty.add(s));return s(),i.promise(e)}});var Bt=/[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/.source,Ut=new RegExp("^(?:([+-])=|)("+Bt+")([a-z%]*)$","i"),Wt=["Top","Right","Bottom","Left"],zt=function(t,e){return t=e||t,"none"===t.style.display||""===t.style.display&&yt.contains(t.ownerDocument,t)&&"none"===yt.css(t,"display")},Vt=function(t,e,n,r){var i,o,a={};for(o in e)a[o]=t.style[o],t.style[o]=e[o];i=n.apply(t,r||[]);for(o in e)t.style[o]=a[o];return i},Xt={};yt.fn.extend({show:function(){return w(this,!0)},hide:function(){return w(this)},toggle:function(t){return"boolean"==typeof t?t?this.show():this.hide():this.each(function(){zt(this)?yt(this).show():yt(this).hide()})}});var Kt=/^(?:checkbox|radio)$/i,Jt=/<([a-z][^\/\0>\x20\t\r\n\f]+)/i,Qt=/^$|\/(?:java|ecma)script/i,Gt={option:[1,"<select multiple='multiple'>","</select>"],thead:[1,"<table>","</table>"],col:[2,"<table><colgroup>","</colgroup></table>"],tr:[2,"<table><tbody>","</tbody></table>"],td:[3,"<table><tbody><tr>","</tr></tbody></table>"],_default:[0,"",""]};Gt.optgroup=Gt.option,Gt.tbody=Gt.tfoot=Gt.colgroup=Gt.caption=Gt.thead,Gt.th=Gt.td;var Zt=/<|&#?\w+;/;!function(){var t=at.createDocumentFragment(),e=t.appendChild(at.createElement("div")),n=at.createElement("input");n.setAttribute("type","radio"),n.setAttribute("checked","checked"),n.setAttribute("name","t"),e.appendChild(n),mt.checkClone=e.cloneNode(!0).cloneNode(!0).lastChild.checked,e.innerHTML="<textarea>x</textarea>",mt.noCloneChecked=!!e.cloneNode(!0).lastChild.defaultValue}();var Yt=at.documentElement,te=/^key/,ee=/^(?:mouse|pointer|contextmenu|drag|drop)|click/,ne=/^([^.]*)(?:\.(.+)|)/;yt.event={global:{},add:function(t,e,n,r,i){var o,a,s,u,c,l,f,p,d,h,v,g=Ft.get(t);if(g)for(n.handler&&(o=n,n=o.handler,i=o.selector),i&&yt.find.matchesSelector(Yt,i),n.guid||(n.guid=yt.guid++),(u=g.events)||(u=g.events={}),(a=g.handle)||(a=g.handle=function(e){return void 0!==yt&&yt.event.triggered!==e.type?yt.event.dispatch.apply(t,arguments):void 0}),e=(e||"").match(Dt)||[""],c=e.length;c--;)s=ne.exec(e[c])||[],d=v=s[1],h=(s[2]||"").split(".").sort(),d&&(f=yt.event.special[d]||{},d=(i?f.delegateType:f.bindType)||d,f=yt.event.special[d]||{},l=yt.extend({type:d,origType:v,data:r,handler:n,guid:n.guid,selector:i,needsContext:i&&yt.expr.match.needsContext.test(i),namespace:h.join(".")},o),(p=u[d])||(p=u[d]=[],p.delegateCount=0,f.setup&&!1!==f.setup.call(t,r,h,a)||t.addEventListener&&t.addEventListener(d,a)),f.add&&(f.add.call(t,l),l.handler.guid||(l.handler.guid=n.guid)),i?p.splice(p.delegateCount++,0,l):p.push(l),yt.event.global[d]=!0)},remove:function(t,e,n,r,i){var o,a,s,u,c,l,f,p,d,h,v,g=Ft.hasData(t)&&Ft.get(t);if(g&&(u=g.events)){for(e=(e||"").match(Dt)||[""],c=e.length;c--;)if(s=ne.exec(e[c])||[],d=v=s[1],h=(s[2]||"").split(".").sort(),d){for(f=yt.event.special[d]||{},d=(r?f.delegateType:f.bindType)||d,p=u[d]||[],s=s[2]&&new RegExp("(^|\\.)"+h.join("\\.(?:.*\\.|)")+"(\\.|$)"),a=o=p.length;o--;)l=p[o],!i&&v!==l.origType||n&&n.guid!==l.guid||s&&!s.test(l.namespace)||r&&r!==l.selector&&("**"!==r||!l.selector)||(p.splice(o,1),l.selector&&p.delegateCount--,f.remove&&f.remove.call(t,l));a&&!p.length&&(f.teardown&&!1!==f.teardown.call(t,h,g.handle)||yt.removeEvent(t,d,g.handle),delete u[d])}else for(d in u)yt.event.remove(t,d+e[c],n,r,!0);yt.isEmptyObject(u)&&Ft.remove(t,"handle events")}},dispatch:function(t){var e,n,r,i,o,a,s=yt.event.fix(t),u=new Array(arguments.length),c=(Ft.get(this,"events")||{})[s.type]||[],l=yt.event.special[s.type]||{};for(u[0]=s,e=1;e<arguments.length;e++)u[e]=arguments[e];if(s.delegateTarget=this,!l.preDispatch||!1!==l.preDispatch.call(this,s)){for(a=yt.event.handlers.call(this,s,c),e=0;(i=a[e++])&&!s.isPropagationStopped();)for(s.currentTarget=i.elem,n=0;(o=i.handlers[n++])&&!s.isImmediatePropagationStopped();)s.rnamespace&&!s.rnamespace.test(o.namespace)||(s.handleObj=o,s.data=o.data,void 0!==(r=((yt.event.special[o.origType]||{}).handle||o.handler).apply(i.elem,u))&&!1===(s.result=r)&&(s.preventDefault(),s.stopPropagation()));return l.postDispatch&&l.postDispatch.call(this,s),s.result}},handlers:function(t,e){var n,r,i,o,a,s=[],u=e.delegateCount,c=t.target;if(u&&c.nodeType&&!("click"===t.type&&t.button>=1))for(;c!==this;c=c.parentNode||this)if(1===c.nodeType&&("click"!==t.type||!0!==c.disabled)){for(o=[],a={},n=0;n<u;n++)r=e[n],i=r.selector+" ",void 0===a[i]&&(a[i]=r.needsContext?yt(i,this).index(c)>-1:yt.find(i,this,null,[c]).length),a[i]&&o.push(r);o.length&&s.push({elem:c,handlers:o})}return c=this,u<e.length&&s.push({elem:c,handlers:e.slice(u)}),s},addProp:function(t,e){Object.defineProperty(yt.Event.prototype,t,{enumerable:!0,configurable:!0,get:yt.isFunction(e)?function(){if(this.originalEvent)return e(this.originalEvent)}:function(){if(this.originalEvent)return this.originalEvent[t]},set:function(e){Object.defineProperty(this,t,{enumerable:!0,configurable:!0,writable:!0,value:e})}})},fix:function(t){return t[yt.expando]?t:new yt.Event(t)},special:{load:{noBubble:!0},focus:{trigger:function(){if(this!==k()&&this.focus)return this.focus(),!1},delegateType:"focusin"},blur:{trigger:function(){if(this===k()&&this.blur)return this.blur(),!1},delegateType:"focusout"},click:{trigger:function(){if("checkbox"===this.type&&this.click&&u(this,"input"))return this.click(),!1},_default:function(t){return u(t.target,"a")}},beforeunload:{postDispatch:function(t){void 0!==t.result&&t.originalEvent&&(t.originalEvent.returnValue=t.result)}}}},yt.removeEvent=function(t,e,n){t.removeEventListener&&t.removeEventListener(e,n)},yt.Event=function(t,e){if(!(this instanceof yt.Event))return new yt.Event(t,e);t&&t.type?(this.originalEvent=t,this.type=t.type,this.isDefaultPrevented=t.defaultPrevented||void 0===t.defaultPrevented&&!1===t.returnValue?$:A,this.target=t.target&&3===t.target.nodeType?t.target.parentNode:t.target,this.currentTarget=t.currentTarget,this.relatedTarget=t.relatedTarget):this.type=t,e&&yt.extend(this,e),this.timeStamp=t&&t.timeStamp||yt.now(),this[yt.expando]=!0},yt.Event.prototype={constructor:yt.Event,isDefaultPrevented:A,isPropagationStopped:A,isImmediatePropagationStopped:A,isSimulated:!1,preventDefault:function(){var t=this.originalEvent;this.isDefaultPrevented=$,t&&!this.isSimulated&&t.preventDefault()},stopPropagation:function(){var t=this.originalEvent;this.isPropagationStopped=$,t&&!this.isSimulated&&t.stopPropagation()},stopImmediatePropagation:function(){var t=this.originalEvent;this.isImmediatePropagationStopped=$,t&&!this.isSimulated&&t.stopImmediatePropagation(),this.stopPropagation()}},yt.each({altKey:!0,bubbles:!0,cancelable:!0,changedTouches:!0,ctrlKey:!0,detail:!0,eventPhase:!0,metaKey:!0,pageX:!0,pageY:!0,shiftKey:!0,view:!0,char:!0,charCode:!0,key:!0,keyCode:!0,button:!0,buttons:!0,clientX:!0,clientY:!0,offsetX:!0,offsetY:!0,pointerId:!0,pointerType:!0,screenX:!0,screenY:!0,targetTouches:!0,toElement:!0,touches:!0,which:function(t){var e=t.button;return null==t.which&&te.test(t.type)?null!=t.charCode?t.charCode:t.keyCode:!t.which&&void 0!==e&&ee.test(t.type)?1&e?1:2&e?3:4&e?2:0:t.which}},yt.event.addProp),yt.each({mouseenter:"mouseover",mouseleave:"mouseout",pointerenter:"pointerover",pointerleave:"pointerout"},function(t,e){yt.event.special[t]={delegateType:e,bindType:e,handle:function(t){var n,r=this,i=t.relatedTarget,o=t.handleObj;return i&&(i===r||yt.contains(r,i))||(t.type=o.origType,n=o.handler.apply(this,arguments),t.type=e),n}}}),yt.fn.extend({on:function(t,e,n,r){return E(this,t,e,n,r)},one:function(t,e,n,r){return E(this,t,e,n,r,1)},off:function(t,e,n){var r,i;if(t&&t.preventDefault&&t.handleObj)return r=t.handleObj,yt(t.delegateTarget).off(r.namespace?r.origType+"."+r.namespace:r.origType,r.selector,r.handler),this;if("object"==typeof t){for(i in t)this.off(i,e,t[i]);return this}return!1!==e&&"function"!=typeof e||(n=e,e=void 0),!1===n&&(n=A),this.each(function(){yt.event.remove(this,t,n,e)})}});var re=/<(?!area|br|col|embed|hr|img|input|link|meta|param)(([a-z][^\/\0>\x20\t\r\n\f]*)[^>]*)\/>/gi,ie=/<script|<style|<link/i,oe=/checked\s*(?:[^=]|=\s*.checked.)/i,ae=/^true\/(.*)/,se=/^\s*<!(?:\[CDATA\[|--)|(?:\]\]|--)>\s*$/g;yt.extend({htmlPrefilter:function(t){return t.replace(re,"<$1></$2>")},clone:function(t,e,n){var r,i,o,a,s=t.cloneNode(!0),u=yt.contains(t.ownerDocument,t);if(!(mt.noCloneChecked||1!==t.nodeType&&11!==t.nodeType||yt.isXMLDoc(t)))for(a=x(s),o=x(t),r=0,i=o.length;r<i;r++)D(o[r],a[r]);if(e)if(n)for(o=o||x(t),a=a||x(s),r=0,i=o.length;r<i;r++)N(o[r],a[r]);else N(t,s);return a=x(s,"script"),a.length>0&&C(a,!u&&x(t,"script")),s},cleanData:function(t){for(var e,n,r,i=yt.event.special,o=0;void 0!==(n=t[o]);o++)if(Pt(n)){if(e=n[Ft.expando]){if(e.events)for(r in e.events)i[r]?yt.event.remove(n,r):yt.removeEvent(n,r,e.handle);n[Ft.expando]=void 0}n[Mt.expando]&&(n[Mt.expando]=void 0)}}}),yt.fn.extend({detach:function(t){return L(this,t,!0)},remove:function(t){return L(this,t)},text:function(t){return Rt(this,function(t){return void 0===t?yt.text(this):this.empty().each(function(){1!==this.nodeType&&11!==this.nodeType&&9!==this.nodeType||(this.textContent=t)})},null,t,arguments.length)},append:function(){return I(this,arguments,function(t){if(1===this.nodeType||11===this.nodeType||9===this.nodeType){S(this,t).appendChild(t)}})},prepend:function(){return I(this,arguments,function(t){if(1===this.nodeType||11===this.nodeType||9===this.nodeType){var e=S(this,t);e.insertBefore(t,e.firstChild)}})},before:function(){return I(this,arguments,function(t){this.parentNode&&this.parentNode.insertBefore(t,this)})},after:function(){return I(this,arguments,function(t){this.parentNode&&this.parentNode.insertBefore(t,this.nextSibling)})},empty:function(){for(var t,e=0;null!=(t=this[e]);e++)1===t.nodeType&&(yt.cleanData(x(t,!1)),t.textContent="");return this},clone:function(t,e){return t=null!=t&&t,e=null==e?t:e,this.map(function(){return yt.clone(this,t,e)})},html:function(t){return Rt(this,function(t){var e=this[0]||{},n=0,r=this.length;if(void 0===t&&1===e.nodeType)return e.innerHTML;if("string"==typeof t&&!ie.test(t)&&!Gt[(Jt.exec(t)||["",""])[1].toLowerCase()]){t=yt.htmlPrefilter(t);try{for(;n<r;n++)e=this[n]||{},1===e.nodeType&&(yt.cleanData(x(e,!1)),e.innerHTML=t);e=0}catch(t){}}e&&this.empty().append(t)},null,t,arguments.length)},replaceWith:function(){var t=[];return I(this,arguments,function(e){var n=this.parentNode;yt.inArray(this,t)<0&&(yt.cleanData(x(this)),n&&n.replaceChild(e,this))},t)}}),yt.each({appendTo:"append",prependTo:"prepend",insertBefore:"before",insertAfter:"after",replaceAll:"replaceWith"},function(t,e){yt.fn[t]=function(t){for(var n,r=[],i=yt(t),o=i.length-1,a=0;a<=o;a++)n=a===o?this:this.clone(!0),yt(i[a])[e](n),lt.apply(r,n.get());return this.pushStack(r)}});var ue=/^margin/,ce=new RegExp("^("+Bt+")(?!px)[a-z%]+$","i"),le=function(t){var e=t.ownerDocument.defaultView;return e&&e.opener||(e=n),e.getComputedStyle(t)};!function(){function t(){if(s){s.style.cssText="box-sizing:border-box;position:relative;display:block;margin:auto;border:1px;padding:1px;top:1%;width:50%",s.innerHTML="",Yt.appendChild(a);var t=n.getComputedStyle(s);e="1%"!==t.top,o="2px"===t.marginLeft,r="4px"===t.width,s.style.marginRight="50%",i="4px"===t.marginRight,Yt.removeChild(a),s=null}}var e,r,i,o,a=at.createElement("div"),s=at.createElement("div");s.style&&(s.style.backgroundClip="content-box",s.cloneNode(!0).style.backgroundClip="",mt.clearCloneStyle="content-box"===s.style.backgroundClip,a.style.cssText="border:0;width:8px;height:0;top:0;left:-9999px;padding:0;margin-top:1px;position:absolute",a.appendChild(s),yt.extend(mt,{pixelPosition:function(){return t(),e},boxSizingReliable:function(){return t(),r},pixelMarginRight:function(){return t(),i},reliableMarginLeft:function(){return t(),o}}))}();var fe=/^(none|table(?!-c[ea]).+)/,pe=/^--/,de={position:"absolute",visibility:"hidden",display:"block"},he={letterSpacing:"0",fontWeight:"400"},ve=["Webkit","Moz","ms"],ge=at.createElement("div").style;yt.extend({cssHooks:{opacity:{get:function(t,e){if(e){var n=R(t,"opacity");return""===n?"1":n}}}},cssNumber:{animationIterationCount:!0,columnCount:!0,fillOpacity:!0,flexGrow:!0,flexShrink:!0,fontWeight:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,widows:!0,zIndex:!0,zoom:!0},cssProps:{float:"cssFloat"},style:function(t,e,n,r){if(t&&3!==t.nodeType&&8!==t.nodeType&&t.style){var i,o,a,s=yt.camelCase(e),u=pe.test(e),c=t.style;if(u||(e=M(s)),a=yt.cssHooks[e]||yt.cssHooks[s],void 0===n)return a&&"get"in a&&void 0!==(i=a.get(t,!1,r))?i:c[e];o=typeof n,"string"===o&&(i=Ut.exec(n))&&i[1]&&(n=b(t,e,i),o="number"),null!=n&&n===n&&("number"===o&&(n+=i&&i[3]||(yt.cssNumber[s]?"":"px")),mt.clearCloneStyle||""!==n||0!==e.indexOf("background")||(c[e]="inherit"),a&&"set"in a&&void 0===(n=a.set(t,n,r))||(u?c.setProperty(e,n):c[e]=n))}},css:function(t,e,n,r){var i,o,a,s=yt.camelCase(e);return pe.test(e)||(e=M(s)),a=yt.cssHooks[e]||yt.cssHooks[s],a&&"get"in a&&(i=a.get(t,!0,n)),void 0===i&&(i=R(t,e,r)),"normal"===i&&e in he&&(i=he[e]),""===n||n?(o=parseFloat(i),!0===n||isFinite(o)?o||0:i):i}}),yt.each(["height","width"],function(t,e){yt.cssHooks[e]={get:function(t,n,r){if(n)return!fe.test(yt.css(t,"display"))||t.getClientRects().length&&t.getBoundingClientRect().width?B(t,e,r):Vt(t,de,function(){return B(t,e,r)})},set:function(t,n,r){var i,o=r&&le(t),a=r&&H(t,e,r,"border-box"===yt.css(t,"boxSizing",!1,o),o);return a&&(i=Ut.exec(n))&&"px"!==(i[3]||"px")&&(t.style[e]=n,n=yt.css(t,e)),q(t,n,a)}}}),yt.cssHooks.marginLeft=P(mt.reliableMarginLeft,function(t,e){if(e)return(parseFloat(R(t,"marginLeft"))||t.getBoundingClientRect().left-Vt(t,{marginLeft:0},function(){return t.getBoundingClientRect().left}))+"px"}),yt.each({margin:"",padding:"",border:"Width"},function(t,e){yt.cssHooks[t+e]={expand:function(n){for(var r=0,i={},o="string"==typeof n?n.split(" "):[n];r<4;r++)i[t+Wt[r]+e]=o[r]||o[r-2]||o[0];return i}},ue.test(t)||(yt.cssHooks[t+e].set=q)}),yt.fn.extend({css:function(t,e){return Rt(this,function(t,e,n){var r,i,o={},a=0;if(Array.isArray(e)){for(r=le(t),i=e.length;a<i;a++)o[e[a]]=yt.css(t,e[a],!1,r);return o}return void 0!==n?yt.style(t,e,n):yt.css(t,e)},t,e,arguments.length>1)}}),yt.Tween=U,U.prototype={constructor:U,init:function(t,e,n,r,i,o){this.elem=t,this.prop=n,this.easing=i||yt.easing._default,this.options=e,this.start=this.now=this.cur(),this.end=r,this.unit=o||(yt.cssNumber[n]?"":"px")},cur:function(){var t=U.propHooks[this.prop];return t&&t.get?t.get(this):U.propHooks._default.get(this)},run:function(t){var e,n=U.propHooks[this.prop];return this.options.duration?this.pos=e=yt.easing[this.easing](t,this.options.duration*t,0,1,this.options.duration):this.pos=e=t,this.now=(this.end-this.start)*e+this.start,this.options.step&&this.options.step.call(this.elem,this.now,this),n&&n.set?n.set(this):U.propHooks._default.set(this),this}},U.prototype.init.prototype=U.prototype,U.propHooks={_default:{get:function(t){var e;return 1!==t.elem.nodeType||null!=t.elem[t.prop]&&null==t.elem.style[t.prop]?t.elem[t.prop]:(e=yt.css(t.elem,t.prop,""),e&&"auto"!==e?e:0)},set:function(t){yt.fx.step[t.prop]?yt.fx.step[t.prop](t):1!==t.elem.nodeType||null==t.elem.style[yt.cssProps[t.prop]]&&!yt.cssHooks[t.prop]?t.elem[t.prop]=t.now:yt.style(t.elem,t.prop,t.now+t.unit)}}},U.propHooks.scrollTop=U.propHooks.scrollLeft={set:function(t){t.elem.nodeType&&t.elem.parentNode&&(t.elem[t.prop]=t.now)}},yt.easing={linear:function(t){return t},swing:function(t){return.5-Math.cos(t*Math.PI)/2},_default:"swing"},yt.fx=U.prototype.init,yt.fx.step={};var me,ye,be=/^(?:toggle|show|hide)$/,_e=/queueHooks$/;yt.Animation=yt.extend(Q,{tweeners:{"*":[function(t,e){var n=this.createTween(t,e);return b(n.elem,t,Ut.exec(e),n),n}]},tweener:function(t,e){yt.isFunction(t)?(e=t,t=["*"]):t=t.match(Dt);for(var n,r=0,i=t.length;r<i;r++)n=t[r],Q.tweeners[n]=Q.tweeners[n]||[],Q.tweeners[n].unshift(e)},prefilters:[K],prefilter:function(t,e){e?Q.prefilters.unshift(t):Q.prefilters.push(t)}}),yt.speed=function(t,e,n){var r=t&&"object"==typeof t?yt.extend({},t):{complete:n||!n&&e||yt.isFunction(t)&&t,duration:t,easing:n&&e||e&&!yt.isFunction(e)&&e};return yt.fx.off?r.duration=0:"number"!=typeof r.duration&&(r.duration in yt.fx.speeds?r.duration=yt.fx.speeds[r.duration]:r.duration=yt.fx.speeds._default),null!=r.queue&&!0!==r.queue||(r.queue="fx"),r.old=r.complete,r.complete=function(){yt.isFunction(r.old)&&r.old.call(this),r.queue&&yt.dequeue(this,r.queue)},r},yt.fn.extend({fadeTo:function(t,e,n,r){return this.filter(zt).css("opacity",0).show().end().animate({opacity:e},t,n,r)},animate:function(t,e,n,r){var i=yt.isEmptyObject(t),o=yt.speed(e,n,r),a=function(){var e=Q(this,yt.extend({},t),o);(i||Ft.get(this,"finish"))&&e.stop(!0)};return a.finish=a,i||!1===o.queue?this.each(a):this.queue(o.queue,a)},stop:function(t,e,n){var r=function(t){var e=t.stop;delete t.stop,e(n)};return"string"!=typeof t&&(n=e,e=t,t=void 0),e&&!1!==t&&this.queue(t||"fx",[]),this.each(function(){var e=!0,i=null!=t&&t+"queueHooks",o=yt.timers,a=Ft.get(this);if(i)a[i]&&a[i].stop&&r(a[i]);else for(i in a)a[i]&&a[i].stop&&_e.test(i)&&r(a[i]);for(i=o.length;i--;)o[i].elem!==this||null!=t&&o[i].queue!==t||(o[i].anim.stop(n),e=!1,o.splice(i,1));!e&&n||yt.dequeue(this,t)})},finish:function(t){return!1!==t&&(t=t||"fx"),this.each(function(){var e,n=Ft.get(this),r=n[t+"queue"],i=n[t+"queueHooks"],o=yt.timers,a=r?r.length:0;for(n.finish=!0,yt.queue(this,t,[]),i&&i.stop&&i.stop.call(this,!0),e=o.length;e--;)o[e].elem===this&&o[e].queue===t&&(o[e].anim.stop(!0),o.splice(e,1));for(e=0;e<a;e++)r[e]&&r[e].finish&&r[e].finish.call(this);delete n.finish})}}),yt.each(["toggle","show","hide"],function(t,e){var n=yt.fn[e];yt.fn[e]=function(t,r,i){return null==t||"boolean"==typeof t?n.apply(this,arguments):this.animate(V(e,!0),t,r,i)}}),yt.each({slideDown:V("show"),slideUp:V("hide"),slideToggle:V("toggle"),fadeIn:{opacity:"show"},fadeOut:{opacity:"hide"},fadeToggle:{opacity:"toggle"}},function(t,e){yt.fn[t]=function(t,n,r){return this.animate(e,t,n,r)}}),yt.timers=[],yt.fx.tick=function(){var t,e=0,n=yt.timers;for(me=yt.now();e<n.length;e++)(t=n[e])()||n[e]!==t||n.splice(e--,1);n.length||yt.fx.stop(),me=void 0},yt.fx.timer=function(t){yt.timers.push(t),yt.fx.start()},yt.fx.interval=13,yt.fx.start=function(){ye||(ye=!0,W())},yt.fx.stop=function(){ye=null},yt.fx.speeds={slow:600,fast:200,_default:400},yt.fn.delay=function(t,e){return t=yt.fx?yt.fx.speeds[t]||t:t,e=e||"fx",this.queue(e,function(e,r){var i=n.setTimeout(e,t);r.stop=function(){n.clearTimeout(i)}})},function(){var t=at.createElement("input"),e=at.createElement("select"),n=e.appendChild(at.createElement("option"));t.type="checkbox",mt.checkOn=""!==t.value,mt.optSelected=n.selected,t=at.createElement("input"),t.value="t",t.type="radio",mt.radioValue="t"===t.value}();var we,xe=yt.expr.attrHandle;yt.fn.extend({attr:function(t,e){return Rt(this,yt.attr,t,e,arguments.length>1)},removeAttr:function(t){return this.each(function(){yt.removeAttr(this,t)})}}),yt.extend({attr:function(t,e,n){var r,i,o=t.nodeType;if(3!==o&&8!==o&&2!==o)return void 0===t.getAttribute?yt.prop(t,e,n):(1===o&&yt.isXMLDoc(t)||(i=yt.attrHooks[e.toLowerCase()]||(yt.expr.match.bool.test(e)?we:void 0)),void 0!==n?null===n?void yt.removeAttr(t,e):i&&"set"in i&&void 0!==(r=i.set(t,n,e))?r:(t.setAttribute(e,n+""),n):i&&"get"in i&&null!==(r=i.get(t,e))?r:(r=yt.find.attr(t,e),null==r?void 0:r))},attrHooks:{type:{set:function(t,e){if(!mt.radioValue&&"radio"===e&&u(t,"input")){var n=t.value;return t.setAttribute("type",e),n&&(t.value=n),e}}}},removeAttr:function(t,e){var n,r=0,i=e&&e.match(Dt);if(i&&1===t.nodeType)for(;n=i[r++];)t.removeAttribute(n)}}),we={set:function(t,e,n){return!1===e?yt.removeAttr(t,n):t.setAttribute(n,n),n}},yt.each(yt.expr.match.bool.source.match(/\w+/g),function(t,e){var n=xe[e]||yt.find.attr;xe[e]=function(t,e,r){var i,o,a=e.toLowerCase();return r||(o=xe[a],xe[a]=i,i=null!=n(t,e,r)?a:null,xe[a]=o),i}});var Ce=/^(?:input|select|textarea|button)$/i,Te=/^(?:a|area)$/i;yt.fn.extend({prop:function(t,e){return Rt(this,yt.prop,t,e,arguments.length>1)},removeProp:function(t){return this.each(function(){delete this[yt.propFix[t]||t]})}}),yt.extend({prop:function(t,e,n){var r,i,o=t.nodeType;if(3!==o&&8!==o&&2!==o)return 1===o&&yt.isXMLDoc(t)||(e=yt.propFix[e]||e,i=yt.propHooks[e]),void 0!==n?i&&"set"in i&&void 0!==(r=i.set(t,n,e))?r:t[e]=n:i&&"get"in i&&null!==(r=i.get(t,e))?r:t[e]},propHooks:{tabIndex:{get:function(t){var e=yt.find.attr(t,"tabindex");return e?parseInt(e,10):Ce.test(t.nodeName)||Te.test(t.nodeName)&&t.href?0:-1}}},propFix:{for:"htmlFor",class:"className"}}),mt.optSelected||(yt.propHooks.selected={get:function(t){var e=t.parentNode;return e&&e.parentNode&&e.parentNode.selectedIndex,null},set:function(t){var e=t.parentNode;e&&(e.selectedIndex,e.parentNode&&e.parentNode.selectedIndex)}}),yt.each(["tabIndex","readOnly","maxLength","cellSpacing","cellPadding","rowSpan","colSpan","useMap","frameBorder","contentEditable"],function(){yt.propFix[this.toLowerCase()]=this}),yt.fn.extend({addClass:function(t){var e,n,r,i,o,a,s,u=0;if(yt.isFunction(t))return this.each(function(e){yt(this).addClass(t.call(this,e,Z(this)))});if("string"==typeof t&&t)for(e=t.match(Dt)||[];n=this[u++];)if(i=Z(n),r=1===n.nodeType&&" "+G(i)+" "){for(a=0;o=e[a++];)r.indexOf(" "+o+" ")<0&&(r+=o+" ");s=G(r),i!==s&&n.setAttribute("class",s)}return this},removeClass:function(t){var e,n,r,i,o,a,s,u=0;if(yt.isFunction(t))return this.each(function(e){yt(this).removeClass(t.call(this,e,Z(this)))});if(!arguments.length)return this.attr("class","");if("string"==typeof t&&t)for(e=t.match(Dt)||[];n=this[u++];)if(i=Z(n),r=1===n.nodeType&&" "+G(i)+" "){for(a=0;o=e[a++];)for(;r.indexOf(" "+o+" ")>-1;)r=r.replace(" "+o+" "," ");s=G(r),i!==s&&n.setAttribute("class",s)}return this},toggleClass:function(t,e){var n=typeof t;return"boolean"==typeof e&&"string"===n?e?this.addClass(t):this.removeClass(t):yt.isFunction(t)?this.each(function(n){yt(this).toggleClass(t.call(this,n,Z(this),e),e)}):this.each(function(){var e,r,i,o;if("string"===n)for(r=0,i=yt(this),o=t.match(Dt)||[];e=o[r++];)i.hasClass(e)?i.removeClass(e):i.addClass(e);else void 0!==t&&"boolean"!==n||(e=Z(this),e&&Ft.set(this,"__className__",e),this.setAttribute&&this.setAttribute("class",e||!1===t?"":Ft.get(this,"__className__")||""))})},hasClass:function(t){var e,n,r=0;for(e=" "+t+" ";n=this[r++];)if(1===n.nodeType&&(" "+G(Z(n))+" ").indexOf(e)>-1)return!0;return!1}});var $e=/\r/g;yt.fn.extend({val:function(t){var e,n,r,i=this[0];{if(arguments.length)return r=yt.isFunction(t),this.each(function(n){var i;1===this.nodeType&&(i=r?t.call(this,n,yt(this).val()):t,null==i?i="":"number"==typeof i?i+="":Array.isArray(i)&&(i=yt.map(i,function(t){return null==t?"":t+""})),(e=yt.valHooks[this.type]||yt.valHooks[this.nodeName.toLowerCase()])&&"set"in e&&void 0!==e.set(this,i,"value")||(this.value=i))});if(i)return(e=yt.valHooks[i.type]||yt.valHooks[i.nodeName.toLowerCase()])&&"get"in e&&void 0!==(n=e.get(i,"value"))?n:(n=i.value,"string"==typeof n?n.replace($e,""):null==n?"":n)}}}),yt.extend({valHooks:{option:{get:function(t){var e=yt.find.attr(t,"value");return null!=e?e:G(yt.text(t))}},select:{get:function(t){var e,n,r,i=t.options,o=t.selectedIndex,a="select-one"===t.type,s=a?null:[],c=a?o+1:i.length;for(r=o<0?c:a?o:0;r<c;r++)if(n=i[r],(n.selected||r===o)&&!n.disabled&&(!n.parentNode.disabled||!u(n.parentNode,"optgroup"))){if(e=yt(n).val(),a)return e;s.push(e)}return s},set:function(t,e){for(var n,r,i=t.options,o=yt.makeArray(e),a=i.length;a--;)r=i[a],(r.selected=yt.inArray(yt.valHooks.option.get(r),o)>-1)&&(n=!0);return n||(t.selectedIndex=-1),o}}}}),yt.each(["radio","checkbox"],function(){yt.valHooks[this]={set:function(t,e){if(Array.isArray(e))return t.checked=yt.inArray(yt(t).val(),e)>-1}},mt.checkOn||(yt.valHooks[this].get=function(t){return null===t.getAttribute("value")?"on":t.value})});var Ae=/^(?:focusinfocus|focusoutblur)$/;yt.extend(yt.event,{trigger:function(t,e,r,i){var o,a,s,u,c,l,f,p=[r||at],d=ht.call(t,"type")?t.type:t,h=ht.call(t,"namespace")?t.namespace.split("."):[];if(a=s=r=r||at,3!==r.nodeType&&8!==r.nodeType&&!Ae.test(d+yt.event.triggered)&&(d.indexOf(".")>-1&&(h=d.split("."),d=h.shift(),h.sort()),c=d.indexOf(":")<0&&"on"+d,t=t[yt.expando]?t:new yt.Event(d,"object"==typeof t&&t),t.isTrigger=i?2:3,t.namespace=h.join("."),t.rnamespace=t.namespace?new RegExp("(^|\\.)"+h.join("\\.(?:.*\\.|)")+"(\\.|$)"):null,t.result=void 0,t.target||(t.target=r),e=null==e?[t]:yt.makeArray(e,[t]),f=yt.event.special[d]||{},i||!f.trigger||!1!==f.trigger.apply(r,e))){if(!i&&!f.noBubble&&!yt.isWindow(r)){for(u=f.delegateType||d,Ae.test(u+d)||(a=a.parentNode);a;a=a.parentNode)p.push(a),s=a;s===(r.ownerDocument||at)&&p.push(s.defaultView||s.parentWindow||n)}for(o=0;(a=p[o++])&&!t.isPropagationStopped();)t.type=o>1?u:f.bindType||d,l=(Ft.get(a,"events")||{})[t.type]&&Ft.get(a,"handle"),l&&l.apply(a,e),(l=c&&a[c])&&l.apply&&Pt(a)&&(t.result=l.apply(a,e),!1===t.result&&t.preventDefault());return t.type=d,i||t.isDefaultPrevented()||f._default&&!1!==f._default.apply(p.pop(),e)||!Pt(r)||c&&yt.isFunction(r[d])&&!yt.isWindow(r)&&(s=r[c],s&&(r[c]=null),yt.event.triggered=d,r[d](),yt.event.triggered=void 0,s&&(r[c]=s)),t.result}},simulate:function(t,e,n){var r=yt.extend(new yt.Event,n,{type:t,isSimulated:!0});yt.event.trigger(r,null,e)}}),yt.fn.extend({trigger:function(t,e){return this.each(function(){yt.event.trigger(t,e,this)})},triggerHandler:function(t,e){var n=this[0];if(n)return yt.event.trigger(t,e,n,!0)}}),yt.each("blur focus focusin focusout resize scroll click dblclick mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave change select submit keydown keypress keyup contextmenu".split(" "),function(t,e){yt.fn[e]=function(t,n){return arguments.length>0?this.on(e,null,t,n):this.trigger(e)}}),yt.fn.extend({hover:function(t,e){return this.mouseenter(t).mouseleave(e||t)}}),mt.focusin="onfocusin"in n,mt.focusin||yt.each({focus:"focusin",blur:"focusout"},function(t,e){var n=function(t){yt.event.simulate(e,t.target,yt.event.fix(t))};yt.event.special[e]={setup:function(){var r=this.ownerDocument||this,i=Ft.access(r,e);i||r.addEventListener(t,n,!0),Ft.access(r,e,(i||0)+1)},teardown:function(){var r=this.ownerDocument||this,i=Ft.access(r,e)-1;i?Ft.access(r,e,i):(r.removeEventListener(t,n,!0),Ft.remove(r,e))}}});var ke=n.location,Ee=yt.now(),Se=/\?/;yt.parseXML=function(t){var e;if(!t||"string"!=typeof t)return null;try{e=(new n.DOMParser).parseFromString(t,"text/xml")}catch(t){e=void 0}return e&&!e.getElementsByTagName("parsererror").length||yt.error("Invalid XML: "+t),e};var Oe=/\[\]$/,je=/\r?\n/g,Ne=/^(?:submit|button|image|reset|file)$/i,De=/^(?:input|select|textarea|keygen)/i;yt.param=function(t,e){var n,r=[],i=function(t,e){var n=yt.isFunction(e)?e():e;r[r.length]=encodeURIComponent(t)+"="+encodeURIComponent(null==n?"":n)};if(Array.isArray(t)||t.jquery&&!yt.isPlainObject(t))yt.each(t,function(){i(this.name,this.value)});else for(n in t)Y(n,t[n],e,i);return r.join("&")},yt.fn.extend({serialize:function(){return yt.param(this.serializeArray())},serializeArray:function(){return this.map(function(){var t=yt.prop(this,"elements");return t?yt.makeArray(t):this}).filter(function(){var t=this.type;return this.name&&!yt(this).is(":disabled")&&De.test(this.nodeName)&&!Ne.test(t)&&(this.checked||!Kt.test(t))}).map(function(t,e){var n=yt(this).val();return null==n?null:Array.isArray(n)?yt.map(n,function(t){return{name:e.name,value:t.replace(je,"\r\n")}}):{name:e.name,value:n.replace(je,"\r\n")}}).get()}});var Ie=/%20/g,Le=/#.*$/,Re=/([?&])_=[^&]*/,Pe=/^(.*?):[ \t]*([^\r\n]*)$/gm,Fe=/^(?:about|app|app-storage|.+-extension|file|res|widget):$/,Me=/^(?:GET|HEAD)$/,qe=/^\/\//,He={},Be={},Ue="*/".concat("*"),We=at.createElement("a");We.href=ke.href,yt.extend({active:0,lastModified:{},etag:{},ajaxSettings:{url:ke.href,type:"GET",isLocal:Fe.test(ke.protocol),global:!0,processData:!0,async:!0,contentType:"application/x-www-form-urlencoded; charset=UTF-8",accepts:{"*":Ue,text:"text/plain",html:"text/html",xml:"application/xml, text/xml",json:"application/json, text/javascript"},contents:{xml:/\bxml\b/,html:/\bhtml/,json:/\bjson\b/},responseFields:{xml:"responseXML",text:"responseText",json:"responseJSON"},converters:{"* text":String,"text html":!0,"text json":JSON.parse,"text xml":yt.parseXML},flatOptions:{url:!0,context:!0}},ajaxSetup:function(t,e){return e?nt(nt(t,yt.ajaxSettings),e):nt(yt.ajaxSettings,t)},ajaxPrefilter:tt(He),ajaxTransport:tt(Be),ajax:function(t,e){function r(t,e,r,s){var c,p,d,_,w,x=e;l||(l=!0,u&&n.clearTimeout(u),i=void 0,a=s||"",C.readyState=t>0?4:0,c=t>=200&&t<300||304===t,r&&(_=rt(h,C,r)),_=it(h,_,C,c),c?(h.ifModified&&(w=C.getResponseHeader("Last-Modified"),w&&(yt.lastModified[o]=w),(w=C.getResponseHeader("etag"))&&(yt.etag[o]=w)),204===t||"HEAD"===h.type?x="nocontent":304===t?x="notmodified":(x=_.state,p=_.data,d=_.error,c=!d)):(d=x,!t&&x||(x="error",t<0&&(t=0))),C.status=t,C.statusText=(e||x)+"",c?m.resolveWith(v,[p,x,C]):m.rejectWith(v,[C,x,d]),C.statusCode(b),b=void 0,f&&g.trigger(c?"ajaxSuccess":"ajaxError",[C,h,c?p:d]),y.fireWith(v,[C,x]),f&&(g.trigger("ajaxComplete",[C,h]),--yt.active||yt.event.trigger("ajaxStop")))}"object"==typeof t&&(e=t,t=void 0),e=e||{};var i,o,a,s,u,c,l,f,p,d,h=yt.ajaxSetup({},e),v=h.context||h,g=h.context&&(v.nodeType||v.jquery)?yt(v):yt.event,m=yt.Deferred(),y=yt.Callbacks("once memory"),b=h.statusCode||{},_={},w={},x="canceled",C={readyState:0,getResponseHeader:function(t){var e;if(l){if(!s)for(s={};e=Pe.exec(a);)s[e[1].toLowerCase()]=e[2];e=s[t.toLowerCase()]}return null==e?null:e},getAllResponseHeaders:function(){return l?a:null},setRequestHeader:function(t,e){return null==l&&(t=w[t.toLowerCase()]=w[t.toLowerCase()]||t,_[t]=e),this},overrideMimeType:function(t){return null==l&&(h.mimeType=t),this},statusCode:function(t){var e;if(t)if(l)C.always(t[C.status]);else for(e in t)b[e]=[b[e],t[e]];return this},abort:function(t){var e=t||x;return i&&i.abort(e),r(0,e),this}};if(m.promise(C),h.url=((t||h.url||ke.href)+"").replace(qe,ke.protocol+"//"),h.type=e.method||e.type||h.method||h.type,h.dataTypes=(h.dataType||"*").toLowerCase().match(Dt)||[""],null==h.crossDomain){c=at.createElement("a");try{c.href=h.url,c.href=c.href,h.crossDomain=We.protocol+"//"+We.host!=c.protocol+"//"+c.host}catch(t){h.crossDomain=!0}}if(h.data&&h.processData&&"string"!=typeof h.data&&(h.data=yt.param(h.data,h.traditional)),et(He,h,e,C),l)return C;f=yt.event&&h.global,f&&0==yt.active++&&yt.event.trigger("ajaxStart"),h.type=h.type.toUpperCase(),h.hasContent=!Me.test(h.type),o=h.url.replace(Le,""),h.hasContent?h.data&&h.processData&&0===(h.contentType||"").indexOf("application/x-www-form-urlencoded")&&(h.data=h.data.replace(Ie,"+")):(d=h.url.slice(o.length),h.data&&(o+=(Se.test(o)?"&":"?")+h.data,delete h.data),!1===h.cache&&(o=o.replace(Re,"$1"),d=(Se.test(o)?"&":"?")+"_="+Ee+++d),h.url=o+d),h.ifModified&&(yt.lastModified[o]&&C.setRequestHeader("If-Modified-Since",yt.lastModified[o]),yt.etag[o]&&C.setRequestHeader("If-None-Match",yt.etag[o])),(h.data&&h.hasContent&&!1!==h.contentType||e.contentType)&&C.setRequestHeader("Content-Type",h.contentType),C.setRequestHeader("Accept",h.dataTypes[0]&&h.accepts[h.dataTypes[0]]?h.accepts[h.dataTypes[0]]+("*"!==h.dataTypes[0]?", "+Ue+"; q=0.01":""):h.accepts["*"]);for(p in h.headers)C.setRequestHeader(p,h.headers[p]);if(h.beforeSend&&(!1===h.beforeSend.call(v,C,h)||l))return C.abort();if(x="abort",y.add(h.complete),C.done(h.success),C.fail(h.error),i=et(Be,h,e,C)){if(C.readyState=1,f&&g.trigger("ajaxSend",[C,h]),l)return C;h.async&&h.timeout>0&&(u=n.setTimeout(function(){C.abort("timeout")},h.timeout));try{l=!1,i.send(_,r)}catch(t){if(l)throw t;r(-1,t)}}else r(-1,"No Transport");return C},getJSON:function(t,e,n){return yt.get(t,e,n,"json")},getScript:function(t,e){return yt.get(t,void 0,e,"script")}}),yt.each(["get","post"],function(t,e){yt[e]=function(t,n,r,i){return yt.isFunction(n)&&(i=i||r,r=n,n=void 0),yt.ajax(yt.extend({url:t,type:e,dataType:i,data:n,success:r},yt.isPlainObject(t)&&t))}}),yt._evalUrl=function(t){return yt.ajax({url:t,type:"GET",dataType:"script",cache:!0,async:!1,global:!1,throws:!0})},yt.fn.extend({wrapAll:function(t){var e;return this[0]&&(yt.isFunction(t)&&(t=t.call(this[0])),e=yt(t,this[0].ownerDocument).eq(0).clone(!0),this[0].parentNode&&e.insertBefore(this[0]),e.map(function(){for(var t=this;t.firstElementChild;)t=t.firstElementChild;return t}).append(this)),this},wrapInner:function(t){return yt.isFunction(t)?this.each(function(e){yt(this).wrapInner(t.call(this,e))}):this.each(function(){var e=yt(this),n=e.contents();n.length?n.wrapAll(t):e.append(t)})},wrap:function(t){var e=yt.isFunction(t);return this.each(function(n){yt(this).wrapAll(e?t.call(this,n):t)})},unwrap:function(t){return this.parent(t).not("body").each(function(){yt(this).replaceWith(this.childNodes)}),this}}),yt.expr.pseudos.hidden=function(t){return!yt.expr.pseudos.visible(t)},yt.expr.pseudos.visible=function(t){return!!(t.offsetWidth||t.offsetHeight||t.getClientRects().length)},yt.ajaxSettings.xhr=function(){try{return new n.XMLHttpRequest}catch(t){}};var ze={0:200,1223:204},Ve=yt.ajaxSettings.xhr();mt.cors=!!Ve&&"withCredentials"in Ve,mt.ajax=Ve=!!Ve,yt.ajaxTransport(function(t){var e,r;if(mt.cors||Ve&&!t.crossDomain)return{send:function(i,o){var a,s=t.xhr();if(s.open(t.type,t.url,t.async,t.username,t.password),t.xhrFields)for(a in t.xhrFields)s[a]=t.xhrFields[a];t.mimeType&&s.overrideMimeType&&s.overrideMimeType(t.mimeType),t.crossDomain||i["X-Requested-With"]||(i["X-Requested-With"]="XMLHttpRequest");for(a in i)s.setRequestHeader(a,i[a]);e=function(t){return function(){e&&(e=r=s.onload=s.onerror=s.onabort=s.onreadystatechange=null,"abort"===t?s.abort():"error"===t?"number"!=typeof s.status?o(0,"error"):o(s.status,s.statusText):o(ze[s.status]||s.status,s.statusText,"text"!==(s.responseType||"text")||"string"!=typeof s.responseText?{binary:s.response}:{text:s.responseText},s.getAllResponseHeaders()))}},s.onload=e(),r=s.onerror=e("error"),void 0!==s.onabort?s.onabort=r:s.onreadystatechange=function(){4===s.readyState&&n.setTimeout(function(){e&&r()})},e=e("abort");try{s.send(t.hasContent&&t.data||null)}catch(t){if(e)throw t}},abort:function(){e&&e()}}}),yt.ajaxPrefilter(function(t){t.crossDomain&&(t.contents.script=!1)}),yt.ajaxSetup({accepts:{script:"text/javascript, application/javascript, application/ecmascript, application/x-ecmascript"},contents:{script:/\b(?:java|ecma)script\b/},converters:{"text script":function(t){return yt.globalEval(t),t}}}),yt.ajaxPrefilter("script",function(t){void 0===t.cache&&(t.cache=!1),t.crossDomain&&(t.type="GET")}),yt.ajaxTransport("script",function(t){if(t.crossDomain){var e,n;return{send:function(r,i){e=yt("<script>").prop({charset:t.scriptCharset,src:t.url}).on("load error",n=function(t){e.remove(),n=null,t&&i("error"===t.type?404:200,t.type)}),at.head.appendChild(e[0])},abort:function(){n&&n()}}}});var Xe=[],Ke=/(=)\?(?=&|$)|\?\?/;yt.ajaxSetup({jsonp:"callback",jsonpCallback:function(){var t=Xe.pop()||yt.expando+"_"+Ee++;return this[t]=!0,t}}),yt.ajaxPrefilter("json jsonp",function(t,e,r){var i,o,a,s=!1!==t.jsonp&&(Ke.test(t.url)?"url":"string"==typeof t.data&&0===(t.contentType||"").indexOf("application/x-www-form-urlencoded")&&Ke.test(t.data)&&"data");if(s||"jsonp"===t.dataTypes[0])return i=t.jsonpCallback=yt.isFunction(t.jsonpCallback)?t.jsonpCallback():t.jsonpCallback,s?t[s]=t[s].replace(Ke,"$1"+i):!1!==t.jsonp&&(t.url+=(Se.test(t.url)?"&":"?")+t.jsonp+"="+i),t.converters["script json"]=function(){return a||yt.error(i+" was not called"),a[0]},t.dataTypes[0]="json",o=n[i],n[i]=function(){a=arguments},r.always(function(){void 0===o?yt(n).removeProp(i):n[i]=o,t[i]&&(t.jsonpCallback=e.jsonpCallback,Xe.push(i)),a&&yt.isFunction(o)&&o(a[0]),a=o=void 0}),"script"}),mt.createHTMLDocument=function(){var t=at.implementation.createHTMLDocument("").body;return t.innerHTML="<form></form><form></form>",2===t.childNodes.length}(),yt.parseHTML=function(t,e,n){if("string"!=typeof t)return[];"boolean"==typeof e&&(n=e,e=!1);var r,i,o;return e||(mt.createHTMLDocument?(e=at.implementation.createHTMLDocument(""),r=e.createElement("base"),r.href=at.location.href,e.head.appendChild(r)):e=at),i=kt.exec(t),o=!n&&[],i?[e.createElement(i[1])]:(i=T([t],e,o),o&&o.length&&yt(o).remove(),yt.merge([],i.childNodes))},yt.fn.load=function(t,e,n){var r,i,o,a=this,s=t.indexOf(" ");return s>-1&&(r=G(t.slice(s)),t=t.slice(0,s)),yt.isFunction(e)?(n=e,e=void 0):e&&"object"==typeof e&&(i="POST"),a.length>0&&yt.ajax({url:t,type:i||"GET",dataType:"html",data:e}).done(function(t){o=arguments,a.html(r?yt("<div>").append(yt.parseHTML(t)).find(r):t)}).always(n&&function(t,e){a.each(function(){n.apply(this,o||[t.responseText,e,t])})}),this},yt.each(["ajaxStart","ajaxStop","ajaxComplete","ajaxError","ajaxSuccess","ajaxSend"],function(t,e){yt.fn[e]=function(t){return this.on(e,t)}}),yt.expr.pseudos.animated=function(t){return yt.grep(yt.timers,function(e){return t===e.elem}).length},yt.offset={setOffset:function(t,e,n){var r,i,o,a,s,u,c,l=yt.css(t,"position"),f=yt(t),p={};"static"===l&&(t.style.position="relative"),s=f.offset(),o=yt.css(t,"top"),u=yt.css(t,"left"),c=("absolute"===l||"fixed"===l)&&(o+u).indexOf("auto")>-1,c?(r=f.position(),a=r.top,i=r.left):(a=parseFloat(o)||0,i=parseFloat(u)||0),yt.isFunction(e)&&(e=e.call(t,n,yt.extend({},s))),null!=e.top&&(p.top=e.top-s.top+a),null!=e.left&&(p.left=e.left-s.left+i),"using"in e?e.using.call(t,p):f.css(p)}},yt.fn.extend({offset:function(t){if(arguments.length)return void 0===t?this:this.each(function(e){yt.offset.setOffset(this,t,e)});var e,n,r,i,o=this[0];if(o)return o.getClientRects().length?(r=o.getBoundingClientRect(),e=o.ownerDocument,n=e.documentElement,i=e.defaultView,{top:r.top+i.pageYOffset-n.clientTop,left:r.left+i.pageXOffset-n.clientLeft}):{top:0,left:0}},position:function(){if(this[0]){var t,e,n=this[0],r={top:0,left:0};return"fixed"===yt.css(n,"position")?e=n.getBoundingClientRect():(t=this.offsetParent(),e=this.offset(),u(t[0],"html")||(r=t.offset()),r={top:r.top+yt.css(t[0],"borderTopWidth",!0),left:r.left+yt.css(t[0],"borderLeftWidth",!0)}),{top:e.top-r.top-yt.css(n,"marginTop",!0),left:e.left-r.left-yt.css(n,"marginLeft",!0)}}},offsetParent:function(){return this.map(function(){for(var t=this.offsetParent;t&&"static"===yt.css(t,"position");)t=t.offsetParent;return t||Yt})}}),yt.each({scrollLeft:"pageXOffset",scrollTop:"pageYOffset"},function(t,e){var n="pageYOffset"===e;yt.fn[t]=function(r){return Rt(this,function(t,r,i){var o;if(yt.isWindow(t)?o=t:9===t.nodeType&&(o=t.defaultView),void 0===i)return o?o[e]:t[r];o?o.scrollTo(n?o.pageXOffset:i,n?i:o.pageYOffset):t[r]=i},t,r,arguments.length)}}),yt.each(["top","left"],function(t,e){yt.cssHooks[e]=P(mt.pixelPosition,function(t,n){if(n)return n=R(t,e),ce.test(n)?yt(t).position()[e]+"px":n})}),yt.each({Height:"height",Width:"width"},function(t,e){yt.each({padding:"inner"+t,content:e,"":"outer"+t},function(n,r){yt.fn[r]=function(i,o){var a=arguments.length&&(n||"boolean"!=typeof i),s=n||(!0===i||!0===o?"margin":"border");return Rt(this,function(e,n,i){var o;return yt.isWindow(e)?0===r.indexOf("outer")?e["inner"+t]:e.document.documentElement["client"+t]:9===e.nodeType?(o=e.documentElement,Math.max(e.body["scroll"+t],o["scroll"+t],e.body["offset"+t],o["offset"+t],o["client"+t])):void 0===i?yt.css(e,n,s):yt.style(e,n,i,s)},e,a?i:void 0,a)}})}),yt.fn.extend({bind:function(t,e,n){return this.on(t,null,e,n)},unbind:function(t,e){return this.off(t,null,e)},delegate:function(t,e,n,r){return this.on(e,t,n,r)},undelegate:function(t,e,n){return 1===arguments.length?this.off(t,"**"):this.off(e,t||"**",n)}}),yt.holdReady=function(t){t?yt.readyWait++:yt.ready(!0)},yt.isArray=Array.isArray,yt.parseJSON=JSON.parse,yt.nodeName=u,r=[],void 0!==(i=function(){return yt}.apply(e,r))&&(t.exports=i);var Je=n.jQuery,Qe=n.$;return yt.noConflict=function(t){return n.$===yt&&(n.$=Qe),t&&n.jQuery===yt&&(n.jQuery=Je),yt},o||(n.jQuery=n.$=yt),yt})},function(t,e){if("undefined"==typeof jQuery)throw new Error("Bootstrap's JavaScript requires jQuery");+function(t){"use strict";var e=t.fn.jquery.split(" ")[0].split(".");if(e[0]<2&&e[1]<9||1==e[0]&&9==e[1]&&e[2]<1||e[0]>3)throw new Error("Bootstrap's JavaScript requires jQuery version 1.9.1 or higher, but lower than version 4")}(jQuery),function(t){"use strict";function e(){var t=document.createElement("bootstrap"),e={WebkitTransition:"webkitTransitionEnd",MozTransition:"transitionend",OTransition:"oTransitionEnd otransitionend",transition:"transitionend"};for(var n in e)if(void 0!==t.style[n])return{end:e[n]};return!1}t.fn.emulateTransitionEnd=function(e){var n=!1,r=this;t(this).one("bsTransitionEnd",function(){n=!0});var i=function(){n||t(r).trigger(t.support.transition.end)};return setTimeout(i,e),this},t(function(){t.support.transition=e(),t.support.transition&&(t.event.special.bsTransitionEnd={bindType:t.support.transition.end,delegateType:t.support.transition.end,handle:function(e){if(t(e.target).is(this))return e.handleObj.handler.apply(this,arguments)}})})}(jQuery),function(t){"use strict";function e(e){return this.each(function(){var n=t(this),i=n.data("bs.alert");i||n.data("bs.alert",i=new r(this)),"string"==typeof e&&i[e].call(n)})}var n='[data-dismiss="alert"]',r=function(e){t(e).on("click",n,this.close)};r.VERSION="3.3.7",r.TRANSITION_DURATION=150,r.prototype.close=function(e){function n(){a.detach().trigger("closed.bs.alert").remove()}var i=t(this),o=i.attr("data-target");o||(o=i.attr("href"),o=o&&o.replace(/.*(?=#[^\s]*$)/,""));var a=t("#"===o?[]:o);e&&e.preventDefault(),a.length||(a=i.closest(".alert")),a.trigger(e=t.Event("close.bs.alert")),e.isDefaultPrevented()||(a.removeClass("in"),t.support.transition&&a.hasClass("fade")?a.one("bsTransitionEnd",n).emulateTransitionEnd(r.TRANSITION_DURATION):n())};var i=t.fn.alert;t.fn.alert=e,t.fn.alert.Constructor=r,t.fn.alert.noConflict=function(){return t.fn.alert=i,this},t(document).on("click.bs.alert.data-api",n,r.prototype.close)}(jQuery),function(t){"use strict";function e(e){return this.each(function(){var r=t(this),i=r.data("bs.button"),o="object"==typeof e&&e;i||r.data("bs.button",i=new n(this,o)),"toggle"==e?i.toggle():e&&i.setState(e)})}var n=function(e,r){this.$element=t(e),this.options=t.extend({},n.DEFAULTS,r),this.isLoading=!1};n.VERSION="3.3.7",n.DEFAULTS={loadingText:"loading..."},n.prototype.setState=function(e){var n="disabled",r=this.$element,i=r.is("input")?"val":"html",o=r.data();e+="Text",null==o.resetText&&r.data("resetText",r[i]()),setTimeout(t.proxy(function(){r[i](null==o[e]?this.options[e]:o[e]),"loadingText"==e?(this.isLoading=!0,r.addClass(n).attr(n,n).prop(n,!0)):this.isLoading&&(this.isLoading=!1,r.removeClass(n).removeAttr(n).prop(n,!1))},this),0)},n.prototype.toggle=function(){var t=!0,e=this.$element.closest('[data-toggle="buttons"]');if(e.length){var n=this.$element.find("input");"radio"==n.prop("type")?(n.prop("checked")&&(t=!1),e.find(".active").removeClass("active"),this.$element.addClass("active")):"checkbox"==n.prop("type")&&(n.prop("checked")!==this.$element.hasClass("active")&&(t=!1),this.$element.toggleClass("active")),n.prop("checked",this.$element.hasClass("active")),t&&n.trigger("change")}else this.$element.attr("aria-pressed",!this.$element.hasClass("active")),this.$element.toggleClass("active")};var r=t.fn.button;t.fn.button=e,t.fn.button.Constructor=n,t.fn.button.noConflict=function(){return t.fn.button=r,this},t(document).on("click.bs.button.data-api",'[data-toggle^="button"]',function(n){var r=t(n.target).closest(".btn");e.call(r,"toggle"),t(n.target).is('input[type="radio"], input[type="checkbox"]')||(n.preventDefault(),r.is("input,button")?r.trigger("focus"):r.find("input:visible,button:visible").first().trigger("focus"))}).on("focus.bs.button.data-api blur.bs.button.data-api",'[data-toggle^="button"]',function(e){t(e.target).closest(".btn").toggleClass("focus",/^focus(in)?$/.test(e.type))})}(jQuery),function(t){"use strict";function e(e){return this.each(function(){var r=t(this),i=r.data("bs.carousel"),o=t.extend({},n.DEFAULTS,r.data(),"object"==typeof e&&e),a="string"==typeof e?e:o.slide;i||r.data("bs.carousel",i=new n(this,o)),"number"==typeof e?i.to(e):a?i[a]():o.interval&&i.pause().cycle()})}var n=function(e,n){this.$element=t(e),this.$indicators=this.$element.find(".carousel-indicators"),this.options=n,this.paused=null,this.sliding=null,this.interval=null,this.$active=null,this.$items=null,this.options.keyboard&&this.$element.on("keydown.bs.carousel",t.proxy(this.keydown,this)),"hover"==this.options.pause&&!("ontouchstart"in document.documentElement)&&this.$element.on("mouseenter.bs.carousel",t.proxy(this.pause,this)).on("mouseleave.bs.carousel",t.proxy(this.cycle,this))};n.VERSION="3.3.7",n.TRANSITION_DURATION=600,n.DEFAULTS={interval:5e3,pause:"hover",wrap:!0,keyboard:!0},n.prototype.keydown=function(t){if(!/input|textarea/i.test(t.target.tagName)){switch(t.which){case 37:this.prev();break;case 39:this.next();break;default:return}t.preventDefault()}},n.prototype.cycle=function(e){return e||(this.paused=!1),this.interval&&clearInterval(this.interval),this.options.interval&&!this.paused&&(this.interval=setInterval(t.proxy(this.next,this),this.options.interval)),this},n.prototype.getItemIndex=function(t){return this.$items=t.parent().children(".item"),this.$items.index(t||this.$active)},n.prototype.getItemForDirection=function(t,e){var n=this.getItemIndex(e);if(("prev"==t&&0===n||"next"==t&&n==this.$items.length-1)&&!this.options.wrap)return e;var r="prev"==t?-1:1,i=(n+r)%this.$items.length;return this.$items.eq(i)},n.prototype.to=function(t){var e=this,n=this.getItemIndex(this.$active=this.$element.find(".item.active"));if(!(t>this.$items.length-1||t<0))return this.sliding?this.$element.one("slid.bs.carousel",function(){e.to(t)}):n==t?this.pause().cycle():this.slide(t>n?"next":"prev",this.$items.eq(t))},n.prototype.pause=function(e){return e||(this.paused=!0),this.$element.find(".next, .prev").length&&t.support.transition&&(this.$element.trigger(t.support.transition.end),this.cycle(!0)),this.interval=clearInterval(this.interval),this},n.prototype.next=function(){if(!this.sliding)return this.slide("next")},n.prototype.prev=function(){if(!this.sliding)return this.slide("prev")},n.prototype.slide=function(e,r){var i=this.$element.find(".item.active"),o=r||this.getItemForDirection(e,i),a=this.interval,s="next"==e?"left":"right",u=this;if(o.hasClass("active"))return this.sliding=!1;var c=o[0],l=t.Event("slide.bs.carousel",{relatedTarget:c,direction:s});if(this.$element.trigger(l),!l.isDefaultPrevented()){if(this.sliding=!0,a&&this.pause(),this.$indicators.length){this.$indicators.find(".active").removeClass("active");var f=t(this.$indicators.children()[this.getItemIndex(o)]);f&&f.addClass("active")}var p=t.Event("slid.bs.carousel",{relatedTarget:c,direction:s});return t.support.transition&&this.$element.hasClass("slide")?(o.addClass(e),o[0].offsetWidth,i.addClass(s),o.addClass(s),i.one("bsTransitionEnd",function(){o.removeClass([e,s].join(" ")).addClass("active"),i.removeClass(["active",s].join(" ")),u.sliding=!1,setTimeout(function(){u.$element.trigger(p)},0)}).emulateTransitionEnd(n.TRANSITION_DURATION)):(i.removeClass("active"),o.addClass("active"),this.sliding=!1,this.$element.trigger(p)),a&&this.cycle(),this}};var r=t.fn.carousel;t.fn.carousel=e,t.fn.carousel.Constructor=n,t.fn.carousel.noConflict=function(){return t.fn.carousel=r,this};var i=function(n){var r,i=t(this),o=t(i.attr("data-target")||(r=i.attr("href"))&&r.replace(/.*(?=#[^\s]+$)/,""));if(o.hasClass("carousel")){var a=t.extend({},o.data(),i.data()),s=i.attr("data-slide-to");s&&(a.interval=!1),e.call(o,a),s&&o.data("bs.carousel").to(s),n.preventDefault()}};t(document).on("click.bs.carousel.data-api","[data-slide]",i).on("click.bs.carousel.data-api","[data-slide-to]",i),t(window).on("load",function(){t('[data-ride="carousel"]').each(function(){var n=t(this);e.call(n,n.data())})})}(jQuery),function(t){"use strict";function e(e){var n,r=e.attr("data-target")||(n=e.attr("href"))&&n.replace(/.*(?=#[^\s]+$)/,"");return t(r)}function n(e){return this.each(function(){var n=t(this),i=n.data("bs.collapse"),o=t.extend({},r.DEFAULTS,n.data(),"object"==typeof e&&e);!i&&o.toggle&&/show|hide/.test(e)&&(o.toggle=!1),i||n.data("bs.collapse",i=new r(this,o)),"string"==typeof e&&i[e]()})}var r=function(e,n){this.$element=t(e),this.options=t.extend({},r.DEFAULTS,n),this.$trigger=t('[data-toggle="collapse"][href="#'+e.id+'"],[data-toggle="collapse"][data-target="#'+e.id+'"]'),this.transitioning=null,this.options.parent?this.$parent=this.getParent():this.addAriaAndCollapsedClass(this.$element,this.$trigger),this.options.toggle&&this.toggle()};r.VERSION="3.3.7",r.TRANSITION_DURATION=350,r.DEFAULTS={toggle:!0},r.prototype.dimension=function(){return this.$element.hasClass("width")?"width":"height"},r.prototype.show=function(){if(!this.transitioning&&!this.$element.hasClass("in")){var e,i=this.$parent&&this.$parent.children(".panel").children(".in, .collapsing");if(!(i&&i.length&&(e=i.data("bs.collapse"))&&e.transitioning)){var o=t.Event("show.bs.collapse");if(this.$element.trigger(o),!o.isDefaultPrevented()){i&&i.length&&(n.call(i,"hide"),e||i.data("bs.collapse",null));var a=this.dimension();this.$element.removeClass("collapse").addClass("collapsing")[a](0).attr("aria-expanded",!0),this.$trigger.removeClass("collapsed").attr("aria-expanded",!0),this.transitioning=1;var s=function(){this.$element.removeClass("collapsing").addClass("collapse in")[a](""),this.transitioning=0,this.$element.trigger("shown.bs.collapse")};if(!t.support.transition)return s.call(this);var u=t.camelCase(["scroll",a].join("-"));this.$element.one("bsTransitionEnd",t.proxy(s,this)).emulateTransitionEnd(r.TRANSITION_DURATION)[a](this.$element[0][u])}}}},r.prototype.hide=function(){if(!this.transitioning&&this.$element.hasClass("in")){var e=t.Event("hide.bs.collapse");if(this.$element.trigger(e),!e.isDefaultPrevented()){var n=this.dimension();this.$element[n](this.$element[n]())[0].offsetHeight,this.$element.addClass("collapsing").removeClass("collapse in").attr("aria-expanded",!1),this.$trigger.addClass("collapsed").attr("aria-expanded",!1),this.transitioning=1;var i=function(){this.transitioning=0,this.$element.removeClass("collapsing").addClass("collapse").trigger("hidden.bs.collapse")};if(!t.support.transition)return i.call(this);this.$element[n](0).one("bsTransitionEnd",t.proxy(i,this)).emulateTransitionEnd(r.TRANSITION_DURATION)}}},r.prototype.toggle=function(){this[this.$element.hasClass("in")?"hide":"show"]()},r.prototype.getParent=function(){return t(this.options.parent).find('[data-toggle="collapse"][data-parent="'+this.options.parent+'"]').each(t.proxy(function(n,r){var i=t(r);this.addAriaAndCollapsedClass(e(i),i)},this)).end()},r.prototype.addAriaAndCollapsedClass=function(t,e){var n=t.hasClass("in");t.attr("aria-expanded",n),e.toggleClass("collapsed",!n).attr("aria-expanded",n)};var i=t.fn.collapse;t.fn.collapse=n,t.fn.collapse.Constructor=r,t.fn.collapse.noConflict=function(){return t.fn.collapse=i,this},t(document).on("click.bs.collapse.data-api",'[data-toggle="collapse"]',function(r){var i=t(this);i.attr("data-target")||r.preventDefault();var o=e(i),a=o.data("bs.collapse"),s=a?"toggle":i.data();n.call(o,s)})}(jQuery),function(t){"use strict";function e(e){var n=e.attr("data-target");n||(n=e.attr("href"),n=n&&/#[A-Za-z]/.test(n)&&n.replace(/.*(?=#[^\s]*$)/,""));var r=n&&t(n);return r&&r.length?r:e.parent()}function n(n){n&&3===n.which||(t(i).remove(),t(o).each(function(){var r=t(this),i=e(r),o={relatedTarget:this};i.hasClass("open")&&(n&&"click"==n.type&&/input|textarea/i.test(n.target.tagName)&&t.contains(i[0],n.target)||(i.trigger(n=t.Event("hide.bs.dropdown",o)),n.isDefaultPrevented()||(r.attr("aria-expanded","false"),i.removeClass("open").trigger(t.Event("hidden.bs.dropdown",o)))))}))}function r(e){return this.each(function(){var n=t(this),r=n.data("bs.dropdown");r||n.data("bs.dropdown",r=new a(this)),"string"==typeof e&&r[e].call(n)})}var i=".dropdown-backdrop",o='[data-toggle="dropdown"]',a=function(e){t(e).on("click.bs.dropdown",this.toggle)};a.VERSION="3.3.7",a.prototype.toggle=function(r){var i=t(this);if(!i.is(".disabled, :disabled")){var o=e(i),a=o.hasClass("open");if(n(),!a){"ontouchstart"in document.documentElement&&!o.closest(".navbar-nav").length&&t(document.createElement("div")).addClass("dropdown-backdrop").insertAfter(t(this)).on("click",n);var s={relatedTarget:this};if(o.trigger(r=t.Event("show.bs.dropdown",s)),r.isDefaultPrevented())return;i.trigger("focus").attr("aria-expanded","true"),o.toggleClass("open").trigger(t.Event("shown.bs.dropdown",s))}return!1}},a.prototype.keydown=function(n){if(/(38|40|27|32)/.test(n.which)&&!/input|textarea/i.test(n.target.tagName)){var r=t(this);if(n.preventDefault(),n.stopPropagation(),!r.is(".disabled, :disabled")){var i=e(r),a=i.hasClass("open");if(!a&&27!=n.which||a&&27==n.which)return 27==n.which&&i.find(o).trigger("focus"),r.trigger("click");var s=i.find(".dropdown-menu li:not(.disabled):visible a");if(s.length){var u=s.index(n.target);38==n.which&&u>0&&u--,40==n.which&&u<s.length-1&&u++,~u||(u=0),s.eq(u).trigger("focus")}}}};var s=t.fn.dropdown;t.fn.dropdown=r,t.fn.dropdown.Constructor=a,t.fn.dropdown.noConflict=function(){return t.fn.dropdown=s,this},t(document).on("click.bs.dropdown.data-api",n).on("click.bs.dropdown.data-api",".dropdown form",function(t){t.stopPropagation()}).on("click.bs.dropdown.data-api",o,a.prototype.toggle).on("keydown.bs.dropdown.data-api",o,a.prototype.keydown).on("keydown.bs.dropdown.data-api",".dropdown-menu",a.prototype.keydown)}(jQuery),function(t){"use strict";function e(e,r){return this.each(function(){var i=t(this),o=i.data("bs.modal"),a=t.extend({},n.DEFAULTS,i.data(),"object"==typeof e&&e);o||i.data("bs.modal",o=new n(this,a)),"string"==typeof e?o[e](r):a.show&&o.show(r)})}var n=function(e,n){this.options=n,this.$body=t(document.body),this.$element=t(e),this.$dialog=this.$element.find(".modal-dialog"),this.$backdrop=null,this.isShown=null,this.originalBodyPad=null,this.scrollbarWidth=0,this.ignoreBackdropClick=!1,this.options.remote&&this.$element.find(".modal-content").load(this.options.remote,t.proxy(function(){this.$element.trigger("loaded.bs.modal")},this))};n.VERSION="3.3.7",n.TRANSITION_DURATION=300,n.BACKDROP_TRANSITION_DURATION=150,n.DEFAULTS={backdrop:!0,keyboard:!0,show:!0},n.prototype.toggle=function(t){return this.isShown?this.hide():this.show(t)},n.prototype.show=function(e){var r=this,i=t.Event("show.bs.modal",{relatedTarget:e});this.$element.trigger(i),this.isShown||i.isDefaultPrevented()||(this.isShown=!0,this.checkScrollbar(),this.setScrollbar(),this.$body.addClass("modal-open"),this.escape(),this.resize(),this.$element.on("click.dismiss.bs.modal",'[data-dismiss="modal"]',t.proxy(this.hide,this)),this.$dialog.on("mousedown.dismiss.bs.modal",function(){r.$element.one("mouseup.dismiss.bs.modal",function(e){t(e.target).is(r.$element)&&(r.ignoreBackdropClick=!0)})}),this.backdrop(function(){var i=t.support.transition&&r.$element.hasClass("fade");r.$element.parent().length||r.$element.appendTo(r.$body),r.$element.show().scrollTop(0),r.adjustDialog(),i&&r.$element[0].offsetWidth,r.$element.addClass("in"),r.enforceFocus();var o=t.Event("shown.bs.modal",{relatedTarget:e});i?r.$dialog.one("bsTransitionEnd",function(){r.$element.trigger("focus").trigger(o)}).emulateTransitionEnd(n.TRANSITION_DURATION):r.$element.trigger("focus").trigger(o)}))},n.prototype.hide=function(e){e&&e.preventDefault(),e=t.Event("hide.bs.modal"),this.$element.trigger(e),this.isShown&&!e.isDefaultPrevented()&&(this.isShown=!1,this.escape(),this.resize(),t(document).off("focusin.bs.modal"),this.$element.removeClass("in").off("click.dismiss.bs.modal").off("mouseup.dismiss.bs.modal"),this.$dialog.off("mousedown.dismiss.bs.modal"),t.support.transition&&this.$element.hasClass("fade")?this.$element.one("bsTransitionEnd",t.proxy(this.hideModal,this)).emulateTransitionEnd(n.TRANSITION_DURATION):this.hideModal())},n.prototype.enforceFocus=function(){t(document).off("focusin.bs.modal").on("focusin.bs.modal",t.proxy(function(t){document===t.target||this.$element[0]===t.target||this.$element.has(t.target).length||this.$element.trigger("focus")},this))},n.prototype.escape=function(){this.isShown&&this.options.keyboard?this.$element.on("keydown.dismiss.bs.modal",t.proxy(function(t){27==t.which&&this.hide()},this)):this.isShown||this.$element.off("keydown.dismiss.bs.modal")},n.prototype.resize=function(){this.isShown?t(window).on("resize.bs.modal",t.proxy(this.handleUpdate,this)):t(window).off("resize.bs.modal")},n.prototype.hideModal=function(){var t=this;this.$element.hide(),this.backdrop(function(){t.$body.removeClass("modal-open"),t.resetAdjustments(),t.resetScrollbar(),t.$element.trigger("hidden.bs.modal")})},n.prototype.removeBackdrop=function(){this.$backdrop&&this.$backdrop.remove(),this.$backdrop=null},n.prototype.backdrop=function(e){var r=this,i=this.$element.hasClass("fade")?"fade":"";if(this.isShown&&this.options.backdrop){var o=t.support.transition&&i;if(this.$backdrop=t(document.createElement("div")).addClass("modal-backdrop "+i).appendTo(this.$body),this.$element.on("click.dismiss.bs.modal",t.proxy(function(t){if(this.ignoreBackdropClick)return void(this.ignoreBackdropClick=!1);t.target===t.currentTarget&&("static"==this.options.backdrop?this.$element[0].focus():this.hide())},this)),o&&this.$backdrop[0].offsetWidth,this.$backdrop.addClass("in"),!e)return;o?this.$backdrop.one("bsTransitionEnd",e).emulateTransitionEnd(n.BACKDROP_TRANSITION_DURATION):e()}else if(!this.isShown&&this.$backdrop){this.$backdrop.removeClass("in");var a=function(){r.removeBackdrop(),e&&e()};t.support.transition&&this.$element.hasClass("fade")?this.$backdrop.one("bsTransitionEnd",a).emulateTransitionEnd(n.BACKDROP_TRANSITION_DURATION):a()}else e&&e()},n.prototype.handleUpdate=function(){this.adjustDialog()},n.prototype.adjustDialog=function(){var t=this.$element[0].scrollHeight>document.documentElement.clientHeight;this.$element.css({paddingLeft:!this.bodyIsOverflowing&&t?this.scrollbarWidth:"",paddingRight:this.bodyIsOverflowing&&!t?this.scrollbarWidth:""})},n.prototype.resetAdjustments=function(){this.$element.css({paddingLeft:"",paddingRight:""})},n.prototype.checkScrollbar=function(){var t=window.innerWidth;if(!t){var e=document.documentElement.getBoundingClientRect();t=e.right-Math.abs(e.left)}this.bodyIsOverflowing=document.body.clientWidth<t,this.scrollbarWidth=this.measureScrollbar()},n.prototype.setScrollbar=function(){var t=parseInt(this.$body.css("padding-right")||0,10);this.originalBodyPad=document.body.style.paddingRight||"",this.bodyIsOverflowing&&this.$body.css("padding-right",t+this.scrollbarWidth)},n.prototype.resetScrollbar=function(){this.$body.css("padding-right",this.originalBodyPad)},n.prototype.measureScrollbar=function(){var t=document.createElement("div");t.className="modal-scrollbar-measure",this.$body.append(t);var e=t.offsetWidth-t.clientWidth;return this.$body[0].removeChild(t),e};var r=t.fn.modal;t.fn.modal=e,t.fn.modal.Constructor=n,t.fn.modal.noConflict=function(){return t.fn.modal=r,this},t(document).on("click.bs.modal.data-api",'[data-toggle="modal"]',function(n){var r=t(this),i=r.attr("href"),o=t(r.attr("data-target")||i&&i.replace(/.*(?=#[^\s]+$)/,"")),a=o.data("bs.modal")?"toggle":t.extend({remote:!/#/.test(i)&&i},o.data(),r.data());r.is("a")&&n.preventDefault(),o.one("show.bs.modal",function(t){t.isDefaultPrevented()||o.one("hidden.bs.modal",function(){r.is(":visible")&&r.trigger("focus")})}),e.call(o,a,this)})}(jQuery),function(t){"use strict";function e(e){return this.each(function(){var r=t(this),i=r.data("bs.tooltip"),o="object"==typeof e&&e;!i&&/destroy|hide/.test(e)||(i||r.data("bs.tooltip",i=new n(this,o)),"string"==typeof e&&i[e]())})}var n=function(t,e){this.type=null,this.options=null,this.enabled=null,this.timeout=null,this.hoverState=null,this.$element=null,this.inState=null,this.init("tooltip",t,e)};n.VERSION="3.3.7",n.TRANSITION_DURATION=150,n.DEFAULTS={animation:!0,placement:"top",selector:!1,template:'<div class="tooltip" role="tooltip"><div class="tooltip-arrow"></div><div class="tooltip-inner"></div></div>',trigger:"hover focus",title:"",delay:0,html:!1,container:!1,viewport:{selector:"body",padding:0}},n.prototype.init=function(e,n,r){if(this.enabled=!0,this.type=e,this.$element=t(n),this.options=this.getOptions(r),this.$viewport=this.options.viewport&&t(t.isFunction(this.options.viewport)?this.options.viewport.call(this,this.$element):this.options.viewport.selector||this.options.viewport),this.inState={click:!1,hover:!1,focus:!1},this.$element[0]instanceof document.constructor&&!this.options.selector)throw new Error("`selector` option must be specified when initializing "+this.type+" on the window.document object!");for(var i=this.options.trigger.split(" "),o=i.length;o--;){var a=i[o];if("click"==a)this.$element.on("click."+this.type,this.options.selector,t.proxy(this.toggle,this));else if("manual"!=a){var s="hover"==a?"mouseenter":"focusin",u="hover"==a?"mouseleave":"focusout";this.$element.on(s+"."+this.type,this.options.selector,t.proxy(this.enter,this)),this.$element.on(u+"."+this.type,this.options.selector,t.proxy(this.leave,this))}}this.options.selector?this._options=t.extend({},this.options,{trigger:"manual",selector:""}):this.fixTitle()},n.prototype.getDefaults=function(){return n.DEFAULTS},n.prototype.getOptions=function(e){return e=t.extend({},this.getDefaults(),this.$element.data(),e),e.delay&&"number"==typeof e.delay&&(e.delay={show:e.delay,hide:e.delay}),e},n.prototype.getDelegateOptions=function(){var e={},n=this.getDefaults();return this._options&&t.each(this._options,function(t,r){n[t]!=r&&(e[t]=r)}),e},n.prototype.enter=function(e){var n=e instanceof this.constructor?e:t(e.currentTarget).data("bs."+this.type);return n||(n=new this.constructor(e.currentTarget,this.getDelegateOptions()),t(e.currentTarget).data("bs."+this.type,n)),e instanceof t.Event&&(n.inState["focusin"==e.type?"focus":"hover"]=!0),n.tip().hasClass("in")||"in"==n.hoverState?void(n.hoverState="in"):(clearTimeout(n.timeout),n.hoverState="in",n.options.delay&&n.options.delay.show?void(n.timeout=setTimeout(function(){"in"==n.hoverState&&n.show()},n.options.delay.show)):n.show())},n.prototype.isInStateTrue=function(){for(var t in this.inState)if(this.inState[t])return!0;return!1},n.prototype.leave=function(e){var n=e instanceof this.constructor?e:t(e.currentTarget).data("bs."+this.type);if(n||(n=new this.constructor(e.currentTarget,this.getDelegateOptions()),t(e.currentTarget).data("bs."+this.type,n)),e instanceof t.Event&&(n.inState["focusout"==e.type?"focus":"hover"]=!1),!n.isInStateTrue()){if(clearTimeout(n.timeout),n.hoverState="out",!n.options.delay||!n.options.delay.hide)return n.hide();n.timeout=setTimeout(function(){"out"==n.hoverState&&n.hide()},n.options.delay.hide)}},n.prototype.show=function(){var e=t.Event("show.bs."+this.type);if(this.hasContent()&&this.enabled){this.$element.trigger(e);var r=t.contains(this.$element[0].ownerDocument.documentElement,this.$element[0]);if(e.isDefaultPrevented()||!r)return;var i=this,o=this.tip(),a=this.getUID(this.type);this.setContent(),o.attr("id",a),this.$element.attr("aria-describedby",a),this.options.animation&&o.addClass("fade");var s="function"==typeof this.options.placement?this.options.placement.call(this,o[0],this.$element[0]):this.options.placement,u=/\s?auto?\s?/i,c=u.test(s);c&&(s=s.replace(u,"")||"top"),o.detach().css({top:0,left:0,display:"block"}).addClass(s).data("bs."+this.type,this),this.options.container?o.appendTo(this.options.container):o.insertAfter(this.$element),this.$element.trigger("inserted.bs."+this.type);var l=this.getPosition(),f=o[0].offsetWidth,p=o[0].offsetHeight;if(c){var d=s,h=this.getPosition(this.$viewport);s="bottom"==s&&l.bottom+p>h.bottom?"top":"top"==s&&l.top-p<h.top?"bottom":"right"==s&&l.right+f>h.width?"left":"left"==s&&l.left-f<h.left?"right":s,o.removeClass(d).addClass(s)}var v=this.getCalculatedOffset(s,l,f,p);this.applyPlacement(v,s);var g=function(){var t=i.hoverState;i.$element.trigger("shown.bs."+i.type),i.hoverState=null,"out"==t&&i.leave(i)};t.support.transition&&this.$tip.hasClass("fade")?o.one("bsTransitionEnd",g).emulateTransitionEnd(n.TRANSITION_DURATION):g()}},n.prototype.applyPlacement=function(e,n){var r=this.tip(),i=r[0].offsetWidth,o=r[0].offsetHeight,a=parseInt(r.css("margin-top"),10),s=parseInt(r.css("margin-left"),10);isNaN(a)&&(a=0),isNaN(s)&&(s=0),e.top+=a,e.left+=s,t.offset.setOffset(r[0],t.extend({using:function(t){r.css({top:Math.round(t.top),left:Math.round(t.left)})}},e),0),r.addClass("in");var u=r[0].offsetWidth,c=r[0].offsetHeight;"top"==n&&c!=o&&(e.top=e.top+o-c);var l=this.getViewportAdjustedDelta(n,e,u,c);l.left?e.left+=l.left:e.top+=l.top;var f=/top|bottom/.test(n),p=f?2*l.left-i+u:2*l.top-o+c,d=f?"offsetWidth":"offsetHeight";r.offset(e),this.replaceArrow(p,r[0][d],f)},n.prototype.replaceArrow=function(t,e,n){this.arrow().css(n?"left":"top",50*(1-t/e)+"%").css(n?"top":"left","")},n.prototype.setContent=function(){var t=this.tip(),e=this.getTitle();t.find(".tooltip-inner")[this.options.html?"html":"text"](e),t.removeClass("fade in top bottom left right")},n.prototype.hide=function(e){function r(){"in"!=i.hoverState&&o.detach(),i.$element&&i.$element.removeAttr("aria-describedby").trigger("hidden.bs."+i.type),e&&e()}var i=this,o=t(this.$tip),a=t.Event("hide.bs."+this.type);if(this.$element.trigger(a),!a.isDefaultPrevented())return o.removeClass("in"),t.support.transition&&o.hasClass("fade")?o.one("bsTransitionEnd",r).emulateTransitionEnd(n.TRANSITION_DURATION):r(),this.hoverState=null,this},n.prototype.fixTitle=function(){var t=this.$element;(t.attr("title")||"string"!=typeof t.attr("data-original-title"))&&t.attr("data-original-title",t.attr("title")||"").attr("title","")},n.prototype.hasContent=function(){return this.getTitle()},n.prototype.getPosition=function(e){e=e||this.$element;var n=e[0],r="BODY"==n.tagName,i=n.getBoundingClientRect();null==i.width&&(i=t.extend({},i,{width:i.right-i.left,height:i.bottom-i.top}));var o=window.SVGElement&&n instanceof window.SVGElement,a=r?{top:0,left:0}:o?null:e.offset(),s={scroll:r?document.documentElement.scrollTop||document.body.scrollTop:e.scrollTop()},u=r?{width:t(window).width(),height:t(window).height()}:null;return t.extend({},i,s,u,a)},n.prototype.getCalculatedOffset=function(t,e,n,r){return"bottom"==t?{top:e.top+e.height,left:e.left+e.width/2-n/2}:"top"==t?{top:e.top-r,left:e.left+e.width/2-n/2}:"left"==t?{top:e.top+e.height/2-r/2,left:e.left-n}:{top:e.top+e.height/2-r/2,left:e.left+e.width}},n.prototype.getViewportAdjustedDelta=function(t,e,n,r){var i={top:0,left:0};if(!this.$viewport)return i;var o=this.options.viewport&&this.options.viewport.padding||0,a=this.getPosition(this.$viewport);if(/right|left/.test(t)){var s=e.top-o-a.scroll,u=e.top+o-a.scroll+r;s<a.top?i.top=a.top-s:u>a.top+a.height&&(i.top=a.top+a.height-u)}else{var c=e.left-o,l=e.left+o+n;c<a.left?i.left=a.left-c:l>a.right&&(i.left=a.left+a.width-l)}return i},n.prototype.getTitle=function(){var t=this.$element,e=this.options;return t.attr("data-original-title")||("function"==typeof e.title?e.title.call(t[0]):e.title)},n.prototype.getUID=function(t){do{t+=~~(1e6*Math.random())}while(document.getElementById(t));return t},n.prototype.tip=function(){if(!this.$tip&&(this.$tip=t(this.options.template),1!=this.$tip.length))throw new Error(this.type+" `template` option must consist of exactly 1 top-level element!");return this.$tip},n.prototype.arrow=function(){return this.$arrow=this.$arrow||this.tip().find(".tooltip-arrow")},n.prototype.enable=function(){this.enabled=!0},n.prototype.disable=function(){this.enabled=!1},n.prototype.toggleEnabled=function(){this.enabled=!this.enabled},n.prototype.toggle=function(e){var n=this;e&&((n=t(e.currentTarget).data("bs."+this.type))||(n=new this.constructor(e.currentTarget,this.getDelegateOptions()),t(e.currentTarget).data("bs."+this.type,n))),e?(n.inState.click=!n.inState.click,n.isInStateTrue()?n.enter(n):n.leave(n)):n.tip().hasClass("in")?n.leave(n):n.enter(n)},n.prototype.destroy=function(){var t=this;clearTimeout(this.timeout),this.hide(function(){t.$element.off("."+t.type).removeData("bs."+t.type),t.$tip&&t.$tip.detach(),t.$tip=null,t.$arrow=null,t.$viewport=null,t.$element=null})};var r=t.fn.tooltip;t.fn.tooltip=e,t.fn.tooltip.Constructor=n,t.fn.tooltip.noConflict=function(){return t.fn.tooltip=r,this}}(jQuery),function(t){"use strict";function e(e){return this.each(function(){var r=t(this),i=r.data("bs.popover"),o="object"==typeof e&&e;!i&&/destroy|hide/.test(e)||(i||r.data("bs.popover",i=new n(this,o)),"string"==typeof e&&i[e]())})}var n=function(t,e){this.init("popover",t,e)};if(!t.fn.tooltip)throw new Error("Popover requires tooltip.js");n.VERSION="3.3.7",n.DEFAULTS=t.extend({},t.fn.tooltip.Constructor.DEFAULTS,{placement:"right",trigger:"click",content:"",template:'<div class="popover" role="tooltip"><div class="arrow"></div><h3 class="popover-title"></h3><div class="popover-content"></div></div>'}),n.prototype=t.extend({},t.fn.tooltip.Constructor.prototype),n.prototype.constructor=n,n.prototype.getDefaults=function(){return n.DEFAULTS},n.prototype.setContent=function(){var t=this.tip(),e=this.getTitle(),n=this.getContent();t.find(".popover-title")[this.options.html?"html":"text"](e),t.find(".popover-content").children().detach().end()[this.options.html?"string"==typeof n?"html":"append":"text"](n),t.removeClass("fade top bottom left right in"),t.find(".popover-title").html()||t.find(".popover-title").hide()},n.prototype.hasContent=function(){return this.getTitle()||this.getContent()},n.prototype.getContent=function(){var t=this.$element,e=this.options;return t.attr("data-content")||("function"==typeof e.content?e.content.call(t[0]):e.content)},n.prototype.arrow=function(){return this.$arrow=this.$arrow||this.tip().find(".arrow")};var r=t.fn.popover;t.fn.popover=e,t.fn.popover.Constructor=n,t.fn.popover.noConflict=function(){return t.fn.popover=r,this}}(jQuery),function(t){"use strict";function e(n,r){this.$body=t(document.body),this.$scrollElement=t(t(n).is(document.body)?window:n),this.options=t.extend({},e.DEFAULTS,r),this.selector=(this.options.target||"")+" .nav li > a",this.offsets=[],this.targets=[],this.activeTarget=null,this.scrollHeight=0,this.$scrollElement.on("scroll.bs.scrollspy",t.proxy(this.process,this)),this.refresh(),this.process()}function n(n){return this.each(function(){var r=t(this),i=r.data("bs.scrollspy"),o="object"==typeof n&&n;i||r.data("bs.scrollspy",i=new e(this,o)),"string"==typeof n&&i[n]()})}e.VERSION="3.3.7",e.DEFAULTS={offset:10},e.prototype.getScrollHeight=function(){return this.$scrollElement[0].scrollHeight||Math.max(this.$body[0].scrollHeight,document.documentElement.scrollHeight)},e.prototype.refresh=function(){var e=this,n="offset",r=0;this.offsets=[],this.targets=[],this.scrollHeight=this.getScrollHeight(),t.isWindow(this.$scrollElement[0])||(n="position",r=this.$scrollElement.scrollTop()),this.$body.find(this.selector).map(function(){var e=t(this),i=e.data("target")||e.attr("href"),o=/^#./.test(i)&&t(i);return o&&o.length&&o.is(":visible")&&[[o[n]().top+r,i]]||null}).sort(function(t,e){return t[0]-e[0]}).each(function(){e.offsets.push(this[0]),e.targets.push(this[1])})},e.prototype.process=function(){var t,e=this.$scrollElement.scrollTop()+this.options.offset,n=this.getScrollHeight(),r=this.options.offset+n-this.$scrollElement.height(),i=this.offsets,o=this.targets,a=this.activeTarget;if(this.scrollHeight!=n&&this.refresh(),e>=r)return a!=(t=o[o.length-1])&&this.activate(t);if(a&&e<i[0])return this.activeTarget=null,this.clear();for(t=i.length;t--;)a!=o[t]&&e>=i[t]&&(void 0===i[t+1]||e<i[t+1])&&this.activate(o[t])},e.prototype.activate=function(e){this.activeTarget=e,this.clear();var n=this.selector+'[data-target="'+e+'"],'+this.selector+'[href="'+e+'"]',r=t(n).parents("li").addClass("active");r.parent(".dropdown-menu").length&&(r=r.closest("li.dropdown").addClass("active")),r.trigger("activate.bs.scrollspy")},e.prototype.clear=function(){t(this.selector).parentsUntil(this.options.target,".active").removeClass("active")};var r=t.fn.scrollspy;t.fn.scrollspy=n,t.fn.scrollspy.Constructor=e,t.fn.scrollspy.noConflict=function(){return t.fn.scrollspy=r,this},t(window).on("load.bs.scrollspy.data-api",function(){t('[data-spy="scroll"]').each(function(){var e=t(this);n.call(e,e.data())})})}(jQuery),function(t){"use strict";function e(e){return this.each(function(){var r=t(this),i=r.data("bs.tab");i||r.data("bs.tab",i=new n(this)),"string"==typeof e&&i[e]()})}var n=function(e){this.element=t(e)};n.VERSION="3.3.7",n.TRANSITION_DURATION=150,n.prototype.show=function(){var e=this.element,n=e.closest("ul:not(.dropdown-menu)"),r=e.data("target");if(r||(r=e.attr("href"),r=r&&r.replace(/.*(?=#[^\s]*$)/,"")),!e.parent("li").hasClass("active")){var i=n.find(".active:last a"),o=t.Event("hide.bs.tab",{relatedTarget:e[0]}),a=t.Event("show.bs.tab",{relatedTarget:i[0]});if(i.trigger(o),e.trigger(a),!a.isDefaultPrevented()&&!o.isDefaultPrevented()){var s=t(r);this.activate(e.closest("li"),n),this.activate(s,s.parent(),function(){i.trigger({type:"hidden.bs.tab",relatedTarget:e[0]}),e.trigger({type:"shown.bs.tab",relatedTarget:i[0]})})}}},n.prototype.activate=function(e,r,i){function o(){a.removeClass("active").find("> .dropdown-menu > .active").removeClass("active").end().find('[data-toggle="tab"]').attr("aria-expanded",!1),e.addClass("active").find('[data-toggle="tab"]').attr("aria-expanded",!0),s?(e[0].offsetWidth,e.addClass("in")):e.removeClass("fade"),e.parent(".dropdown-menu").length&&e.closest("li.dropdown").addClass("active").end().find('[data-toggle="tab"]').attr("aria-expanded",!0),i&&i()}var a=r.find("> .active"),s=i&&t.support.transition&&(a.length&&a.hasClass("fade")||!!r.find("> .fade").length);a.length&&s?a.one("bsTransitionEnd",o).emulateTransitionEnd(n.TRANSITION_DURATION):o(),a.removeClass("in")};var r=t.fn.tab;t.fn.tab=e,t.fn.tab.Constructor=n,t.fn.tab.noConflict=function(){return t.fn.tab=r,this};var i=function(n){n.preventDefault(),e.call(t(this),"show")};t(document).on("click.bs.tab.data-api",'[data-toggle="tab"]',i).on("click.bs.tab.data-api",'[data-toggle="pill"]',i)}(jQuery),function(t){"use strict";function e(e){return this.each(function(){var r=t(this),i=r.data("bs.affix"),o="object"==typeof e&&e;i||r.data("bs.affix",i=new n(this,o)),"string"==typeof e&&i[e]()})}var n=function(e,r){this.options=t.extend({},n.DEFAULTS,r),this.$target=t(this.options.target).on("scroll.bs.affix.data-api",t.proxy(this.checkPosition,this)).on("click.bs.affix.data-api",t.proxy(this.checkPositionWithEventLoop,this)),this.$element=t(e),this.affixed=null,this.unpin=null,this.pinnedOffset=null,this.checkPosition()};n.VERSION="3.3.7",n.RESET="affix affix-top affix-bottom",n.DEFAULTS={offset:0,target:window},n.prototype.getState=function(t,e,n,r){var i=this.$target.scrollTop(),o=this.$element.offset(),a=this.$target.height();if(null!=n&&"top"==this.affixed)return i<n&&"top";if("bottom"==this.affixed)return null!=n?!(i+this.unpin<=o.top)&&"bottom":!(i+a<=t-r)&&"bottom";var s=null==this.affixed,u=s?i:o.top,c=s?a:e;return null!=n&&i<=n?"top":null!=r&&u+c>=t-r&&"bottom"},n.prototype.getPinnedOffset=function(){if(this.pinnedOffset)return this.pinnedOffset;this.$element.removeClass(n.RESET).addClass("affix");var t=this.$target.scrollTop(),e=this.$element.offset();return this.pinnedOffset=e.top-t},n.prototype.checkPositionWithEventLoop=function(){setTimeout(t.proxy(this.checkPosition,this),1)},n.prototype.checkPosition=function(){if(this.$element.is(":visible")){var e=this.$element.height(),r=this.options.offset,i=r.top,o=r.bottom,a=Math.max(t(document).height(),t(document.body).height());"object"!=typeof r&&(o=i=r),"function"==typeof i&&(i=r.top(this.$element)),"function"==typeof o&&(o=r.bottom(this.$element));var s=this.getState(a,e,i,o);if(this.affixed!=s){null!=this.unpin&&this.$element.css("top","");var u="affix"+(s?"-"+s:""),c=t.Event(u+".bs.affix");if(this.$element.trigger(c),c.isDefaultPrevented())return;this.affixed=s,this.unpin="bottom"==s?this.getPinnedOffset():null,this.$element.removeClass(n.RESET).addClass(u).trigger(u.replace("affix","affixed")+".bs.affix")}"bottom"==s&&this.$element.offset({top:a-e-o})}};var r=t.fn.affix;t.fn.affix=e,t.fn.affix.Constructor=n,t.fn.affix.noConflict=function(){return t.fn.affix=r,this},t(window).on("load",function(){t('[data-spy="affix"]').each(function(){var n=t(this),r=n.data();r.offset=r.offset||{},null!=r.offsetBottom&&(r.offset.bottom=r.offsetBottom),null!=r.offsetTop&&(r.offset.top=r.offsetTop),e.call(n,r)})})}(jQuery)},function(t,e,n){t.exports=n(16)},function(t,e,n){"use strict";function r(t){var e=new a(t),n=o(a.prototype.request,e);return i.extend(n,a.prototype,e),i.extend(n,e),n}var i=n(0),o=n(3),a=n(18),s=n(1),u=r(s);u.Axios=a,u.create=function(t){return r(i.merge(s,t))},u.Cancel=n(7),u.CancelToken=n(33),u.isCancel=n(6),u.all=function(t){return Promise.all(t)},u.spread=n(34),t.exports=u,t.exports.default=u},function(t,e){function n(t){return!!t.constructor&&"function"==typeof t.constructor.isBuffer&&t.constructor.isBuffer(t)}function r(t){return"function"==typeof t.readFloatLE&&"function"==typeof t.slice&&n(t.slice(0,0))}t.exports=function(t){return null!=t&&(n(t)||r(t)||!!t._isBuffer)}},function(t,e,n){"use strict";function r(t){this.defaults=t,this.interceptors={request:new a,response:new a}}var i=n(1),o=n(0),a=n(28),s=n(29),u=n(31),c=n(32);r.prototype.request=function(t){"string"==typeof t&&(t=o.merge({url:arguments[0]},arguments[1])),t=o.merge(i,this.defaults,{method:"get"},t),t.method=t.method.toLowerCase(),t.baseURL&&!u(t.url)&&(t.url=c(t.baseURL,t.url));var e=[s,void 0],n=Promise.resolve(t);for(this.interceptors.request.forEach(function(t){e.unshift(t.fulfilled,t.rejected)}),this.interceptors.response.forEach(function(t){e.push(t.fulfilled,t.rejected)});e.length;)n=n.then(e.shift(),e.shift());return n},o.forEach(["delete","get","head","options"],function(t){r.prototype[t]=function(e,n){return this.request(o.merge(n||{},{method:t,url:e}))}}),o.forEach(["post","put","patch"],function(t){r.prototype[t]=function(e,n,r){return this.request(o.merge(r||{},{method:t,url:e,data:n}))}}),t.exports=r},function(t,e){function n(){throw new Error("setTimeout has not been defined")}function r(){throw new Error("clearTimeout has not been defined")}function i(t){if(l===setTimeout)return setTimeout(t,0);if((l===n||!l)&&setTimeout)return l=setTimeout,setTimeout(t,0);try{return l(t,0)}catch(e){try{return l.call(null,t,0)}catch(e){return l.call(this,t,0)}}}function o(t){if(f===clearTimeout)return clearTimeout(t);if((f===r||!f)&&clearTimeout)return f=clearTimeout,clearTimeout(t);try{return f(t)}catch(e){try{return f.call(null,t)}catch(e){return f.call(this,t)}}}function a(){v&&d&&(v=!1,d.length?h=d.concat(h):g=-1,h.length&&s())}function s(){if(!v){var t=i(a);v=!0;for(var e=h.length;e;){for(d=h,h=[];++g<e;)d&&d[g].run();g=-1,e=h.length}d=null,v=!1,o(t)}}function u(t,e){this.fun=t,this.array=e}function c(){}var l,f,p=t.exports={};!function(){try{l="function"==typeof setTimeout?setTimeout:n}catch(t){l=n}try{f="function"==typeof clearTimeout?clearTimeout:r}catch(t){f=r}}();var d,h=[],v=!1,g=-1;p.nextTick=function(t){var e=new Array(arguments.length-1);if(arguments.length>1)for(var n=1;n<arguments.length;n++)e[n-1]=arguments[n];h.push(new u(t,e)),1!==h.length||v||i(s)},u.prototype.run=function(){this.fun.apply(null,this.array)},p.title="browser",p.browser=!0,p.env={},p.argv=[],p.version="",p.versions={},p.on=c,p.addListener=c,p.once=c,p.off=c,p.removeListener=c,p.removeAllListeners=c,p.emit=c,p.prependListener=c,p.prependOnceListener=c,p.listeners=function(t){return[]},p.binding=function(t){throw new Error("process.binding is not supported")},p.cwd=function(){return"/"},p.chdir=function(t){throw new Error("process.chdir is not supported")},p.umask=function(){return 0}},function(t,e,n){"use strict";var r=n(0);t.exports=function(t,e){r.forEach(t,function(n,r){r!==e&&r.toUpperCase()===e.toUpperCase()&&(t[e]=n,delete t[r])})}},function(t,e,n){"use strict";var r=n(5);t.exports=function(t,e,n){var i=n.config.validateStatus;n.status&&i&&!i(n.status)?e(r("Request failed with status code "+n.status,n.config,null,n.request,n)):t(n)}},function(t,e,n){"use strict";t.exports=function(t,e,n,r,i){return t.config=e,n&&(t.code=n),t.request=r,t.response=i,t}},function(t,e,n){"use strict";function r(t){return encodeURIComponent(t).replace(/%40/gi,"@").replace(/%3A/gi,":").replace(/%24/g,"$").replace(/%2C/gi,",").replace(/%20/g,"+").replace(/%5B/gi,"[").replace(/%5D/gi,"]")}var i=n(0);t.exports=function(t,e,n){if(!e)return t;var o;if(n)o=n(e);else if(i.isURLSearchParams(e))o=e.toString();else{var a=[];i.forEach(e,function(t,e){null!==t&&void 0!==t&&(i.isArray(t)&&(e+="[]"),i.isArray(t)||(t=[t]),i.forEach(t,function(t){i.isDate(t)?t=t.toISOString():i.isObject(t)&&(t=JSON.stringify(t)),a.push(r(e)+"="+r(t))}))}),o=a.join("&")}return o&&(t+=(-1===t.indexOf("?")?"?":"&")+o),t}},function(t,e,n){"use strict";var r=n(0);t.exports=function(t){var e,n,i,o={};return t?(r.forEach(t.split("\n"),function(t){i=t.indexOf(":"),e=r.trim(t.substr(0,i)).toLowerCase(),n=r.trim(t.substr(i+1)),e&&(o[e]=o[e]?o[e]+", "+n:n)}),o):o}},function(t,e,n){"use strict";var r=n(0);t.exports=r.isStandardBrowserEnv()?function(){function t(t){var e=t;return n&&(i.setAttribute("href",e),e=i.href),i.setAttribute("href",e),{href:i.href,protocol:i.protocol?i.protocol.replace(/:$/,""):"",host:i.host,search:i.search?i.search.replace(/^\?/,""):"",hash:i.hash?i.hash.replace(/^#/,""):"",hostname:i.hostname,port:i.port,pathname:"/"===i.pathname.charAt(0)?i.pathname:"/"+i.pathname}}var e,n=/(msie|trident)/i.test(navigator.userAgent),i=document.createElement("a");return e=t(window.location.href),function(n){var i=r.isString(n)?t(n):n;return i.protocol===e.protocol&&i.host===e.host}}():function(){return function(){return!0}}()},function(t,e,n){"use strict";function r(){this.message="String contains an invalid character"}function i(t){for(var e,n,i=String(t),a="",s=0,u=o;i.charAt(0|s)||(u="=",s%1);a+=u.charAt(63&e>>8-s%1*8)){if((n=i.charCodeAt(s+=.75))>255)throw new r;e=e<<8|n}return a}var o="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=";r.prototype=new Error,r.prototype.code=5,r.prototype.name="InvalidCharacterError",t.exports=i},function(t,e,n){"use strict";var r=n(0);t.exports=r.isStandardBrowserEnv()?function(){return{write:function(t,e,n,i,o,a){var s=[];s.push(t+"="+encodeURIComponent(e)),r.isNumber(n)&&s.push("expires="+new Date(n).toGMTString()),r.isString(i)&&s.push("path="+i),r.isString(o)&&s.push("domain="+o),!0===a&&s.push("secure"),document.cookie=s.join("; ")},read:function(t){var e=document.cookie.match(new RegExp("(^|;\\s*)("+t+")=([^;]*)"));return e?decodeURIComponent(e[3]):null},remove:function(t){this.write(t,"",Date.now()-864e5)}}}():function(){return{write:function(){},read:function(){return null},remove:function(){}}}()},function(t,e,n){"use strict";function r(){this.handlers=[]}var i=n(0);r.prototype.use=function(t,e){return this.handlers.push({fulfilled:t,rejected:e}),this.handlers.length-1},r.prototype.eject=function(t){this.handlers[t]&&(this.handlers[t]=null)},r.prototype.forEach=function(t){i.forEach(this.handlers,function(e){null!==e&&t(e)})},t.exports=r},function(t,e,n){"use strict";function r(t){t.cancelToken&&t.cancelToken.throwIfRequested()}var i=n(0),o=n(30),a=n(6),s=n(1);t.exports=function(t){return r(t),t.headers=t.headers||{},t.data=o(t.data,t.headers,t.transformRequest),t.headers=i.merge(t.headers.common||{},t.headers[t.method]||{},t.headers||{}),i.forEach(["delete","get","head","post","put","patch","common"],function(e){delete t.headers[e]}),(t.adapter||s.adapter)(t).then(function(e){return r(t),e.data=o(e.data,e.headers,t.transformResponse),e},function(e){return a(e)||(r(t),e&&e.response&&(e.response.data=o(e.response.data,e.response.headers,t.transformResponse))),Promise.reject(e)})}},function(t,e,n){"use strict";var r=n(0);t.exports=function(t,e,n){return r.forEach(n,function(n){t=n(t,e)}),t}},function(t,e,n){"use strict";t.exports=function(t){return/^([a-z][a-z\d\+\-\.]*:)?\/\//i.test(t)}},function(t,e,n){"use strict";t.exports=function(t,e){return e?t.replace(/\/+$/,"")+"/"+e.replace(/^\/+/,""):t}},function(t,e,n){"use strict";function r(t){if("function"!=typeof t)throw new TypeError("executor must be a function.");var e;this.promise=new Promise(function(t){e=t});var n=this;t(function(t){n.reason||(n.reason=new i(t),e(n.reason))})}var i=n(7);r.prototype.throwIfRequested=function(){if(this.reason)throw this.reason},r.source=function(){var t;return{token:new r(function(e){t=e}),cancel:t}},t.exports=r},function(t,e,n){"use strict";t.exports=function(t){return function(e){return t.apply(null,e)}}},function(t,e,n){"use strict";(function(e){function n(t){return void 0===t||null===t}function r(t){return void 0!==t&&null!==t}function i(t){return!0===t}function o(t){return!1===t}function a(t){return"string"==typeof t||"number"==typeof t||"boolean"==typeof t}function s(t){return null!==t&&"object"==typeof t}function u(t){return"[object Object]"===qi.call(t)}function c(t){return"[object RegExp]"===qi.call(t)}function l(t){var e=parseFloat(t);return e>=0&&Math.floor(e)===e&&isFinite(t)}function f(t){return null==t?"":"object"==typeof t?JSON.stringify(t,null,2):String(t)}function p(t){var e=parseFloat(t);return isNaN(e)?t:e}function d(t,e){for(var n=Object.create(null),r=t.split(","),i=0;i<r.length;i++)n[r[i]]=!0;return e?function(t){return n[t.toLowerCase()]}:function(t){return n[t]}}function h(t,e){if(t.length){var n=t.indexOf(e);if(n>-1)return t.splice(n,1)}}function v(t,e){return Ui.call(t,e)}function g(t){var e=Object.create(null);return function(n){return e[n]||(e[n]=t(n))}}function m(t,e){function n(n){var r=arguments.length;return r?r>1?t.apply(e,arguments):t.call(e,n):t.call(e)}return n._length=t.length,n}function y(t,e){e=e||0;for(var n=t.length-e,r=new Array(n);n--;)r[n]=t[n+e];return r}function b(t,e){for(var n in e)t[n]=e[n];return t}function _(t){for(var e={},n=0;n<t.length;n++)t[n]&&b(e,t[n]);return e}function w(t,e,n){}function x(t,e){if(t===e)return!0;var n=s(t),r=s(e);if(!n||!r)return!n&&!r&&String(t)===String(e);try{var i=Array.isArray(t),o=Array.isArray(e);if(i&&o)return t.length===e.length&&t.every(function(t,n){return x(t,e[n])});if(i||o)return!1;var a=Object.keys(t),u=Object.keys(e);return a.length===u.length&&a.every(function(n){return x(t[n],e[n])})}catch(t){return!1}}function C(t,e){for(var n=0;n<t.length;n++)if(x(t[n],e))return n;return-1}function T(t){var e=!1;return function(){e||(e=!0,t.apply(this,arguments))}}function $(t){var e=(t+"").charCodeAt(0);return 36===e||95===e}function A(t,e,n,r){Object.defineProperty(t,e,{value:n,enumerable:!!r,writable:!0,configurable:!0})}function k(t){if(!no.test(t)){var e=t.split(".");return function(t){for(var n=0;n<e.length;n++){if(!t)return;t=t[e[n]]}return t}}}function E(t,e,n){if(to.errorHandler)to.errorHandler.call(null,t,e,n);else if(!oo||"undefined"==typeof console)throw t}function S(t){return"function"==typeof t&&/native code/.test(t.toString())}function O(t){To.target&&$o.push(To.target),To.target=t}function j(){To.target=$o.pop()}function N(t,e,n){t.__proto__=e}function D(t,e,n){for(var r=0,i=n.length;r<i;r++){var o=n[r];A(t,o,e[o])}}function I(t,e){if(s(t)){var n;return v(t,"__ob__")&&t.__ob__ instanceof Oo?n=t.__ob__:So.shouldConvert&&!bo()&&(Array.isArray(t)||u(t))&&Object.isExtensible(t)&&!t._isVue&&(n=new Oo(t)),e&&n&&n.vmCount++,n}}function L(t,e,n,r,i){var o=new To,a=Object.getOwnPropertyDescriptor(t,e);if(!a||!1!==a.configurable){var s=a&&a.get,u=a&&a.set,c=!i&&I(n);Object.defineProperty(t,e,{enumerable:!0,configurable:!0,get:function(){var e=s?s.call(t):n;return To.target&&(o.depend(),c&&(c.dep.depend(),Array.isArray(e)&&F(e))),e},set:function(e){var r=s?s.call(t):n;e===r||e!==e&&r!==r||(u?u.call(t,e):n=e,c=!i&&I(e),o.notify())}})}}function R(t,e,n){if(Array.isArray(t)&&l(e))return t.length=Math.max(t.length,e),t.splice(e,1,n),n;if(v(t,e))return t[e]=n,n;var r=t.__ob__;return t._isVue||r&&r.vmCount?n:r?(L(r.value,e,n),r.dep.notify(),n):(t[e]=n,n)}function P(t,e){if(Array.isArray(t)&&l(e))return void t.splice(e,1);var n=t.__ob__;t._isVue||n&&n.vmCount||v(t,e)&&(delete t[e],n&&n.dep.notify())}function F(t){for(var e=void 0,n=0,r=t.length;n<r;n++)e=t[n],e&&e.__ob__&&e.__ob__.dep.depend(),Array.isArray(e)&&F(e)}function M(t,e){if(!e)return t;for(var n,r,i,o=Object.keys(e),a=0;a<o.length;a++)n=o[a],r=t[n],i=e[n],v(t,n)?u(r)&&u(i)&&M(r,i):R(t,n,i);return t}function q(t,e,n){return n?t||e?function(){var r="function"==typeof e?e.call(n):e,i="function"==typeof t?t.call(n):t;return r?M(r,i):i}:void 0:e?t?function(){return M("function"==typeof e?e.call(this):e,"function"==typeof t?t.call(this):t)}:e:t}function H(t,e){return e?t?t.concat(e):Array.isArray(e)?e:[e]:t}function B(t,e){var n=Object.create(t||null);return e?b(n,e):n}function U(t){var e=t.props;if(e){var n,r,i,o={};if(Array.isArray(e))for(n=e.length;n--;)"string"==typeof(r=e[n])&&(i=zi(r),o[i]={type:null});else if(u(e))for(var a in e)r=e[a],i=zi(a),o[i]=u(r)?r:{type:r};t.props=o}}function W(t){var e=t.inject;if(Array.isArray(e))for(var n=t.inject={},r=0;r<e.length;r++)n[e[r]]=e[r]}function z(t){var e=t.directives;if(e)for(var n in e){var r=e[n];"function"==typeof r&&(e[n]={bind:r,update:r})}}function V(t,e,n){function r(r){var i=jo[r]||No;u[r]=i(t[r],e[r],n,r)}"function"==typeof e&&(e=e.options),U(e),W(e),z(e);var i=e.extends;if(i&&(t=V(t,i,n)),e.mixins)for(var o=0,a=e.mixins.length;o<a;o++)t=V(t,e.mixins[o],n);var s,u={};for(s in t)r(s);for(s in e)v(t,s)||r(s);return u}function X(t,e,n,r){if("string"==typeof n){var i=t[e];if(v(i,n))return i[n];var o=zi(n);if(v(i,o))return i[o];var a=Vi(o);if(v(i,a))return i[a];return i[n]||i[o]||i[a]}}function K(t,e,n,r){var i=e[t],o=!v(n,t),a=n[t];if(G(Boolean,i.type)&&(o&&!v(i,"default")?a=!1:G(String,i.type)||""!==a&&a!==Ki(t)||(a=!0)),void 0===a){a=J(r,i,t);var s=So.shouldConvert;So.shouldConvert=!0,I(a),So.shouldConvert=s}return a}function J(t,e,n){if(v(e,"default")){var r=e.default;return t&&t.$options.propsData&&void 0===t.$options.propsData[n]&&void 0!==t._props[n]?t._props[n]:"function"==typeof r&&"Function"!==Q(e.type)?r.call(t):r}}function Q(t){var e=t&&t.toString().match(/^\s*function (\w+)/);return e?e[1]:""}function G(t,e){if(!Array.isArray(e))return Q(e)===Q(t);for(var n=0,r=e.length;n<r;n++)if(Q(e[n])===Q(t))return!0;return!1}function Z(t){return new Do(void 0,void 0,void 0,String(t))}function Y(t,e){var n=new Do(t.tag,t.data,t.children,t.text,t.elm,t.context,t.componentOptions,t.asyncFactory);return n.ns=t.ns,n.isStatic=t.isStatic,n.key=t.key,n.isComment=t.isComment,n.isCloned=!0,e&&t.children&&(n.children=tt(t.children)),n}function tt(t,e){for(var n=t.length,r=new Array(n),i=0;i<n;i++)r[i]=Y(t[i],e);return r}function et(t){function e(){var t=arguments,n=e.fns;if(!Array.isArray(n))return n.apply(null,arguments);for(var r=n.slice(),i=0;i<r.length;i++)r[i].apply(null,t)}return e.fns=t,e}function nt(t,e){return t.plain?-1:e.plain?1:0}function rt(t,e,r,i,o){var a,s,u,c,l=[],f=!1;for(a in t)s=t[a],u=e[a],c=Po(a),c.plain||(f=!0),n(s)||(n(u)?(n(s.fns)&&(s=t[a]=et(s)),c.handler=s,l.push(c)):s!==u&&(u.fns=s,t[a]=u));if(l.length){f&&l.sort(nt);for(var p=0;p<l.length;p++){var d=l[p];r(d.name,d.handler,d.once,d.capture,d.passive)}}for(a in e)n(t[a])&&(c=Po(a),i(c.name,e[a],c.capture))}function it(t,e,o){function a(){o.apply(this,arguments),h(s.fns,a)}var s,u=t[e];n(u)?s=et([a]):r(u.fns)&&i(u.merged)?(s=u,s.fns.push(a)):s=et([u,a]),s.merged=!0,t[e]=s}function ot(t,e,i){var o=e.options.props;if(!n(o)){var a={},s=t.attrs,u=t.props;if(r(s)||r(u))for(var c in o){var l=Ki(c);at(a,u,c,l,!0)||at(a,s,c,l,!1)}return a}}function at(t,e,n,i,o){if(r(e)){if(v(e,n))return t[n]=e[n],o||delete e[n],!0;if(v(e,i))return t[n]=e[i],o||delete e[i],!0}return!1}function st(t){for(var e=0;e<t.length;e++)if(Array.isArray(t[e]))return Array.prototype.concat.apply([],t);return t}function ut(t){return a(t)?[Z(t)]:Array.isArray(t)?lt(t):void 0}function ct(t){return r(t)&&r(t.text)&&o(t.isComment)}function lt(t,e){var o,s,u,c=[];for(o=0;o<t.length;o++)s=t[o],n(s)||"boolean"==typeof s||(u=c[c.length-1],Array.isArray(s)?c.push.apply(c,lt(s,(e||"")+"_"+o)):a(s)?ct(u)?u.text+=String(s):""!==s&&c.push(Z(s)):ct(s)&&ct(u)?c[c.length-1]=Z(u.text+s.text):(i(t._isVList)&&r(s.tag)&&n(s.key)&&r(e)&&(s.key="__vlist"+e+"_"+o+"__"),c.push(s)));return c}function ft(t,e){return t.__esModule&&t.default&&(t=t.default),s(t)?e.extend(t):t}function pt(t,e,n,r,i){var o=Ro();return o.asyncFactory=t,o.asyncMeta={data:e,context:n,children:r,tag:i},o}function dt(t,e,o){if(i(t.error)&&r(t.errorComp))return t.errorComp;if(r(t.resolved))return t.resolved;if(i(t.loading)&&r(t.loadingComp))return t.loadingComp;if(!r(t.contexts)){var a=t.contexts=[o],u=!0,c=function(){for(var t=0,e=a.length;t<e;t++)a[t].$forceUpdate()},l=T(function(n){t.resolved=ft(n,e),u||c()}),f=T(function(e){r(t.errorComp)&&(t.error=!0,c())}),p=t(l,f);return s(p)&&("function"==typeof p.then?n(t.resolved)&&p.then(l,f):r(p.component)&&"function"==typeof p.component.then&&(p.component.then(l,f),r(p.error)&&(t.errorComp=ft(p.error,e)),r(p.loading)&&(t.loadingComp=ft(p.loading,e),0===p.delay?t.loading=!0:setTimeout(function(){n(t.resolved)&&n(t.error)&&(t.loading=!0,c())},p.delay||200)),r(p.timeout)&&setTimeout(function(){n(t.resolved)&&f(null)},p.timeout))),u=!1,t.loading?t.loadingComp:t.resolved}t.contexts.push(o)}function ht(t){return t.isComment&&t.asyncFactory}function vt(t){if(Array.isArray(t))for(var e=0;e<t.length;e++){var n=t[e];if(r(n)&&(r(n.componentOptions)||ht(n)))return n}}function gt(t){t._events=Object.create(null),t._hasHookEvent=!1;var e=t.$options._parentListeners;e&&bt(t,e)}function mt(t,e,n){n?Lo.$once(t,e):Lo.$on(t,e)}function yt(t,e){Lo.$off(t,e)}function bt(t,e,n){Lo=t,rt(e,n||{},mt,yt,t)}function _t(t,e){var n={};if(!t)return n;for(var r=[],i=0,o=t.length;i<o;i++){var a=t[i],s=a.data;if(s&&s.attrs&&s.attrs.slot&&delete s.attrs.slot,a.context!==e&&a.functionalContext!==e||!s||null==s.slot)r.push(a);else{var u=a.data.slot,c=n[u]||(n[u]=[]);"template"===a.tag?c.push.apply(c,a.children):c.push(a)}}return r.every(wt)||(n.default=r),n}function wt(t){return t.isComment||" "===t.text}function xt(t,e){e=e||{};for(var n=0;n<t.length;n++)Array.isArray(t[n])?xt(t[n],e):e[t[n].key]=t[n].fn;return e}function Ct(t){var e=t.$options,n=e.parent;if(n&&!e.abstract){for(;n.$options.abstract&&n.$parent;)n=n.$parent;n.$children.push(t)}t.$parent=n,t.$root=n?n.$root:t,t.$children=[],t.$refs={},t._watcher=null,t._inactive=null,t._directInactive=!1,t._isMounted=!1,t._isDestroyed=!1,t._isBeingDestroyed=!1}function Tt(t,e,n){t.$el=e,t.$options.render||(t.$options.render=Ro),St(t,"beforeMount");var r;return r=function(){t._update(t._render(),n)},t._watcher=new Vo(t,r,w),n=!1,null==t.$vnode&&(t._isMounted=!0,St(t,"mounted")),t}function $t(t,e,n,r,i){var o=!!(i||t.$options._renderChildren||r.data.scopedSlots||t.$scopedSlots!==eo);if(t.$options._parentVnode=r,t.$vnode=r,t._vnode&&(t._vnode.parent=r),t.$options._renderChildren=i,t.$attrs=r.data&&r.data.attrs||eo,t.$listeners=n||eo,e&&t.$options.props){So.shouldConvert=!1;for(var a=t._props,s=t.$options._propKeys||[],u=0;u<s.length;u++){var c=s[u];a[c]=K(c,t.$options.props,e,t)}So.shouldConvert=!0,t.$options.propsData=e}if(n){var l=t.$options._parentListeners;t.$options._parentListeners=n,bt(t,n,l)}o&&(t.$slots=_t(i,r.context),t.$forceUpdate())}function At(t){for(;t&&(t=t.$parent);)if(t._inactive)return!0;return!1}function kt(t,e){if(e){if(t._directInactive=!1,At(t))return}else if(t._directInactive)return;if(t._inactive||null===t._inactive){t._inactive=!1;for(var n=0;n<t.$children.length;n++)kt(t.$children[n]);St(t,"activated")}}function Et(t,e){if(!(e&&(t._directInactive=!0,At(t))||t._inactive)){t._inactive=!0;for(var n=0;n<t.$children.length;n++)Et(t.$children[n]);St(t,"deactivated")}}function St(t,e){var n=t.$options[e];if(n)for(var r=0,i=n.length;r<i;r++)try{n[r].call(t)}catch(n){E(n,t,e+" hook")}t._hasHookEvent&&t.$emit("hook:"+e)}function Ot(){Wo=Mo.length=qo.length=0,Ho={},Bo=Uo=!1}function jt(){Uo=!0;var t,e;for(Mo.sort(function(t,e){return t.id-e.id}),Wo=0;Wo<Mo.length;Wo++)t=Mo[Wo],e=t.id,Ho[e]=null,t.run();var n=qo.slice(),r=Mo.slice();Ot(),It(n),Nt(r),_o&&to.devtools&&_o.emit("flush")}function Nt(t){for(var e=t.length;e--;){var n=t[e],r=n.vm;r._watcher===n&&r._isMounted&&St(r,"updated")}}function Dt(t){t._inactive=!1,qo.push(t)}function It(t){for(var e=0;e<t.length;e++)t[e]._inactive=!0,kt(t[e],!0)}function Lt(t){var e=t.id;if(null==Ho[e]){if(Ho[e]=!0,Uo){for(var n=Mo.length-1;n>Wo&&Mo[n].id>t.id;)n--;Mo.splice(n+1,0,t)}else Mo.push(t);Bo||(Bo=!0,xo(jt))}}function Rt(t){Xo.clear(),Pt(t,Xo)}function Pt(t,e){var n,r,i=Array.isArray(t);if((i||s(t))&&Object.isExtensible(t)){if(t.__ob__){var o=t.__ob__.dep.id;if(e.has(o))return;e.add(o)}if(i)for(n=t.length;n--;)Pt(t[n],e);else for(r=Object.keys(t),n=r.length;n--;)Pt(t[r[n]],e)}}function Ft(t,e,n){Ko.get=function(){return this[e][n]},Ko.set=function(t){this[e][n]=t},Object.defineProperty(t,n,Ko)}function Mt(t){t._watchers=[];var e=t.$options;e.props&&qt(t,e.props),e.methods&&Vt(t,e.methods),e.data?Ht(t):I(t._data={},!0),e.computed&&Ut(t,e.computed),e.watch&&e.watch!==ho&&Xt(t,e.watch)}function qt(t,e){var n=t.$options.propsData||{},r=t._props={},i=t.$options._propKeys=[],o=!t.$parent;So.shouldConvert=o;for(var a in e)!function(o){i.push(o);var a=K(o,e,n,t);L(r,o,a),o in t||Ft(t,"_props",o)}(a);So.shouldConvert=!0}function Ht(t){var e=t.$options.data;e=t._data="function"==typeof e?Bt(e,t):e||{},u(e)||(e={});for(var n=Object.keys(e),r=t.$options.props,i=(t.$options.methods,n.length);i--;){var o=n[i];r&&v(r,o)||$(o)||Ft(t,"_data",o)}I(e,!0)}function Bt(t,e){try{return t.call(e)}catch(t){return E(t,e,"data()"),{}}}function Ut(t,e){var n=t._computedWatchers=Object.create(null),r=bo();for(var i in e){var o=e[i],a="function"==typeof o?o:o.get;r||(n[i]=new Vo(t,a||w,w,Jo)),i in t||Wt(t,i,o)}}function Wt(t,e,n){var r=!bo();"function"==typeof n?(Ko.get=r?zt(e):n,Ko.set=w):(Ko.get=n.get?r&&!1!==n.cache?zt(e):n.get:w,Ko.set=n.set?n.set:w),Object.defineProperty(t,e,Ko)}function zt(t){return function(){var e=this._computedWatchers&&this._computedWatchers[t];if(e)return e.dirty&&e.evaluate(),To.target&&e.depend(),e.value}}function Vt(t,e){t.$options.props;for(var n in e)t[n]=null==e[n]?w:m(e[n],t)}function Xt(t,e){for(var n in e){var r=e[n];if(Array.isArray(r))for(var i=0;i<r.length;i++)Kt(t,n,r[i]);else Kt(t,n,r)}}function Kt(t,e,n,r){return u(n)&&(r=n,n=n.handler),"string"==typeof n&&(n=t[n]),t.$watch(e,n,r)}function Jt(t){var e=t.$options.provide;e&&(t._provided="function"==typeof e?e.call(t):e)}function Qt(t){var e=Gt(t.$options.inject,t);e&&(So.shouldConvert=!1,Object.keys(e).forEach(function(n){L(t,n,e[n])}),So.shouldConvert=!0)}function Gt(t,e){if(t){for(var n=Object.create(null),r=wo?Reflect.ownKeys(t).filter(function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}):Object.keys(t),i=0;i<r.length;i++)for(var o=r[i],a=t[o],s=e;s;){if(s._provided&&a in s._provided){n[o]=s._provided[a];break}s=s.$parent}return n}}function Zt(t,e,n,i,o){var a={},s=t.options.props;if(r(s))for(var u in s)a[u]=K(u,s,e||eo);else r(n.attrs)&&Yt(a,n.attrs),r(n.props)&&Yt(a,n.props);var c=Object.create(i),l=function(t,e,n,r){return oe(c,t,e,n,r,!0)},f=t.options.render.call(null,l,{data:n,props:a,children:o,parent:i,listeners:n.on||eo,injections:Gt(t.options.inject,i),slots:function(){return _t(o,i)}});return f instanceof Do&&(f.functionalContext=i,f.functionalOptions=t.options,n.slot&&((f.data||(f.data={})).slot=n.slot)),f}function Yt(t,e){for(var n in e)t[zi(n)]=e[n]}function te(t,e,o,a,u){if(!n(t)){var c=o.$options._base;if(s(t)&&(t=c.extend(t)),"function"==typeof t){var l;if(n(t.cid)&&(l=t,void 0===(t=dt(l,c,o))))return pt(l,e,o,a,u);e=e||{},_e(t),r(e.model)&&ie(t.options,e);var f=ot(e,t,u);if(i(t.options.functional))return Zt(t,f,e,o,a);var p=e.on;if(e.on=e.nativeOn,i(t.options.abstract)){var d=e.slot;e={},d&&(e.slot=d)}ne(e);var h=t.options.name||u;return new Do("vue-component-"+t.cid+(h?"-"+h:""),e,void 0,void 0,void 0,o,{Ctor:t,propsData:f,listeners:p,tag:u,children:a},l)}}}function ee(t,e,n,i){var o=t.componentOptions,a={_isComponent:!0,parent:e,propsData:o.propsData,_componentTag:o.tag,_parentVnode:t,_parentListeners:o.listeners,_renderChildren:o.children,_parentElm:n||null,_refElm:i||null},s=t.data.inlineTemplate;return r(s)&&(a.render=s.render,a.staticRenderFns=s.staticRenderFns),new o.Ctor(a)}function ne(t){t.hook||(t.hook={});for(var e=0;e<Go.length;e++){var n=Go[e],r=t.hook[n],i=Qo[n];t.hook[n]=r?re(i,r):i}}function re(t,e){return function(n,r,i,o){t(n,r,i,o),e(n,r,i,o)}}function ie(t,e){var n=t.model&&t.model.prop||"value",i=t.model&&t.model.event||"input";(e.props||(e.props={}))[n]=e.model.value;var o=e.on||(e.on={});r(o[i])?o[i]=[e.model.callback].concat(o[i]):o[i]=e.model.callback}function oe(t,e,n,r,o,s){return(Array.isArray(n)||a(n))&&(o=r,r=n,n=void 0),i(s)&&(o=Yo),ae(t,e,n,r,o)}function ae(t,e,n,i,o){if(r(n)&&r(n.__ob__))return Ro();if(r(n)&&r(n.is)&&(e=n.is),!e)return Ro();Array.isArray(i)&&"function"==typeof i[0]&&(n=n||{},n.scopedSlots={default:i[0]},i.length=0),o===Yo?i=ut(i):o===Zo&&(i=st(i));var a,s;if("string"==typeof e){var u;s=t.$vnode&&t.$vnode.ns||to.getTagNamespace(e),a=to.isReservedTag(e)?new Do(to.parsePlatformTagName(e),n,i,void 0,void 0,t):r(u=X(t.$options,"components",e))?te(u,n,t,i,e):new Do(e,n,i,void 0,void 0,t)}else a=te(e,n,t,i);return r(a)?(s&&se(a,s),a):Ro()}function se(t,e){if(t.ns=e,"foreignObject"!==t.tag&&r(t.children))for(var i=0,o=t.children.length;i<o;i++){var a=t.children[i];r(a.tag)&&n(a.ns)&&se(a,e)}}function ue(t,e){var n,i,o,a,u;if(Array.isArray(t)||"string"==typeof t)for(n=new Array(t.length),i=0,o=t.length;i<o;i++)n[i]=e(t[i],i);else if("number"==typeof t)for(n=new Array(t),i=0;i<t;i++)n[i]=e(i+1,i);else if(s(t))for(a=Object.keys(t),n=new Array(a.length),i=0,o=a.length;i<o;i++)u=a[i],n[i]=e(t[u],u,i);return r(n)&&(n._isVList=!0),n}function ce(t,e,n,r){var i=this.$scopedSlots[t];if(i)return n=n||{},r&&(n=b(b({},r),n)),i(n)||e;var o=this.$slots[t];return o||e}function le(t){return X(this.$options,"filters",t,!0)||Qi}function fe(t,e,n){var r=to.keyCodes[e]||n;return Array.isArray(r)?-1===r.indexOf(t):r!==t}function pe(t,e,n,r,i){if(n)if(s(n)){Array.isArray(n)&&(n=_(n));var o;for(var a in n)!function(a){if("class"===a||"style"===a||Bi(a))o=t;else{var s=t.attrs&&t.attrs.type;o=r||to.mustUseProp(e,s,a)?t.domProps||(t.domProps={}):t.attrs||(t.attrs={})}if(!(a in o)&&(o[a]=n[a],i)){(t.on||(t.on={}))["update:"+a]=function(t){n[a]=t}}}(a)}else;return t}function de(t,e){var n=this._staticTrees[t];return n&&!e?Array.isArray(n)?tt(n):Y(n):(n=this._staticTrees[t]=this.$options.staticRenderFns[t].call(this._renderProxy),ve(n,"__static__"+t,!1),n)}function he(t,e,n){return ve(t,"__once__"+e+(n?"_"+n:""),!0),t}function ve(t,e,n){if(Array.isArray(t))for(var r=0;r<t.length;r++)t[r]&&"string"!=typeof t[r]&&ge(t[r],e+"_"+r,n);else ge(t,e,n)}function ge(t,e,n){t.isStatic=!0,t.key=e,t.isOnce=n}function me(t,e){if(e)if(u(e)){var n=t.on=t.on?b({},t.on):{};for(var r in e){var i=n[r],o=e[r];n[r]=i?[].concat(o,i):o}}else;return t}function ye(t){t._vnode=null,t._staticTrees=null;var e=t.$vnode=t.$options._parentVnode,n=e&&e.context;t.$slots=_t(t.$options._renderChildren,n),t.$scopedSlots=eo,t._c=function(e,n,r,i){return oe(t,e,n,r,i,!1)},t.$createElement=function(e,n,r,i){return oe(t,e,n,r,i,!0)};var r=e&&e.data;L(t,"$attrs",r&&r.attrs||eo,null,!0),L(t,"$listeners",t.$options._parentListeners||eo,null,!0)}function be(t,e){var n=t.$options=Object.create(t.constructor.options);n.parent=e.parent,n.propsData=e.propsData,n._parentVnode=e._parentVnode,n._parentListeners=e._parentListeners,n._renderChildren=e._renderChildren,n._componentTag=e._componentTag,n._parentElm=e._parentElm,n._refElm=e._refElm,e.render&&(n.render=e.render,n.staticRenderFns=e.staticRenderFns)}function _e(t){var e=t.options;if(t.super){var n=_e(t.super);if(n!==t.superOptions){t.superOptions=n;var r=we(t);r&&b(t.extendOptions,r),e=t.options=V(n,t.extendOptions),e.name&&(e.components[e.name]=t)}}return e}function we(t){var e,n=t.options,r=t.extendOptions,i=t.sealedOptions;for(var o in n)n[o]!==i[o]&&(e||(e={}),e[o]=xe(n[o],r[o],i[o]));return e}function xe(t,e,n){if(Array.isArray(t)){var r=[];n=Array.isArray(n)?n:[n],e=Array.isArray(e)?e:[e];for(var i=0;i<t.length;i++)(e.indexOf(t[i])>=0||n.indexOf(t[i])<0)&&r.push(t[i]);return r}return t}function Ce(t){this._init(t)}function Te(t){t.use=function(t){var e=this._installedPlugins||(this._installedPlugins=[]);if(e.indexOf(t)>-1)return this;var n=y(arguments,1);return n.unshift(this),"function"==typeof t.install?t.install.apply(t,n):"function"==typeof t&&t.apply(null,n),e.push(t),this}}function $e(t){t.mixin=function(t){return this.options=V(this.options,t),this}}function Ae(t){t.cid=0;var e=1;t.extend=function(t){t=t||{};var n=this,r=n.cid,i=t._Ctor||(t._Ctor={});if(i[r])return i[r];var o=t.name||n.options.name,a=function(t){this._init(t)};return a.prototype=Object.create(n.prototype),a.prototype.constructor=a,a.cid=e++,a.options=V(n.options,t),a.super=n,a.options.props&&ke(a),a.options.computed&&Ee(a),a.extend=n.extend,a.mixin=n.mixin,a.use=n.use,Zi.forEach(function(t){a[t]=n[t]}),o&&(a.options.components[o]=a),a.superOptions=n.options,a.extendOptions=t,a.sealedOptions=b({},a.options),i[r]=a,a}}function ke(t){var e=t.options.props;for(var n in e)Ft(t.prototype,"_props",n)}function Ee(t){var e=t.options.computed;for(var n in e)Wt(t.prototype,n,e[n])}function Se(t){Zi.forEach(function(e){t[e]=function(t,n){return n?("component"===e&&u(n)&&(n.name=n.name||t,n=this.options._base.extend(n)),"directive"===e&&"function"==typeof n&&(n={bind:n,update:n}),this.options[e+"s"][t]=n,n):this.options[e+"s"][t]}})}function Oe(t){return t&&(t.Ctor.options.name||t.tag)}function je(t,e){return Array.isArray(t)?t.indexOf(e)>-1:"string"==typeof t?t.split(",").indexOf(e)>-1:!!c(t)&&t.test(e)}function Ne(t,e,n){for(var r in t){var i=t[r];if(i){var o=Oe(i.componentOptions);o&&!n(o)&&(i!==e&&De(i),t[r]=null)}}}function De(t){t&&t.componentInstance.$destroy()}function Ie(t){for(var e=t.data,n=t,i=t;r(i.componentInstance);)i=i.componentInstance._vnode,i.data&&(e=Le(i.data,e));for(;r(n=n.parent);)n.data&&(e=Le(e,n.data));return Re(e.staticClass,e.class)}function Le(t,e){return{staticClass:Pe(t.staticClass,e.staticClass),class:r(t.class)?[t.class,e.class]:e.class}}function Re(t,e){return r(t)||r(e)?Pe(t,Fe(e)):""}function Pe(t,e){return t?e?t+" "+e:t:e||""}function Fe(t){return Array.isArray(t)?Me(t):s(t)?qe(t):"string"==typeof t?t:""}function Me(t){for(var e,n="",i=0,o=t.length;i<o;i++)r(e=Fe(t[i]))&&""!==e&&(n&&(n+=" "),n+=e);return n}function qe(t){var e="";for(var n in t)t[n]&&(e&&(e+=" "),e+=n);return e}function He(t){return Ta(t)?"svg":"math"===t?"math":void 0}function Be(t){if(!oo)return!0;if(Aa(t))return!1;if(t=t.toLowerCase(),null!=ka[t])return ka[t];var e=document.createElement(t);return t.indexOf("-")>-1?ka[t]=e.constructor===window.HTMLUnknownElement||e.constructor===window.HTMLElement:ka[t]=/HTMLUnknownElement/.test(e.toString())}function Ue(t){if("string"==typeof t){var e=document.querySelector(t);return e||document.createElement("div")}return t}function We(t,e){var n=document.createElement(t);return"select"!==t?n:(e.data&&e.data.attrs&&void 0!==e.data.attrs.multiple&&n.setAttribute("multiple","multiple"),n)}function ze(t,e){return document.createElementNS(xa[t],e)}function Ve(t){return document.createTextNode(t)}function Xe(t){return document.createComment(t)}function Ke(t,e,n){t.insertBefore(e,n)}function Je(t,e){t.removeChild(e)}function Qe(t,e){t.appendChild(e)}function Ge(t){return t.parentNode}function Ze(t){return t.nextSibling}function Ye(t){return t.tagName}function tn(t,e){t.textContent=e}function en(t,e,n){t.setAttribute(e,n)}function nn(t,e){var n=t.data.ref;if(n){var r=t.context,i=t.componentInstance||t.elm,o=r.$refs;e?Array.isArray(o[n])?h(o[n],i):o[n]===i&&(o[n]=void 0):t.data.refInFor?Array.isArray(o[n])?o[n].indexOf(i)<0&&o[n].push(i):o[n]=[i]:o[n]=i}}function rn(t,e){return t.key===e.key&&(t.tag===e.tag&&t.isComment===e.isComment&&r(t.data)===r(e.data)&&on(t,e)||i(t.isAsyncPlaceholder)&&t.asyncFactory===e.asyncFactory&&n(e.asyncFactory.error))}function on(t,e){if("input"!==t.tag)return!0;var n,i=r(n=t.data)&&r(n=n.attrs)&&n.type,o=r(n=e.data)&&r(n=n.attrs)&&n.type;return i===o||Ea(i)&&Ea(o)}function an(t,e,n){var i,o,a={};for(i=e;i<=n;++i)o=t[i].key,r(o)&&(a[o]=i);return a}function sn(t,e){(t.data.directives||e.data.directives)&&un(t,e)}function un(t,e){var n,r,i,o=t===ja,a=e===ja,s=cn(t.data.directives,t.context),u=cn(e.data.directives,e.context),c=[],l=[];for(n in u)r=s[n],i=u[n],r?(i.oldValue=r.value,fn(i,"update",e,t),i.def&&i.def.componentUpdated&&l.push(i)):(fn(i,"bind",e,t),i.def&&i.def.inserted&&c.push(i));if(c.length){var f=function(){for(var n=0;n<c.length;n++)fn(c[n],"inserted",e,t)};o?it(e.data.hook||(e.data.hook={}),"insert",f):f()}if(l.length&&it(e.data.hook||(e.data.hook={}),"postpatch",function(){for(var n=0;n<l.length;n++)fn(l[n],"componentUpdated",e,t)}),!o)for(n in s)u[n]||fn(s[n],"unbind",t,t,a)}function cn(t,e){var n=Object.create(null);if(!t)return n;var r,i;for(r=0;r<t.length;r++)i=t[r],i.modifiers||(i.modifiers=Ia),n[ln(i)]=i,i.def=X(e.$options,"directives",i.name,!0);return n}function ln(t){return t.rawName||t.name+"."+Object.keys(t.modifiers||{}).join(".")}function fn(t,e,n,r,i){var o=t.def&&t.def[e];if(o)try{o(n.elm,t,n,r,i)}catch(r){E(r,n.context,"directive "+t.name+" "+e+" hook")}}function pn(t,e){var i=e.componentOptions;if(!(r(i)&&!1===i.Ctor.options.inheritAttrs||n(t.data.attrs)&&n(e.data.attrs))){var o,a,s=e.elm,u=t.data.attrs||{},c=e.data.attrs||{};r(c.__ob__)&&(c=e.data.attrs=b({},c));for(o in c)a=c[o],u[o]!==a&&dn(s,o,a);uo&&c.value!==u.value&&dn(s,"value",c.value);for(o in u)n(c[o])&&(ba(o)?s.removeAttributeNS(ya,_a(o)):ga(o)||s.removeAttribute(o))}}function dn(t,e,n){ma(e)?wa(n)?t.removeAttribute(e):(n="allowfullscreen"===e&&"EMBED"===t.tagName?"true":e,t.setAttribute(e,n)):ga(e)?t.setAttribute(e,wa(n)||"false"===n?"false":"true"):ba(e)?wa(n)?t.removeAttributeNS(ya,_a(e)):t.setAttributeNS(ya,e,n):wa(n)?t.removeAttribute(e):t.setAttribute(e,n)}function hn(t,e){var i=e.elm,o=e.data,a=t.data;if(!(n(o.staticClass)&&n(o.class)&&(n(a)||n(a.staticClass)&&n(a.class)))){var s=Ie(e),u=i._transitionClasses;r(u)&&(s=Pe(s,Fe(u))),s!==i._prevClass&&(i.setAttribute("class",s),i._prevClass=s)}}function vn(t){function e(){(a||(a=[])).push(t.slice(h,i).trim()),h=i+1}var n,r,i,o,a,s=!1,u=!1,c=!1,l=!1,f=0,p=0,d=0,h=0;for(i=0;i<t.length;i++)if(r=n,n=t.charCodeAt(i),s)39===n&&92!==r&&(s=!1);else if(u)34===n&&92!==r&&(u=!1);else if(c)96===n&&92!==r&&(c=!1);else if(l)47===n&&92!==r&&(l=!1);else if(124!==n||124===t.charCodeAt(i+1)||124===t.charCodeAt(i-1)||f||p||d){switch(n){case 34:u=!0;break;case 39:s=!0;break;case 96:c=!0;break;case 40:d++;break;case 41:d--;break;case 91:p++;break;case 93:p--;break;case 123:f++;break;case 125:f--}if(47===n){for(var v=i-1,g=void 0;v>=0&&" "===(g=t.charAt(v));v--);g&&Fa.test(g)||(l=!0)}}else void 0===o?(h=i+1,o=t.slice(0,i).trim()):e();if(void 0===o?o=t.slice(0,i).trim():0!==h&&e(),a)for(i=0;i<a.length;i++)o=gn(o,a[i]);return o}function gn(t,e){var n=e.indexOf("(");return n<0?'_f("'+e+'")('+t+")":'_f("'+e.slice(0,n)+'")('+t+","+e.slice(n+1)}function mn(t){}function yn(t,e){return t?t.map(function(t){return t[e]}).filter(function(t){return t}):[]}function bn(t,e,n){(t.props||(t.props=[])).push({name:e,value:n})}function _n(t,e,n){(t.attrs||(t.attrs=[])).push({name:e,value:n})}function wn(t,e,n,r,i,o){(t.directives||(t.directives=[])).push({name:e,rawName:n,value:r,arg:i,modifiers:o})}function xn(t,e,n,r,i,o){r&&r.capture&&(delete r.capture,e="!"+e),r&&r.once&&(delete r.once,e="~"+e),r&&r.passive&&(delete r.passive,e="&"+e);var a;r&&r.native?(delete r.native,a=t.nativeEvents||(t.nativeEvents={})):a=t.events||(t.events={});var s={value:n,modifiers:r},u=a[e];Array.isArray(u)?i?u.unshift(s):u.push(s):a[e]=u?i?[s,u]:[u,s]:s}function Cn(t,e,n){var r=Tn(t,":"+e)||Tn(t,"v-bind:"+e);if(null!=r)return vn(r);if(!1!==n){var i=Tn(t,e);if(null!=i)return JSON.stringify(i)}}function Tn(t,e){var n;if(null!=(n=t.attrsMap[e]))for(var r=t.attrsList,i=0,o=r.length;i<o;i++)if(r[i].name===e){r.splice(i,1);break}return n}function $n(t,e,n){var r=n||{},i=r.number,o=r.trim,a="$$v";o&&(a="(typeof $$v === 'string'? $$v.trim(): $$v)"),i&&(a="_n("+a+")");var s=An(e,a);t.model={value:"("+e+")",expression:'"'+e+'"',callback:"function ($$v) {"+s+"}"}}function An(t,e){var n=kn(t);return null===n.idx?t+"="+e:"$set("+n.exp+", "+n.idx+", "+e+")"}function kn(t){if(oa=t,ia=oa.length,sa=ua=ca=0,t.indexOf("[")<0||t.lastIndexOf("]")<ia-1)return{exp:t,idx:null};for(;!Sn();)aa=En(),On(aa)?Nn(aa):91===aa&&jn(aa);return{exp:t.substring(0,ua),idx:t.substring(ua+1,ca)}}function En(){return oa.charCodeAt(++sa)}function Sn(){return sa>=ia}function On(t){return 34===t||39===t}function jn(t){var e=1;for(ua=sa;!Sn();)if(t=En(),On(t))Nn(t);else if(91===t&&e++,93===t&&e--,0===e){ca=sa;break}}function Nn(t){for(var e=t;!Sn()&&(t=En())!==e;);}function Dn(t,e,n){la=n;var r=e.value,i=e.modifiers,o=t.tag,a=t.attrsMap.type;if(t.component)return $n(t,r,i),!1;if("select"===o)Rn(t,r,i);else if("input"===o&&"checkbox"===a)In(t,r,i);else if("input"===o&&"radio"===a)Ln(t,r,i);else if("input"===o||"textarea"===o)Pn(t,r,i);else if(!to.isReservedTag(o))return $n(t,r,i),!1;return!0}function In(t,e,n){var r=n&&n.number,i=Cn(t,"value")||"null",o=Cn(t,"true-value")||"true",a=Cn(t,"false-value")||"false";bn(t,"checked","Array.isArray("+e+")?_i("+e+","+i+")>-1"+("true"===o?":("+e+")":":_q("+e+","+o+")")),xn(t,qa,"var $$a="+e+",$$el=$event.target,$$c=$$el.checked?("+o+"):("+a+");if(Array.isArray($$a)){var $$v="+(r?"_n("+i+")":i)+",$$i=_i($$a,$$v);if($$el.checked){$$i<0&&("+e+"=$$a.concat([$$v]))}else{$$i>-1&&("+e+"=$$a.slice(0,$$i).concat($$a.slice($$i+1)))}}else{"+An(e,"$$c")+"}",null,!0)}function Ln(t,e,n){var r=n&&n.number,i=Cn(t,"value")||"null";i=r?"_n("+i+")":i,bn(t,"checked","_q("+e+","+i+")"),xn(t,qa,An(e,i),null,!0)}function Rn(t,e,n){var r=n&&n.number,i='Array.prototype.filter.call($event.target.options,function(o){return o.selected}).map(function(o){var val = "_value" in o ? o._value : o.value;return '+(r?"_n(val)":"val")+"})",o="var $$selectedVal = "+i+";";o=o+" "+An(e,"$event.target.multiple ? $$selectedVal : $$selectedVal[0]"),xn(t,"change",o,null,!0)}function Pn(t,e,n){var r=t.attrsMap.type,i=n||{},o=i.lazy,a=i.number,s=i.trim,u=!o&&"range"!==r,c=o?"change":"range"===r?Ma:"input",l="$event.target.value";s&&(l="$event.target.value.trim()"),a&&(l="_n("+l+")");var f=An(e,l);u&&(f="if($event.target.composing)return;"+f),bn(t,"value","("+e+")"),xn(t,c,f,null,!0),(s||a)&&xn(t,"blur","$forceUpdate()")}function Fn(t){var e;r(t[Ma])&&(e=so?"change":"input",t[e]=[].concat(t[Ma],t[e]||[]),delete t[Ma]),r(t[qa])&&(e=po?"click":"change",t[e]=[].concat(t[qa],t[e]||[]),delete t[qa])}function Mn(t,e,n,r,i){if(n){var o=e,a=fa;e=function(n){null!==(1===arguments.length?o(n):o.apply(null,arguments))&&qn(t,e,r,a)}}fa.addEventListener(t,e,vo?{capture:r,passive:i}:r)}function qn(t,e,n,r){(r||fa).removeEventListener(t,e,n)}function Hn(t,e){if(!n(t.data.on)||!n(e.data.on)){var r=e.data.on||{},i=t.data.on||{};fa=e.elm,Fn(r),rt(r,i,Mn,qn,e.context)}}function Bn(t,e){if(!n(t.data.domProps)||!n(e.data.domProps)){var i,o,a=e.elm,s=t.data.domProps||{},u=e.data.domProps||{};r(u.__ob__)&&(u=e.data.domProps=b({},u));for(i in s)n(u[i])&&(a[i]="");for(i in u)if(o=u[i],"textContent"!==i&&"innerHTML"!==i||(e.children&&(e.children.length=0),o!==s[i]))if("value"===i){a._value=o;var c=n(o)?"":String(o);Un(a,e,c)&&(a.value=c)}else a[i]=o}}function Un(t,e,n){return!t.composing&&("option"===e.tag||Wn(t,n)||zn(t,n))}function Wn(t,e){var n=!0;try{n=document.activeElement!==t}catch(t){}return n&&t.value!==e}function zn(t,e){var n=t.value,i=t._vModifiers;return r(i)&&i.number?p(n)!==p(e):r(i)&&i.trim?n.trim()!==e.trim():n!==e}function Vn(t){var e=Xn(t.style);return t.staticStyle?b(t.staticStyle,e):e}function Xn(t){return Array.isArray(t)?_(t):"string"==typeof t?Ua(t):t}function Kn(t,e){var n,r={};if(e)for(var i=t;i.componentInstance;)i=i.componentInstance._vnode,i.data&&(n=Vn(i.data))&&b(r,n);(n=Vn(t.data))&&b(r,n);for(var o=t;o=o.parent;)o.data&&(n=Vn(o.data))&&b(r,n);return r}function Jn(t,e){var i=e.data,o=t.data;if(!(n(i.staticStyle)&&n(i.style)&&n(o.staticStyle)&&n(o.style))){var a,s,u=e.elm,c=o.staticStyle,l=o.normalizedStyle||o.style||{},f=c||l,p=Xn(e.data.style)||{};e.data.normalizedStyle=r(p.__ob__)?b({},p):p;var d=Kn(e,!0);for(s in f)n(d[s])&&Va(u,s,"");for(s in d)(a=d[s])!==f[s]&&Va(u,s,null==a?"":a)}}function Qn(t,e){if(e&&(e=e.trim()))if(t.classList)e.indexOf(" ")>-1?e.split(/\s+/).forEach(function(e){return t.classList.add(e)}):t.classList.add(e);else{var n=" "+(t.getAttribute("class")||"")+" ";n.indexOf(" "+e+" ")<0&&t.setAttribute("class",(n+e).trim())}}function Gn(t,e){if(e&&(e=e.trim()))if(t.classList)e.indexOf(" ")>-1?e.split(/\s+/).forEach(function(e){return t.classList.remove(e)}):t.classList.remove(e),t.classList.length||t.removeAttribute("class");else{for(var n=" "+(t.getAttribute("class")||"")+" ",r=" "+e+" ";n.indexOf(r)>=0;)n=n.replace(r," ");n=n.trim(),n?t.setAttribute("class",n):t.removeAttribute("class")}}function Zn(t){if(t){if("object"==typeof t){var e={};return!1!==t.css&&b(e,Qa(t.name||"v")),b(e,t),e}return"string"==typeof t?Qa(t):void 0}}function Yn(t){is(function(){is(t)})}function tr(t,e){var n=t._transitionClasses||(t._transitionClasses=[]);n.indexOf(e)<0&&(n.push(e),Qn(t,e))}function er(t,e){t._transitionClasses&&h(t._transitionClasses,e),Gn(t,e)}function nr(t,e,n){var r=rr(t,e),i=r.type,o=r.timeout,a=r.propCount;if(!i)return n();var s=i===Za?es:rs,u=0,c=function(){t.removeEventListener(s,l),n()},l=function(e){e.target===t&&++u>=a&&c()};setTimeout(function(){u<a&&c()},o+1),t.addEventListener(s,l)}function rr(t,e){var n,r=window.getComputedStyle(t),i=r[ts+"Delay"].split(", "),o=r[ts+"Duration"].split(", "),a=ir(i,o),s=r[ns+"Delay"].split(", "),u=r[ns+"Duration"].split(", "),c=ir(s,u),l=0,f=0;return e===Za?a>0&&(n=Za,l=a,f=o.length):e===Ya?c>0&&(n=Ya,l=c,f=u.length):(l=Math.max(a,c),n=l>0?a>c?Za:Ya:null,f=n?n===Za?o.length:u.length:0),{type:n,timeout:l,propCount:f,hasTransform:n===Za&&os.test(r[ts+"Property"])}}function ir(t,e){for(;t.length<e.length;)t=t.concat(t);return Math.max.apply(null,e.map(function(e,n){return or(e)+or(t[n])}))}function or(t){return 1e3*Number(t.slice(0,-1))}function ar(t,e){var i=t.elm;r(i._leaveCb)&&(i._leaveCb.cancelled=!0,i._leaveCb());var o=Zn(t.data.transition);if(!n(o)&&!r(i._enterCb)&&1===i.nodeType){for(var a=o.css,u=o.type,c=o.enterClass,l=o.enterToClass,f=o.enterActiveClass,d=o.appearClass,h=o.appearToClass,v=o.appearActiveClass,g=o.beforeEnter,m=o.enter,y=o.afterEnter,b=o.enterCancelled,_=o.beforeAppear,w=o.appear,x=o.afterAppear,C=o.appearCancelled,$=o.duration,A=Fo,k=Fo.$vnode;k&&k.parent;)k=k.parent,A=k.context;var E=!A._isMounted||!t.isRootInsert;if(!E||w||""===w){var S=E&&d?d:c,O=E&&v?v:f,j=E&&h?h:l,N=E?_||g:g,D=E&&"function"==typeof w?w:m,I=E?x||y:y,L=E?C||b:b,R=p(s($)?$.enter:$),P=!1!==a&&!uo,F=cr(D),M=i._enterCb=T(function(){P&&(er(i,j),er(i,O)),M.cancelled?(P&&er(i,S),L&&L(i)):I&&I(i),i._enterCb=null});t.data.show||it(t.data.hook||(t.data.hook={}),"insert",function(){var e=i.parentNode,n=e&&e._pending&&e._pending[t.key];n&&n.tag===t.tag&&n.elm._leaveCb&&n.elm._leaveCb(),D&&D(i,M)}),N&&N(i),P&&(tr(i,S),tr(i,O),Yn(function(){tr(i,j),er(i,S),M.cancelled||F||(ur(R)?setTimeout(M,R):nr(i,u,M))})),t.data.show&&(e&&e(),D&&D(i,M)),P||F||M()}}}function sr(t,e){function i(){C.cancelled||(t.data.show||((o.parentNode._pending||(o.parentNode._pending={}))[t.key]=t),h&&h(o),_&&(tr(o,l),tr(o,d),Yn(function(){tr(o,f),er(o,l),C.cancelled||w||(ur(x)?setTimeout(C,x):nr(o,c,C))})),v&&v(o,C),_||w||C())}var o=t.elm;r(o._enterCb)&&(o._enterCb.cancelled=!0,o._enterCb());var a=Zn(t.data.transition);if(n(a))return e();if(!r(o._leaveCb)&&1===o.nodeType){var u=a.css,c=a.type,l=a.leaveClass,f=a.leaveToClass,d=a.leaveActiveClass,h=a.beforeLeave,v=a.leave,g=a.afterLeave,m=a.leaveCancelled,y=a.delayLeave,b=a.duration,_=!1!==u&&!uo,w=cr(v),x=p(s(b)?b.leave:b),C=o._leaveCb=T(function(){o.parentNode&&o.parentNode._pending&&(o.parentNode._pending[t.key]=null),_&&(er(o,f),er(o,d)),C.cancelled?(_&&er(o,l),m&&m(o)):(e(),g&&g(o)),o._leaveCb=null});y?y(i):i()}}function ur(t){return"number"==typeof t&&!isNaN(t)}function cr(t){if(n(t))return!1;var e=t.fns;return r(e)?cr(Array.isArray(e)?e[0]:e):(t._length||t.length)>1}function lr(t,e){!0!==e.data.show&&ar(e)}function fr(t,e,n){pr(t,e,n),(so||co)&&setTimeout(function(){pr(t,e,n)},0)}function pr(t,e,n){var r=e.value,i=t.multiple;if(!i||Array.isArray(r)){for(var o,a,s=0,u=t.options.length;s<u;s++)if(a=t.options[s],i)o=C(r,hr(a))>-1,a.selected!==o&&(a.selected=o);else if(x(hr(a),r))return void(t.selectedIndex!==s&&(t.selectedIndex=s));i||(t.selectedIndex=-1)}}function dr(t,e){return e.every(function(e){return!x(e,t)})}function hr(t){return"_value"in t?t._value:t.value}function vr(t){t.target.composing=!0}function gr(t){t.target.composing&&(t.target.composing=!1,mr(t.target,"input"))}function mr(t,e){var n=document.createEvent("HTMLEvents");n.initEvent(e,!0,!0),t.dispatchEvent(n)}function yr(t){return!t.componentInstance||t.data&&t.data.transition?t:yr(t.componentInstance._vnode)}function br(t){var e=t&&t.componentOptions;return e&&e.Ctor.options.abstract?br(vt(e.children)):t}function _r(t){var e={},n=t.$options;for(var r in n.propsData)e[r]=t[r];var i=n._parentListeners;for(var o in i)e[zi(o)]=i[o];return e}function wr(t,e){if(/\d-keep-alive$/.test(e.tag))return t("keep-alive",{props:e.componentOptions.propsData})}function xr(t){for(;t=t.parent;)if(t.data.transition)return!0}function Cr(t,e){return e.key===t.key&&e.tag===t.tag}function Tr(t){t.elm._moveCb&&t.elm._moveCb(),t.elm._enterCb&&t.elm._enterCb()}function $r(t){t.data.newPos=t.elm.getBoundingClientRect()}function Ar(t){var e=t.data.pos,n=t.data.newPos,r=e.left-n.left,i=e.top-n.top;if(r||i){t.data.moved=!0;var o=t.elm.style;o.transform=o.WebkitTransform="translate("+r+"px,"+i+"px)",o.transitionDuration="0s"}}function kr(t,e){var n=e?xs(e):_s;if(n.test(t)){for(var r,i,o=[],a=n.lastIndex=0;r=n.exec(t);){i=r.index,i>a&&o.push(JSON.stringify(t.slice(a,i)));var s=vn(r[1].trim());o.push("_s("+s+")"),a=i+r[0].length}return a<t.length&&o.push(JSON.stringify(t.slice(a))),o.join("+")}}function Er(t,e){var n=(e.warn,Tn(t,"class"));n&&(t.staticClass=JSON.stringify(n));var r=Cn(t,"class",!1);r&&(t.classBinding=r)}function Sr(t){var e="";return t.staticClass&&(e+="staticClass:"+t.staticClass+","),t.classBinding&&(e+="class:"+t.classBinding+","),e}function Or(t,e){var n=(e.warn,Tn(t,"style"));if(n){t.staticStyle=JSON.stringify(Ua(n))}var r=Cn(t,"style",!1);r&&(t.styleBinding=r)}function jr(t){var e="";return t.staticStyle&&(e+="staticStyle:"+t.staticStyle+","),t.styleBinding&&(e+="style:("+t.styleBinding+"),"),e}function Nr(t,e){e.value&&bn(t,"textContent","_s("+e.value+")")}function Dr(t,e){e.value&&bn(t,"innerHTML","_s("+e.value+")")}function Ir(t,e){var n=e?nu:eu;return t.replace(n,function(t){return tu[t]})}function Lr(t,e){function n(e){l+=e,t=t.substring(e)}function r(t,n,r){var i,s;if(null==n&&(n=l),null==r&&(r=l),t&&(s=t.toLowerCase()),t)for(i=a.length-1;i>=0&&a[i].lowerCasedTag!==s;i--);else i=0;if(i>=0){for(var u=a.length-1;u>=i;u--)e.end&&e.end(a[u].tag,n,r);a.length=i,o=i&&a[i-1].tag}else"br"===s?e.start&&e.start(t,[],!0,n,r):"p"===s&&(e.start&&e.start(t,[],!1,n,r),e.end&&e.end(t,n,r))}for(var i,o,a=[],s=e.expectHTML,u=e.isUnaryTag||Ji,c=e.canBeLeftOpenTag||Ji,l=0;t;){if(i=t,o&&Zs(o)){var f=0,p=o.toLowerCase(),d=Ys[p]||(Ys[p]=new RegExp("([\\s\\S]*?)(</"+p+"[^>]*>)","i")),h=t.replace(d,function(t,n,r){return f=r.length,Zs(p)||"noscript"===p||(n=n.replace(/<!--([\s\S]*?)-->/g,"$1").replace(/<!\[CDATA\[([\s\S]*?)]]>/g,"$1")),iu(p,n)&&(n=n.slice(1)),e.chars&&e.chars(n),""});l+=t.length-h.length,t=h,r(p,l-f,l)}else{var v=t.indexOf("<");if(0===v){if(Ms.test(t)){var g=t.indexOf("--\x3e");if(g>=0){e.shouldKeepComment&&e.comment(t.substring(4,g)),n(g+3);continue}}if(qs.test(t)){var m=t.indexOf("]>");if(m>=0){n(m+2);continue}}var y=t.match(Fs);if(y){n(y[0].length);continue}var b=t.match(Ps);if(b){var _=l;n(b[0].length),r(b[1],_,l);continue}var w=function(){var e=t.match(Ls);if(e){var r={tagName:e[1],attrs:[],start:l};n(e[0].length);for(var i,o;!(i=t.match(Rs))&&(o=t.match(Ns));)n(o[0].length),r.attrs.push(o);if(i)return r.unarySlash=i[1],n(i[0].length),r.end=l,r}}();if(w){!function(t){var n=t.tagName,i=t.unarySlash;s&&("p"===o&&Ss(n)&&r(o),c(n)&&o===n&&r(n));for(var l=u(n)||!!i,f=t.attrs.length,p=new Array(f),d=0;d<f;d++){var h=t.attrs[d];Hs&&-1===h[0].indexOf('""')&&(""===h[3]&&delete h[3],""===h[4]&&delete h[4],""===h[5]&&delete h[5]);var v=h[3]||h[4]||h[5]||"";p[d]={name:h[1],value:Ir(v,e.shouldDecodeNewlines)}}l||(a.push({tag:n,lowerCasedTag:n.toLowerCase(),attrs:p}),o=n),e.start&&e.start(n,p,l,t.start,t.end)}(w),iu(o,t)&&n(1);continue}}var x=void 0,C=void 0,T=void 0;if(v>=0){for(C=t.slice(v);!(Ps.test(C)||Ls.test(C)||Ms.test(C)||qs.test(C)||(T=C.indexOf("<",1))<0);)v+=T,C=t.slice(v);x=t.substring(0,v),n(v)}v<0&&(x=t,t=""),e.chars&&x&&e.chars(x)}if(t===i){e.chars&&e.chars(t);break}}r()}function Rr(t,e){function n(t){t.pre&&(s=!1),Xs(t.tag)&&(u=!1)}Bs=e.warn||mn,Xs=e.isPreTag||Ji,Ks=e.mustUseProp||Ji,Js=e.getTagNamespace||Ji,Ws=yn(e.modules,"transformNode"),zs=yn(e.modules,"preTransformNode"),Vs=yn(e.modules,"postTransformNode"),Us=e.delimiters;var r,i,o=[],a=!1!==e.preserveWhitespace,s=!1,u=!1;return Lr(t,{warn:Bs,expectHTML:e.expectHTML,isUnaryTag:e.isUnaryTag,canBeLeftOpenTag:e.canBeLeftOpenTag,shouldDecodeNewlines:e.shouldDecodeNewlines,shouldKeepComment:e.comments,start:function(t,a,c){var l=i&&i.ns||Js(t);so&&"svg"===l&&(a=ei(a));var f={type:1,tag:t,attrsList:a,attrsMap:Zr(a),parent:i,children:[]};l&&(f.ns=l),ti(f)&&!bo()&&(f.forbidden=!0);for(var p=0;p<zs.length;p++)zs[p](f,e);if(s||(Pr(f),f.pre&&(s=!0)),Xs(f.tag)&&(u=!0),s)Fr(f);else{Hr(f),Br(f),Vr(f),Mr(f),f.plain=!f.key&&!a.length,qr(f),Xr(f),Kr(f);for(var d=0;d<Ws.length;d++)Ws[d](f,e);Jr(f)}if(r?o.length||r.if&&(f.elseif||f.else)&&zr(r,{exp:f.elseif,block:f}):r=f,i&&!f.forbidden)if(f.elseif||f.else)Ur(f,i);else if(f.slotScope){i.plain=!1;var h=f.slotTarget||'"default"';(i.scopedSlots||(i.scopedSlots={}))[h]=f}else i.children.push(f),f.parent=i;c?n(f):(i=f,o.push(f));for(var v=0;v<Vs.length;v++)Vs[v](f,e)},end:function(){var t=o[o.length-1],e=t.children[t.children.length-1];e&&3===e.type&&" "===e.text&&!u&&t.children.pop(),o.length-=1,i=o[o.length-1],n(t)},chars:function(t){if(i&&(!so||"textarea"!==i.tag||i.attrsMap.placeholder!==t)){var e=i.children;if(t=u||t.trim()?Yr(i)?t:pu(t):a&&e.length?" ":""){var n;!s&&" "!==t&&(n=kr(t,Us))?e.push({type:2,expression:n,text:t}):" "===t&&e.length&&" "===e[e.length-1].text||e.push({type:3,text:t})}}},comment:function(t){i.children.push({type:3,text:t,isComment:!0})}}),r}function Pr(t){null!=Tn(t,"v-pre")&&(t.pre=!0)}function Fr(t){var e=t.attrsList.length;if(e)for(var n=t.attrs=new Array(e),r=0;r<e;r++)n[r]={name:t.attrsList[r].name,value:JSON.stringify(t.attrsList[r].value)};else t.pre||(t.plain=!0)}function Mr(t){var e=Cn(t,"key");e&&(t.key=e)}function qr(t){var e=Cn(t,"ref");e&&(t.ref=e,t.refInFor=Qr(t))}function Hr(t){var e;if(e=Tn(t,"v-for")){var n=e.match(su);if(!n)return;t.for=n[2].trim();var r=n[1].trim(),i=r.match(uu);i?(t.alias=i[1].trim(),t.iterator1=i[2].trim(),i[3]&&(t.iterator2=i[3].trim())):t.alias=r}}function Br(t){var e=Tn(t,"v-if");if(e)t.if=e,zr(t,{exp:e,block:t});else{null!=Tn(t,"v-else")&&(t.else=!0);var n=Tn(t,"v-else-if");n&&(t.elseif=n)}}function Ur(t,e){var n=Wr(e.children);n&&n.if&&zr(n,{exp:t.elseif,block:t})}function Wr(t){for(var e=t.length;e--;){if(1===t[e].type)return t[e];t.pop()}}function zr(t,e){t.ifConditions||(t.ifConditions=[]),t.ifConditions.push(e)}function Vr(t){null!=Tn(t,"v-once")&&(t.once=!0)}function Xr(t){if("slot"===t.tag)t.slotName=Cn(t,"name");else{var e=Cn(t,"slot");e&&(t.slotTarget='""'===e?'"default"':e,_n(t,"slot",e)),"template"===t.tag&&(t.slotScope=Tn(t,"scope"))}}function Kr(t){var e;(e=Cn(t,"is"))&&(t.component=e),null!=Tn(t,"inline-template")&&(t.inlineTemplate=!0)}function Jr(t){var e,n,r,i,o,a,s,u=t.attrsList;for(e=0,n=u.length;e<n;e++)if(r=i=u[e].name,o=u[e].value,au.test(r))if(t.hasBindings=!0,a=Gr(r),a&&(r=r.replace(fu,"")),lu.test(r))r=r.replace(lu,""),o=vn(o),s=!1,a&&(a.prop&&(s=!0,"innerHtml"===(r=zi(r))&&(r="innerHTML")),a.camel&&(r=zi(r)),a.sync&&xn(t,"update:"+zi(r),An(o,"$event"))),s||!t.component&&Ks(t.tag,t.attrsMap.type,r)?bn(t,r,o):_n(t,r,o);else if(ou.test(r))r=r.replace(ou,""),xn(t,r,o,a,!1,Bs);else{r=r.replace(au,"");var c=r.match(cu),l=c&&c[1];l&&(r=r.slice(0,-(l.length+1))),wn(t,r,i,o,l,a)}else{_n(t,r,JSON.stringify(o))}}function Qr(t){for(var e=t;e;){if(void 0!==e.for)return!0;e=e.parent}return!1}function Gr(t){var e=t.match(fu);if(e){var n={};return e.forEach(function(t){n[t.slice(1)]=!0}),n}}function Zr(t){for(var e={},n=0,r=t.length;n<r;n++)e[t[n].name]=t[n].value;return e}function Yr(t){return"script"===t.tag||"style"===t.tag}function ti(t){return"style"===t.tag||"script"===t.tag&&(!t.attrsMap.type||"text/javascript"===t.attrsMap.type)}function ei(t){for(var e=[],n=0;n<t.length;n++){var r=t[n];du.test(r.name)||(r.name=r.name.replace(hu,""),e.push(r))}return e}function ni(t,e){t&&(Qs=vu(e.staticKeys||""),Gs=e.isReservedTag||Ji,ii(t),oi(t,!1))}function ri(t){return d("type,tag,attrsList,attrsMap,plain,parent,children,attrs"+(t?","+t:""))}function ii(t){if(t.static=ai(t),1===t.type){if(!Gs(t.tag)&&"slot"!==t.tag&&null==t.attrsMap["inline-template"])return;for(var e=0,n=t.children.length;e<n;e++){var r=t.children[e];ii(r),r.static||(t.static=!1)}if(t.ifConditions)for(var i=1,o=t.ifConditions.length;i<o;i++){var a=t.ifConditions[i].block;ii(a),a.static||(t.static=!1)}}}function oi(t,e){if(1===t.type){if((t.static||t.once)&&(t.staticInFor=e),t.static&&t.children.length&&(1!==t.children.length||3!==t.children[0].type))return void(t.staticRoot=!0);if(t.staticRoot=!1,t.children)for(var n=0,r=t.children.length;n<r;n++)oi(t.children[n],e||!!t.for);if(t.ifConditions)for(var i=1,o=t.ifConditions.length;i<o;i++)oi(t.ifConditions[i].block,e)}}function ai(t){return 2!==t.type&&(3===t.type||!(!t.pre&&(t.hasBindings||t.if||t.for||Hi(t.tag)||!Gs(t.tag)||si(t)||!Object.keys(t).every(Qs))))}function si(t){for(;t.parent;){if(t=t.parent,"template"!==t.tag)return!1;if(t.for)return!0}return!1}function ui(t,e,n){var r=e?"nativeOn:{":"on:{";for(var i in t){r+='"'+i+'":'+ci(i,t[i])+","}return r.slice(0,-1)+"}"}function ci(t,e){if(!e)return"function(){}";if(Array.isArray(e))return"["+e.map(function(e){return ci(t,e)}).join(",")+"]";var n=mu.test(e.value),r=gu.test(e.value);if(e.modifiers){var i="",o="",a=[];for(var s in e.modifiers)_u[s]?(o+=_u[s],yu[s]&&a.push(s)):a.push(s);a.length&&(i+=li(a)),o&&(i+=o);return"function($event){"+i+(n?e.value+"($event)":r?"("+e.value+")($event)":e.value)+"}"}return n||r?e.value:"function($event){"+e.value+"}"}function li(t){return"if(!('button' in $event)&&"+t.map(fi).join("&&")+")return null;"}function fi(t){var e=parseInt(t,10);if(e)return"$event.keyCode!=="+e;var n=yu[t];return"_k($event.keyCode,"+JSON.stringify(t)+(n?","+JSON.stringify(n):"")+")"}function pi(t,e){t.wrapListeners=function(t){return"_g("+t+","+e.value+")"}}function di(t,e){t.wrapData=function(n){return"_b("+n+",'"+t.tag+"',"+e.value+","+(e.modifiers&&e.modifiers.prop?"true":"false")+(e.modifiers&&e.modifiers.sync?",true":"")+")"}}function hi(t,e){var n=new xu(e);return{render:"with(this){return "+(t?vi(t,n):'_c("div")')+"}",staticRenderFns:n.staticRenderFns}}function vi(t,e){if(t.staticRoot&&!t.staticProcessed)return gi(t,e);if(t.once&&!t.onceProcessed)return mi(t,e);if(t.for&&!t.forProcessed)return _i(t,e);if(t.if&&!t.ifProcessed)return yi(t,e);if("template"!==t.tag||t.slotTarget){if("slot"===t.tag)return Di(t,e);var n;if(t.component)n=Ii(t.component,t,e);else{var r=t.plain?void 0:wi(t,e),i=t.inlineTemplate?null:ki(t,e,!0);n="_c('"+t.tag+"'"+(r?","+r:"")+(i?","+i:"")+")"}for(var o=0;o<e.transforms.length;o++)n=e.transforms[o](t,n);return n}return ki(t,e)||"void 0"}function gi(t,e){return t.staticProcessed=!0,e.staticRenderFns.push("with(this){return "+vi(t,e)+"}"),"_m("+(e.staticRenderFns.length-1)+(t.staticInFor?",true":"")+")"}function mi(t,e){if(t.onceProcessed=!0,t.if&&!t.ifProcessed)return yi(t,e);if(t.staticInFor){for(var n="",r=t.parent;r;){if(r.for){n=r.key;break}r=r.parent}return n?"_o("+vi(t,e)+","+e.onceId+++","+n+")":vi(t,e)}return gi(t,e)}function yi(t,e,n,r){return t.ifProcessed=!0,bi(t.ifConditions.slice(),e,n,r)}function bi(t,e,n,r){function i(t){return n?n(t,e):t.once?mi(t,e):vi(t,e)}if(!t.length)return r||"_e()";var o=t.shift();return o.exp?"("+o.exp+")?"+i(o.block)+":"+bi(t,e,n,r):""+i(o.block)}function _i(t,e,n,r){var i=t.for,o=t.alias,a=t.iterator1?","+t.iterator1:"",s=t.iterator2?","+t.iterator2:"";return t.forProcessed=!0,(r||"_l")+"(("+i+"),function("+o+a+s+"){return "+(n||vi)(t,e)+"})"}function wi(t,e){var n="{",r=xi(t,e);r&&(n+=r+","),t.key&&(n+="key:"+t.key+","),t.ref&&(n+="ref:"+t.ref+","),t.refInFor&&(n+="refInFor:true,"),t.pre&&(n+="pre:true,"),t.component&&(n+='tag:"'+t.tag+'",');for(var i=0;i<e.dataGenFns.length;i++)n+=e.dataGenFns[i](t);if(t.attrs&&(n+="attrs:{"+Li(t.attrs)+"},"),t.props&&(n+="domProps:{"+Li(t.props)+"},"),t.events&&(n+=ui(t.events,!1,e.warn)+","),t.nativeEvents&&(n+=ui(t.nativeEvents,!0,e.warn)+","),t.slotTarget&&(n+="slot:"+t.slotTarget+","),t.scopedSlots&&(n+=Ti(t.scopedSlots,e)+","),t.model&&(n+="model:{value:"+t.model.value+",callback:"+t.model.callback+",expression:"+t.model.expression+"},"),t.inlineTemplate){var o=Ci(t,e);o&&(n+=o+",")}return n=n.replace(/,$/,"")+"}",t.wrapData&&(n=t.wrapData(n)),t.wrapListeners&&(n=t.wrapListeners(n)),n}function xi(t,e){var n=t.directives;if(n){var r,i,o,a,s="directives:[",u=!1;for(r=0,i=n.length;r<i;r++){o=n[r],a=!0;var c=e.directives[o.name];c&&(a=!!c(t,o,e.warn)),a&&(u=!0,s+='{name:"'+o.name+'",rawName:"'+o.rawName+'"'+(o.value?",value:("+o.value+"),expression:"+JSON.stringify(o.value):"")+(o.arg?',arg:"'+o.arg+'"':"")+(o.modifiers?",modifiers:"+JSON.stringify(o.modifiers):"")+"},")}return u?s.slice(0,-1)+"]":void 0}}function Ci(t,e){var n=t.children[0];if(1===n.type){var r=hi(n,e.options);return"inlineTemplate:{render:function(){"+r.render+"},staticRenderFns:["+r.staticRenderFns.map(function(t){return"function(){"+t+"}"}).join(",")+"]}"}}function Ti(t,e){return"scopedSlots:_u(["+Object.keys(t).map(function(n){return $i(n,t[n],e)}).join(",")+"])"}function $i(t,e,n){return e.for&&!e.forProcessed?Ai(t,e,n):"{key:"+t+",fn:function("+String(e.attrsMap.scope)+"){return "+("template"===e.tag?ki(e,n)||"void 0":vi(e,n))+"}}"}function Ai(t,e,n){var r=e.for,i=e.alias,o=e.iterator1?","+e.iterator1:"",a=e.iterator2?","+e.iterator2:"";return e.forProcessed=!0,"_l(("+r+"),function("+i+o+a+"){return "+$i(t,e,n)+"})"}function ki(t,e,n,r,i){var o=t.children;if(o.length){var a=o[0];if(1===o.length&&a.for&&"template"!==a.tag&&"slot"!==a.tag)return(r||vi)(a,e);var s=n?Ei(o,e.maybeComponent):0,u=i||Oi;return"["+o.map(function(t){return u(t,e)}).join(",")+"]"+(s?","+s:"")}}function Ei(t,e){for(var n=0,r=0;r<t.length;r++){var i=t[r];if(1===i.type){if(Si(i)||i.ifConditions&&i.ifConditions.some(function(t){return Si(t.block)})){n=2;break}(e(i)||i.ifConditions&&i.ifConditions.some(function(t){return e(t.block)}))&&(n=1)}}return n}function Si(t){return void 0!==t.for||"template"===t.tag||"slot"===t.tag}function Oi(t,e){return 1===t.type?vi(t,e):3===t.type&&t.isComment?Ni(t):ji(t)}function ji(t){return"_v("+(2===t.type?t.expression:Ri(JSON.stringify(t.text)))+")"}function Ni(t){return"_e("+JSON.stringify(t.text)+")"}function Di(t,e){var n=t.slotName||'"default"',r=ki(t,e),i="_t("+n+(r?","+r:""),o=t.attrs&&"{"+t.attrs.map(function(t){return zi(t.name)+":"+t.value}).join(",")+"}",a=t.attrsMap["v-bind"];return!o&&!a||r||(i+=",null"),o&&(i+=","+o),a&&(i+=(o?"":",null")+","+a),i+")"}function Ii(t,e,n){var r=e.inlineTemplate?null:ki(e,n,!0);return"_c("+t+","+wi(e,n)+(r?","+r:"")+")"}function Li(t){for(var e="",n=0;n<t.length;n++){var r=t[n];e+='"'+r.name+'":'+Ri(r.value)+","}return e.slice(0,-1)}function Ri(t){return t.replace(/\u2028/g,"\\u2028").replace(/\u2029/g,"\\u2029")}function Pi(t,e){try{return new Function(t)}catch(n){return e.push({err:n,code:t}),w}}function Fi(t){var e=Object.create(null);return function(n,r,i){r=r||{};var o=r.delimiters?String(r.delimiters)+n:n;if(e[o])return e[o];var a=t(n,r),s={},u=[];return s.render=Pi(a.render,u),s.staticRenderFns=a.staticRenderFns.map(function(t){return Pi(t,u)}),e[o]=s}}function Mi(t){if(t.outerHTML)return t.outerHTML;var e=document.createElement("div");return e.appendChild(t.cloneNode(!0)),e.innerHTML}var qi=Object.prototype.toString,Hi=d("slot,component",!0),Bi=d("key,ref,slot,is"),Ui=Object.prototype.hasOwnProperty,Wi=/-(\w)/g,zi=g(function(t){return t.replace(Wi,function(t,e){return e?e.toUpperCase():""})}),Vi=g(function(t){return t.charAt(0).toUpperCase()+t.slice(1)}),Xi=/\B([A-Z])/g,Ki=g(function(t){return t.replace(Xi,"-$1").toLowerCase()}),Ji=function(t,e,n){return!1},Qi=function(t){return t},Gi="data-server-rendered",Zi=["component","directive","filter"],Yi=["beforeCreate","created","beforeMount","mounted","beforeUpdate","updated","beforeDestroy","destroyed","activated","deactivated"],to={optionMergeStrategies:Object.create(null),silent:!1,productionTip:!1,devtools:!1,performance:!1,errorHandler:null,warnHandler:null,ignoredElements:[],keyCodes:Object.create(null),isReservedTag:Ji,isReservedAttr:Ji,isUnknownElement:Ji,getTagNamespace:w,parsePlatformTagName:Qi,mustUseProp:Ji,_lifecycleHooks:Yi},eo=Object.freeze({}),no=/[^\w.$]/,ro=w,io="__proto__"in{},oo="undefined"!=typeof window,ao=oo&&window.navigator.userAgent.toLowerCase(),so=ao&&/msie|trident/.test(ao),uo=ao&&ao.indexOf("msie 9.0")>0,co=ao&&ao.indexOf("edge/")>0,lo=ao&&ao.indexOf("android")>0,fo=ao&&/iphone|ipad|ipod|ios/.test(ao),po=ao&&/chrome\/\d+/.test(ao)&&!co,ho={}.watch,vo=!1;if(oo)try{var go={};Object.defineProperty(go,"passive",{get:function(){vo=!0}}),window.addEventListener("test-passive",null,go)}catch(t){}var mo,yo,bo=function(){return void 0===mo&&(mo=!oo&&void 0!==e&&"server"===e.process.env.VUE_ENV),mo},_o=oo&&window.__VUE_DEVTOOLS_GLOBAL_HOOK__,wo="undefined"!=typeof Symbol&&S(Symbol)&&"undefined"!=typeof Reflect&&S(Reflect.ownKeys),xo=function(){function t(){r=!1;var t=n.slice(0);n.length=0;for(var e=0;e<t.length;e++)t[e]()}var e,n=[],r=!1;if("undefined"!=typeof Promise&&S(Promise)){var i=Promise.resolve(),o=function(t){};e=function(){i.then(t).catch(o),fo&&setTimeout(w)}}else if(so||"undefined"==typeof MutationObserver||!S(MutationObserver)&&"[object MutationObserverConstructor]"!==MutationObserver.toString())e=function(){setTimeout(t,0)};else{var a=1,s=new MutationObserver(t),u=document.createTextNode(String(a));s.observe(u,{characterData:!0}),e=function(){a=(a+1)%2,u.data=String(a)}}return function(t,i){var o;if(n.push(function(){if(t)try{t.call(i)}catch(t){E(t,i,"nextTick")}else o&&o(i)}),r||(r=!0,e()),!t&&"undefined"!=typeof Promise)return new Promise(function(t,e){o=t})}}();yo="undefined"!=typeof Set&&S(Set)?Set:function(){function t(){this.set=Object.create(null)}return t.prototype.has=function(t){return!0===this.set[t]},t.prototype.add=function(t){this.set[t]=!0},t.prototype.clear=function(){this.set=Object.create(null)},t}();var Co=0,To=function(){this.id=Co++,this.subs=[]};To.prototype.addSub=function(t){this.subs.push(t)},To.prototype.removeSub=function(t){h(this.subs,t)},To.prototype.depend=function(){To.target&&To.target.addDep(this)},To.prototype.notify=function(){for(var t=this.subs.slice(),e=0,n=t.length;e<n;e++)t[e].update()},To.target=null;var $o=[],Ao=Array.prototype,ko=Object.create(Ao);["push","pop","shift","unshift","splice","sort","reverse"].forEach(function(t){var e=Ao[t];A(ko,t,function(){for(var n=[],r=arguments.length;r--;)n[r]=arguments[r];var i,o=e.apply(this,n),a=this.__ob__;switch(t){case"push":case"unshift":i=n;break;case"splice":i=n.slice(2)}return i&&a.observeArray(i),a.dep.notify(),o})});var Eo=Object.getOwnPropertyNames(ko),So={shouldConvert:!0},Oo=function(t){if(this.value=t,this.dep=new To,this.vmCount=0,A(t,"__ob__",this),Array.isArray(t)){(io?N:D)(t,ko,Eo),this.observeArray(t)}else this.walk(t)};Oo.prototype.walk=function(t){for(var e=Object.keys(t),n=0;n<e.length;n++)L(t,e[n],t[e[n]])},Oo.prototype.observeArray=function(t){for(var e=0,n=t.length;e<n;e++)I(t[e])};var jo=to.optionMergeStrategies;jo.data=function(t,e,n){return n?q(t,e,n):e&&"function"!=typeof e?t:q.call(this,t,e)},Yi.forEach(function(t){jo[t]=H}),Zi.forEach(function(t){jo[t+"s"]=B}),jo.watch=function(t,e){if(t===ho&&(t=void 0),e===ho&&(e=void 0),!e)return Object.create(t||null);if(!t)return e;var n={};b(n,t);for(var r in e){var i=n[r],o=e[r];i&&!Array.isArray(i)&&(i=[i]),n[r]=i?i.concat(o):Array.isArray(o)?o:[o]}return n},jo.props=jo.methods=jo.inject=jo.computed=function(t,e){if(!t)return e;var n=Object.create(null);return b(n,t),e&&b(n,e),n},jo.provide=q;var No=function(t,e){return void 0===e?t:e},Do=function(t,e,n,r,i,o,a,s){this.tag=t,this.data=e,this.children=n,this.text=r,this.elm=i,this.ns=void 0,this.context=o,this.functionalContext=void 0,this.key=e&&e.key,this.componentOptions=a,this.componentInstance=void 0,this.parent=void 0,this.raw=!1,this.isStatic=!1,this.isRootInsert=!0,this.isComment=!1,this.isCloned=!1,this.isOnce=!1,this.asyncFactory=s,this.asyncMeta=void 0,this.isAsyncPlaceholder=!1},Io={child:{}};Io.child.get=function(){return this.componentInstance},Object.defineProperties(Do.prototype,Io);var Lo,Ro=function(t){void 0===t&&(t="");var e=new Do;return e.text=t,e.isComment=!0,e},Po=g(function(t){var e="&"===t.charAt(0);t=e?t.slice(1):t;var n="~"===t.charAt(0);t=n?t.slice(1):t;var r="!"===t.charAt(0);return t=r?t.slice(1):t,{name:t,plain:!(e||n||r),once:n,capture:r,passive:e}}),Fo=null,Mo=[],qo=[],Ho={},Bo=!1,Uo=!1,Wo=0,zo=0,Vo=function(t,e,n,r){this.vm=t,t._watchers.push(this),r?(this.deep=!!r.deep,this.user=!!r.user,this.lazy=!!r.lazy,this.sync=!!r.sync):this.deep=this.user=this.lazy=this.sync=!1,this.cb=n,this.id=++zo,this.active=!0,this.dirty=this.lazy,this.deps=[],this.newDeps=[],this.depIds=new yo,this.newDepIds=new yo,this.expression="","function"==typeof e?this.getter=e:(this.getter=k(e),this.getter||(this.getter=function(){})),this.value=this.lazy?void 0:this.get()};Vo.prototype.get=function(){O(this);var t,e=this.vm;try{t=this.getter.call(e,e)}catch(t){if(!this.user)throw t;E(t,e,'getter for watcher "'+this.expression+'"')}finally{this.deep&&Rt(t),j(),this.cleanupDeps()}return t},Vo.prototype.addDep=function(t){var e=t.id;this.newDepIds.has(e)||(this.newDepIds.add(e),this.newDeps.push(t),this.depIds.has(e)||t.addSub(this))},Vo.prototype.cleanupDeps=function(){for(var t=this,e=this.deps.length;e--;){var n=t.deps[e];t.newDepIds.has(n.id)||n.removeSub(t)}var r=this.depIds;this.depIds=this.newDepIds,this.newDepIds=r,this.newDepIds.clear(),r=this.deps,this.deps=this.newDeps,this.newDeps=r,this.newDeps.length=0},Vo.prototype.update=function(){this.lazy?this.dirty=!0:this.sync?this.run():Lt(this)},Vo.prototype.run=function(){if(this.active){var t=this.get();if(t!==this.value||s(t)||this.deep){var e=this.value;if(this.value=t,this.user)try{this.cb.call(this.vm,t,e)}catch(t){E(t,this.vm,'callback for watcher "'+this.expression+'"')}else this.cb.call(this.vm,t,e)}}},Vo.prototype.evaluate=function(){this.value=this.get(),this.dirty=!1},Vo.prototype.depend=function(){for(var t=this,e=this.deps.length;e--;)t.deps[e].depend()},Vo.prototype.teardown=function(){var t=this;if(this.active){this.vm._isBeingDestroyed||h(this.vm._watchers,this);for(var e=this.deps.length;e--;)t.deps[e].removeSub(t);this.active=!1}};var Xo=new yo,Ko={enumerable:!0,configurable:!0,get:w,set:w},Jo={lazy:!0},Qo={init:function(t,e,n,r){if(!t.componentInstance||t.componentInstance._isDestroyed){(t.componentInstance=ee(t,Fo,n,r)).$mount(e?t.elm:void 0,e)}else if(t.data.keepAlive){var i=t;Qo.prepatch(i,i)}},prepatch:function(t,e){var n=e.componentOptions;$t(e.componentInstance=t.componentInstance,n.propsData,n.listeners,e,n.children)},insert:function(t){var e=t.context,n=t.componentInstance;n._isMounted||(n._isMounted=!0,St(n,"mounted")),t.data.keepAlive&&(e._isMounted?Dt(n):kt(n,!0))},destroy:function(t){var e=t.componentInstance;e._isDestroyed||(t.data.keepAlive?Et(e,!0):e.$destroy())}},Go=Object.keys(Qo),Zo=1,Yo=2,ta=0;!function(t){t.prototype._init=function(t){var e=this;e._uid=ta++,e._isVue=!0,t&&t._isComponent?be(e,t):e.$options=V(_e(e.constructor),t||{},e),e._renderProxy=e,e._self=e,Ct(e),gt(e),ye(e),St(e,"beforeCreate"),Qt(e),Mt(e),Jt(e),St(e,"created"),e.$options.el&&e.$mount(e.$options.el)}}(Ce),function(t){var e={};e.get=function(){return this._data};var n={};n.get=function(){return this._props},Object.defineProperty(t.prototype,"$data",e),Object.defineProperty(t.prototype,"$props",n),t.prototype.$set=R,t.prototype.$delete=P,t.prototype.$watch=function(t,e,n){var r=this;if(u(e))return Kt(r,t,e,n);n=n||{},n.user=!0;var i=new Vo(r,t,e,n);return n.immediate&&e.call(r,i.value),function(){i.teardown()}}}(Ce),function(t){var e=/^hook:/;t.prototype.$on=function(t,n){var r=this,i=this;if(Array.isArray(t))for(var o=0,a=t.length;o<a;o++)r.$on(t[o],n);else(i._events[t]||(i._events[t]=[])).push(n),e.test(t)&&(i._hasHookEvent=!0);return i},t.prototype.$once=function(t,e){function n(){r.$off(t,n),e.apply(r,arguments)}var r=this;return n.fn=e,r.$on(t,n),r},t.prototype.$off=function(t,e){var n=this,r=this;if(!arguments.length)return r._events=Object.create(null),r;if(Array.isArray(t)){for(var i=0,o=t.length;i<o;i++)n.$off(t[i],e);return r}var a=r._events[t];if(!a)return r;if(1===arguments.length)return r._events[t]=null,r;if(e)for(var s,u=a.length;u--;)if((s=a[u])===e||s.fn===e){a.splice(u,1);break}return r},t.prototype.$emit=function(t){var e=this,n=e._events[t];if(n){n=n.length>1?y(n):n;for(var r=y(arguments,1),i=0,o=n.length;i<o;i++)try{n[i].apply(e,r)}catch(n){E(n,e,'event handler for "'+t+'"')}}return e}}(Ce),function(t){t.prototype._update=function(t,e){var n=this;n._isMounted&&St(n,"beforeUpdate");var r=n.$el,i=n._vnode,o=Fo;Fo=n,n._vnode=t,i?n.$el=n.__patch__(i,t):(n.$el=n.__patch__(n.$el,t,e,!1,n.$options._parentElm,n.$options._refElm),n.$options._parentElm=n.$options._refElm=null),Fo=o,r&&(r.__vue__=null),n.$el&&(n.$el.__vue__=n),n.$vnode&&n.$parent&&n.$vnode===n.$parent._vnode&&(n.$parent.$el=n.$el)},t.prototype.$forceUpdate=function(){var t=this;t._watcher&&t._watcher.update()},t.prototype.$destroy=function(){var t=this;if(!t._isBeingDestroyed){St(t,"beforeDestroy"),t._isBeingDestroyed=!0;var e=t.$parent;!e||e._isBeingDestroyed||t.$options.abstract||h(e.$children,t),t._watcher&&t._watcher.teardown();for(var n=t._watchers.length;n--;)t._watchers[n].teardown();t._data.__ob__&&t._data.__ob__.vmCount--,t._isDestroyed=!0,t.__patch__(t._vnode,null),St(t,"destroyed"),t.$off(),t.$el&&(t.$el.__vue__=null)}}}(Ce),function(t){t.prototype.$nextTick=function(t){return xo(t,this)},t.prototype._render=function(){var t=this,e=t.$options,n=e.render,r=e.staticRenderFns,i=e._parentVnode;if(t._isMounted)for(var o in t.$slots){var a=t.$slots[o];a._rendered&&(t.$slots[o]=tt(a,!0))}t.$scopedSlots=i&&i.data.scopedSlots||eo,r&&!t._staticTrees&&(t._staticTrees=[]),t.$vnode=i;var s;try{s=n.call(t._renderProxy,t.$createElement)}catch(e){E(e,t,"render function"),s=t._vnode}return s instanceof Do||(s=Ro()),s.parent=i,s},t.prototype._o=he,t.prototype._n=p,t.prototype._s=f,t.prototype._l=ue,t.prototype._t=ce,t.prototype._q=x,t.prototype._i=C,t.prototype._m=de,t.prototype._f=le,t.prototype._k=fe,t.prototype._b=pe,t.prototype._v=Z,t.prototype._e=Ro,t.prototype._u=xt,t.prototype._g=me}(Ce);var ea=[String,RegExp,Array],na={name:"keep-alive",abstract:!0,props:{include:ea,exclude:ea},created:function(){this.cache=Object.create(null)},destroyed:function(){var t=this;for(var e in t.cache)De(t.cache[e])},watch:{include:function(t){Ne(this.cache,this._vnode,function(e){return je(t,e)})},exclude:function(t){Ne(this.cache,this._vnode,function(e){return!je(t,e)})}},render:function(){var t=vt(this.$slots.default),e=t&&t.componentOptions;if(e){var n=Oe(e);if(n&&(this.include&&!je(this.include,n)||this.exclude&&je(this.exclude,n)))return t;var r=null==t.key?e.Ctor.cid+(e.tag?"::"+e.tag:""):t.key;this.cache[r]?t.componentInstance=this.cache[r].componentInstance:this.cache[r]=t,t.data.keepAlive=!0}return t}},ra={KeepAlive:na};!function(t){var e={};e.get=function(){return to},Object.defineProperty(t,"config",e),t.util={warn:ro,extend:b,mergeOptions:V,defineReactive:L},t.set=R,t.delete=P,t.nextTick=xo,t.options=Object.create(null),Zi.forEach(function(e){t.options[e+"s"]=Object.create(null)}),t.options._base=t,b(t.options.components,ra),Te(t),$e(t),Ae(t),Se(t)}(Ce),Object.defineProperty(Ce.prototype,"$isServer",{get:bo}),Object.defineProperty(Ce.prototype,"$ssrContext",{get:function(){return this.$vnode&&this.$vnode.ssrContext}}),Ce.version="2.4.4";var ia,oa,aa,sa,ua,ca,la,fa,pa,da=d("style,class"),ha=d("input,textarea,option,select,progress"),va=function(t,e,n){return"value"===n&&ha(t)&&"button"!==e||"selected"===n&&"option"===t||"checked"===n&&"input"===t||"muted"===n&&"video"===t},ga=d("contenteditable,draggable,spellcheck"),ma=d("allowfullscreen,async,autofocus,autoplay,checked,compact,controls,declare,default,defaultchecked,defaultmuted,defaultselected,defer,disabled,enabled,formnovalidate,hidden,indeterminate,inert,ismap,itemscope,loop,multiple,muted,nohref,noresize,noshade,novalidate,nowrap,open,pauseonexit,readonly,required,reversed,scoped,seamless,selected,sortable,translate,truespeed,typemustmatch,visible"),ya="http://www.w3.org/1999/xlink",ba=function(t){return":"===t.charAt(5)&&"xlink"===t.slice(0,5)},_a=function(t){return ba(t)?t.slice(6,t.length):""},wa=function(t){return null==t||!1===t},xa={svg:"http://www.w3.org/2000/svg",math:"http://www.w3.org/1998/Math/MathML"},Ca=d("html,body,base,head,link,meta,style,title,address,article,aside,footer,header,h1,h2,h3,h4,h5,h6,hgroup,nav,section,div,dd,dl,dt,figcaption,figure,picture,hr,img,li,main,ol,p,pre,ul,a,b,abbr,bdi,bdo,br,cite,code,data,dfn,em,i,kbd,mark,q,rp,rt,rtc,ruby,s,samp,small,span,strong,sub,sup,time,u,var,wbr,area,audio,map,track,video,embed,object,param,source,canvas,script,noscript,del,ins,caption,col,colgroup,table,thead,tbody,td,th,tr,button,datalist,fieldset,form,input,label,legend,meter,optgroup,option,output,progress,select,textarea,details,dialog,menu,menuitem,summary,content,element,shadow,template,blockquote,iframe,tfoot"),Ta=d("svg,animate,circle,clippath,cursor,defs,desc,ellipse,filter,font-face,foreignObject,g,glyph,image,line,marker,mask,missing-glyph,path,pattern,polygon,polyline,rect,switch,symbol,text,textpath,tspan,use,view",!0),$a=function(t){return"pre"===t},Aa=function(t){return Ca(t)||Ta(t)},ka=Object.create(null),Ea=d("text,number,password,search,email,tel,url"),Sa=Object.freeze({createElement:We,createElementNS:ze,createTextNode:Ve,createComment:Xe,insertBefore:Ke,removeChild:Je,appendChild:Qe,parentNode:Ge,nextSibling:Ze,tagName:Ye,setTextContent:tn,setAttribute:en}),Oa={create:function(t,e){nn(e)},update:function(t,e){t.data.ref!==e.data.ref&&(nn(t,!0),nn(e))},destroy:function(t){nn(t,!0)}},ja=new Do("",{},[]),Na=["create","activate","update","remove","destroy"],Da={create:sn,update:sn,destroy:function(t){sn(t,ja)}},Ia=Object.create(null),La=[Oa,Da],Ra={create:pn,update:pn},Pa={create:hn,update:hn},Fa=/[\w).+\-_$\]]/,Ma="__r",qa="__c",Ha={create:Hn,update:Hn},Ba={create:Bn,update:Bn},Ua=g(function(t){var e={},n=/;(?![^(]*\))/g,r=/:(.+)/;return t.split(n).forEach(function(t){if(t){var n=t.split(r);n.length>1&&(e[n[0].trim()]=n[1].trim())}}),e}),Wa=/^--/,za=/\s*!important$/,Va=function(t,e,n){if(Wa.test(e))t.style.setProperty(e,n);else if(za.test(n))t.style.setProperty(e,n.replace(za,""),"important");else{var r=Ka(e);if(Array.isArray(n))for(var i=0,o=n.length;i<o;i++)t.style[r]=n[i];else t.style[r]=n}},Xa=["Webkit","Moz","ms"],Ka=g(function(t){if(pa=pa||document.createElement("div").style,"filter"!==(t=zi(t))&&t in pa)return t;for(var e=t.charAt(0).toUpperCase()+t.slice(1),n=0;n<Xa.length;n++){var r=Xa[n]+e;if(r in pa)return r}}),Ja={create:Jn,update:Jn},Qa=g(function(t){return{enterClass:t+"-enter",enterToClass:t+"-enter-to",enterActiveClass:t+"-enter-active",leaveClass:t+"-leave",leaveToClass:t+"-leave-to",leaveActiveClass:t+"-leave-active"}}),Ga=oo&&!uo,Za="transition",Ya="animation",ts="transition",es="transitionend",ns="animation",rs="animationend";Ga&&(void 0===window.ontransitionend&&void 0!==window.onwebkittransitionend&&(ts="WebkitTransition",es="webkitTransitionEnd"),void 0===window.onanimationend&&void 0!==window.onwebkitanimationend&&(ns="WebkitAnimation",rs="webkitAnimationEnd"));var is=oo&&window.requestAnimationFrame?window.requestAnimationFrame.bind(window):setTimeout,os=/\b(transform|all)(,|$)/,as=oo?{create:lr,activate:lr,remove:function(t,e){!0!==t.data.show?sr(t,e):e()}}:{},ss=[Ra,Pa,Ha,Ba,Ja,as],us=ss.concat(La),cs=function(t){function e(t){return new Do(j.tagName(t).toLowerCase(),{},[],void 0,t)}function o(t,e){function n(){0==--n.listeners&&s(t)}return n.listeners=e,n}function s(t){var e=j.parentNode(t);r(e)&&j.removeChild(e,t)}function u(t,e,n,o,a){if(t.isRootInsert=!a,!c(t,e,n,o)){var s=t.data,u=t.children,l=t.tag;r(l)?(t.elm=t.ns?j.createElementNS(t.ns,l):j.createElement(l,t),m(t),h(t,u,e),r(s)&&g(t,e),p(n,t.elm,o)):i(t.isComment)?(t.elm=j.createComment(t.text),p(n,t.elm,o)):(t.elm=j.createTextNode(t.text),p(n,t.elm,o))}}function c(t,e,n,o){var a=t.data;if(r(a)){var s=r(t.componentInstance)&&a.keepAlive;if(r(a=a.hook)&&r(a=a.init)&&a(t,!1,n,o),r(t.componentInstance))return l(t,e),i(s)&&f(t,e,n,o),!0}}function l(t,e){r(t.data.pendingInsert)&&(e.push.apply(e,t.data.pendingInsert),t.data.pendingInsert=null),t.elm=t.componentInstance.$el,v(t)?(g(t,e),m(t)):(nn(t),e.push(t))}function f(t,e,n,i){for(var o,a=t;a.componentInstance;)if(a=a.componentInstance._vnode,r(o=a.data)&&r(o=o.transition)){for(o=0;o<S.activate.length;++o)S.activate[o](ja,a);e.push(a);break}p(n,t.elm,i)}function p(t,e,n){r(t)&&(r(n)?n.parentNode===t&&j.insertBefore(t,e,n):j.appendChild(t,e))}function h(t,e,n){if(Array.isArray(e))for(var r=0;r<e.length;++r)u(e[r],n,t.elm,null,!0);else a(t.text)&&j.appendChild(t.elm,j.createTextNode(t.text))}function v(t){for(;t.componentInstance;)t=t.componentInstance._vnode;return r(t.tag)}function g(t,e){for(var n=0;n<S.create.length;++n)S.create[n](ja,t);k=t.data.hook,r(k)&&(r(k.create)&&k.create(ja,t),r(k.insert)&&e.push(t))}function m(t){for(var e,n=t;n;)r(e=n.context)&&r(e=e.$options._scopeId)&&j.setAttribute(t.elm,e,""),n=n.parent;r(e=Fo)&&e!==t.context&&r(e=e.$options._scopeId)&&j.setAttribute(t.elm,e,"")}function y(t,e,n,r,i,o){for(;r<=i;++r)u(n[r],o,t,e)}function b(t){var e,n,i=t.data;if(r(i))for(r(e=i.hook)&&r(e=e.destroy)&&e(t),e=0;e<S.destroy.length;++e)S.destroy[e](t);if(r(e=t.children))for(n=0;n<t.children.length;++n)b(t.children[n])}function _(t,e,n,i){for(;n<=i;++n){var o=e[n];r(o)&&(r(o.tag)?(w(o),b(o)):s(o.elm))}}function w(t,e){if(r(e)||r(t.data)){var n,i=S.remove.length+1;for(r(e)?e.listeners+=i:e=o(t.elm,i),r(n=t.componentInstance)&&r(n=n._vnode)&&r(n.data)&&w(n,e),n=0;n<S.remove.length;++n)S.remove[n](t,e);r(n=t.data.hook)&&r(n=n.remove)?n(t,e):e()}else s(t.elm)}function x(t,e,i,o,a){for(var s,c,l,f,p=0,d=0,h=e.length-1,v=e[0],g=e[h],m=i.length-1,b=i[0],w=i[m],x=!a;p<=h&&d<=m;)n(v)?v=e[++p]:n(g)?g=e[--h]:rn(v,b)?(T(v,b,o),v=e[++p],b=i[++d]):rn(g,w)?(T(g,w,o),g=e[--h],w=i[--m]):rn(v,w)?(T(v,w,o),x&&j.insertBefore(t,v.elm,j.nextSibling(g.elm)),v=e[++p],w=i[--m]):rn(g,b)?(T(g,b,o),x&&j.insertBefore(t,g.elm,v.elm),g=e[--h],b=i[++d]):(n(s)&&(s=an(e,p,h)),c=r(b.key)?s[b.key]:C(b,e,p,h),n(c)?u(b,o,t,v.elm):(l=e[c],rn(l,b)?(T(l,b,o),e[c]=void 0,x&&j.insertBefore(t,l.elm,v.elm)):u(b,o,t,v.elm)),b=i[++d]);p>h?(f=n(i[m+1])?null:i[m+1].elm,y(t,f,i,d,m,o)):d>m&&_(t,e,p,h)}function C(t,e,n,i){for(var o=n;o<i;o++){var a=e[o];if(r(a)&&rn(t,a))return o}}function T(t,e,o,a){if(t!==e){var s=e.elm=t.elm;if(i(t.isAsyncPlaceholder))return void(r(e.asyncFactory.resolved)?A(t.elm,e,o):e.isAsyncPlaceholder=!0);if(i(e.isStatic)&&i(t.isStatic)&&e.key===t.key&&(i(e.isCloned)||i(e.isOnce)))return void(e.componentInstance=t.componentInstance);var u,c=e.data;r(c)&&r(u=c.hook)&&r(u=u.prepatch)&&u(t,e);var l=t.children,f=e.children;if(r(c)&&v(e)){for(u=0;u<S.update.length;++u)S.update[u](t,e);r(u=c.hook)&&r(u=u.update)&&u(t,e)}n(e.text)?r(l)&&r(f)?l!==f&&x(s,l,f,o,a):r(f)?(r(t.text)&&j.setTextContent(s,""),y(s,null,f,0,f.length-1,o)):r(l)?_(s,l,0,l.length-1):r(t.text)&&j.setTextContent(s,""):t.text!==e.text&&j.setTextContent(s,e.text),r(c)&&r(u=c.hook)&&r(u=u.postpatch)&&u(t,e)}}function $(t,e,n){if(i(n)&&r(t.parent))t.parent.data.pendingInsert=e;else for(var o=0;o<e.length;++o)e[o].data.hook.insert(e[o])}function A(t,e,n){if(i(e.isComment)&&r(e.asyncFactory))return e.elm=t,e.isAsyncPlaceholder=!0,!0;e.elm=t;var o=e.tag,a=e.data,s=e.children;if(r(a)&&(r(k=a.hook)&&r(k=k.init)&&k(e,!0),r(k=e.componentInstance)))return l(e,n),!0;if(r(o)){if(r(s))if(t.hasChildNodes())if(r(k=a)&&r(k=k.domProps)&&r(k=k.innerHTML)){if(k!==t.innerHTML)return!1}else{for(var u=!0,c=t.firstChild,f=0;f<s.length;f++){if(!c||!A(c,s[f],n)){u=!1;break}c=c.nextSibling}if(!u||c)return!1}else h(e,s,n);if(r(a))for(var p in a)if(!N(p)){g(e,n);break}}else t.data!==e.text&&(t.data=e.text);return!0}var k,E,S={},O=t.modules,j=t.nodeOps;for(k=0;k<Na.length;++k)for(S[Na[k]]=[],E=0;E<O.length;++E)r(O[E][Na[k]])&&S[Na[k]].push(O[E][Na[k]]);var N=d("attrs,style,class,staticClass,staticStyle,key");return function(t,o,a,s,c,l){if(n(o))return void(r(t)&&b(t));var f=!1,p=[];if(n(t))f=!0,u(o,p,c,l);else{var d=r(t.nodeType);if(!d&&rn(t,o))T(t,o,p,s);else{if(d){if(1===t.nodeType&&t.hasAttribute(Gi)&&(t.removeAttribute(Gi),a=!0),i(a)&&A(t,o,p))return $(o,p,!0),t;t=e(t)}var h=t.elm,g=j.parentNode(h);if(u(o,p,h._leaveCb?null:g,j.nextSibling(h)),r(o.parent))for(var m=o.parent,y=v(o);m;){for(var w=0;w<S.destroy.length;++w)S.destroy[w](m);if(m.elm=o.elm,y){for(var x=0;x<S.create.length;++x)S.create[x](ja,m);var C=m.data.hook.insert;if(C.merged)for(var k=1;k<C.fns.length;k++)C.fns[k]()}m=m.parent}r(g)?_(g,[t],0,0):r(t.tag)&&b(t)}}return $(o,p,f),o.elm}}({nodeOps:Sa,modules:us});uo&&document.addEventListener("selectionchange",function(){var t=document.activeElement;t&&t.vmodel&&mr(t,"input")});var ls={inserted:function(t,e,n){"select"===n.tag?(fr(t,e,n.context),t._vOptions=[].map.call(t.options,hr)):("textarea"===n.tag||Ea(t.type))&&(t._vModifiers=e.modifiers,e.modifiers.lazy||(t.addEventListener("change",gr),lo||(t.addEventListener("compositionstart",vr),t.addEventListener("compositionend",gr)),uo&&(t.vmodel=!0)))},componentUpdated:function(t,e,n){if("select"===n.tag){fr(t,e,n.context);var r=t._vOptions,i=t._vOptions=[].map.call(t.options,hr);if(i.some(function(t,e){return!x(t,r[e])})){(t.multiple?e.value.some(function(t){return dr(t,i)}):e.value!==e.oldValue&&dr(e.value,i))&&mr(t,"change")}}}},fs={bind:function(t,e,n){var r=e.value;n=yr(n);var i=n.data&&n.data.transition,o=t.__vOriginalDisplay="none"===t.style.display?"":t.style.display;r&&i?(n.data.show=!0,ar(n,function(){t.style.display=o})):t.style.display=r?o:"none"},update:function(t,e,n){var r=e.value;r!==e.oldValue&&(n=yr(n),n.data&&n.data.transition?(n.data.show=!0,r?ar(n,function(){t.style.display=t.__vOriginalDisplay}):sr(n,function(){t.style.display="none"})):t.style.display=r?t.__vOriginalDisplay:"none")},unbind:function(t,e,n,r,i){i||(t.style.display=t.__vOriginalDisplay)}},ps={model:ls,show:fs},ds={name:String,appear:Boolean,css:Boolean,mode:String,type:String,enterClass:String,leaveClass:String,enterToClass:String,leaveToClass:String,enterActiveClass:String,leaveActiveClass:String,appearClass:String,appearActiveClass:String,appearToClass:String,duration:[Number,String,Object]},hs={name:"transition",props:ds,abstract:!0,render:function(t){var e=this,n=this.$options._renderChildren;if(n&&(n=n.filter(function(t){return t.tag||ht(t)}),n.length)){var r=this.mode,i=n[0];if(xr(this.$vnode))return i;var o=br(i);if(!o)return i;if(this._leaving)return wr(t,i);var s="__transition-"+this._uid+"-";o.key=null==o.key?o.isComment?s+"comment":s+o.tag:a(o.key)?0===String(o.key).indexOf(s)?o.key:s+o.key:o.key;var u=(o.data||(o.data={})).transition=_r(this),c=this._vnode,l=br(c);if(o.data.directives&&o.data.directives.some(function(t){return"show"===t.name})&&(o.data.show=!0),l&&l.data&&!Cr(o,l)&&!ht(l)){var f=l&&(l.data.transition=b({},u));if("out-in"===r)return this._leaving=!0,it(f,"afterLeave",function(){e._leaving=!1,e.$forceUpdate()}),wr(t,i);if("in-out"===r){if(ht(o))return c;var p,d=function(){p()};it(u,"afterEnter",d),it(u,"enterCancelled",d),it(f,"delayLeave",function(t){p=t})}}return i}}},vs=b({tag:String,moveClass:String},ds);delete vs.mode;var gs={props:vs,render:function(t){for(var e=this.tag||this.$vnode.data.tag||"span",n=Object.create(null),r=this.prevChildren=this.children,i=this.$slots.default||[],o=this.children=[],a=_r(this),s=0;s<i.length;s++){var u=i[s];if(u.tag)if(null!=u.key&&0!==String(u.key).indexOf("__vlist"))o.push(u),n[u.key]=u,(u.data||(u.data={})).transition=a;else;}if(r){for(var c=[],l=[],f=0;f<r.length;f++){var p=r[f];p.data.transition=a,p.data.pos=p.elm.getBoundingClientRect(),n[p.key]?c.push(p):l.push(p)}this.kept=t(e,null,c),this.removed=l}return t(e,null,o)},beforeUpdate:function(){this.__patch__(this._vnode,this.kept,!1,!0),this._vnode=this.kept},updated:function(){var t=this.prevChildren,e=this.moveClass||(this.name||"v")+"-move";if(t.length&&this.hasMove(t[0].elm,e)){t.forEach(Tr),t.forEach($r),t.forEach(Ar);var n=document.body;n.offsetHeight;t.forEach(function(t){if(t.data.moved){var n=t.elm,r=n.style;tr(n,e),r.transform=r.WebkitTransform=r.transitionDuration="",n.addEventListener(es,n._moveCb=function t(r){r&&!/transform$/.test(r.propertyName)||(n.removeEventListener(es,t),n._moveCb=null,er(n,e))})}})}},methods:{hasMove:function(t,e){if(!Ga)return!1;if(this._hasMove)return this._hasMove;var n=t.cloneNode();t._transitionClasses&&t._transitionClasses.forEach(function(t){Gn(n,t)}),Qn(n,e),n.style.display="none",this.$el.appendChild(n);var r=rr(n);return this.$el.removeChild(n),this._hasMove=r.hasTransform}}},ms={Transition:hs,TransitionGroup:gs};Ce.config.mustUseProp=va,Ce.config.isReservedTag=Aa,Ce.config.isReservedAttr=da,Ce.config.getTagNamespace=He,Ce.config.isUnknownElement=Be,b(Ce.options.directives,ps),b(Ce.options.components,ms),Ce.prototype.__patch__=oo?cs:w,Ce.prototype.$mount=function(t,e){return t=t&&oo?Ue(t):void 0,Tt(this,t,e)},setTimeout(function(){to.devtools&&_o&&_o.emit("init",Ce)},0);var ys,bs=!!oo&&function(t,e){var n=document.createElement("div");return n.innerHTML='<div a="'+t+'"/>',n.innerHTML.indexOf(e)>0}("\n","&#10;"),_s=/\{\{((?:.|\n)+?)\}\}/g,ws=/[-.*+?^${}()|[\]\/\\]/g,xs=g(function(t){var e=t[0].replace(ws,"\\$&"),n=t[1].replace(ws,"\\$&");return new RegExp(e+"((?:.|\\n)+?)"+n,"g")}),Cs={staticKeys:["staticClass"],transformNode:Er,genData:Sr},Ts={staticKeys:["staticStyle"],transformNode:Or,genData:jr},$s=[Cs,Ts],As={model:Dn,text:Nr,html:Dr},ks=d("area,base,br,col,embed,frame,hr,img,input,isindex,keygen,link,meta,param,source,track,wbr"),Es=d("colgroup,dd,dt,li,options,p,td,tfoot,th,thead,tr,source"),Ss=d("address,article,aside,base,blockquote,body,caption,col,colgroup,dd,details,dialog,div,dl,dt,fieldset,figcaption,figure,footer,form,h1,h2,h3,h4,h5,h6,head,header,hgroup,hr,html,legend,li,menuitem,meta,optgroup,option,param,rp,rt,source,style,summary,tbody,td,tfoot,th,thead,title,tr,track"),Os={expectHTML:!0,modules:$s,directives:As,isPreTag:$a,isUnaryTag:ks,mustUseProp:va,canBeLeftOpenTag:Es,isReservedTag:Aa,getTagNamespace:He,staticKeys:function(t){return t.reduce(function(t,e){return t.concat(e.staticKeys||[])},[]).join(",")}($s)},js={decode:function(t){return ys=ys||document.createElement("div"),ys.innerHTML=t,ys.textContent}},Ns=/^\s*([^\s"'<>\/=]+)(?:\s*(=)\s*(?:"([^"]*)"+|'([^']*)'+|([^\s"'=<>`]+)))?/,Ds="[a-zA-Z_][\\w\\-\\.]*",Is="((?:"+Ds+"\\:)?"+Ds+")",Ls=new RegExp("^<"+Is),Rs=/^\s*(\/?)>/,Ps=new RegExp("^<\\/"+Is+"[^>]*>"),Fs=/^<!DOCTYPE [^>]+>/i,Ms=/^<!--/,qs=/^<!\[/,Hs=!1;"x".replace(/x(.)?/g,function(t,e){Hs=""===e});var Bs,Us,Ws,zs,Vs,Xs,Ks,Js,Qs,Gs,Zs=d("script,style,textarea",!0),Ys={},tu={"&lt;":"<","&gt;":">","&quot;":'"',"&amp;":"&","&#10;":"\n"},eu=/&(?:lt|gt|quot|amp);/g,nu=/&(?:lt|gt|quot|amp|#10);/g,ru=d("pre,textarea",!0),iu=function(t,e){return t&&ru(t)&&"\n"===e[0]},ou=/^@|^v-on:/,au=/^v-|^@|^:/,su=/(.*?)\s+(?:in|of)\s+(.*)/,uu=/\((\{[^}]*\}|[^,]*),([^,]*)(?:,([^,]*))?\)/,cu=/:(.*)$/,lu=/^:|^v-bind:/,fu=/\.[^.]+/g,pu=g(js.decode),du=/^xmlns:NS\d+/,hu=/^NS\d+:/,vu=g(ri),gu=/^\s*([\w$_]+|\([^)]*?\))\s*=>|^function\s*\(/,mu=/^\s*[A-Za-z_$][\w$]*(?:\.[A-Za-z_$][\w$]*|\['.*?']|\[".*?"]|\[\d+]|\[[A-Za-z_$][\w$]*])*\s*$/,yu={esc:27,tab:9,enter:13,space:32,up:38,left:37,right:39,down:40,delete:[8,46]},bu=function(t){return"if("+t+")return null;"},_u={stop:"$event.stopPropagation();",prevent:"$event.preventDefault();",self:bu("$event.target !== $event.currentTarget"),ctrl:bu("!$event.ctrlKey"),shift:bu("!$event.shiftKey"),alt:bu("!$event.altKey"),meta:bu("!$event.metaKey"),left:bu("'button' in $event && $event.button !== 0"),middle:bu("'button' in $event && $event.button !== 1"),right:bu("'button' in $event && $event.button !== 2")},wu={on:pi,bind:di,cloak:w},xu=function(t){this.options=t,this.warn=t.warn||mn,this.transforms=yn(t.modules,"transformCode"),this.dataGenFns=yn(t.modules,"genData"),this.directives=b(b({},wu),t.directives);var e=t.isReservedTag||Ji;this.maybeComponent=function(t){return!e(t.tag)},this.onceId=0,this.staticRenderFns=[]},Cu=(new RegExp("\\b"+"do,if,for,let,new,try,var,case,else,with,await,break,catch,class,const,super,throw,while,yield,delete,export,import,return,switch,default,extends,finally,continue,debugger,function,arguments".split(",").join("\\b|\\b")+"\\b"),new RegExp("\\b"+"delete,typeof,void".split(",").join("\\s*\\([^\\)]*\\)|\\b")+"\\s*\\([^\\)]*\\)"),function(t){return function(e){function n(n,r){var i=Object.create(e),o=[],a=[];if(i.warn=function(t,e){(e?a:o).push(t)},r){r.modules&&(i.modules=(e.modules||[]).concat(r.modules)),r.directives&&(i.directives=b(Object.create(e.directives),r.directives));for(var s in r)"modules"!==s&&"directives"!==s&&(i[s]=r[s])}var u=t(n,i);return u.errors=o,u.tips=a,u}return{compile:n,compileToFunctions:Fi(n)}}}(function(t,e){var n=Rr(t.trim(),e);ni(n,e);var r=hi(n,e);return{ast:n,render:r.render,staticRenderFns:r.staticRenderFns}})),Tu=Cu(Os),$u=Tu.compileToFunctions,Au=g(function(t){var e=Ue(t);return e&&e.innerHTML}),ku=Ce.prototype.$mount;Ce.prototype.$mount=function(t,e){if((t=t&&Ue(t))===document.body||t===document.documentElement)return this;var n=this.$options;if(!n.render){var r=n.template;if(r)if("string"==typeof r)"#"===r.charAt(0)&&(r=Au(r));else{if(!r.nodeType)return this;r=r.innerHTML}else t&&(r=Mi(t));if(r){var i=$u(r,{shouldDecodeNewlines:bs,delimiters:n.delimiters,comments:n.comments},this),o=i.render,a=i.staticRenderFns;n.render=o,n.staticRenderFns=a}}return ku.call(this,t,e)},Ce.compile=$u,t.exports=Ce}).call(e,n(2))},function(t,e,n){var r=n(37),i=n(38),o=n(39),a=r(i,o,null,null,null);t.exports=a.exports},function(t,e){t.exports=function(t,e,n,r,i){var o,a=t=t||{},s=typeof t.default;"object"!==s&&"function"!==s||(o=t,a=t.default);var u="function"==typeof a?a.options:a;e&&(u.render=e.render,u.staticRenderFns=e.staticRenderFns),r&&(u._scopeId=r);var c;if(i?(c=function(t){t=t||this.$vnode&&this.$vnode.ssrContext||this.parent&&this.parent.$vnode&&this.parent.$vnode.ssrContext,t||"undefined"==typeof __VUE_SSR_CONTEXT__||(t=__VUE_SSR_CONTEXT__),n&&n.call(this,t),t&&t._registeredComponents&&t._registeredComponents.add(i)},u._ssrRegister=c):n&&(c=n),c){var l=u.functional,f=l?u.render:u.beforeCreate;l?u.render=function(t,e){return c.call(e),f(t,e)}:u.beforeCreate=f?[].concat(f,c):[c]}return{esModule:o,exports:a,options:u}}},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.default={mounted:function(){}}},function(t,e){var n=function(){var t=this,e=t.$createElement;t._self._c;return t._m(0)},r=[function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("div",{staticClass:"container"},[n("div",{staticClass:"row"},[n("div",{staticClass:"col-md-8 col-md-offset-2"},[n("div",{staticClass:"panel panel-default"},[n("div",{staticClass:"panel-heading"},[t._v("Example Component")]),t._v(" "),n("div",{staticClass:"panel-body"},[t._v("\n                    I'm an example component!\n                ")])])])])])}];t.exports={render:n,staticRenderFns:r}},function(t,e){}]);

/home/genis/Proyectos/ProyectoXat/resources/assets/js/bootstrap.js:
   17   * We'll load the axios HTTP library which allows us to easily issue requests
   18   * to our Laravel back-end. This library automatically handles sending the
   19:  * CSRF token as a header based on the value of the "XSRF" token cookie.
   20   */
   21  
   22  window.axios = require('axios');
   23  
   24: window.axios.defaults.headers.common['X-Requested-With'] = 'XMLHttpRequest';
   25  
   26  /**
   27:  * Next we will register the CSRF Token as a common header with Axios so that
   28   * all outgoing HTTP requests automatically have it attached. This is just
   29   * a simple convenience so we don't have to attach every token manually.
   30   */
   31  
   32: let token = document.head.querySelector('meta[name="csrf-token"]');
   33  
   34  if (token) {
   35:     window.axios.defaults.headers.common['X-CSRF-TOKEN'] = token.content;
   36  } else {
   37      console.error('CSRF token not found: https://laravel.com/docs/csrf#csrf-x-csrf-token');

/home/genis/Proyectos/ProyectoXat/resources/assets/js/components/ExampleComponent.vue:
    4              <div class="col-md-8 col-md-offset-2">
    5                  <div class="panel panel-default">
    6:                     <div class="panel-heading">Example Component</div>
    7  
    8                      <div class="panel-body">

/home/genis/Proyectos/ProyectoXat/resources/assets/sass/_variables.scss:
   36  
   37  // Panels
   38: $panel-default-heading-bg: #fff;
   39  

/home/genis/Proyectos/ProyectoXat/resources/views/auth/login.blade.php:
    6          <div class="col-md-8 col-md-offset-2">
    7              <div class="panel panel-default">
    8:                 <div class="panel-heading">Login</div>
    9  
   10                  <div class="panel-body">

/home/genis/Proyectos/ProyectoXat/resources/views/auth/passwords/email.blade.php:
    6          <div class="col-md-8 col-md-offset-2">
    7              <div class="panel panel-default">
    8:                 <div class="panel-heading">Reset Password</div>
    9  
   10                  <div class="panel-body">

/home/genis/Proyectos/ProyectoXat/resources/views/auth/passwords/reset.blade.php:
    6          <div class="col-md-8 col-md-offset-2">
    7              <div class="panel panel-default">
    8:                 <div class="panel-heading">Reset Password</div>
    9  
   10                  <div class="panel-body">

/home/genis/Proyectos/ProyectoXat/resources/views/auth/register.blade.php:
    6          <div class="col-md-8 col-md-offset-2">
    7              <div class="panel panel-default">
    8:                 <div class="panel-heading">Register</div>
    9  
   10                  <div class="panel-body">

/home/genis/Proyectos/ProyectoXat/resources/views/chat/chat.blade.php:
    1  @extends('layouts.app')
    2  
    3: @section('head')
    4  <script>
    5      var chatid = {{$id}};
    .
   24              <div class="row">
   25                  <div class="panel panel-default">
   26:                     <div id="divChat" class="panel-heading cabeceraChat" style="background: blue; color: white; ">
   27                          <b id="nombreSala">{{$nom}}</b>
   28  
   ..
   49        <div class="col-md-2">
   50              <div class="panel panel-default">
   51:                 <div id="divBanner" class="panel-heading"><b>Banner</b></div>
   52                      
   53                  <div class="panel-body">

/home/genis/Proyectos/ProyectoXat/resources/views/chat/unirse.blade.php:
   14              <div class="row">
   15                  <div class="panel panel-default">
   16:                     <div id="divChat" class="panel-heading cabeceraChat" style="background: blue; color: white; ">
   17                        <b>Chat</b><label style="float:right;" data-toggle="modal" data-target=".bd-example-modal-sm">+ Nueva Chat Room</label>
   18                      </div>
   ..
   21                        <div class="modal-dialog modal-sm">
   22                          <div class="modal-content">
   23:                           <div class="modal-header">
   24                              <h5 class="modal-title">CREA TU CHAT ROOM</h5>
   25                            </div>
   ..
   49        <div class="col-md-2">
   50              <div class="panel panel-default">
   51:                 <div id="divBanner" class="panel-heading"><b>Banner</b></div>
   52                      
   53                  <div class="panel-body">

/home/genis/Proyectos/ProyectoXat/resources/views/denuncia/adminDenuncias.blade.php:
   43      <div class="col-md-2">
   44        <div class="panel panel-default">
   45:           <div id="divBanner" class="panel-heading"><b>Banner</b></div>
   46                
   47            <div class="panel-body">

/home/genis/Proyectos/ProyectoXat/resources/views/denuncia/crearDenuncias.blade.php:
   30        <div class="col-md-2">
   31              <div class="panel panel-default">
   32:                 <div id="divBanner" class="panel-heading"><b>Banner</b></div>
   33                      
   34                  <div class="panel-body">

/home/genis/Proyectos/ProyectoXat/resources/views/denuncia/denuncias.blade.php:
   26      <div class="col-md-2">
   27        <div class="panel panel-default">
   28:           <div id="divBanner" class="panel-heading"><b>Banner</b></div>
   29                
   30            <div class="panel-body">

/home/genis/Proyectos/ProyectoXat/resources/views/denuncia/responderAdmin.blade.php:
   22      <div class="col-md-2">
   23        <div class="panel panel-default">
   24:           <div id="divBanner" class="panel-heading"><b>Banner</b></div>
   25                
   26            <div class="panel-body">

/home/genis/Proyectos/ProyectoXat/resources/views/home.blade.php:
    7          <div class="col-md-3">
    8              <div class="panel panel-default">
    9:                 <div class="panel-heading">Datos Usuario</div>
   10  
   11                  <div class="panel-body">
   ..
   18          <div class="col-md-7">
   19              <div class="panel panel-default">
   20:                 <div class="panel-heading">Bienvenido!!</div>
   21  
   22  
   ..
   34          <div class="col-md-2">
   35              <div class="panel panel-default">
   36:                 <div class="panel-heading">Banner</div>
   37  
   38                  <div class="panel-body">

/home/genis/Proyectos/ProyectoXat/resources/views/layouts/app.blade.php:
    1  <!DOCTYPE html>
    2  <html lang="{{ app()->getLocale() }}">
    3:     <head>
    4          <meta charset="utf-8">
    5          <meta http-equiv="X-UA-Compatible" content="IE=edge">
    .
   42          </style>
   43          
   44:         @yield('head')
   45  
   46  
   ..
   52              });
   53          </script>
   54:     </head>
   55  
   56      <body>
   ..
   59              <nav class="navbar navbar-default navbar-static-top">
   60                  <div class="container">
   61:                     <div class="navbar-header">
   62  
   63                          <!-- Collapsed Hamburger -->

/home/genis/Proyectos/ProyectoXat/resources/views/noticias/crearNoticias.blade.php:
   21        <div class="col-md-2">
   22              <div class="panel panel-default">
   23:                 <div id="divBanner" class="panel-heading"><b>Banner</b></div>
   24                      
   25                  <div class="panel-body">

/home/genis/Proyectos/ProyectoXat/resources/views/noticias/noticias.blade.php:
  115      <div class="col-md-2">
  116        <div class="panel panel-default">
  117:           <div id="divBanner" class="panel-heading"><b>Banner</b></div>
  118                
  119            <div class="panel-body">

/home/genis/Proyectos/ProyectoXat/resources/views/welcome.blade.php:
    1  <!doctype html>
    2  <html lang="{{ app()->getLocale() }}">
    3:     <head>
    4          <meta charset="utf-8">
    5          <meta http-equiv="X-UA-Compatible" content="IE=edge">
    .
   64              }
   65          </style>
   66:     </head>
   67      <body>
   68          <div class="flex-center position-ref full-height">

/home/genis/Proyectos/ProyectoXat/storage/framework/views/30cf986f04f0cbcd0998e910e56221d9b758cb23.php:
  116      <div class="col-md-2">
  117        <div class="panel panel-default">
  118:           <div id="divBanner" class="panel-heading"><b>Banner</b></div>
  119                
  120            <div class="panel-body">

/home/genis/Proyectos/ProyectoXat/storage/framework/views/42295ebe1154a274177d3fbd46e6092c706c4a70.php:
    4          <div class="col-md-8 col-md-offset-2">
    5              <div class="panel panel-default">
    6:                 <div class="panel-heading">Register</div>
    7  
    8                  <div class="panel-body">

/home/genis/Proyectos/ProyectoXat/storage/framework/views/459212688e968f68ad5e41c152327c1323258b61.php:
   26      <div class="col-md-2">
   27        <div class="panel panel-default">
   28:           <div id="divBanner" class="panel-heading"><b>Banner</b></div>
   29                
   30            <div class="panel-body">

/home/genis/Proyectos/ProyectoXat/storage/framework/views/4b5a6011127f728e6729fcc87402f03a2ae510bf.php:
    1  <!DOCTYPE html>
    2  <html lang="<?php echo e(app()->getLocale()); ?>">
    3:     <head>
    4          <meta charset="utf-8">
    5          <meta http-equiv="X-UA-Compatible" content="IE=edge">
    .
   42          </style>
   43          
   44:         <?php echo $__env->yieldContent('head'); ?>
   45  
   46  
   ..
   52              });
   53          </script>
   54:     </head>
   55  
   56      <body>
   ..
   59              <nav class="navbar navbar-default navbar-static-top">
   60                  <div class="container">
   61:                     <div class="navbar-header">
   62  
   63                          <!-- Collapsed Hamburger -->

/home/genis/Proyectos/ProyectoXat/storage/framework/views/56283394895f72a8ec0ff82a2aba4993ccef4b66.php:
   13              <div class="row">
   14                  <div class="panel panel-default">
   15:                     <div id="divChat" class="panel-heading cabeceraChat" style="background: blue; color: white; ">
   16                        <b>Chat</b><label style="float:right;" data-toggle="modal" data-target=".bd-example-modal-sm">+ Nueva Chat Room</label>
   17                      </div>
   ..
   20                        <div class="modal-dialog modal-sm">
   21                          <div class="modal-content">
   22:                           <div class="modal-header">
   23                              <h5 class="modal-title">CREA TU CHAT ROOM</h5>
   24                            </div>
   ..
   49        <div class="col-md-2">
   50              <div class="panel panel-default">
   51:                 <div id="divBanner" class="panel-heading"><b>Banner</b></div>
   52                      
   53                  <div class="panel-body">

/home/genis/Proyectos/ProyectoXat/storage/framework/views/8bff2d85621a7624580685e29caa1996cc6c6fa1.php:
    1  <!doctype html>
    2  <html lang="<?php echo e(app()->getLocale()); ?>">
    3:     <head>
    4          <meta charset="utf-8">
    5          <meta http-equiv="X-UA-Compatible" content="IE=edge">
    .
   64              }
   65          </style>
   66:     </head>
   67      <body>
   68          <div class="flex-center position-ref full-height">

/home/genis/Proyectos/ProyectoXat/storage/framework/views/95fdb9a3b9fba397def6b1bdeaa7690695799d2a.php:
    5          <div class="col-md-3">
    6              <div class="panel panel-default">
    7:                 <div class="panel-heading">Datos Usuario</div>
    8  
    9                  <div class="panel-body">
   ..
   16          <div class="col-md-7">
   17              <div class="panel panel-default">
   18:                 <div class="panel-heading">Bienvenido!!</div>
   19  
   20  
   ..
   33          <div class="col-md-2">
   34              <div class="panel panel-default">
   35:                 <div class="panel-heading">Banner</div>
   36  
   37                  <div class="panel-body">

/home/genis/Proyectos/ProyectoXat/storage/framework/views/b39f0ed9334780834a051b2c1388fccfcbd810d3.php:
    4          <div class="col-md-8 col-md-offset-2">
    5              <div class="panel panel-default">
    6:                 <div class="panel-heading">Login</div>
    7  
    8                  <div class="panel-body">

/home/genis/Proyectos/ProyectoXat/vendor/composer/autoload_classmap.php:
 2830      'Symfony\\Component\\Finder\\Iterator\\SortableIterator' => $vendorDir . '/symfony/finder/Iterator/SortableIterator.php',
 2831      'Symfony\\Component\\Finder\\SplFileInfo' => $vendorDir . '/symfony/finder/SplFileInfo.php',
 2832:     'Symfony\\Component\\HttpFoundation\\AcceptHeader' => $vendorDir . '/symfony/http-foundation/AcceptHeader.php',
 2833:     'Symfony\\Component\\HttpFoundation\\AcceptHeaderItem' => $vendorDir . '/symfony/http-foundation/AcceptHeaderItem.php',
 2834      'Symfony\\Component\\HttpFoundation\\ApacheRequest' => $vendorDir . '/symfony/http-foundation/ApacheRequest.php',
 2835      'Symfony\\Component\\HttpFoundation\\BinaryFileResponse' => $vendorDir . '/symfony/http-foundation/BinaryFileResponse.php',
 2836      'Symfony\\Component\\HttpFoundation\\Cookie' => $vendorDir . '/symfony/http-foundation/Cookie.php',
 2837:     'Symfony\\Component\\HttpFoundation\\Exception\\ConflictingHeadersException' => $vendorDir . '/symfony/http-foundation/Exception/ConflictingHeadersException.php',
 2838      'Symfony\\Component\\HttpFoundation\\Exception\\RequestExceptionInterface' => $vendorDir . '/symfony/http-foundation/Exception/RequestExceptionInterface.php',
 2839      'Symfony\\Component\\HttpFoundation\\Exception\\SuspiciousOperationException' => $vendorDir . '/symfony/http-foundation/Exception/SuspiciousOperationException.php',
 ....
 2855      'Symfony\\Component\\HttpFoundation\\File\\Stream' => $vendorDir . '/symfony/http-foundation/File/Stream.php',
 2856      'Symfony\\Component\\HttpFoundation\\File\\UploadedFile' => $vendorDir . '/symfony/http-foundation/File/UploadedFile.php',
 2857:     'Symfony\\Component\\HttpFoundation\\HeaderBag' => $vendorDir . '/symfony/http-foundation/HeaderBag.php',
 2858      'Symfony\\Component\\HttpFoundation\\IpUtils' => $vendorDir . '/symfony/http-foundation/IpUtils.php',
 2859      'Symfony\\Component\\HttpFoundation\\JsonResponse' => $vendorDir . '/symfony/http-foundation/JsonResponse.php',
 ....
 2865      'Symfony\\Component\\HttpFoundation\\RequestStack' => $vendorDir . '/symfony/http-foundation/RequestStack.php',
 2866      'Symfony\\Component\\HttpFoundation\\Response' => $vendorDir . '/symfony/http-foundation/Response.php',
 2867:     'Symfony\\Component\\HttpFoundation\\ResponseHeaderBag' => $vendorDir . '/symfony/http-foundation/ResponseHeaderBag.php',
 2868      'Symfony\\Component\\HttpFoundation\\ServerBag' => $vendorDir . '/symfony/http-foundation/ServerBag.php',
 2869      'Symfony\\Component\\HttpFoundation\\Session\\Attribute\\AttributeBag' => $vendorDir . '/symfony/http-foundation/Session/Attribute/AttributeBag.php',

/home/genis/Proyectos/ProyectoXat/vendor/composer/autoload_static.php:
 3135          'Symfony\\Component\\Finder\\Iterator\\SortableIterator' => __DIR__ . '/..' . '/symfony/finder/Iterator/SortableIterator.php',
 3136          'Symfony\\Component\\Finder\\SplFileInfo' => __DIR__ . '/..' . '/symfony/finder/SplFileInfo.php',
 3137:         'Symfony\\Component\\HttpFoundation\\AcceptHeader' => __DIR__ . '/..' . '/symfony/http-foundation/AcceptHeader.php',
 3138:         'Symfony\\Component\\HttpFoundation\\AcceptHeaderItem' => __DIR__ . '/..' . '/symfony/http-foundation/AcceptHeaderItem.php',
 3139          'Symfony\\Component\\HttpFoundation\\ApacheRequest' => __DIR__ . '/..' . '/symfony/http-foundation/ApacheRequest.php',
 3140          'Symfony\\Component\\HttpFoundation\\BinaryFileResponse' => __DIR__ . '/..' . '/symfony/http-foundation/BinaryFileResponse.php',
 3141          'Symfony\\Component\\HttpFoundation\\Cookie' => __DIR__ . '/..' . '/symfony/http-foundation/Cookie.php',
 3142:         'Symfony\\Component\\HttpFoundation\\Exception\\ConflictingHeadersException' => __DIR__ . '/..' . '/symfony/http-foundation/Exception/ConflictingHeadersException.php',
 3143          'Symfony\\Component\\HttpFoundation\\Exception\\RequestExceptionInterface' => __DIR__ . '/..' . '/symfony/http-foundation/Exception/RequestExceptionInterface.php',
 3144          'Symfony\\Component\\HttpFoundation\\Exception\\SuspiciousOperationException' => __DIR__ . '/..' . '/symfony/http-foundation/Exception/SuspiciousOperationException.php',
 ....
 3160          'Symfony\\Component\\HttpFoundation\\File\\Stream' => __DIR__ . '/..' . '/symfony/http-foundation/File/Stream.php',
 3161          'Symfony\\Component\\HttpFoundation\\File\\UploadedFile' => __DIR__ . '/..' . '/symfony/http-foundation/File/UploadedFile.php',
 3162:         'Symfony\\Component\\HttpFoundation\\HeaderBag' => __DIR__ . '/..' . '/symfony/http-foundation/HeaderBag.php',
 3163          'Symfony\\Component\\HttpFoundation\\IpUtils' => __DIR__ . '/..' . '/symfony/http-foundation/IpUtils.php',
 3164          'Symfony\\Component\\HttpFoundation\\JsonResponse' => __DIR__ . '/..' . '/symfony/http-foundation/JsonResponse.php',
 ....
 3170          'Symfony\\Component\\HttpFoundation\\RequestStack' => __DIR__ . '/..' . '/symfony/http-foundation/RequestStack.php',
 3171          'Symfony\\Component\\HttpFoundation\\Response' => __DIR__ . '/..' . '/symfony/http-foundation/Response.php',
 3172:         'Symfony\\Component\\HttpFoundation\\ResponseHeaderBag' => __DIR__ . '/..' . '/symfony/http-foundation/ResponseHeaderBag.php',
 3173          'Symfony\\Component\\HttpFoundation\\ServerBag' => __DIR__ . '/..' . '/symfony/http-foundation/ServerBag.php',
 3174          'Symfony\\Component\\HttpFoundation\\Session\\Attribute\\AttributeBag' => __DIR__ . '/..' . '/symfony/http-foundation/Session/Attribute/AttributeBag.php',

/home/genis/Proyectos/ProyectoXat/vendor/doctrine/inflector/lib/Doctrine/Common/Inflector/Inflector.php:
  225          'debris', 'diabetes', 'djinn', 'eland', 'elk', 'equipment', 'Faroese', 'flounder',
  226          'Foochowese', 'Furniture', 'gallows', 'Genevese', 'Genoese', 'Gilbertese', 'graffiti',
  227:         'headquarters', 'herpes', 'hijinks', 'Hottentotese', 'information', 'innings',
  228          'jackanapes', 'Kiplingese', 'Kongoese', 'Lucchese', 'Luggage', 'mackerel', 'Maltese', '.*?media',
  229          'mews', 'moose', 'mumps', 'Nankingese', 'news', 'nexus', 'Niasese',

/home/genis/Proyectos/ProyectoXat/vendor/doctrine/lexer/lib/Doctrine/Common/Lexer/AbstractLexer.php:
   69       * @var array
   70       */
   71:     public $lookahead;
   72  
   73      /**
   ..
  104      public function reset()
  105      {
  106:         $this->lookahead = null;
  107          $this->token = null;
  108          $this->peek = 0;
  ...
  145  
  146      /**
  147:      * Checks whether a given token matches the current lookahead.
  148       *
  149       * @param integer|string $token
  ...
  153      public function isNextToken($token)
  154      {
  155:         return null !== $this->lookahead && $this->lookahead['type'] === $token;
  156      }
  157  
  158      /**
  159:      * Checks whether any of the given tokens matches the current lookahead.
  160       *
  161       * @param array $tokens
  ...
  165      public function isNextTokenAny(array $tokens)
  166      {
  167:         return null !== $this->lookahead && in_array($this->lookahead['type'], $tokens, true);
  168      }
  169  
  ...
  176      {
  177          $this->peek = 0;
  178:         $this->token = $this->lookahead;
  179:         $this->lookahead = (isset($this->tokens[$this->position]))
  180              ? $this->tokens[$this->position++] : null;
  181  
  182:         return $this->lookahead !== null;
  183      }
  184  
  ...
  192      public function skipUntil($type)
  193      {
  194:         while ($this->lookahead !== null && $this->lookahead['type'] !== $type) {
  195              $this->moveNext();
  196          }
  ...
  211  
  212      /**
  213:      * Moves the lookahead token forward.
  214       *
  215:      * @return array|null The next token or NULL if there are no more tokens ahead.
  216       */
  217      public function peek()
  ...
  227       * Peeks at the next token, returns it and immediately resets the peek.
  228       *
  229:      * @return array|null The next token or NULL if there are no more tokens ahead.
  230       */
  231      public function glimpse()

/home/genis/Proyectos/ProyectoXat/vendor/egulias/email-validator/EmailValidator/EmailLexer.php:
   99          $search->skipUntil($type);
  100  
  101:         if (!$search->lookahead) {
  102              throw new \UnexpectedValueException($type . ' not found');
  103          }

/home/genis/Proyectos/ProyectoXat/vendor/erusev/parsedown/Parsedown.php:
   81  
   82      protected $BlockTypes = array(
   83:         '#' => array('Header'),
   84          '*' => array('Rule', 'List'),
   85          '+' => array('List'),
   86:         '-' => array('SetextHeader', 'Table', 'Rule', 'List'),
   87          '0' => array('List'),
   88          '1' => array('List'),
   ..
   97          ':' => array('Table'),
   98          '<' => array('Comment', 'Markup'),
   99:         '=' => array('SetextHeader'),
  100          '>' => array('Quote'),
  101          '[' => array('Reference'),
  ...
  466  
  467      #
  468:     # Header
  469  
  470:     protected function blockHeader($Line)
  471      {
  472          if (isset($Line['text'][1]))
  ...
  659      # Setext
  660  
  661:     protected function blockSetextHeader($Line, array $Block = null)
  662      {
  663          if ( ! isset($Block) or isset($Block['type']) or isset($Block['interrupted']))
  ...
  841              # ~
  842  
  843:             $HeaderElements = array();
  844  
  845:             $header = $Block['element']['text'];
  846  
  847:             $header = trim($header);
  848:             $header = trim($header, '|');
  849  
  850:             $headerCells = explode('|', $header);
  851  
  852:             foreach ($headerCells as $index => $headerCell)
  853              {
  854:                 $headerCell = trim($headerCell);
  855  
  856:                 $HeaderElement = array(
  857                      'name' => 'th',
  858:                     'text' => $headerCell,
  859                      'handler' => 'line',
  860                  );
  ...
  864                      $alignment = $alignments[$index];
  865  
  866:                     $HeaderElement['attributes'] = array(
  867                          'style' => 'text-align: '.$alignment.';',
  868                      );
  869                  }
  870  
  871:                 $HeaderElements []= $HeaderElement;
  872              }
  873  
  ...
  884  
  885              $Block['element']['text'] []= array(
  886:                 'name' => 'thead',
  887                  'handler' => 'elements',
  888              );
  ...
  897                  'name' => 'tr',
  898                  'handler' => 'elements',
  899:                 'text' => $HeaderElements,
  900              );
  901  

/home/genis/Proyectos/ProyectoXat/vendor/fideloper/proxy/config/trustedproxy.php:
   42  
   43      /*
   44:      * Default Header Names
   45       *
   46       * Change these if the proxy does
   47:      * not send the default header names.
   48       *
   49:      * Note that headers such as X-Forwarded-For
   50       * are transformed to HTTP_X_FORWARDED_FOR format.
   51       *
   52       * The following are Symfony defaults, found in
   53:      * \Symfony\Component\HttpFoundation\Request::$trustedHeaders
   54       *
   55:      * You may optionally set headers to 'null' here if you'd like
   56       * for them to be considered untrusted instead. Ex:
   57       *
   58:      * Illuminate\Http\Request::HEADER_CLIENT_HOST  => null,
   59       * 
   60       * WARNING: If you're using AWS Elastic Load Balancing or Heroku,
   61:      * the FORWARDED and X_FORWARDED_HOST headers should be set to null 
   62       * as they are currently unsupported there.
   63       */
   64:     'headers' => [
   65:         (defined('Illuminate\Http\Request::HEADER_FORWARDED') ? Illuminate\Http\Request::HEADER_FORWARDED : 'forwarded') => 'FORWARDED',
   66:         Illuminate\Http\Request::HEADER_CLIENT_IP    => 'X_FORWARDED_FOR',
   67:         Illuminate\Http\Request::HEADER_CLIENT_HOST  => 'X_FORWARDED_HOST',
   68:         Illuminate\Http\Request::HEADER_CLIENT_PROTO => 'X_FORWARDED_PROTO',
   69:         Illuminate\Http\Request::HEADER_CLIENT_PORT  => 'X_FORWARDED_PORT',
   70      ]
   71  ];

/home/genis/Proyectos/ProyectoXat/vendor/fideloper/proxy/src/TrustProxies.php:
   23  
   24      /**
   25:      * The proxy header mappings.
   26       *
   27       * @var array
   28       */
   29:     protected $headers;
   30  
   31      /**
   ..
   51      public function handle($request, Closure $next)
   52      {
   53:         $this->setTrustedProxyHeaderNames($request);
   54          $this->setTrustedProxyIpAddresses($request);
   55  
   ..
   82          // We trust all proxies. Those that call us, and those that are
   83          // further up the calling chain (e.g., where the X-FORWARDED-FOR
   84:         // header has multiple IP addresses listed);
   85          if ($trustedIps === '**') {
   86              return $this->setTrustedProxyIpAddressesToAllIps($request);
   ..
   96      private function setTrustedProxyIpAddressesToSpecificIps($request, $trustedIps)
   97      {
   98:         $request->setTrustedProxies((array) $trustedIps, $this->getTrustedHeaderSet());
   99      }
  100  
  ...
  106      private function setTrustedProxyIpAddressesToTheCallingIp($request)
  107      {
  108:         $request->setTrustedProxies($request->getClientIps(), $this->getTrustedHeaderSet());
  109      }
  110  
  ...
  119          // 2000:0:0:0:0:0:0:0/3 is the CIDR for all ipv6 addresses currently
  120          // allocated http://www.iana.org/assignments/ipv6-unicast-address-assignments/ipv6-unicast-address-assignments.xhtml
  121:         $request->setTrustedProxies(['0.0.0.0/0', '2000:0:0:0:0:0:0:0/3'], $this->getTrustedHeaderSet());
  122      }
  123  
  124      /**
  125:      * Set the trusted header names based on the content of trustedproxy.headers.
  126       *
  127       * Note: Depreciated in Symfony 3.3+, but available for backwards compatibility.
  ...
  131       * @param \Illuminate\Http\Request $request
  132       */
  133:     protected function setTrustedProxyHeaderNames($request)
  134      {
  135:         $trustedHeaderNames = $this->getTrustedHeaderNames();
  136  
  137:         if(!is_array($trustedHeaderNames)) { return; } // Leave the defaults
  138  
  139:         foreach ($trustedHeaderNames as $headerKey => $headerName) {
  140:             $request->setTrustedHeaderName($headerKey, $headerName);
  141          }
  142      }
  143  
  144      /**
  145:      * Retrieve trusted header names, falling back to defaults if config not set.
  146       *
  147       * @return array
  148       */
  149:     protected function getTrustedHeaderNames()
  150      {
  151:         return $this->headers ?: $this->config->get('trustedproxy.headers');
  152      }
  153  
  154      /**
  155:      * Construct bit field integer of the header set that setTrustedProxies() expects.
  156       *
  157       * @return int
  158       */
  159:     protected function getTrustedHeaderSet()
  160      {
  161:         $trustedHeaderNames = $this->getTrustedHeaderNames();
  162:         $headerKeys = array_keys($this->getTrustedHeaderNames());
  163  
  164:         return array_reduce($headerKeys, function ($set, $key) use ($trustedHeaderNames) {
  165              // PHP 7+ gives a warning if non-numeric value is used
  166              // resulting in a thrown ErrorException within Laravel
  ...
  170              }
  171  
  172:             // If the header value is null, it is a distrusted header,
  173              // so we will ignore it and move on.
  174:             if (is_null($trustedHeaderNames[$key])) {
  175                  return $set;
  176              }

/home/genis/Proyectos/ProyectoXat/vendor/filp/whoops/src/Whoops/Handler/PrettyPageHandler.php:
  193  
  194              // Template paths:
  195:             "header"                     => $this->getResource("views/header.html.php"),
  196:             "header_outer"               => $this->getResource("views/header_outer.html.php"),
  197              "frame_list"                 => $this->getResource("views/frame_list.html.php"),
  198              "frames_description"         => $this->getResource("views/frames_description.html.php"),

/home/genis/Proyectos/ProyectoXat/vendor/filp/whoops/src/Whoops/Resources/css/whoops.base.css:
   34    }
   35  
   36: header {
   37    color: white;
   38    box-sizing: border-box;
   ..
   44  }
   45  
   46:   header.header-expand {
   47      max-height: 1000px;
   48    }
   ..
   80    }
   81  
   82:     .details-heading {
   83        color: #4288CE;
   84        font-weight: 300;
   ..
  308    }
  309  
  310:   .data-table thead {
  311      display: none;
  312    }

/home/genis/Proyectos/ProyectoXat/vendor/filp/whoops/src/Whoops/Resources/js/whoops.base.js:
    8    var $activeFrame    = $container.find('.frame-code.active');
    9    var $ajaxEditors    = $('.editor-link[data-ajax]');
   10:   var $header         = $('header');
   11  
   12:   $header.on('mouseenter', function () {
   13:     if ($header.find('.exception').height() >= 145) {
   14:       $header.addClass('header-expand');
   15      }
   16    });
   17:   $header.on('mouseleave', function () {
   18:     $header.removeClass('header-expand');
   19    });
   20  

/home/genis/Proyectos/ProyectoXat/vendor/filp/whoops/src/Whoops/Resources/js/zepto.min.js:
    1  /* Zepto v1.1.3 - zepto event ajax form ie - zeptojs.com/license */
    2: var Zepto=function(){function L(t){return null==t?String(t):j[T.call(t)]||"object"}function Z(t){return"function"==L(t)}function $(t){return null!=t&&t==t.window}function _(t){return null!=t&&t.nodeType==t.DOCUMENT_NODE}function D(t){return"object"==L(t)}function R(t){return D(t)&&!$(t)&&Object.getPrototypeOf(t)==Object.prototype}function M(t){return"number"==typeof t.length}function k(t){return s.call(t,function(t){return null!=t})}function z(t){return t.length>0?n.fn.concat.apply([],t):t}function F(t){return t.replace(/::/g,"/").replace(/([A-Z]+)([A-Z][a-z])/g,"$1_$2").replace(/([a-z\d])([A-Z])/g,"$1_$2").replace(/_/g,"-").toLowerCase()}function q(t){return t in f?f[t]:f[t]=new RegExp("(^|\\s)"+t+"(\\s|$)")}function H(t,e){return"number"!=typeof e||c[F(t)]?e:e+"px"}function I(t){var e,n;return u[t]||(e=a.createElement(t),a.body.appendChild(e),n=getComputedStyle(e,"").getPropertyValue("display"),e.parentNode.removeChild(e),"none"==n&&(n="block"),u[t]=n),u[t]}function V(t){return"children"in t?o.call(t.children):n.map(t.childNodes,function(t){return 1==t.nodeType?t:void 0})}function U(n,i,r){for(e in i)r&&(R(i[e])||A(i[e]))?(R(i[e])&&!R(n[e])&&(n[e]={}),A(i[e])&&!A(n[e])&&(n[e]=[]),U(n[e],i[e],r)):i[e]!==t&&(n[e]=i[e])}function B(t,e){return null==e?n(t):n(t).filter(e)}function J(t,e,n,i){return Z(e)?e.call(t,n,i):e}function X(t,e,n){null==n?t.removeAttribute(e):t.setAttribute(e,n)}function W(e,n){var i=e.className,r=i&&i.baseVal!==t;return n===t?r?i.baseVal:i:void(r?i.baseVal=n:e.className=n)}function Y(t){var e;try{return t?"true"==t||("false"==t?!1:"null"==t?null:/^0/.test(t)||isNaN(e=Number(t))?/^[\[\{]/.test(t)?n.parseJSON(t):t:e):t}catch(i){return t}}function G(t,e){e(t);for(var n in t.childNodes)G(t.childNodes[n],e)}var t,e,n,i,C,N,r=[],o=r.slice,s=r.filter,a=window.document,u={},f={},c={"column-count":1,columns:1,"font-weight":1,"line-height":1,opacity:1,"z-index":1,zoom:1},l=/^\s*<(\w+|!)[^>]*>/,h=/^<(\w+)\s*\/?>(?:<\/\1>|)$/,p=/<(?!area|br|col|embed|hr|img|input|link|meta|param)(([\w:]+)[^>]*)\/>/gi,d=/^(?:body|html)$/i,m=/([A-Z])/g,g=["val","css","html","text","data","width","height","offset"],v=["after","prepend","before","append"],y=a.createElement("table"),x=a.createElement("tr"),b={tr:a.createElement("tbody"),tbody:y,thead:y,tfoot:y,td:x,th:x,"*":a.createElement("div")},w=/complete|loaded|interactive/,E=/^[\w-]*$/,j={},T=j.toString,S={},O=a.createElement("div"),P={tabindex:"tabIndex",readonly:"readOnly","for":"htmlFor","class":"className",maxlength:"maxLength",cellspacing:"cellSpacing",cellpadding:"cellPadding",rowspan:"rowSpan",colspan:"colSpan",usemap:"useMap",frameborder:"frameBorder",contenteditable:"contentEditable"},A=Array.isArray||function(t){return t instanceof Array};return S.matches=function(t,e){if(!e||!t||1!==t.nodeType)return!1;var n=t.webkitMatchesSelector||t.mozMatchesSelector||t.oMatchesSelector||t.matchesSelector;if(n)return n.call(t,e);var i,r=t.parentNode,o=!r;return o&&(r=O).appendChild(t),i=~S.qsa(r,e).indexOf(t),o&&O.removeChild(t),i},C=function(t){return t.replace(/-+(.)?/g,function(t,e){return e?e.toUpperCase():""})},N=function(t){return s.call(t,function(e,n){return t.indexOf(e)==n})},S.fragment=function(e,i,r){var s,u,f;return h.test(e)&&(s=n(a.createElement(RegExp.$1))),s||(e.replace&&(e=e.replace(p,"<$1></$2>")),i===t&&(i=l.test(e)&&RegExp.$1),i in b||(i="*"),f=b[i],f.innerHTML=""+e,s=n.each(o.call(f.childNodes),function(){f.removeChild(this)})),R(r)&&(u=n(s),n.each(r,function(t,e){g.indexOf(t)>-1?u[t](e):u.attr(t,e)})),s},S.Z=function(t,e){return t=t||[],t.__proto__=n.fn,t.selector=e||"",t},S.isZ=function(t){return t instanceof S.Z},S.init=function(e,i){var r;if(!e)return S.Z();if("string"==typeof e)if(e=e.trim(),"<"==e[0]&&l.test(e))r=S.fragment(e,RegExp.$1,i),e=null;else{if(i!==t)return n(i).find(e);r=S.qsa(a,e)}else{if(Z(e))return n(a).ready(e);if(S.isZ(e))return e;if(A(e))r=k(e);else if(D(e))r=[e],e=null;else if(l.test(e))r=S.fragment(e.trim(),RegExp.$1,i),e=null;else{if(i!==t)return n(i).find(e);r=S.qsa(a,e)}}return S.Z(r,e)},n=function(t,e){return S.init(t,e)},n.extend=function(t){var e,n=o.call(arguments,1);return"boolean"==typeof t&&(e=t,t=n.shift()),n.forEach(function(n){U(t,n,e)}),t},S.qsa=function(t,e){var n,i="#"==e[0],r=!i&&"."==e[0],s=i||r?e.slice(1):e,a=E.test(s);return _(t)&&a&&i?(n=t.getElementById(s))?[n]:[]:1!==t.nodeType&&9!==t.nodeType?[]:o.call(a&&!i?r?t.getElementsByClassName(s):t.getElementsByTagName(e):t.querySelectorAll(e))},n.contains=function(t,e){return t!==e&&t.contains(e)},n.type=L,n.isFunction=Z,n.isWindow=$,n.isArray=A,n.isPlainObject=R,n.isEmptyObject=function(t){var e;for(e in t)return!1;return!0},n.inArray=function(t,e,n){return r.indexOf.call(e,t,n)},n.camelCase=C,n.trim=function(t){return null==t?"":String.prototype.trim.call(t)},n.uuid=0,n.support={},n.expr={},n.map=function(t,e){var n,r,o,i=[];if(M(t))for(r=0;r<t.length;r++)n=e(t[r],r),null!=n&&i.push(n);else for(o in t)n=e(t[o],o),null!=n&&i.push(n);return z(i)},n.each=function(t,e){var n,i;if(M(t)){for(n=0;n<t.length;n++)if(e.call(t[n],n,t[n])===!1)return t}else for(i in t)if(e.call(t[i],i,t[i])===!1)return t;return t},n.grep=function(t,e){return s.call(t,e)},window.JSON&&(n.parseJSON=JSON.parse),n.each("Boolean Number String Function Array Date RegExp Object Error".split(" "),function(t,e){j["[object "+e+"]"]=e.toLowerCase()}),n.fn={forEach:r.forEach,reduce:r.reduce,push:r.push,sort:r.sort,indexOf:r.indexOf,concat:r.concat,map:function(t){return n(n.map(this,function(e,n){return t.call(e,n,e)}))},slice:function(){return n(o.apply(this,arguments))},ready:function(t){return w.test(a.readyState)&&a.body?t(n):a.addEventListener("DOMContentLoaded",function(){t(n)},!1),this},get:function(e){return e===t?o.call(this):this[e>=0?e:e+this.length]},toArray:function(){return this.get()},size:function(){return this.length},remove:function(){return this.each(function(){null!=this.parentNode&&this.parentNode.removeChild(this)})},each:function(t){return r.every.call(this,function(e,n){return t.call(e,n,e)!==!1}),this},filter:function(t){return Z(t)?this.not(this.not(t)):n(s.call(this,function(e){return S.matches(e,t)}))},add:function(t,e){return n(N(this.concat(n(t,e))))},is:function(t){return this.length>0&&S.matches(this[0],t)},not:function(e){var i=[];if(Z(e)&&e.call!==t)this.each(function(t){e.call(this,t)||i.push(this)});else{var r="string"==typeof e?this.filter(e):M(e)&&Z(e.item)?o.call(e):n(e);this.forEach(function(t){r.indexOf(t)<0&&i.push(t)})}return n(i)},has:function(t){return this.filter(function(){return D(t)?n.contains(this,t):n(this).find(t).size()})},eq:function(t){return-1===t?this.slice(t):this.slice(t,+t+1)},first:function(){var t=this[0];return t&&!D(t)?t:n(t)},last:function(){var t=this[this.length-1];return t&&!D(t)?t:n(t)},find:function(t){var e,i=this;return e="object"==typeof t?n(t).filter(function(){var t=this;return r.some.call(i,function(e){return n.contains(e,t)})}):1==this.length?n(S.qsa(this[0],t)):this.map(function(){return S.qsa(this,t)})},closest:function(t,e){var i=this[0],r=!1;for("object"==typeof t&&(r=n(t));i&&!(r?r.indexOf(i)>=0:S.matches(i,t));)i=i!==e&&!_(i)&&i.parentNode;return n(i)},parents:function(t){for(var e=[],i=this;i.length>0;)i=n.map(i,function(t){return(t=t.parentNode)&&!_(t)&&e.indexOf(t)<0?(e.push(t),t):void 0});return B(e,t)},parent:function(t){return B(N(this.pluck("parentNode")),t)},children:function(t){return B(this.map(function(){return V(this)}),t)},contents:function(){return this.map(function(){return o.call(this.childNodes)})},siblings:function(t){return B(this.map(function(t,e){return s.call(V(e.parentNode),function(t){return t!==e})}),t)},empty:function(){return this.each(function(){this.innerHTML=""})},pluck:function(t){return n.map(this,function(e){return e[t]})},show:function(){return this.each(function(){"none"==this.style.display&&(this.style.display=""),"none"==getComputedStyle(this,"").getPropertyValue("display")&&(this.style.display=I(this.nodeName))})},replaceWith:function(t){return this.before(t).remove()},wrap:function(t){var e=Z(t);if(this[0]&&!e)var i=n(t).get(0),r=i.parentNode||this.length>1;return this.each(function(o){n(this).wrapAll(e?t.call(this,o):r?i.cloneNode(!0):i)})},wrapAll:function(t){if(this[0]){n(this[0]).before(t=n(t));for(var e;(e=t.children()).length;)t=e.first();n(t).append(this)}return this},wrapInner:function(t){var e=Z(t);return this.each(function(i){var r=n(this),o=r.contents(),s=e?t.call(this,i):t;o.length?o.wrapAll(s):r.append(s)})},unwrap:function(){return this.parent().each(function(){n(this).replaceWith(n(this).children())}),this},clone:function(){return this.map(function(){return this.cloneNode(!0)})},hide:function(){return this.css("display","none")},toggle:function(e){return this.each(function(){var i=n(this);(e===t?"none"==i.css("display"):e)?i.show():i.hide()})},prev:function(t){return n(this.pluck("previousElementSibling")).filter(t||"*")},next:function(t){return n(this.pluck("nextElementSibling")).filter(t||"*")},html:function(t){return 0===arguments.length?this.length>0?this[0].innerHTML:null:this.each(function(e){var i=this.innerHTML;n(this).empty().append(J(this,t,e,i))})},text:function(e){return 0===arguments.length?this.length>0?this[0].textContent:null:this.each(function(){this.textContent=e===t?"":""+e})},attr:function(n,i){var r;return"string"==typeof n&&i===t?0==this.length||1!==this[0].nodeType?t:"value"==n&&"INPUT"==this[0].nodeName?this.val():!(r=this[0].getAttribute(n))&&n in this[0]?this[0][n]:r:this.each(function(t){if(1===this.nodeType)if(D(n))for(e in n)X(this,e,n[e]);else X(this,n,J(this,i,t,this.getAttribute(n)))})},removeAttr:function(t){return this.each(function(){1===this.nodeType&&X(this,t)})},prop:function(e,n){return e=P[e]||e,n===t?this[0]&&this[0][e]:this.each(function(t){this[e]=J(this,n,t,this[e])})},data:function(e,n){var i=this.attr("data-"+e.replace(m,"-$1").toLowerCase(),n);return null!==i?Y(i):t},val:function(t){return 0===arguments.length?this[0]&&(this[0].multiple?n(this[0]).find("option").filter(function(){return this.selected}).pluck("value"):this[0].value):this.each(function(e){this.value=J(this,t,e,this.value)})},offset:function(t){if(t)return this.each(function(e){var i=n(this),r=J(this,t,e,i.offset()),o=i.offsetParent().offset(),s={top:r.top-o.top,left:r.left-o.left};"static"==i.css("position")&&(s.position="relative"),i.css(s)});if(0==this.length)return null;var e=this[0].getBoundingClientRect();return{left:e.left+window.pageXOffset,top:e.top+window.pageYOffset,width:Math.round(e.width),height:Math.round(e.height)}},css:function(t,i){if(arguments.length<2){var r=this[0],o=getComputedStyle(r,"");if(!r)return;if("string"==typeof t)return r.style[C(t)]||o.getPropertyValue(t);if(A(t)){var s={};return n.each(A(t)?t:[t],function(t,e){s[e]=r.style[C(e)]||o.getPropertyValue(e)}),s}}var a="";if("string"==L(t))i||0===i?a=F(t)+":"+H(t,i):this.each(function(){this.style.removeProperty(F(t))});else for(e in t)t[e]||0===t[e]?a+=F(e)+":"+H(e,t[e])+";":this.each(function(){this.style.removeProperty(F(e))});return this.each(function(){this.style.cssText+=";"+a})},index:function(t){return t?this.indexOf(n(t)[0]):this.parent().children().indexOf(this[0])},hasClass:function(t){return t?r.some.call(this,function(t){return this.test(W(t))},q(t)):!1},addClass:function(t){return t?this.each(function(e){i=[];var r=W(this),o=J(this,t,e,r);o.split(/\s+/g).forEach(function(t){n(this).hasClass(t)||i.push(t)},this),i.length&&W(this,r+(r?" ":"")+i.join(" "))}):this},removeClass:function(e){return this.each(function(n){return e===t?W(this,""):(i=W(this),J(this,e,n,i).split(/\s+/g).forEach(function(t){i=i.replace(q(t)," ")}),void W(this,i.trim()))})},toggleClass:function(e,i){return e?this.each(function(r){var o=n(this),s=J(this,e,r,W(this));s.split(/\s+/g).forEach(function(e){(i===t?!o.hasClass(e):i)?o.addClass(e):o.removeClass(e)})}):this},scrollTop:function(e){if(this.length){var n="scrollTop"in this[0];return e===t?n?this[0].scrollTop:this[0].pageYOffset:this.each(n?function(){this.scrollTop=e}:function(){this.scrollTo(this.scrollX,e)})}},scrollLeft:function(e){if(this.length){var n="scrollLeft"in this[0];return e===t?n?this[0].scrollLeft:this[0].pageXOffset:this.each(n?function(){this.scrollLeft=e}:function(){this.scrollTo(e,this.scrollY)})}},position:function(){if(this.length){var t=this[0],e=this.offsetParent(),i=this.offset(),r=d.test(e[0].nodeName)?{top:0,left:0}:e.offset();return i.top-=parseFloat(n(t).css("margin-top"))||0,i.left-=parseFloat(n(t).css("margin-left"))||0,r.top+=parseFloat(n(e[0]).css("border-top-width"))||0,r.left+=parseFloat(n(e[0]).css("border-left-width"))||0,{top:i.top-r.top,left:i.left-r.left}}},offsetParent:function(){return this.map(function(){for(var t=this.offsetParent||a.body;t&&!d.test(t.nodeName)&&"static"==n(t).css("position");)t=t.offsetParent;return t})}},n.fn.detach=n.fn.remove,["width","height"].forEach(function(e){var i=e.replace(/./,function(t){return t[0].toUpperCase()});n.fn[e]=function(r){var o,s=this[0];return r===t?$(s)?s["inner"+i]:_(s)?s.documentElement["scroll"+i]:(o=this.offset())&&o[e]:this.each(function(t){s=n(this),s.css(e,J(this,r,t,s[e]()))})}}),v.forEach(function(t,e){var i=e%2;n.fn[t]=function(){var t,o,r=n.map(arguments,function(e){return t=L(e),"object"==t||"array"==t||null==e?e:S.fragment(e)}),s=this.length>1;return r.length<1?this:this.each(function(t,a){o=i?a:a.parentNode,a=0==e?a.nextSibling:1==e?a.firstChild:2==e?a:null,r.forEach(function(t){if(s)t=t.cloneNode(!0);else if(!o)return n(t).remove();G(o.insertBefore(t,a),function(t){null==t.nodeName||"SCRIPT"!==t.nodeName.toUpperCase()||t.type&&"text/javascript"!==t.type||t.src||window.eval.call(window,t.innerHTML)})})})},n.fn[i?t+"To":"insert"+(e?"Before":"After")]=function(e){return n(e)[t](this),this}}),S.Z.prototype=n.fn,S.uniq=N,S.deserializeValue=Y,n.zepto=S,n}();window.Zepto=Zepto,void 0===window.$&&(window.$=Zepto),function(t){function l(t){return t._zid||(t._zid=e++)}function h(t,e,n,i){if(e=p(e),e.ns)var r=d(e.ns);return(s[l(t)]||[]).filter(function(t){return!(!t||e.e&&t.e!=e.e||e.ns&&!r.test(t.ns)||n&&l(t.fn)!==l(n)||i&&t.sel!=i)})}function p(t){var e=(""+t).split(".");return{e:e[0],ns:e.slice(1).sort().join(" ")}}function d(t){return new RegExp("(?:^| )"+t.replace(" "," .* ?")+"(?: |$)")}function m(t,e){return t.del&&!u&&t.e in f||!!e}function g(t){return c[t]||u&&f[t]||t}function v(e,i,r,o,a,u,f){var h=l(e),d=s[h]||(s[h]=[]);i.split(/\s/).forEach(function(i){if("ready"==i)return t(document).ready(r);var s=p(i);s.fn=r,s.sel=a,s.e in c&&(r=function(e){var n=e.relatedTarget;return!n||n!==this&&!t.contains(this,n)?s.fn.apply(this,arguments):void 0}),s.del=u;var l=u||r;s.proxy=function(t){if(t=j(t),!t.isImmediatePropagationStopped()){t.data=o;var i=l.apply(e,t._args==n?[t]:[t].concat(t._args));return i===!1&&(t.preventDefault(),t.stopPropagation()),i}},s.i=d.length,d.push(s),"addEventListener"in e&&e.addEventListener(g(s.e),s.proxy,m(s,f))})}function y(t,e,n,i,r){var o=l(t);(e||"").split(/\s/).forEach(function(e){h(t,e,n,i).forEach(function(e){delete s[o][e.i],"removeEventListener"in t&&t.removeEventListener(g(e.e),e.proxy,m(e,r))})})}function j(e,i){return(i||!e.isDefaultPrevented)&&(i||(i=e),t.each(E,function(t,n){var r=i[t];e[t]=function(){return this[n]=x,r&&r.apply(i,arguments)},e[n]=b}),(i.defaultPrevented!==n?i.defaultPrevented:"returnValue"in i?i.returnValue===!1:i.getPreventDefault&&i.getPreventDefault())&&(e.isDefaultPrevented=x)),e}function T(t){var e,i={originalEvent:t};for(e in t)w.test(e)||t[e]===n||(i[e]=t[e]);return j(i,t)}var n,e=1,i=Array.prototype.slice,r=t.isFunction,o=function(t){return"string"==typeof t},s={},a={},u="onfocusin"in window,f={focus:"focusin",blur:"focusout"},c={mouseenter:"mouseover",mouseleave:"mouseout"};a.click=a.mousedown=a.mouseup=a.mousemove="MouseEvents",t.event={add:v,remove:y},t.proxy=function(e,n){if(r(e)){var i=function(){return e.apply(n,arguments)};return i._zid=l(e),i}if(o(n))return t.proxy(e[n],e);throw new TypeError("expected function")},t.fn.bind=function(t,e,n){return this.on(t,e,n)},t.fn.unbind=function(t,e){return this.off(t,e)},t.fn.one=function(t,e,n,i){return this.on(t,e,n,i,1)};var x=function(){return!0},b=function(){return!1},w=/^([A-Z]|returnValue$|layer[XY]$)/,E={preventDefault:"isDefaultPrevented",stopImmediatePropagation:"isImmediatePropagationStopped",stopPropagation:"isPropagationStopped"};t.fn.delegate=function(t,e,n){return this.on(e,t,n)},t.fn.undelegate=function(t,e,n){return this.off(e,t,n)},t.fn.live=function(e,n){return t(document.body).delegate(this.selector,e,n),this},t.fn.die=function(e,n){return t(document.body).undelegate(this.selector,e,n),this},t.fn.on=function(e,s,a,u,f){var c,l,h=this;return e&&!o(e)?(t.each(e,function(t,e){h.on(t,s,a,e,f)}),h):(o(s)||r(u)||u===!1||(u=a,a=s,s=n),(r(a)||a===!1)&&(u=a,a=n),u===!1&&(u=b),h.each(function(n,r){f&&(c=function(t){return y(r,t.type,u),u.apply(this,arguments)}),s&&(l=function(e){var n,o=t(e.target).closest(s,r).get(0);return o&&o!==r?(n=t.extend(T(e),{currentTarget:o,liveFired:r}),(c||u).apply(o,[n].concat(i.call(arguments,1)))):void 0}),v(r,e,u,a,s,l||c)}))},t.fn.off=function(e,i,s){var a=this;return e&&!o(e)?(t.each(e,function(t,e){a.off(t,i,e)}),a):(o(i)||r(s)||s===!1||(s=i,i=n),s===!1&&(s=b),a.each(function(){y(this,e,s,i)}))},t.fn.trigger=function(e,n){return e=o(e)||t.isPlainObject(e)?t.Event(e):j(e),e._args=n,this.each(function(){"dispatchEvent"in this?this.dispatchEvent(e):t(this).triggerHandler(e,n)})},t.fn.triggerHandler=function(e,n){var i,r;return this.each(function(s,a){i=T(o(e)?t.Event(e):e),i._args=n,i.target=a,t.each(h(a,e.type||e),function(t,e){return r=e.proxy(i),i.isImmediatePropagationStopped()?!1:void 0})}),r},"focusin focusout load resize scroll unload click dblclick mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave change select keydown keypress keyup error".split(" ").forEach(function(e){t.fn[e]=function(t){return t?this.bind(e,t):this.trigger(e)}}),["focus","blur"].forEach(function(e){t.fn[e]=function(t){return t?this.bind(e,t):this.each(function(){try{this[e]()}catch(t){}}),this}}),t.Event=function(t,e){o(t)||(e=t,t=e.type);var n=document.createEvent(a[t]||"Events"),i=!0;if(e)for(var r in e)"bubbles"==r?i=!!e[r]:n[r]=e[r];return n.initEvent(t,i,!0),j(n)}}(Zepto),function(t){function l(e,n,i){var r=t.Event(n);return t(e).trigger(r,i),!r.isDefaultPrevented()}function h(t,e,i,r){return t.global?l(e||n,i,r):void 0}function p(e){e.global&&0===t.active++&&h(e,null,"ajaxStart")}function d(e){e.global&&!--t.active&&h(e,null,"ajaxStop")}function m(t,e){var n=e.context;return e.beforeSend.call(n,t,e)===!1||h(e,n,"ajaxBeforeSend",[t,e])===!1?!1:void h(e,n,"ajaxSend",[t,e])}function g(t,e,n,i){var r=n.context,o="success";n.success.call(r,t,o,e),i&&i.resolveWith(r,[t,o,e]),h(n,r,"ajaxSuccess",[e,n,t]),y(o,e,n)}function v(t,e,n,i,r){var o=i.context;i.error.call(o,n,e,t),r&&r.rejectWith(o,[n,e,t]),h(i,o,"ajaxError",[n,i,t||e]),y(e,n,i)}function y(t,e,n){var i=n.context;n.complete.call(i,e,t),h(n,i,"ajaxComplete",[e,n]),d(n)}function x(){}function b(t){return t&&(t=t.split(";",2)[0]),t&&(t==f?"html":t==u?"json":s.test(t)?"script":a.test(t)&&"xml")||"text"}function w(t,e){return""==e?t:(t+"&"+e).replace(/[&?]{1,2}/,"?")}function E(e){e.processData&&e.data&&"string"!=t.type(e.data)&&(e.data=t.param(e.data,e.traditional)),!e.data||e.type&&"GET"!=e.type.toUpperCase()||(e.url=w(e.url,e.data),e.data=void 0)}function j(e,n,i,r){return t.isFunction(n)&&(r=i,i=n,n=void 0),t.isFunction(i)||(r=i,i=void 0),{url:e,data:n,success:i,dataType:r}}function S(e,n,i,r){var o,s=t.isArray(n),a=t.isPlainObject(n);t.each(n,function(n,u){o=t.type(u),r&&(n=i?r:r+"["+(a||"object"==o||"array"==o?n:"")+"]"),!r&&s?e.add(u.name,u.value):"array"==o||!i&&"object"==o?S(e,u,i,n):e.add(n,u)})}var i,r,e=0,n=window.document,o=/<script\b[^<]*(?:(?!<\/script>)<[^<]*)*<\/script>/gi,s=/^(?:text|application)\/javascript/i,a=/^(?:text|application)\/xml/i,u="application/json",f="text/html",c=/^\s*$/;t.active=0,t.ajaxJSONP=function(i,r){if(!("type"in i))return t.ajax(i);var f,h,o=i.jsonpCallback,s=(t.isFunction(o)?o():o)||"jsonp"+ ++e,a=n.createElement("script"),u=window[s],c=function(e){t(a).triggerHandler("error",e||"abort")},l={abort:c};return r&&r.promise(l),t(a).on("load error",function(e,n){clearTimeout(h),t(a).off().remove(),"error"!=e.type&&f?g(f[0],l,i,r):v(null,n||"error",l,i,r),window[s]=u,f&&t.isFunction(u)&&u(f[0]),u=f=void 0}),m(l,i)===!1?(c("abort"),l):(window[s]=function(){f=arguments},a.src=i.url.replace(/\?(.+)=\?/,"?$1="+s),n.head.appendChild(a),i.timeout>0&&(h=setTimeout(function(){c("timeout")},i.timeout)),l)},t.ajaxSettings={type:"GET",beforeSend:x,success:x,error:x,complete:x,context:null,global:!0,xhr:function(){return new window.XMLHttpRequest},accepts:{script:"text/javascript, application/javascript, application/x-javascript",json:u,xml:"application/xml, text/xml",html:f,text:"text/plain"},crossDomain:!1,timeout:0,processData:!0,cache:!0},t.ajax=function(e){var n=t.extend({},e||{}),o=t.Deferred&&t.Deferred();for(i in t.ajaxSettings)void 0===n[i]&&(n[i]=t.ajaxSettings[i]);p(n),n.crossDomain||(n.crossDomain=/^([\w-]+:)?\/\/([^\/]+)/.test(n.url)&&RegExp.$2!=window.location.host),n.url||(n.url=window.location.toString()),E(n),n.cache===!1&&(n.url=w(n.url,"_="+Date.now()));var s=n.dataType,a=/\?.+=\?/.test(n.url);if("jsonp"==s||a)return a||(n.url=w(n.url,n.jsonp?n.jsonp+"=?":n.jsonp===!1?"":"callback=?")),t.ajaxJSONP(n,o);var j,u=n.accepts[s],f={},l=function(t,e){f[t.toLowerCase()]=[t,e]},h=/^([\w-]+:)\/\//.test(n.url)?RegExp.$1:window.location.protocol,d=n.xhr(),y=d.setRequestHeader;if(o&&o.promise(d),n.crossDomain||l("X-Requested-With","XMLHttpRequest"),l("Accept",u||"*/*"),(u=n.mimeType||u)&&(u.indexOf(",")>-1&&(u=u.split(",",2)[0]),d.overrideMimeType&&d.overrideMimeType(u)),(n.contentType||n.contentType!==!1&&n.data&&"GET"!=n.type.toUpperCase())&&l("Content-Type",n.contentType||"application/x-www-form-urlencoded"),n.headers)for(r in n.headers)l(r,n.headers[r]);if(d.setRequestHeader=l,d.onreadystatechange=function(){if(4==d.readyState){d.onreadystatechange=x,clearTimeout(j);var e,i=!1;if(d.status>=200&&d.status<300||304==d.status||0==d.status&&"file:"==h){s=s||b(n.mimeType||d.getResponseHeader("content-type")),e=d.responseText;try{"script"==s?(1,eval)(e):"xml"==s?e=d.responseXML:"json"==s&&(e=c.test(e)?null:t.parseJSON(e))}catch(r){i=r}i?v(i,"parsererror",d,n,o):g(e,d,n,o)}else v(d.statusText||null,d.status?"error":"abort",d,n,o)}},m(d,n)===!1)return d.abort(),v(null,"abort",d,n,o),d;if(n.xhrFields)for(r in n.xhrFields)d[r]=n.xhrFields[r];var T="async"in n?n.async:!0;d.open(n.type,n.url,T,n.username,n.password);for(r in f)y.apply(d,f[r]);return n.timeout>0&&(j=setTimeout(function(){d.onreadystatechange=x,d.abort(),v(null,"timeout",d,n,o)},n.timeout)),d.send(n.data?n.data:null),d},t.get=function(){return t.ajax(j.apply(null,arguments))},t.post=function(){var e=j.apply(null,arguments);return e.type="POST",t.ajax(e)},t.getJSON=function(){var e=j.apply(null,arguments);return e.dataType="json",t.ajax(e)},t.fn.load=function(e,n,i){if(!this.length)return this;var a,r=this,s=e.split(/\s/),u=j(e,n,i),f=u.success;return s.length>1&&(u.url=s[0],a=s[1]),u.success=function(e){r.html(a?t("<div>").html(e.replace(o,"")).find(a):e),f&&f.apply(r,arguments)},t.ajax(u),this};var T=encodeURIComponent;t.param=function(t,e){var n=[];return n.add=function(t,e){this.push(T(t)+"="+T(e))},S(n,t,e),n.join("&").replace(/%20/g,"+")}}(Zepto),function(t){t.fn.serializeArray=function(){var n,e=[];return t([].slice.call(this.get(0).elements)).each(function(){n=t(this);var i=n.attr("type");"fieldset"!=this.nodeName.toLowerCase()&&!this.disabled&&"submit"!=i&&"reset"!=i&&"button"!=i&&("radio"!=i&&"checkbox"!=i||this.checked)&&e.push({name:n.attr("name"),value:n.val()})}),e},t.fn.serialize=function(){var t=[];return this.serializeArray().forEach(function(e){t.push(encodeURIComponent(e.name)+"="+encodeURIComponent(e.value))}),t.join("&")},t.fn.submit=function(e){if(e)this.bind("submit",e);else if(this.length){var n=t.Event("submit");this.eq(0).trigger(n),n.isDefaultPrevented()||this.get(0).submit()}return this}}(Zepto),function(t){"__proto__"in{}||t.extend(t.zepto,{Z:function(e,n){return e=e||[],t.extend(e,t.fn),e.selector=n||"",e.__Z=!0,e},isZ:function(e){return"array"===t.type(e)&&"__Z"in e}});try{getComputedStyle(void 0)}catch(e){var n=getComputedStyle;window.getComputedStyle=function(t){try{return n(t)}catch(e){return null}}}}(Zepto);
    3  

/home/genis/Proyectos/ProyectoXat/vendor/filp/whoops/src/Whoops/Resources/views/env_details.html.php:
    1  <?php /* List data-table values, i.e: $_SERVER, $_GET, .... */ ?>
    2  <div class="details">
    3:   <h2 class="details-heading">Environment &amp; details:</h2>
    4  
    5    <div class="data-table-container" id="data-tables">
    .
    9              <label><?php echo $tpl->escape($label) ?></label>
   10              <table class="data-table">
   11:               <thead>
   12                  <tr>
   13                    <td class="data-table-k">Key</td>
   14                    <td class="data-table-v">Value</td>
   15                  </tr>
   16:               </thead>
   17              <?php foreach ($data as $k => $value): ?>
   18                <tr>

/home/genis/Proyectos/ProyectoXat/vendor/filp/whoops/src/Whoops/Resources/views/header_outer.html.php:
    1: <header>
    2:   <?php $tpl->render($header) ?>
    3: </header>
    4  

/home/genis/Proyectos/ProyectoXat/vendor/filp/whoops/src/Whoops/Resources/views/layout.html.php:
    6  <!DOCTYPE html><?php echo $preface; ?>
    7  <html>
    8:   <head>
    9      <meta charset="utf-8">
   10      <meta name="robots" content="noindex,nofollow"/>
   ..
   12  
   13      <style><?php echo $stylesheet ?></style>
   14:   </head>
   15    <body>
   16  

/home/genis/Proyectos/ProyectoXat/vendor/filp/whoops/src/Whoops/Resources/views/panel_left.html.php:
    1: <?php $tpl->render($header_outer) ?>
    2  <?php $tpl->render($frames_description) ?>
    3  <?php $tpl->render($frames_container) ?>

/home/genis/Proyectos/ProyectoXat/vendor/filp/whoops/src/Whoops/Run.php:
  272              $handlerResponse = $handler->handle($exception);
  273  
  274:             // Collect the content type for possible sending in the headers.
  275              $handlerContentType = method_exists($handler, 'contentType') ? $handler->contentType() : null;
  276  
  ...
  299                  }
  300  
  301:                 // Send any headers if needed:
  302:                 if (Misc::canSendHeaders() && $handlerContentType) {
  303:                     header("Content-Type: {$handlerContentType}");
  304                  }
  305              }
  ...
  398      private function writeToOutputNow($output)
  399      {
  400:         if ($this->sendHttpCode() && \Whoops\Util\Misc::canSendHeaders()) {
  401              $this->system->setHttpResponseCode(
  402                  $this->sendHttpCode()

/home/genis/Proyectos/ProyectoXat/vendor/filp/whoops/src/Whoops/Util/Misc.php:
   10  {
   11      /**
   12:      * Can we at this point in time send HTTP headers?
   13       *
   14       * Currently this checks if we are even serving an HTTP request,
   ..
   19       * @return bool
   20       */
   21:     public static function canSendHeaders()
   22      {
   23:         return isset($_SERVER["REQUEST_URI"]) && !headers_sent();
   24      }
   25  

/home/genis/Proyectos/ProyectoXat/vendor/fzaninotto/faker/CHANGELOG.md:
  103  - \#989 Fix country typo [\#996](https://github.com/fzaninotto/Faker/pull/996) ([adriantombu](https://github.com/adriantombu))
  104  - adding back CNP [\#988](https://github.com/fzaninotto/Faker/pull/988) ([the-noob](https://github.com/the-noob))
  105: - Fix phpunit tests fail on 64-bit systems \#982 [\#983](https://github.com/fzaninotto/Faker/pull/983) ([Powerhead13](https://github.com/Powerhead13))
  106  - Remove trailing dot in username if any [\#975](https://github.com/fzaninotto/Faker/pull/975) ([vlakoff](https://github.com/vlakoff))
  107  - HTML Lorem [\#971](https://github.com/fzaninotto/Faker/pull/971) ([rudkjobing](https://github.com/rudkjobing))

/home/genis/Proyectos/ProyectoXat/vendor/fzaninotto/faker/readme.md:
  304  
  305      //Generate HTML document which is no more than 2 levels deep, and no more than 3 elements wide at any level.
  306:     randomHtml(2,3)   // <html><head><title>Aut illo dolorem et accusantium eum.</title></head><body><form action="example.com" method="POST"><label for="username">sequi</label><input type="text" id="username"><label for="password">et</label><input type="password" id="password"></form><b>Id aut saepe non mollitia voluptas voluptas.</b><table><thead><tr><tr>Non consequatur.</tr><tr>Incidunt est.</tr><tr>Aut voluptatem.</tr><tr>Officia voluptas rerum quo.</tr><tr>Asperiores similique.</tr></tr></thead><tbody><tr><td>Sapiente dolorum dolorem sint laboriosam commodi qui.</td><td>Commodi nihil nesciunt eveniet quo repudiandae.</td><td>Voluptates explicabo numquam distinctio necessitatibus repellat.</td><td>Provident ut doloremque nam eum modi aspernatur.</td><td>Iusto inventore.</td></tr><tr><td>Animi nihil ratione id mollitia libero ipsa quia tempore.</td><td>Velit est officia et aut tenetur dolorem sed mollitia expedita.</td><td>Modi modi repudiandae pariatur voluptas rerum ea incidunt non molestiae eligendi eos deleniti.</td><td>Exercitationem voluptatibus dolor est iste quod molestiae.</td><td>Quia reiciendis.</td></tr><tr><td>Inventore impedit exercitationem voluptatibus rerum cupiditate.</td><td>Qui.</td><td>Aliquam.</td><td>Autem nihil aut et.</td><td>Dolor ut quia error.</td></tr><tr><td>Enim facilis iusto earum et minus rerum assumenda quis quia.</td><td>Reprehenderit ut sapiente occaecati voluptatum dolor voluptatem vitae qui velit.</td><td>Quod fugiat non.</td><td>Sunt nobis totam mollitia sed nesciunt est deleniti cumque.</td><td>Repudiandae quo.</td></tr><tr><td>Modi dicta libero quisquam doloremque qui autem.</td><td>Voluptatem aliquid saepe laudantium facere eos sunt dolor.</td><td>Est eos quis laboriosam officia expedita repellendus quia natus.</td><td>Et neque delectus quod fugit enim repudiandae qui.</td><td>Fugit soluta sit facilis facere repellat culpa magni voluptatem maiores tempora.</td></tr><tr><td>Enim dolores doloremque.</td><td>Assumenda voluptatem eum perferendis exercitationem.</td><td>Quasi in fugit deserunt ea perferendis sunt nemo consequatur dolorum soluta.</td><td>Maxime repellat qui numquam voluptatem est modi.</td><td>Alias rerum rerum hic hic eveniet.</td></tr><tr><td>Tempore voluptatem.</td><td>Eaque.</td><td>Et sit quas fugit iusto.</td><td>Nemo nihil rerum dignissimos et esse.</td><td>Repudiandae ipsum numquam.</td></tr><tr><td>Nemo sunt quia.</td><td>Sint tempore est neque ducimus harum sed.</td><td>Dicta placeat atque libero nihil.</td><td>Et qui aperiam temporibus facilis eum.</td><td>Ut dolores qui enim et maiores nesciunt.</td></tr><tr><td>Dolorum totam sint debitis saepe laborum.</td><td>Quidem corrupti ea.</td><td>Cum voluptas quod.</td><td>Possimus consequatur quasi dolorem ut et.</td><td>Et velit non hic labore repudiandae quis.</td></tr></tbody></table></body></html>
  307  
  308  ## Modifiers

/home/genis/Proyectos/ProyectoXat/vendor/fzaninotto/faker/src/Faker/Provider/File.php:
   59          'application/vnd.adobe.xdp+xml'                                             => 'xdp',
   60          'application/vnd.adobe.xfdf'                                                => 'xfdf',
   61:         'application/vnd.ahead.space'                                               => 'ahead',
   62          'application/vnd.dart'                                                      => 'dart',
   63          'application/vnd.data-vision.rdz'                                           => 'rdz',

/home/genis/Proyectos/ProyectoXat/vendor/fzaninotto/faker/src/Faker/Provider/HtmlLorem.php:
   10  
   11      const HTML_TAG = "html";
   12:     const HEAD_TAG = "head";
   13      const BODY_TAG = "body";
   14      const DIV_TAG = "div";
   ..
   17      const SPAN_TAG = "span";
   18      const TABLE_TAG = "table";
   19:     const THEAD_TAG = "thead";
   20      const TBODY_TAG = "tbody";
   21      const TR_TAG = "tr";
   ..
   52          $this->idGenerator = new UniqueGenerator($this->generator);
   53  
   54:         $head = $document->createElement("head");
   55:         $this->addRandomTitle($head);
   56  
   57          $body = $document->createElement("body");
   ..
   60  
   61          $html = $document->createElement("html");
   62:         $html->appendChild($head);
   63          $html->appendChild($body);
   64  
   ..
  239  
  240          $table = $element->ownerDocument->createElement(static::TABLE_TAG);
  241:         $thead = $element->ownerDocument->createElement(static::THEAD_TAG);
  242          $tbody = $element->ownerDocument->createElement(static::TBODY_TAG);
  243  
  244:         $table->appendChild($thead);
  245          $table->appendChild($tbody);
  246  
  247          $tr = $element->ownerDocument->createElement(static::TR_TAG);
  248:         $thead->appendChild($tr);
  249          for ($i = 0; $i < $cols; $i++) {
  250              $th = $element->ownerDocument->createElement(static::TH_TAG);

/home/genis/Proyectos/ProyectoXat/vendor/fzaninotto/faker/src/Faker/Provider/en_US/Company.php:
   46          'Fabric Mender', 'Fabric Pressers', 'Farm and Home Management Advisor', 'Farm Equipment Mechanic', 'Farm Labor Contractor', 'Farmer', 'Farmworker', 'Fashion Designer', 'Fashion Model', 'Fast Food Cook', 'Fence Erector', 'Fiber Product Cutting Machine Operator', 'Fiberglass Laminator and Fabricator', 'File Clerk', 'Film Laboratory Technician', 'Financial Analyst', 'Financial Examiner', 'Financial Manager', 'Financial Services Sales Agent', 'Financial Specialist', 'Fire Fighter', 'Fire Inspector', 'Fire Investigator', 'Fire-Prevention Engineer', 'First-Line Supervisor-Manager of Landscaping, Lawn Service, and Groundskeeping Worker', 'Fish Game Warden', 'Fish Hatchery Manager', 'Fishery Worker', 'Fishing OR Forestry Supervisor', 'Fitness Trainer', 'Fitter', 'Flight Attendant', 'Floor Finisher', 'Floor Layer', 'Floral Designer', 'Food Batchmaker', 'Food Cooking Machine Operators', 'Food Preparation', 'Food Preparation and Serving Worker', 'Food Preparation Worker', 'Food Science Technician', 'Food Scientists and Technologist', 'Food Servers', 'Food Service Manager', 'Food Tobacco Roasting', 'Foreign Language Teacher', 'Forensic Investigator', 'Forensic Science Technician', 'Forest and Conservation Technician', 'Forest and Conservation Worker', 'Forest Fire Fighter', 'Forest Fire Fighting Supervisor', 'Forest Fire Inspector', 'Forester', 'Forestry Conservation Science Teacher', 'Forging Machine Setter', 'Forming Machine Operator', 'Forming Machine Operator', 'Foundry Mold and Coremaker', 'Fraud Investigator', 'Freight Agent', 'Freight and Material Mover', 'Freight Inspector', 'Funeral Attendant', 'Funeral Director', 'Furnace Operator', 'Furniture Finisher',
   47          'Gaming Cage Worker', 'Gaming Dealer', 'Gaming Manager', 'Gaming Service Worker', 'Gaming Supervisor', 'Gaming Surveillance Officer', 'Garment', 'Gas Appliance Repairer', 'Gas Compressor Operator', 'Gas Distribution Plant Operator', 'Gas Plant Operator', 'Gas Processing Plant Operator', 'Gas Pumping Station Operator', 'Gas Pumping Station Operator', 'Gauger', 'GED Teacher', 'General Farmworker', 'General Manager', 'General Practitioner', 'Geographer', 'Geography Teacher', 'Geological Data Technician', 'Geological Sample Test Technician', 'Geologist', 'Geoscientists', 'Glass Blower', 'Glass Cutting Machine Operator', 'Glazier', 'Gluing Machine Operator', 'Government', 'Government Property Inspector', 'Government Service Executive', 'Graduate Teaching Assistant', 'Graphic Designer', 'Grinder OR Polisher', 'Grinding Machine Operator', 'Grips', 'Grounds Maintenance Worker',
   48:         'Hairdresser OR Cosmetologist', 'Hand Trimmer', 'Hand Presser', 'Hand Sewer', 'Hazardous Materials Removal Worker', 'Head Nurse', 'Health Educator', 'Health Practitioner', 'Health Services Manager', 'Health Specialties Teacher', 'Health Technologist', 'Healthcare', 'Healthcare Practitioner', 'Healthcare Support Worker', 'Heat Treating Equipment Operator', 'Heaters', 'Heating and Air Conditioning Mechanic', 'Heating Equipment Operator', 'Heavy Equipment Mechanic', 'Highway Maintenance Worker', 'Highway Patrol Pilot', 'Historian', 'History Teacher', 'Hoist and Winch Operator', 'Home', 'Home Appliance Installer', 'Home Appliance Repairer', 'Home Economics Teacher', 'Home Entertainment Equipment Installer', 'Home Health Aide', 'Homeland Security', 'Horticultural Worker', 'Host and Hostess', 'Hotel Desk Clerk', 'House Cleaner', 'Housekeeper', 'Housekeeping Supervisor', 'HR Manager', 'HR Specialist', 'Human Resource Director', 'Human Resource Manager', 'Human Resources Assistant', 'Human Resources Manager', 'Human Resources Specialist', 'Hunter and Trapper', 'HVAC Mechanic', 'Hydrologist',
   49          'Illustrator', 'Immigration Inspector OR Customs Inspector', 'Industrial Engineer', 'Industrial Engineering Technician', 'Industrial Equipment Maintenance', 'Industrial Machinery Mechanic', 'Industrial Production Manager', 'Industrial Safety Engineer', 'Industrial-Organizational Psychologist', 'Infantry', 'Infantry Officer', 'Information Systems Manager', 'Inspector', 'Installation and Repair Technician', 'Instructional Coordinator', 'Instrument Sales Representative', 'Insulation Installer', 'Insulation Worker', 'Insurance Investigator', 'Insurance Appraiser', 'Insurance Claims Clerk', 'Insurance Policy Processing Clerk', 'Insurance Sales Agent', 'Insurance Underwriter', 'Interaction Designer', 'Interior Designer', 'Internist', 'Interpreter OR Translator', 'Interviewer', 'Irradiated-Fuel Handler',
   50          'Janitor', 'Janitorial Supervisor', 'Jeweler', 'Jewelry Model OR Mold Makers', 'Job Printer', 'Judge',
   ..
   60          'Umpire and Referee', 'Underground Mining', 'University', 'Upholsterer', 'Urban Planner', 'User Experience Manager', 'User Experience Researcher', 'Usher', 'Utility Meter Reader',
   61          'Valve Repairer OR Regulator Repairer', 'Vending Machine Servicer', 'Veterinarian', 'Veterinary Assistant OR Laboratory Animal Caretaker', 'Veterinary Technician', 'Vice President Of Human Resources', 'Vice President Of Marketing', 'Video Editor', 'Visual Designer', 'Vocational Education Teacher',
   62:         'Waiter', 'Waitress', 'Warehouse', 'Washing Equipment Operator', 'Waste Treatment Plant Operator', 'Watch Repairer', 'Weapons Specialists', 'Web Developer', 'Webmaster', 'Welder', 'Welder', 'Welder and Cutter', 'Welder-Fitter', 'Welding Machine Tender', 'Welding Machine Operator', 'Welding Machine Setter', 'Welfare Eligibility Clerk', 'Well and Core Drill Operator', 'Wellhead Pumper', 'Wholesale Buyer', 'Wind Instrument Repairer', 'Woodworker', 'Woodworking Machine Operator', 'Woodworking Machine Setter', 'Word Processors and Typist', 'Writer OR Author',
   63          'Zoologists OR Wildlife Biologist',
   64      );

/home/genis/Proyectos/ProyectoXat/vendor/fzaninotto/faker/src/Faker/Provider/en_US/Text.php:
  101  Presently she began again. 'I wonder if I shall fall right THROUGH the
  102  earth! How funny it'll seem to come out among the people that walk with
  103: their heads downward! The Antipathies, I think--' (she was rather glad
  104  there WAS no one listening, this time, as it didn't sound at all the
  105  right word) '--but I shall have to ask them what the name of the country
  ...
  126  
  127  Alice was not a bit hurt, and she jumped up on to her feet in a moment:
  128: she looked up, but it was all dark overhead; before her was another
  129  long passage, and the White Rabbit was still in sight, hurrying down it.
  130  There was not a moment to be lost: away went Alice like the wind, and
  ...
  153  into the loveliest garden you ever saw. How she longed to get out of
  154  that dark hall, and wander about among those beds of bright flowers and
  155: those cool fountains, but she could not even get her head through the
  156: doorway; 'and even if my head would go through,' thought poor Alice, 'it
  157  would be of very little use without my shoulders. Oh, how I wish I could
  158  shut up like a telescope! I think I could, if I only knew how to begin.'
  ...
  231  
  232  She ate a little bit, and said anxiously to herself, 'Which way? Which
  233: way?', holding her hand on the top of her head to feel which way it was
  234  growing, and she was quite surprised to find that she remained the same
  235  size: to be sure, this generally happens when one eats cake, but Alice
  ...
  270  Oh dear, what nonsense I'm talking!'
  271  
  272: Just then her head struck against the roof of the hall: in fact she was
  273  now more than nine feet high, and she at once took up the little golden
  274  key and hurried off to the garden door.
  ...
  335  no toys to play with, and oh! ever so many lessons to learn! No, I've
  336  made up my mind about it; if I'm Mabel, I'll stay down here! It'll be no
  337: use their putting their heads down and saying "Come up again, dear!" I
  338  shall only look up and say "Who am I then? Tell me that first, and then,
  339  if I like being that person, I'll come up: if not, I'll stay down here
  340  till I'm somebody else"--but, oh dear!' cried Alice, with a sudden burst
  341: of tears, 'I do wish they WOULD put their heads down! I am so VERY tired
  342  of being all alone here!'
  343  
  ...
  510  'Speak English!' said the Eaglet. 'I don't know the meaning of half
  511  those long words, and, what's more, I don't believe you do either!' And
  512: the Eaglet bent down its head to hide a smile: some of the other birds
  513  tittered audibly.
  514  
  ...
  534  
  535  This question the Dodo could not answer without a great deal of thought,
  536: and it sat for a long time with one finger pressed upon its forehead
  537  (the position in which you usually see Shakespeare, in the pictures
  538  of him), while the rest waited in silence. At last the Dodo said,
  ...
  653  'Please come back and finish your story!' Alice called after it; and the
  654  others all joined in chorus, 'Yes, please do!' but the Mouse only shook
  655: its head impatiently, and walked a little quicker.
  656  
  657  'What a pity it wouldn't stay!' sighed the Lory, as soon as it was quite
  ...
  740  
  741  It did so indeed, and much sooner than she had expected: before she had
  742: drunk half the bottle, she found her head pressing against the ceiling,
  743  and had to stoop to save her neck from being broken. She hastily put
  744  down the bottle, saying to herself 'That's quite enough--I hope I shan't
  ...
  749  and very soon had to kneel down on the floor: in another minute there
  750  was not even room for this, and she tried the effect of lying down with
  751: one elbow against the door, and the other arm curled round her head.
  752  Still she went on growing, and, as a last resource, she put one arm out
  753  of the window, and one foot up the chimney, and said to herself 'Now I
  ...
  834  do well enough; don't be particular--Here, Bill! catch hold of this
  835  rope--Will the roof bear?--Mind that loose slate--Oh, it's coming
  836: down! Heads below!' (a loud crash)--'Now, who did that?--It was Bill, I
  837  fancy--Who's to go down the chimney?--Nay, I shan't! YOU do it!--That I
  838  won't, then!--Bill's to go down--Here, Bill! the master says you're to
  ...
  852  The first thing she heard was a general chorus of 'There goes Bill!'
  853  then the Rabbit's voice along--'Catch him, you by the hedge!' then
  854: silence, and then another confusion of voices--'Hold up his head--Brandy
  855  now--Don't choke him--How was it, old fellow? What happened to you? Tell
  856  us all about it!'
  ...
  879  Alice noticed with some surprise that the pebbles were all turning into
  880  little cakes as they lay on the floor, and a bright idea came into her
  881: head. 'If I eat one of these cakes,' she thought, 'it's sure to make
  882  SOME change in my size; and as it can't possibly make me larger, it must
  883  make me smaller, I suppose.'
  ...
  900  arranged; the only difficulty was, that she had not the smallest idea
  901  how to set about it; and while she was peering about anxiously among
  902: the trees, a little sharp bark just over her head made her look up in a
  903  great hurry.
  904  
  ...
  915  and made believe to worry it; then Alice dodged behind a great thistle,
  916  to keep herself from being run over; and the moment she appeared on the
  917: other side, the puppy made another rush at the stick, and tumbled head
  918  over heels in its hurry to get hold of it; then Alice, thinking it was
  919  very like having a game of play with a cart-horse, and expecting every
  ...
 1034     'You are old, Father William,' the young man said,
 1035      'And your hair has become very white;
 1036:    And yet you incessantly stand on your head--
 1037      Do you think, at your age, it is right?'
 1038  
 ....
 1144    *    *    *    *    *    *    *
 1145  
 1146: 'Come, my head's free at last!' said Alice in a tone of delight, which
 1147  changed into alarm in another moment, when she found that her shoulders
 1148  were nowhere to be found: all she could see, when she looked down, was
 ....
 1155  except a little shaking among the distant green leaves.
 1156  
 1157: As there seemed to be no chance of getting her hands up to her head, she
 1158: tried to get her head down to them, and was delighted to find that her
 1159  neck would bend about easily in any direction, like a serpent. She had
 1160  just succeeded in curving it down into a graceful zigzag, and was going
 ....
 1257  by another footman in livery, with a round face, and large eyes like a
 1258  frog; and both footmen, Alice noticed, had powdered hair that curled all
 1259: over their heads. She felt very curious to know what it was all about,
 1260  and crept a little way out of the wood to listen.
 1261  
 ....
 1290  He was looking up into the sky all the time he was speaking, and this
 1291  Alice thought decidedly uncivil. 'But perhaps he can't help it,' she
 1292: said to herself; 'his eyes are so VERY nearly at the top of his head.
 1293  But at any rate he might answer questions.--How am I to get in?' she
 1294  repeated, aloud.
 ....
 1297  
 1298  At this moment the door of the house opened, and a large plate came
 1299: skimming out, straight at the Footman's head: it just grazed his nose,
 1300  and broke to pieces against one of the trees behind him.
 1301  
 ....
 1378  twenty-four hours to turn round on its axis--'
 1379  
 1380: 'Talking of axes,' said the Duchess, 'chop off her head!'
 1381  
 1382  Alice glanced rather anxiously at the cook, to see if she meant to take
 ....
 1570  March Hare and the Hatter were having tea at it: a Dormouse was sitting
 1571  between them, fast asleep, and the other two were using it as a
 1572: cushion, resting their elbows on it, and talking over its head. 'Very
 1573  uncomfortable for the Dormouse,' thought Alice; 'only, as it's asleep, I
 1574  suppose it doesn't mind.'
 ....
 1670  hot tea upon its nose.
 1671  
 1672: The Dormouse shook its head impatiently, and said, without opening its
 1673  eyes, 'Of course, of course; just what I was going to remark myself.'
 1674  
 ....
 1690  'I don't know what you mean,' said Alice.
 1691  
 1692: 'Of course you don't!' the Hatter said, tossing his head contemptuously.
 1693  'I dare say you never even spoke to Time!'
 1694  
 ....
 1713  'Is that the way YOU manage?' Alice asked.
 1714  
 1715: The Hatter shook his head mournfully. 'Not I!' he replied. 'We
 1716  quarrelled last March--just before HE went mad, you know--' (pointing
 1717  with his tea spoon at the March Hare,) '--it was at the great concert
 ....
 1737  'Well, I'd hardly finished the first verse,' said the Hatter, 'when the
 1738  Queen jumped up and bawled out, "He's murdering the time! Off with his
 1739: head!"'
 1740  
 1741  'How dreadfully savage!' exclaimed Alice.
 ....
 1744  do a thing I ask! It's always six o'clock now.'
 1745  
 1746: A bright idea came into Alice's head. 'Is that the reason so many
 1747  tea-things are put out here?' she asked.
 1748  
 ....
 1920  
 1921  'YOU'D better not talk!' said Five. 'I heard the Queen say only
 1922: yesterday you deserved to be beheaded!'
 1923  
 1924  'What for?' said the one who had spoken first.
 ....
 1940  voice, 'Why the fact is, you see, Miss, this here ought to have been a
 1941  RED rose-tree, and we put a white one in by mistake; and if the Queen
 1942: was to find it out, we should all have our heads cut off, you know.
 1943  So you see, Miss, we're doing our best, afore she comes, to--' At this
 1944  moment Five, who had been anxiously looking across the garden, called
 ....
 1971  Knave of Hearts, who only bowed and smiled in reply.
 1972  
 1973: 'Idiot!' said the Queen, tossing her head impatiently; and, turning to
 1974  Alice, she went on, 'What's your name, child?'
 1975  
 ....
 1988  
 1989  The Queen turned crimson with fury, and, after glaring at her for a
 1990: moment like a wild beast, screamed 'Off with her head! Off--'
 1991  
 1992  'Nonsense!' said Alice, very loudly and decidedly, and the Queen was
 ....
 2012  
 2013  'I see!' said the Queen, who had meanwhile been examining the roses.
 2014: 'Off with their heads!' and the procession moved on, three of the
 2015  soldiers remaining behind to execute the unfortunate gardeners, who ran
 2016  to Alice for protection.
 2017  
 2018: 'You shan't be beheaded!' said Alice, and she put them into a large
 2019  flower-pot that stood near. The three soldiers wandered about for a
 2020  minute or two, looking for them, and then quietly marched off after the
 2021  others.
 2022  
 2023: 'Are their heads off?' shouted the Queen.
 2024  
 2025: 'Their heads are gone, if it please your Majesty!' the soldiers shouted
 2026  in reply.
 2027  
 ....
 2070  her arm, with its legs hanging down, but generally, just as she had got
 2071  its neck nicely straightened out, and was going to give the hedgehog a
 2072: blow with its head, it WOULD twist itself round and look up in her face,
 2073  with such a puzzled expression that she could not help bursting out
 2074: laughing: and when she had got its head down, and was going to begin
 2075  again, it was very provoking to find that the hedgehog had unrolled
 2076  itself, and was in the act of crawling away: besides all this, there was
 ....
 2083  all the while, and fighting for the hedgehogs; and in a very short
 2084  time the Queen was in a furious passion, and went stamping about, and
 2085: shouting 'Off with his head!' or 'Off with her head!' about once in a
 2086  minute.
 2087  
 ....
 2089  dispute with the Queen, but she knew that it might happen any minute,
 2090  'and then,' thought she, 'what would become of me? They're dreadfully
 2091: fond of beheading people here; the great wonder is, that there's any one
 2092  left alive!'
 2093  
 ....
 2103  Alice waited till the eyes appeared, and then nodded. 'It's no use
 2104  speaking to it,' she thought, 'till its ears have come, or at least one
 2105: of them.' In another minute the whole head appeared, and then Alice put
 2106  down her flamingo, and began an account of the game, feeling very glad
 2107  she had someone to listen to her. The Cat seemed to think that there was
 ....
 2126  
 2127  'Who ARE you talking to?' said the King, going up to Alice, and looking
 2128: at the Cat's head with great curiosity.
 2129  
 2130  'It's a friend of mine--a Cheshire Cat,' said Alice: 'allow me to
 ....
 2147  
 2148  The Queen had only one way of settling all difficulties, great or small.
 2149: 'Off with his head!' she said, without even looking round.
 2150  
 2151  'I'll fetch the executioner myself,' said the King eagerly, and he
 ....
 2182  what they said.
 2183  
 2184: The executioner's argument was, that you couldn't cut off a head unless
 2185  there was a body to cut it off from: that he had never had to do such a
 2186  thing before, and he wasn't going to begin at HIS time of life.
 2187  
 2188: The King's argument was, that anything that had a head could be
 2189: beheaded, and that you weren't to talk nonsense.
 2190  
 2191  The Queen's argument was, that if something wasn't done about it in less
 ....
 2199  And the executioner went off like an arrow.
 2200  
 2201:  The Cat's head began fading away the moment he was gone, and,
 2202  by the time he had come back with the Duchess, it had entirely
 2203  disappeared; so the King and the executioner ran wildly up and down
 ....
 2324  
 2325  'Now, I give you fair warning,' shouted the Queen, stamping on the
 2326: ground as she spoke; 'either you or your head must be off, and that in
 2327  about half no time! Take your choice!'
 2328  
 ....
 2339  
 2340  All the time they were playing the Queen never left off quarrelling with
 2341: the other players, and shouting 'Off with his head!' or 'Off with her
 2342: head!' Those whom she sentenced were taken into custody by the soldiers,
 2343  who of course had to leave off being arches to do this, so that by
 2344  the end of half an hour or so there were no arches left, and all the
 ....
 2716  'How the creatures order one about, and make one repeat lessons!'
 2717  thought Alice; 'I might as well be at school at once.' However, she
 2718: got up, and began to repeat it, but her head was so full of the Lobster
 2719  Quadrille, that she hardly knew what she was saying, and the words came
 2720  very queer indeed:--
 ....
 3009  explain to you how it was done. They had a large canvas bag, which tied
 3010  up at the mouth with strings: into this they slipped the guinea-pig,
 3011: head first, and then sat upon it.)
 3012  
 3013  'I'm glad I've seen that done,' thought Alice. 'I've so often read
 ....
 3034  without even waiting to put his shoes on.
 3035  
 3036: '--and just take his head off outside,' the Queen added to one of the
 3037  officers: but the Hatter was out of sight before the officer could get
 3038  to the door.
 ....
 3059  'Treacle,' said a sleepy voice behind her.
 3060  
 3061: 'Collar that Dormouse,' the Queen shrieked out. 'Behead that Dormouse!
 3062  Turn that Dormouse out of court! Suppress him! Pinch him! Off with his
 3063  whiskers!'
 ....
 3069  'Never mind!' said the King, with an air of great relief. 'Call the next
 3070  witness.' And he added in an undertone to the Queen, 'Really, my dear,
 3071: YOU must cross-examine the next witness. It quite makes my forehead
 3072  ache!'
 3073  
 ....
 3086  large she had grown in the last few minutes, and she jumped up in such
 3087  a hurry that she tipped over the jury-box with the edge of her skirt,
 3088: upsetting all the jurymen on to the heads of the crowd below, and there
 3089  they lay sprawling about, reminding her very much of a globe of goldfish
 3090  she had accidentally upset the week before.
 ....
 3092  'Oh, I BEG your pardon!' she exclaimed in a tone of great dismay, and
 3093  began picking them up again as quickly as she could, for the accident of
 3094: the goldfish kept running in her head, and she had a vague sort of idea
 3095  that they must be collected at once and put back into the jury-box, or
 3096  they would die.
 ....
 3101  
 3102  Alice looked at the jury-box, and saw that, in her haste, she had put
 3103: the Lizard in head downwards, and the poor little thing was waving its
 3104  tail about in a melancholy way, being quite unable to move. She soon got
 3105  it out again, and put it right; 'not that it signifies much,' she said
 ....
 3258  Knave.
 3259  
 3260: The Knave shook his head sadly. 'Do I look like it?' he said. (Which he
 3261  certainly did NOT, being made entirely of cardboard.)
 3262  
 ....
 3295  'I won't!' said Alice.
 3296  
 3297: 'Off with her head!' the Queen shouted at the top of her voice. Nobody
 3298  moved.
 3299  
 ....
 3304  her: she gave a little scream, half of fright and half of anger, and
 3305  tried to beat them off, and found herself lying on the bank, with her
 3306: head in the lap of her sister, who was gently brushing away some dead
 3307  leaves that had fluttered down from the trees upon her face.
 3308  
 ....
 3318  what a wonderful dream it had been.
 3319  
 3320: But her sister sat still just as she left her, leaning her head on her
 3321  hand, watching the setting sun, and thinking of little Alice and all her
 3322  wonderful Adventures, till she too began dreaming after a fashion, and
 ....
 3326  hands were clasped upon her knee, and the bright eager eyes were looking
 3327  up into hers--she could hear the very tones of her voice, and see that
 3328: queer little toss of her head to keep back the wandering hair that
 3329  WOULD always get into her eyes--and still as she listened, or seemed to
 3330  listen, the whole place around her became alive with the strange creatures

/home/genis/Proyectos/ProyectoXat/vendor/fzaninotto/faker/src/Faker/Provider/pl_PL/Text.php:
   12       * this or any other Project Gutenberg eBook.
   13       *
   14:      * This header should be the first thing seen when viewing this Project
   15       * Gutenberg file.  Please do not remove it.  Do not change or edit the
   16:      * header without written permission.
   17       *
   18       * Please read the "legal small print," and other information about the
   ..
   35       *
   36       * Release Date: May, 2005 [EBook #8119]
   37:      * [Yes, we are more than one year ahead of schedule]
   38       * [This file was first posted on June 16, 2003]
   39       *
   ..
 2854      hart@pobox.com
 2855  
 2856:     [Portions of this eBook's header and trailer may be reprinted only
 2857      when distributed free of all fees.  Copyright (C) 2001, 2002 by
 2858      Michael S. Hart.  Project Gutenberg is a TradeMark and may not be

/home/genis/Proyectos/ProyectoXat/vendor/hamcrest/hamcrest-php/.gush.yml:
    1  adapter: github
    2  issue_tracker: github
    3: meta-header: "Copyright (c) 2009-2015 hamcrest.org"
    4  table-pr:
    5      fixed_tickets: ['Fixed Tickets', '']

/home/genis/Proyectos/ProyectoXat/vendor/hamcrest/hamcrest-php/generator/FactoryFile.php:
   30      abstract public function build();
   31  
   32:     public function addFileHeader()
   33      {
   34          $this->code = '';
   35:         $this->addPart('file_header');
   36      }
   37  

/home/genis/Proyectos/ProyectoXat/vendor/hamcrest/hamcrest-php/generator/GlobalFunctionFile.php:
   25      public function build()
   26      {
   27:         $this->addFileHeader();
   28          $this->addPart('functions_imports');
   29:         $this->addPart('functions_header');
   30          $this->addCode($this->functions);
   31          $this->addPart('functions_footer');

/home/genis/Proyectos/ProyectoXat/vendor/hamcrest/hamcrest-php/generator/StaticMethodFile.php:
   30      public function build()
   31      {
   32:         $this->addFileHeader();
   33          $this->addPart('matchers_imports');
   34:         $this->addPart('matchers_header');
   35          $this->addCode($this->methods);
   36          $this->addPart('matchers_footer');

/home/genis/Proyectos/ProyectoXat/vendor/hamcrest/hamcrest-php/tests/Hamcrest/Xml/HasXPathTest.php:
   35          self::$html = <<<HTML
   36  <html>
   37:     <head>
   38          <title>Home Page</title>
   39:     </head>
   40      <body>
   41:         <h1>Heading</h1>
   42          <p>Some text</p>
   43      </body>
   ..
  158      public function testMatchesAcceptsHtmlString()
  159      {
  160:         assertThat('accepts HTML string', self::$html, hasXPath('body/h1', 'Heading'));
  161      }
  162  

/home/genis/Proyectos/ProyectoXat/vendor/laravel/framework/src/Illuminate/Auth/Console/stubs/make/views/auth/login.stub:
    6          <div class="col-md-8 col-md-offset-2">
    7              <div class="panel panel-default">
    8:                 <div class="panel-heading">Login</div>
    9  
   10                  <div class="panel-body">

/home/genis/Proyectos/ProyectoXat/vendor/laravel/framework/src/Illuminate/Auth/Console/stubs/make/views/auth/passwords/email.stub:
    6          <div class="col-md-8 col-md-offset-2">
    7              <div class="panel panel-default">
    8:                 <div class="panel-heading">Reset Password</div>
    9  
   10                  <div class="panel-body">

/home/genis/Proyectos/ProyectoXat/vendor/laravel/framework/src/Illuminate/Auth/Console/stubs/make/views/auth/passwords/reset.stub:
    6          <div class="col-md-8 col-md-offset-2">
    7              <div class="panel panel-default">
    8:                 <div class="panel-heading">Reset Password</div>
    9  
   10                  <div class="panel-body">

/home/genis/Proyectos/ProyectoXat/vendor/laravel/framework/src/Illuminate/Auth/Console/stubs/make/views/auth/register.stub:
    6          <div class="col-md-8 col-md-offset-2">
    7              <div class="panel panel-default">
    8:                 <div class="panel-heading">Register</div>
    9  
   10                  <div class="panel-body">

/home/genis/Proyectos/ProyectoXat/vendor/laravel/framework/src/Illuminate/Auth/Console/stubs/make/views/home.stub:
    6          <div class="col-md-8 col-md-offset-2">
    7              <div class="panel panel-default">
    8:                 <div class="panel-heading">Dashboard</div>
    9  
   10                  <div class="panel-body">

/home/genis/Proyectos/ProyectoXat/vendor/laravel/framework/src/Illuminate/Auth/Console/stubs/make/views/layouts/app.stub:
    1  <!DOCTYPE html>
    2  <html lang="{{ app()->getLocale() }}">
    3: <head>
    4      <meta charset="utf-8">
    5      <meta http-equiv="X-UA-Compatible" content="IE=edge">
    .
   13      <!-- Styles -->
   14      <link href="{{ asset('css/app.css') }}" rel="stylesheet">
   15: </head>
   16  <body>
   17      <div id="app">
   18          <nav class="navbar navbar-default navbar-static-top">
   19              <div class="container">
   20:                 <div class="navbar-header">
   21  
   22                      <!-- Collapsed Hamburger -->

/home/genis/Proyectos/ProyectoXat/vendor/laravel/framework/src/Illuminate/Broadcasting/BroadcastManager.php:
   84          $request = $request ?: $this->app['request'];
   85  
   86:         return $request->header('X-Socket-ID');
   87      }
   88  

/home/genis/Proyectos/ProyectoXat/vendor/laravel/framework/src/Illuminate/Console/Command.php:
   95      public function __construct()
   96      {
   97:         // We will go ahead and set the name, description, and parameters on console
   98          // commands just to make things a little easier on the developer. This is
   99          // so they don't have to all be manually specified in the constructors.
  ...
  395       * Format input to textual table.
  396       *
  397:      * @param  array   $headers
  398       * @param  \Illuminate\Contracts\Support\Arrayable|array  $rows
  399       * @param  string  $tableStyle
  ...
  401       * @return void
  402       */
  403:     public function table($headers, $rows, $tableStyle = 'default', array $columnStyles = [])
  404      {
  405          $table = new Table($this->output);
  ...
  409          }
  410  
  411:         $table->setHeaders((array) $headers)->setRows($rows)->setStyle($tableStyle);
  412  
  413          foreach ($columnStyles as $columnIndex => $columnStyle) {

/home/genis/Proyectos/ProyectoXat/vendor/laravel/framework/src/Illuminate/Contracts/Routing/ResponseFactory.php:
   10       * @param  string  $content
   11       * @param  int  $status
   12:      * @param  array  $headers
   13       * @return \Illuminate\Http\Response
   14       */
   15:     public function make($content = '', $status = 200, array $headers = []);
   16  
   17      /**
   ..
   21       * @param  array  $data
   22       * @param  int  $status
   23:      * @param  array  $headers
   24       * @return \Illuminate\Http\Response
   25       */
   26:     public function view($view, $data = [], $status = 200, array $headers = []);
   27  
   28      /**
   ..
   31       * @param  string|array  $data
   32       * @param  int  $status
   33:      * @param  array  $headers
   34       * @param  int  $options
   35       * @return \Illuminate\Http\JsonResponse
   36       */
   37:     public function json($data = [], $status = 200, array $headers = [], $options = 0);
   38  
   39      /**
   ..
   43       * @param  string|array  $data
   44       * @param  int  $status
   45:      * @param  array  $headers
   46       * @param  int  $options
   47       * @return \Illuminate\Http\JsonResponse
   48       */
   49:     public function jsonp($callback, $data = [], $status = 200, array $headers = [], $options = 0);
   50  
   51      /**
   ..
   54       * @param  \Closure  $callback
   55       * @param  int  $status
   56:      * @param  array  $headers
   57       * @return \Symfony\Component\HttpFoundation\StreamedResponse
   58       */
   59:     public function stream($callback, $status = 200, array $headers = []);
   60  
   61      /**
   ..
   64       * @param  \SplFileInfo|string  $file
   65       * @param  string  $name
   66:      * @param  array  $headers
   67       * @param  string|null  $disposition
   68       * @return \Symfony\Component\HttpFoundation\BinaryFileResponse
   69       */
   70:     public function download($file, $name = null, array $headers = [], $disposition = 'attachment');
   71  
   72      /**
   ..
   75       * @param  string  $path
   76       * @param  int  $status
   77:      * @param  array  $headers
   78       * @param  bool|null  $secure
   79       * @return \Illuminate\Http\RedirectResponse
   80       */
   81:     public function redirectTo($path, $status = 302, $headers = [], $secure = null);
   82  
   83      /**
   ..
   87       * @param  array  $parameters
   88       * @param  int  $status
   89:      * @param  array  $headers
   90       * @return \Illuminate\Http\RedirectResponse
   91       */
   92:     public function redirectToRoute($route, $parameters = [], $status = 302, $headers = []);
   93  
   94      /**
   ..
   98       * @param  array  $parameters
   99       * @param  int  $status
  100:      * @param  array  $headers
  101       * @return \Illuminate\Http\RedirectResponse
  102       */
  103:     public function redirectToAction($action, $parameters = [], $status = 302, $headers = []);
  104  
  105      /**
  ...
  108       * @param  string  $path
  109       * @param  int  $status
  110:      * @param  array  $headers
  111       * @param  bool|null  $secure
  112       * @return \Illuminate\Http\RedirectResponse
  113       */
  114:     public function redirectGuest($path, $status = 302, $headers = [], $secure = null);
  115  
  116      /**
  ...
  119       * @param  string  $default
  120       * @param  int  $status
  121:      * @param  array  $headers
  122       * @param  bool|null  $secure
  123       * @return \Illuminate\Http\RedirectResponse
  124       */
  125:     public function redirectToIntended($default = '/', $status = 302, $headers = [], $secure = null);
  126  }
  127  

/home/genis/Proyectos/ProyectoXat/vendor/laravel/framework/src/Illuminate/Cookie/CookieJar.php:
  132      public function queue(...$parameters)
  133      {
  134:         if (head($parameters) instanceof Cookie) {
  135:             $cookie = head($parameters);
  136          } else {
  137              $cookie = call_user_func_array([$this, 'make'], $parameters);

/home/genis/Proyectos/ProyectoXat/vendor/laravel/framework/src/Illuminate/Cookie/Middleware/AddQueuedCookiesToResponse.php:
   38  
   39          foreach ($this->cookies->getQueuedCookies() as $cookie) {
   40:             $response->headers->setCookie($cookie);
   41          }
   42  

/home/genis/Proyectos/ProyectoXat/vendor/laravel/framework/src/Illuminate/Cookie/Middleware/EncryptCookies.php:
  123      protected function encrypt(Response $response)
  124      {
  125:         foreach ($response->headers->getCookies() as $cookie) {
  126              if ($this->isDisabled($cookie->getName())) {
  127                  continue;
  128              }
  129  
  130:             $response->headers->setCookie($this->duplicate(
  131                  $cookie, $this->encrypter->encrypt($cookie->getValue())
  132              ));

/home/genis/Proyectos/ProyectoXat/vendor/laravel/framework/src/Illuminate/Database/Capsule/Manager.php:
  134          Eloquent::setConnectionResolver($this->manager);
  135  
  136:         // If we have an event dispatcher instance, we will go ahead and register it
  137          // with the Eloquent ORM, allowing for model callbacks while creating and
  138          // updating "model" instances; however, it is not necessary to operate.

/home/genis/Proyectos/ProyectoXat/vendor/laravel/framework/src/Illuminate/Database/Eloquent/Builder.php:
  913  
  914              $builder->callScope(function (Builder $builder) use ($scope) {
  915:                 // If the scope is a Closure we will just go ahead and call the scope with the
  916                  // builder instance. The "callScope" method will properly group the clauses
  917                  // that are added to this query so "where" clauses maintain proper logic.

/home/genis/Proyectos/ProyectoXat/vendor/laravel/framework/src/Illuminate/Database/Eloquent/Concerns/HasAttributes.php:
  238              }
  239  
  240:             // If the value is null, we'll still go ahead and set it in this list of
  241              // attributes since null is used to represent empty relationships if
  242              // if it a has one or belongs to type relationships on the models.

/home/genis/Proyectos/ProyectoXat/vendor/laravel/framework/src/Illuminate/Database/Eloquent/Model.php:
  699          }
  700  
  701:         // We will go ahead and set the exists property to true, so that it is set when
  702          // the created event is fired, just in case the developer tries to update it
  703          // during the event. This will allow them to do so and run an update here.
  ...
  780          // Here, we'll touch the owning models, verifying these timestamps get updated
  781          // for the models. This will allow any caching to get broken on the parents
  782:         // by the timestamp. Then we will go ahead and delete the model instance.
  783          $this->touchOwners();
  784  

/home/genis/Proyectos/ProyectoXat/vendor/laravel/framework/src/Illuminate/Database/Eloquent/Relations/Concerns/InteractsWithPivotTable.php:
  363          // Once we have all of the conditions set on the statement, we are ready
  364          // to run the delete on the pivot table. Then, if the touch parameter
  365:         // is true, we will go ahead and touch all related models to sync.
  366          $results = $query->delete();
  367  

/home/genis/Proyectos/ProyectoXat/vendor/laravel/framework/src/Illuminate/Database/Eloquent/Relations/MorphTo.php:
  139      {
  140          return collect($this->dictionary[$type])->map(function ($models) {
  141:             return head($models)->{$this->foreignKey};
  142          })->values()->unique()->all();
  143      }

/home/genis/Proyectos/ProyectoXat/vendor/laravel/framework/src/Illuminate/Database/Migrations/Migrator.php:
   91  
   92          // Once we have all these migrations that are outstanding we are ready to run
   93:         // we will go ahead and run them "up". This will execute each migration as
   94          // an operation against a database. Then we'll return this list of them.
   95          $this->runPending($migrations, $options);

/home/genis/Proyectos/ProyectoXat/vendor/laravel/framework/src/Illuminate/Database/Schema/Blueprint.php:
  154  
  155                  // If the index has been specified on the given column, and it has a string
  156:                 // value, we'll go ahead and call the index method and pass the name for
  157                  // the index since the developer specified the explicit name for this.
  158                  elseif (isset($column->{$index})) {

/home/genis/Proyectos/ProyectoXat/vendor/laravel/framework/src/Illuminate/Database/Schema/PostgresBuilder.php:
   98              }
   99  
  100:             $schema = head($schema);
  101          }
  102  

/home/genis/Proyectos/ProyectoXat/vendor/laravel/framework/src/Illuminate/Encryption/Encrypter.php:
   96          }
   97  
   98:         // Once we get the encrypted value we'll go ahead and base64_encode the input
   99          // vector and create the MAC for the encrypted value so we can then verify
  100          // its authenticity. Then, we'll JSON the data into the "payload" array.

/home/genis/Proyectos/ProyectoXat/vendor/laravel/framework/src/Illuminate/Filesystem/Filesystem.php:
  478          $options = $options ?: FilesystemIterator::SKIP_DOTS;
  479  
  480:         // If the destination directory does not actually exist, we will go ahead and
  481          // create it recursively, which just gets the destination prepared to copy
  482          // the files over. Once we make the directory we'll proceed the copying.
  ...
  539              }
  540  
  541:             // If the item is just a file, we can go ahead and delete it since we're
  542              // just looping through and waxing all of the files in this directory
  543              // and calling directories recursively, so we delete the real path.

/home/genis/Proyectos/ProyectoXat/vendor/laravel/framework/src/Illuminate/Filesystem/FilesystemAdapter.php:
  116       * @param  string  $path
  117       * @param  string|null  $name
  118:      * @param  array|null  $headers
  119       * @param  string|null  $disposition
  120       * @return \Symfony\Component\HttpFoundation\StreamedResponse
  121       */
  122:     public function response($path, $name = null, array $headers = [], $disposition = 'inline')
  123      {
  124          $response = new StreamedResponse;
  125  
  126:         $disposition = $response->headers->makeDisposition($disposition, $name ?? basename($path));
  127  
  128:         $response->headers->replace($headers + [
  129              'Content-Type' => $this->mimeType($path),
  130              'Content-Length' => $this->size($path),
  ...
  146       * @param  string  $path
  147       * @param  string|null  $name
  148:      * @param  array|null  $headers
  149       * @return \Symfony\Component\HttpFoundation\StreamedResponse
  150       */
  151:     public function download($path, $name = null, array $headers = [])
  152      {
  153:         return $this->response($path, $name, $headers, 'attachment');
  154      }
  155  

/home/genis/Proyectos/ProyectoXat/vendor/laravel/framework/src/Illuminate/Foundation/Application.php:
  927       * @param  int     $code
  928       * @param  string  $message
  929:      * @param  array   $headers
  930       * @return void
  931       *
  932       * @throws \Symfony\Component\HttpKernel\Exception\HttpException
  933       */
  934:     public function abort($code, $message = '', array $headers = [])
  935      {
  936          if ($code == 404) {
  ...
  938          }
  939  
  940:         throw new HttpException($code, $message, null, $headers);
  941      }
  942  

/home/genis/Proyectos/ProyectoXat/vendor/laravel/framework/src/Illuminate/Foundation/Console/Presets/bootstrap-stubs/_variables.scss:
   36  
   37  // Panels
   38: $panel-default-heading-bg: #fff;
   39  

/home/genis/Proyectos/ProyectoXat/vendor/laravel/framework/src/Illuminate/Foundation/Console/Presets/react-stubs/Example.js:
    9                      <div className="col-md-8 col-md-offset-2">
   10                          <div className="panel panel-default">
   11:                             <div className="panel-heading">Example Component</div>
   12  
   13                              <div className="panel-body">

/home/genis/Proyectos/ProyectoXat/vendor/laravel/framework/src/Illuminate/Foundation/Console/Presets/vue-stubs/ExampleComponent.vue:
    4              <div class="col-md-8 col-md-offset-2">
    5                  <div class="panel panel-default">
    6:                     <div class="panel-heading">Example Component</div>
    7  
    8                      <div class="panel-body">

/home/genis/Proyectos/ProyectoXat/vendor/laravel/framework/src/Illuminate/Foundation/Console/RouteListCommand.php:
   42  
   43      /**
   44:      * The table headers for the command.
   45       *
   46       * @var array
   47       */
   48:     protected $headers = ['Domain', 'Method', 'URI', 'Name', 'Action', 'Middleware'];
   49  
   50      /**
   ..
  138      protected function displayRoutes(array $routes)
  139      {
  140:         $this->table($this->headers, $routes);
  141      }
  142  

/home/genis/Proyectos/ProyectoXat/vendor/laravel/framework/src/Illuminate/Foundation/EnvironmentDetector.php:
   49          // will check the environment as a "web" request like a typical HTTP request.
   50          if (! is_null($value = $this->getEnvironmentArgument($args))) {
   51:             return head(array_slice(explode('=', $value), 1));
   52          }
   53  

/home/genis/Proyectos/ProyectoXat/vendor/laravel/framework/src/Illuminate/Foundation/Exceptions/Handler.php:
  305      protected function convertExceptionToResponse(Exception $e)
  306      {
  307:         $headers = $this->isHttpException($e) ? $e->getHeaders() : [];
  308  
  309          $statusCode = $this->isHttpException($e) ? $e->getStatusCode() : 500;
  ...
  318  
  319          return SymfonyResponse::create(
  320:             $content, $statusCode, $headers
  321          );
  322      }
  ...
  401  
  402          if (view()->exists($view = "errors::{$status}")) {
  403:             return response()->view($view, ['exception' => $e], $status, $e->getHeaders());
  404          }
  405  
  ...
  418          if ($response instanceof SymfonyRedirectResponse) {
  419              $response = new RedirectResponse(
  420:                 $response->getTargetUrl(), $response->getStatusCode(), $response->headers->all()
  421              );
  422          } else {
  423              $response = new Response(
  424:                 $response->getContent(), $response->getStatusCode(), $response->headers->all()
  425              );
  426          }
  ...
  440          $status = $this->isHttpException($e) ? $e->getStatusCode() : 500;
  441  
  442:         $headers = $this->isHttpException($e) ? $e->getHeaders() : [];
  443  
  444          return new JsonResponse(
  445:             $this->convertExceptionToArray($e), $status, $headers,
  446              JSON_PRETTY_PRINT | JSON_UNESCAPED_SLASHES
  447          );

/home/genis/Proyectos/ProyectoXat/vendor/laravel/framework/src/Illuminate/Foundation/Exceptions/views/layout.blade.php:
    1  <!DOCTYPE html>
    2  <html lang="en">
    3:     <head>
    4          <meta charset="utf-8">
    5          <meta http-equiv="X-UA-Compatible" content="IE=edge">
    .
   45              }
   46          </style>
   47:     </head>
   48      <body>
   49          <div class="flex-center position-ref full-height">

/home/genis/Proyectos/ProyectoXat/vendor/laravel/framework/src/Illuminate/Foundation/Http/Middleware/VerifyCsrfToken.php:
   79      protected function isReading($request)
   80      {
   81:         return in_array($request->method(), ['HEAD', 'GET', 'OPTIONS']);
   82      }
   83  
   ..
  136      protected function getTokenFromRequest($request)
  137      {
  138:         $token = $request->input('_token') ?: $request->header('X-CSRF-TOKEN');
  139  
  140:         if (! $token && $header = $request->header('X-XSRF-TOKEN')) {
  141:             $token = $this->encrypter->decrypt($header);
  142          }
  143  
  ...
  156          $config = config('session');
  157  
  158:         $response->headers->setCookie(
  159              new Cookie(
  160                  'XSRF-TOKEN', $request->session()->token(), $this->availableAt(60 * $config['lifetime']),

/home/genis/Proyectos/ProyectoXat/vendor/laravel/framework/src/Illuminate/Foundation/ProviderRepository.php:
   69          }
   70  
   71:         // We will go ahead and register all of the eagerly loaded providers with the
   72          // application so their services can be registered with the application as
   73          // a provided service. Then we will set the deferred service list on it.

/home/genis/Proyectos/ProyectoXat/vendor/laravel/framework/src/Illuminate/Foundation/Testing/Concerns/MakesHttpRequests.php:
   13  {
   14      /**
   15:      * Additional headers for the request.
   16       *
   17       * @var array
   18       */
   19:     protected $defaultHeaders = [];
   20  
   21      /**
   ..
   34  
   35      /**
   36:      * Define additional headers to be sent with the request.
   37       *
   38:      * @param  array $headers
   39       * @return $this
   40       */
   41:     public function withHeaders(array $headers)
   42      {
   43:         $this->defaultHeaders = array_merge($this->defaultHeaders, $headers);
   44  
   45          return $this;
   ..
   47  
   48      /**
   49:      * Add a header to be sent with the request.
   50       *
   51       * @param  string $name
   ..
   53       * @return $this
   54       */
   55:     public function withHeader(string $name, string $value)
   56      {
   57:         $this->defaultHeaders[$name] = $value;
   58  
   59          return $this;
   ..
   61  
   62      /**
   63:      * Flush all the configured headers.
   64       *
   65       * @return $this
   66       */
   67:     public function flushHeaders()
   68      {
   69:         $this->defaultHeaders = [];
   70  
   71          return $this;
   ..
  145  
  146      /**
  147:      * Set the referer header to simulate a previous request.
  148       *
  149       * @param  string  $url
  ...
  152      public function from(string $url)
  153      {
  154:         return $this->withHeader('referer', $url);
  155      }
  156  
  ...
  159       *
  160       * @param  string  $uri
  161:      * @param  array  $headers
  162       * @return \Illuminate\Foundation\Testing\TestResponse
  163       */
  164:     public function get($uri, array $headers = [])
  165      {
  166:         $server = $this->transformHeadersToServerVars($headers);
  167  
  168          return $this->call('GET', $uri, [], [], [], $server);
  ...
  173       *
  174       * @param  string  $uri
  175:      * @param  array  $headers
  176       * @return \Illuminate\Foundation\Testing\TestResponse
  177       */
  178:     public function getJson($uri, array $headers = [])
  179      {
  180:         return $this->json('GET', $uri, [], $headers);
  181      }
  182  
  ...
  186       * @param  string  $uri
  187       * @param  array  $data
  188:      * @param  array  $headers
  189       * @return \Illuminate\Foundation\Testing\TestResponse
  190       */
  191:     public function post($uri, array $data = [], array $headers = [])
  192      {
  193:         $server = $this->transformHeadersToServerVars($headers);
  194  
  195          return $this->call('POST', $uri, $data, [], [], $server);
  ...
  201       * @param  string  $uri
  202       * @param  array  $data
  203:      * @param  array  $headers
  204       * @return \Illuminate\Foundation\Testing\TestResponse
  205       */
  206:     public function postJson($uri, array $data = [], array $headers = [])
  207      {
  208:         return $this->json('POST', $uri, $data, $headers);
  209      }
  210  
  ...
  214       * @param  string  $uri
  215       * @param  array  $data
  216:      * @param  array  $headers
  217       * @return \Illuminate\Foundation\Testing\TestResponse
  218       */
  219:     public function put($uri, array $data = [], array $headers = [])
  220      {
  221:         $server = $this->transformHeadersToServerVars($headers);
  222  
  223          return $this->call('PUT', $uri, $data, [], [], $server);
  ...
  229       * @param  string  $uri
  230       * @param  array  $data
  231:      * @param  array  $headers
  232       * @return \Illuminate\Foundation\Testing\TestResponse
  233       */
  234:     public function putJson($uri, array $data = [], array $headers = [])
  235      {
  236:         return $this->json('PUT', $uri, $data, $headers);
  237      }
  238  
  ...
  242       * @param  string  $uri
  243       * @param  array  $data
  244:      * @param  array  $headers
  245       * @return \Illuminate\Foundation\Testing\TestResponse
  246       */
  247:     public function patch($uri, array $data = [], array $headers = [])
  248      {
  249:         $server = $this->transformHeadersToServerVars($headers);
  250  
  251          return $this->call('PATCH', $uri, $data, [], [], $server);
  ...
  257       * @param  string  $uri
  258       * @param  array  $data
  259:      * @param  array  $headers
  260       * @return \Illuminate\Foundation\Testing\TestResponse
  261       */
  262:     public function patchJson($uri, array $data = [], array $headers = [])
  263      {
  264:         return $this->json('PATCH', $uri, $data, $headers);
  265      }
  266  
  ...
  270       * @param  string  $uri
  271       * @param  array  $data
  272:      * @param  array  $headers
  273       * @return \Illuminate\Foundation\Testing\TestResponse
  274       */
  275:     public function delete($uri, array $data = [], array $headers = [])
  276      {
  277:         $server = $this->transformHeadersToServerVars($headers);
  278  
  279          return $this->call('DELETE', $uri, $data, [], [], $server);
  ...
  285       * @param  string  $uri
  286       * @param  array  $data
  287:      * @param  array  $headers
  288       * @return \Illuminate\Foundation\Testing\TestResponse
  289       */
  290:     public function deleteJson($uri, array $data = [], array $headers = [])
  291      {
  292:         return $this->json('DELETE', $uri, $data, $headers);
  293      }
  294  
  ...
  299       * @param  string  $uri
  300       * @param  array  $data
  301:      * @param  array  $headers
  302       * @return \Illuminate\Foundation\Testing\TestResponse
  303       */
  304:     public function json($method, $uri, array $data = [], array $headers = [])
  305      {
  306          $files = $this->extractFilesFromDataArray($data);
  ...
  308          $content = json_encode($data);
  309  
  310:         $headers = array_merge([
  311              'CONTENT_LENGTH' => mb_strlen($content, '8bit'),
  312              'CONTENT_TYPE' => 'application/json',
  313              'Accept' => 'application/json',
  314:         ], $headers);
  315  
  316          return $this->call(
  317:             $method, $uri, [], [], $files, $this->transformHeadersToServerVars($headers), $content
  318          );
  319      }
  ...
  375  
  376      /**
  377:      * Transform headers array to array of $_SERVER vars with HTTP_* format.
  378       *
  379:      * @param  array  $headers
  380       * @return array
  381       */
  382:     protected function transformHeadersToServerVars(array $headers)
  383      {
  384:         return collect(array_merge($this->defaultHeaders, $headers))->mapWithKeys(function ($value, $name) {
  385              $name = strtr(strtoupper($name), '-', '_');
  386  
  387:             return [$this->formatServerHeaderKey($name) => $value];
  388          })->all();
  389      }
  390  
  391      /**
  392:      * Format the header name for the server array.
  393       *
  394       * @param  string  $name
  395       * @return string
  396       */
  397:     protected function formatServerHeaderKey($name)
  398      {
  399          if (! Str::startsWith($name, 'HTTP_') && $name != 'CONTENT_TYPE' && $name != 'REMOTE_ADDR') {
  ...
  440      {
  441          while ($response->isRedirect()) {
  442:             $response = $this->get($response->headers->get('Location'));
  443          }
  444  

/home/genis/Proyectos/ProyectoXat/vendor/laravel/framework/src/Illuminate/Foundation/Testing/TestCase.php:
  151          }
  152  
  153:         if (property_exists($this, 'defaultHeaders')) {
  154:             $this->defaultHeaders = [];
  155          }
  156  

/home/genis/Proyectos/ProyectoXat/vendor/laravel/framework/src/Illuminate/Foundation/Testing/TestResponse.php:
   95  
   96          if (! is_null($uri)) {
   97:             PHPUnit::assertEquals(app('url')->to($uri), $this->headers->get('Location'));
   98          }
   99  
  ...
  102  
  103      /**
  104:      * Asserts that the response contains the given header and equals the optional value.
  105       *
  106:      * @param  string  $headerName
  107       * @param  mixed  $value
  108       * @return $this
  109       */
  110:     public function assertHeader($headerName, $value = null)
  111      {
  112          PHPUnit::assertTrue(
  113:             $this->headers->has($headerName), "Header [{$headerName}] not present on response."
  114          );
  115  
  116:         $actual = $this->headers->get($headerName);
  117  
  118          if (! is_null($value)) {
  119              PHPUnit::assertEquals(
  120:                 $value, $this->headers->get($headerName),
  121:                 "Header [{$headerName}] was found, but value [{$actual}] does not match [{$value}]."
  122              );
  123          }
  ...
  127  
  128      /**
  129:      * Asserts that the response does not contains the given header.
  130       *
  131:      * @param  string  $headerName
  132       * @return $this
  133       */
  134:     public function assertHeaderMissing($headerName)
  135      {
  136          PHPUnit::assertFalse(
  137:             $this->headers->has($headerName), "Unexpected header [{$headerName}] is present on response."
  138          );
  139  
  ...
  234      protected function getCookie($cookieName)
  235      {
  236:         foreach ($this->headers->getCookies() as $cookie) {
  237              if ($cookie->getName() === $cookieName) {
  238                  return $cookie;

/home/genis/Proyectos/ProyectoXat/vendor/laravel/framework/src/Illuminate/Foundation/helpers.php:
   25       * @param  int     $code
   26       * @param  string  $message
   27:      * @param  array   $headers
   28       * @return void
   29       *
   ..
   31       * @throws \Symfony\Component\HttpKernel\Exception\NotFoundHttpException
   32       */
   33:     function abort($code, $message = '', array $headers = [])
   34      {
   35:         app()->abort($code, $message, $headers);
   36      }
   37  }
   ..
   44       * @param  int     $code
   45       * @param  string  $message
   46:      * @param  array   $headers
   47       * @return void
   48       *
   ..
   50       * @throws \Symfony\Component\HttpKernel\Exception\NotFoundHttpException
   51       */
   52:     function abort_if($boolean, $code, $message = '', array $headers = [])
   53      {
   54          if ($boolean) {
   55:             abort($code, $message, $headers);
   56          }
   57      }
   ..
   65       * @param  int     $code
   66       * @param  string  $message
   67:      * @param  array   $headers
   68       * @return void
   69       *
   ..
   71       * @throws \Symfony\Component\HttpKernel\Exception\NotFoundHttpException
   72       */
   73:     function abort_unless($boolean, $code, $message = '', array $headers = [])
   74      {
   75          if (! $boolean) {
   76:             abort($code, $message, $headers);
   77          }
   78      }
   ..
  161       *
  162       * @param  int    $status
  163:      * @param  array  $headers
  164       * @param  mixed  $fallback
  165       * @return \Illuminate\Http\RedirectResponse
  166       */
  167:     function back($status = 302, $headers = [], $fallback = false)
  168      {
  169:         return app('redirect')->back($status, $headers, $fallback);
  170      }
  171  }
  ...
  652       * @param  string|null  $to
  653       * @param  int     $status
  654:      * @param  array   $headers
  655       * @param  bool    $secure
  656       * @return \Illuminate\Routing\Redirector|\Illuminate\Http\RedirectResponse
  657       */
  658:     function redirect($to = null, $status = 302, $headers = [], $secure = null)
  659      {
  660          if (is_null($to)) {
  ...
  662          }
  663  
  664:         return app('redirect')->to($to, $status, $headers, $secure);
  665      }
  666  }
  ...
  760       * @param  string  $content
  761       * @param  int     $status
  762:      * @param  array   $headers
  763       * @return \Symfony\Component\HttpFoundation\Response|\Illuminate\Contracts\Routing\ResponseFactory
  764       */
  765:     function response($content = '', $status = 200, array $headers = [])
  766      {
  767          $factory = app(ResponseFactory::class);
  ...
  771          }
  772  
  773:         return $factory->make($content, $status, $headers);
  774      }
  775  }

/home/genis/Proyectos/ProyectoXat/vendor/laravel/framework/src/Illuminate/Http/Concerns/InteractsWithContentTypes.php:
   32      public function isJson()
   33      {
   34:         return Str::contains($this->header('CONTENT_TYPE'), ['/json', '+json']);
   35      }
   36  

/home/genis/Proyectos/ProyectoXat/vendor/laravel/framework/src/Illuminate/Http/Concerns/InteractsWithInput.php:
   24  
   25      /**
   26:      * Determine if a header is set on the request.
   27       *
   28       * @param  string  $key
   29       * @return bool
   30       */
   31:     public function hasHeader($key)
   32      {
   33:         return ! is_null($this->header($key));
   34      }
   35  
   36      /**
   37:      * Retrieve a header from the request.
   38       *
   39       * @param  string  $key
   ..
   41       * @return string|array
   42       */
   43:     public function header($key = null, $default = null)
   44      {
   45:         return $this->retrieveItem('headers', $key, $default);
   46      }
   47  
   48      /**
   49:      * Get the bearer token from the request headers.
   50       *
   51       * @return string|null
   ..
   53      public function bearerToken()
   54      {
   55:         $header = $this->header('Authorization', '');
   56  
   57:         if (Str::startsWith($header, 'Bearer ')) {
   58:             return Str::substr($header, 7);
   59          }
   60      }

/home/genis/Proyectos/ProyectoXat/vendor/laravel/framework/src/Illuminate/Http/Exceptions/PostTooLargeException.php:
   13       * @param  string|null  $message
   14       * @param  \Exception|null  $previous
   15:      * @param  array  $headers
   16       * @param  int  $code
   17       * @return void
   18       */
   19:     public function __construct($message = null, Exception $previous = null, array $headers = [], $code = 0)
   20      {
   21:         parent::__construct(413, $message, $previous, $headers, $code);
   22      }
   23  }

/home/genis/Proyectos/ProyectoXat/vendor/laravel/framework/src/Illuminate/Http/JsonResponse.php:
   21       * @param  mixed  $data
   22       * @param  int    $status
   23:      * @param  array  $headers
   24       * @param  int    $options
   25       * @return void
   26       */
   27:     public function __construct($data = null, $status = 200, $headers = [], $options = 0)
   28      {
   29          $this->encodingOptions = $options;
   30  
   31:         parent::__construct($data, $status, $headers);
   32      }
   33  

/home/genis/Proyectos/ProyectoXat/vendor/laravel/framework/src/Illuminate/Http/Middleware/FrameGuard.php:
   18          $response = $next($request);
   19  
   20:         $response->headers->set('X-Frame-Options', 'SAMEORIGIN', false);
   21  
   22          return $response;

/home/genis/Proyectos/ProyectoXat/vendor/laravel/framework/src/Illuminate/Http/RedirectResponse.php:
   60      {
   61          foreach ($cookies as $cookie) {
   62:             $this->headers->setCookie($cookie);
   63          }
   64  

/home/genis/Proyectos/ProyectoXat/vendor/laravel/framework/src/Illuminate/Http/Request.php:
  241      public function pjax()
  242      {
  243:         return $this->headers->get('X-PJAX') == true;
  244      }
  245  
  ...
  281      public function userAgent()
  282      {
  283:         return $this->headers->get('User-Agent');
  284      }
  285  

/home/genis/Proyectos/ProyectoXat/vendor/laravel/framework/src/Illuminate/Http/Response.php:
   27          $this->original = $content;
   28  
   29:         // If the content is "JSONable" we will set the appropriate header and convert
   30          // the content to JSON. This is useful when returning something like models
   31          // from routes that will be automatically transformed to their JSON form.
   32          if ($this->shouldBeJson($content)) {
   33:             $this->header('Content-Type', 'application/json');
   34  
   35              $content = $this->morphToJson($content);

/home/genis/Proyectos/ProyectoXat/vendor/laravel/framework/src/Illuminate/Http/ResponseTrait.php:
    4  
    5  use Exception;
    6: use Symfony\Component\HttpFoundation\HeaderBag;
    7  use Illuminate\Http\Exceptions\HttpResponseException;
    8  
    .
   56  
   57      /**
   58:      * Set a header on the Response.
   59       *
   60       * @param  string  $key
   ..
   63       * @return $this
   64       */
   65:     public function header($key, $values, $replace = true)
   66      {
   67:         $this->headers->set($key, $values, $replace);
   68  
   69          return $this;
   ..
   71  
   72      /**
   73:      * Add an array of headers to the response.
   74       *
   75:      * @param  \Symfony\Component\HttpFoundation\HeaderBag|array  $headers
   76       * @return $this
   77       */
   78:     public function withHeaders($headers)
   79      {
   80:         if ($headers instanceof HeaderBag) {
   81:             $headers = $headers->all();
   82          }
   83  
   84:         foreach ($headers as $key => $value) {
   85:             $this->headers->set($key, $value);
   86          }
   87  
   ..
  112          }
  113  
  114:         $this->headers->setCookie($cookie);
  115  
  116          return $this;

/home/genis/Proyectos/ProyectoXat/vendor/laravel/framework/src/Illuminate/Http/Testing/MimeType.php:
  132          'xdp' => 'application/vnd.adobe.xdp+xml',
  133          'xfdf' => 'application/vnd.adobe.xfdf',
  134:         'ahead' => 'application/vnd.ahead.space',
  135          'azf' => 'application/vnd.airzip.filesecure.azf',
  136          'azs' => 'application/vnd.airzip.filesecure.azs',

/home/genis/Proyectos/ProyectoXat/vendor/laravel/framework/src/Illuminate/Mail/Mailer.php:
  425          // If a global from address has been specified we will set it on every message
  426          // instance so the developer does not have to repeat themselves every time
  427:         // they create a new message. We'll just go ahead and push this address.
  428          if (! empty($this->from['address'])) {
  429              $message->from($this->from['address'], $this->from['name']);
  ...
  432          // When a global reply address was specified we will set this on every message
  433          // instance so the developer does not have to repeat themselves every time
  434:         // they create a new message. We will just go ahead and push this address.
  435          if (! empty($this->replyTo['address'])) {
  436              $message->replyTo($this->replyTo['address'], $this->replyTo['name']);

/home/genis/Proyectos/ProyectoXat/vendor/laravel/framework/src/Illuminate/Mail/Transport/LogTransport.php:
   49      protected function getMimeEntityString(Swift_Mime_SimpleMimeEntity $entity)
   50      {
   51:         $string = (string) $entity->getHeaders().PHP_EOL.$entity->getBody();
   52  
   53          foreach ($entity->getChildren() as $children) {

/home/genis/Proyectos/ProyectoXat/vendor/laravel/framework/src/Illuminate/Mail/Transport/MandrillTransport.php:
   59       * Get all the addresses this message should be sent to.
   60       *
   61:      * Note that Mandrill still respects CC, BCC headers in raw message itself.
   62       *
   63       * @param  \Swift_Mime_SimpleMessage $message

/home/genis/Proyectos/ProyectoXat/vendor/laravel/framework/src/Illuminate/Mail/Transport/SesTransport.php:
   33          $this->beforeSendPerformed($message);
   34  
   35:         $headers = $message->getHeaders();
   36  
   37:         $headers->addTextHeader('X-SES-Message-ID', $this->ses->sendRawEmail([
   38              'Source' => key($message->getSender() ?: $message->getFrom()),
   39              'RawMessage' => [

/home/genis/Proyectos/ProyectoXat/vendor/laravel/framework/src/Illuminate/Mail/Transport/SparkPostTransport.php:
   56  
   57          $response = $this->client->post('https://api.sparkpost.com/api/v1/transmissions', [
   58:             'headers' => [
   59                  'Authorization' => $this->key,
   60              ],
   ..
   67          ]);
   68  
   69:         $message->getHeaders()->addTextHeader(
   70              'X-SparkPost-Transmission-ID', $this->getTransmissionId($response)
   71          );
   ..
   79       * Get all the addresses this message should be sent to.
   80       *
   81:      * Note that SparkPost still respects CC, BCC headers in raw message itself.
   82       *
   83       * @param  \Swift_Mime_SimpleMessage $message

/home/genis/Proyectos/ProyectoXat/vendor/laravel/framework/src/Illuminate/Mail/resources/views/html/header.blade.php:
    1  <tr>
    2:     <td class="header">
    3          <a href="{{ $url }}">
    4              {{ $slot }}

/home/genis/Proyectos/ProyectoXat/vendor/laravel/framework/src/Illuminate/Mail/resources/views/html/layout.blade.php:
    1  <!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
    2  <html xmlns="http://www.w3.org/1999/xhtml">
    3: <head>
    4      <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    5      <meta http-equiv="Content-Type" content="text/html; charset=UTF-8" />
    6: </head>
    7  <body>
    8      <style>
    .
   28              <td align="center">
   29                  <table class="content" width="100%" cellpadding="0" cellspacing="0">
   30:                     {{ $header or '' }}
   31  
   32                      <!-- Email Body -->

/home/genis/Proyectos/ProyectoXat/vendor/laravel/framework/src/Illuminate/Mail/resources/views/html/message.blade.php:
    1  @component('mail::layout')
    2:     {{-- Header --}}
    3:     @slot('header')
    4:         @component('mail::header', ['url' => config('app.url')])
    5              {{ config('app.name') }}
    6          @endcomponent

/home/genis/Proyectos/ProyectoXat/vendor/laravel/framework/src/Illuminate/Mail/resources/views/html/themes/default.css:
  101  }
  102  
  103: /* Header */
  104  
  105: .header {
  106      padding: 25px 0;
  107      text-align: center;
  108  }
  109  
  110: .header a {
  111      color: #bbbfc3;
  112      font-size: 19px;

/home/genis/Proyectos/ProyectoXat/vendor/laravel/framework/src/Illuminate/Mail/resources/views/markdown/layout.blade.php:
    1: {!! strip_tags($header) !!}
    2  
    3  {!! strip_tags($slot) !!}

/home/genis/Proyectos/ProyectoXat/vendor/laravel/framework/src/Illuminate/Mail/resources/views/markdown/message.blade.php:
    1  @component('mail::layout')
    2:     {{-- Header --}}
    3:     @slot('header')
    4:         @component('mail::header', ['url' => config('app.url')])
    5              {{ config('app.name') }}
    6          @endcomponent

/home/genis/Proyectos/ProyectoXat/vendor/laravel/framework/src/Illuminate/Queue/Console/ListFailedCommand.php:
   23  
   24      /**
   25:      * The table headers for the command.
   26       *
   27       * @var array
   28       */
   29:     protected $headers = ['ID', 'Connection', 'Queue', 'Class', 'Failed At'];
   30  
   31      /**
   ..
  114      protected function displayFailedJobs(array $jobs)
  115      {
  116:         $this->table($this->headers, $jobs);
  117      }
  118  }

/home/genis/Proyectos/ProyectoXat/vendor/laravel/framework/src/Illuminate/Queue/Worker.php:
  344      {
  345          try {
  346:             // First, we will go ahead and mark the job as failed if it will exceed the maximum
  347              // attempts it is allowed to run the next time we process it. If so we will just
  348:             // go ahead and mark it as failed now so we do not have to release this again.
  349              if (! $job->hasFailed()) {
  350                  $this->markJobAsFailedIfWillExceedMaxAttempts(

/home/genis/Proyectos/ProyectoXat/vendor/laravel/framework/src/Illuminate/Routing/Middleware/ThrottleRequests.php:
   57          $response = $next($request);
   58  
   59:         return $this->addHeaders(
   60              $response, $maxAttempts,
   61              $this->calculateRemainingAttempts($key, $maxAttempts)
   ..
  112          $retryAfter = $this->getTimeUntilNextRetry($key);
  113  
  114:         $headers = $this->getHeaders(
  115              $maxAttempts,
  116              $this->calculateRemainingAttempts($key, $maxAttempts, $retryAfter),
  ...
  119  
  120          return new HttpException(
  121:             429, 'Too Many Attempts.', null, $headers
  122          );
  123      }
  ...
  135  
  136      /**
  137:      * Add the limit header information to the given response.
  138       *
  139       * @param  \Symfony\Component\HttpFoundation\Response  $response
  ...
  143       * @return \Symfony\Component\HttpFoundation\Response
  144       */
  145:     protected function addHeaders(Response $response, $maxAttempts, $remainingAttempts, $retryAfter = null)
  146      {
  147:         $response->headers->add(
  148:             $this->getHeaders($maxAttempts, $remainingAttempts, $retryAfter)
  149          );
  150  
  ...
  153  
  154      /**
  155:      * Get the limit headers information.
  156       *
  157       * @param  int  $maxAttempts
  ...
  160       * @return array
  161       */
  162:     protected function getHeaders($maxAttempts, $remainingAttempts, $retryAfter = null)
  163      {
  164:         $headers = [
  165              'X-RateLimit-Limit' => $maxAttempts,
  166              'X-RateLimit-Remaining' => $remainingAttempts,
  ...
  168  
  169          if (! is_null($retryAfter)) {
  170:             $headers['Retry-After'] = $retryAfter;
  171:             $headers['X-RateLimit-Reset'] = $this->availableAt($retryAfter);
  172          }
  173  
  174:         return $headers;
  175      }
  176  

/home/genis/Proyectos/ProyectoXat/vendor/laravel/framework/src/Illuminate/Routing/Middleware/ThrottleRequestsWithRedis.php:
   63          $response = $next($request);
   64  
   65:         return $this->addHeaders(
   66              $response, $maxAttempts,
   67              $this->calculateRemainingAttempts($key, $maxAttempts)

/home/genis/Proyectos/ProyectoXat/vendor/laravel/framework/src/Illuminate/Routing/Redirector.php:
   51       *
   52       * @param  int    $status
   53:      * @param  array  $headers
   54       * @param  mixed  $fallback
   55       * @return \Illuminate\Http\RedirectResponse
   56       */
   57:     public function back($status = 302, $headers = [], $fallback = false)
   58      {
   59:         return $this->createRedirect($this->generator->previous($fallback), $status, $headers);
   60      }
   61  
   ..
   64       *
   65       * @param  int    $status
   66:      * @param  array  $headers
   67       * @return \Illuminate\Http\RedirectResponse
   68       */
   69:     public function refresh($status = 302, $headers = [])
   70      {
   71:         return $this->to($this->generator->getRequest()->path(), $status, $headers);
   72      }
   73  
   ..
   77       * @param  string  $path
   78       * @param  int     $status
   79:      * @param  array   $headers
   80       * @param  bool    $secure
   81       * @return \Illuminate\Http\RedirectResponse
   82       */
   83:     public function guest($path, $status = 302, $headers = [], $secure = null)
   84      {
   85          $this->session->put('url.intended', $this->generator->full());
   86  
   87:         return $this->to($path, $status, $headers, $secure);
   88      }
   89  
   ..
   93       * @param  string  $default
   94       * @param  int     $status
   95:      * @param  array   $headers
   96       * @param  bool    $secure
   97       * @return \Illuminate\Http\RedirectResponse
   98       */
   99:     public function intended($default = '/', $status = 302, $headers = [], $secure = null)
  100      {
  101          $path = $this->session->pull('url.intended', $default);
  102  
  103:         return $this->to($path, $status, $headers, $secure);
  104      }
  105  
  ...
  109       * @param  string  $path
  110       * @param  int     $status
  111:      * @param  array   $headers
  112       * @param  bool    $secure
  113       * @return \Illuminate\Http\RedirectResponse
  114       */
  115:     public function to($path, $status = 302, $headers = [], $secure = null)
  116      {
  117:         return $this->createRedirect($this->generator->to($path, [], $secure), $status, $headers);
  118      }
  119  
  ...
  123       * @param  string  $path
  124       * @param  int     $status
  125:      * @param  array   $headers
  126       * @return \Illuminate\Http\RedirectResponse
  127       */
  128:     public function away($path, $status = 302, $headers = [])
  129      {
  130:         return $this->createRedirect($path, $status, $headers);
  131      }
  132  
  ...
  136       * @param  string  $path
  137       * @param  int     $status
  138:      * @param  array   $headers
  139       * @return \Illuminate\Http\RedirectResponse
  140       */
  141:     public function secure($path, $status = 302, $headers = [])
  142      {
  143:         return $this->to($path, $status, $headers, true);
  144      }
  145  
  ...
  150       * @param  array   $parameters
  151       * @param  int     $status
  152:      * @param  array   $headers
  153       * @return \Illuminate\Http\RedirectResponse
  154       */
  155:     public function route($route, $parameters = [], $status = 302, $headers = [])
  156      {
  157:         return $this->to($this->generator->route($route, $parameters), $status, $headers);
  158      }
  159  
  ...
  164       * @param  array   $parameters
  165       * @param  int     $status
  166:      * @param  array   $headers
  167       * @return \Illuminate\Http\RedirectResponse
  168       */
  169:     public function action($action, $parameters = [], $status = 302, $headers = [])
  170      {
  171:         return $this->to($this->generator->action($action, $parameters), $status, $headers);
  172      }
  173  
  ...
  177       * @param  string  $path
  178       * @param  int     $status
  179:      * @param  array   $headers
  180       * @return \Illuminate\Http\RedirectResponse
  181       */
  182:     protected function createRedirect($path, $status, $headers)
  183      {
  184:         return tap(new RedirectResponse($path, $status, $headers), function ($redirect) {
  185              if (isset($this->session)) {
  186                  $redirect->setSession($this->session);

/home/genis/Proyectos/ProyectoXat/vendor/laravel/framework/src/Illuminate/Routing/ResponseFactory.php:
   48       * @param  string  $content
   49       * @param  int  $status
   50:      * @param  array  $headers
   51       * @return \Illuminate\Http\Response
   52       */
   53:     public function make($content = '', $status = 200, array $headers = [])
   54      {
   55:         return new Response($content, $status, $headers);
   56      }
   57  
   ..
   62       * @param  array  $data
   63       * @param  int  $status
   64:      * @param  array  $headers
   65       * @return \Illuminate\Http\Response
   66       */
   67:     public function view($view, $data = [], $status = 200, array $headers = [])
   68      {
   69:         return $this->make($this->view->make($view, $data), $status, $headers);
   70      }
   71  
   ..
   75       * @param  mixed  $data
   76       * @param  int  $status
   77:      * @param  array  $headers
   78       * @param  int  $options
   79       * @return \Illuminate\Http\JsonResponse
   80       */
   81:     public function json($data = [], $status = 200, array $headers = [], $options = 0)
   82      {
   83:         return new JsonResponse($data, $status, $headers, $options);
   84      }
   85  
   ..
   90       * @param  mixed  $data
   91       * @param  int  $status
   92:      * @param  array  $headers
   93       * @param  int  $options
   94       * @return \Illuminate\Http\JsonResponse
   95       */
   96:     public function jsonp($callback, $data = [], $status = 200, array $headers = [], $options = 0)
   97      {
   98:         return $this->json($data, $status, $headers, $options)->setCallback($callback);
   99      }
  100  
  ...
  104       * @param  \Closure  $callback
  105       * @param  int  $status
  106:      * @param  array  $headers
  107       * @return \Symfony\Component\HttpFoundation\StreamedResponse
  108       */
  109:     public function stream($callback, $status = 200, array $headers = [])
  110      {
  111:         return new StreamedResponse($callback, $status, $headers);
  112      }
  113  
  ...
  117       * @param  \SplFileInfo|string  $file
  118       * @param  string  $name
  119:      * @param  array  $headers
  120       * @param  string|null  $disposition
  121       * @return \Symfony\Component\HttpFoundation\BinaryFileResponse
  122       */
  123:     public function download($file, $name = null, array $headers = [], $disposition = 'attachment')
  124      {
  125:         $response = new BinaryFileResponse($file, 200, $headers, true, $disposition);
  126  
  127          if (! is_null($name)) {
  ...
  136       *
  137       * @param  \SplFileInfo|string  $file
  138:      * @param  array  $headers
  139       * @return \Symfony\Component\HttpFoundation\BinaryFileResponse
  140       */
  141:     public function file($file, array $headers = [])
  142      {
  143:         return new BinaryFileResponse($file, 200, $headers);
  144      }
  145  
  ...
  149       * @param  string  $path
  150       * @param  int  $status
  151:      * @param  array  $headers
  152       * @param  bool|null  $secure
  153       * @return \Illuminate\Http\RedirectResponse
  154       */
  155:     public function redirectTo($path, $status = 302, $headers = [], $secure = null)
  156      {
  157:         return $this->redirector->to($path, $status, $headers, $secure);
  158      }
  159  
  ...
  164       * @param  array  $parameters
  165       * @param  int  $status
  166:      * @param  array  $headers
  167       * @return \Illuminate\Http\RedirectResponse
  168       */
  169:     public function redirectToRoute($route, $parameters = [], $status = 302, $headers = [])
  170      {
  171:         return $this->redirector->route($route, $parameters, $status, $headers);
  172      }
  173  
  ...
  178       * @param  array  $parameters
  179       * @param  int  $status
  180:      * @param  array  $headers
  181       * @return \Illuminate\Http\RedirectResponse
  182       */
  183:     public function redirectToAction($action, $parameters = [], $status = 302, $headers = [])
  184      {
  185:         return $this->redirector->action($action, $parameters, $status, $headers);
  186      }
  187  
  ...
  191       * @param  string  $path
  192       * @param  int  $status
  193:      * @param  array  $headers
  194       * @param  bool|null  $secure
  195       * @return \Illuminate\Http\RedirectResponse
  196       */
  197:     public function redirectGuest($path, $status = 302, $headers = [], $secure = null)
  198      {
  199:         return $this->redirector->guest($path, $status, $headers, $secure);
  200      }
  201  
  ...
  205       * @param  string  $default
  206       * @param  int  $status
  207:      * @param  array  $headers
  208       * @param  bool|null  $secure
  209       * @return \Illuminate\Http\RedirectResponse
  210       */
  211:     public function redirectToIntended($default = '/', $status = 302, $headers = [], $secure = null)
  212      {
  213:         return $this->redirector->intended($default, $status, $headers, $secure);
  214      }
  215  }

/home/genis/Proyectos/ProyectoXat/vendor/laravel/framework/src/Illuminate/Routing/Route.php:
  134          $this->action = $this->parseAction($action);
  135  
  136:         if (in_array('GET', $this->methods) && ! in_array('HEAD', $this->methods)) {
  137:             $this->methods[] = 'HEAD';
  138          }
  139  

/home/genis/Proyectos/ProyectoXat/vendor/laravel/framework/src/Illuminate/Routing/RouteCollection.php:
  211          // Here we will spin through all verbs except for the current request verb and
  212          // check to see if any routes respond to them. If they do, we will return a
  213:         // proper error response with the correct headers on the response string.
  214          $others = [];
  215  

/home/genis/Proyectos/ProyectoXat/vendor/laravel/framework/src/Illuminate/Routing/Router.php:
  113       * @var array
  114       */
  115:     public static $verbs = ['GET', 'HEAD', 'POST', 'PUT', 'PATCH', 'DELETE', 'OPTIONS'];
  116  
  117      /**
  ...
  138      public function get($uri, $action = null)
  139      {
  140:         return $this->addRoute(['GET', 'HEAD'], $uri, $action);
  141      }
  142  
  ...
  253      public function view($uri, $view, $data = [])
  254      {
  255:         return $this->match(['GET', 'HEAD'], $uri, '\Illuminate\Routing\ViewController')
  256                  ->defaults('view', $view)
  257                  ->defaults('data', $data);

/home/genis/Proyectos/ProyectoXat/vendor/laravel/framework/src/Illuminate/Routing/SortedMiddleware.php:
   41              }
   42  
   43:             $stripped = head(explode(':', $middleware));
   44  
   45              if (in_array($stripped, $priorityMap)) {

/home/genis/Proyectos/ProyectoXat/vendor/laravel/framework/src/Illuminate/Routing/UrlGenerator.php:
  135      public function previous($fallback = false)
  136      {
  137:         $referrer = $this->request->headers->get('referer');
  138  
  139          $url = $referrer ? $this->to($referrer) : $this->getPreviousUrlFromSession();

/home/genis/Proyectos/ProyectoXat/vendor/laravel/framework/src/Illuminate/Session/DatabaseSessionHandler.php:
  249      protected function userAgent()
  250      {
  251:         return substr((string) $this->container->make('request')->header('User-Agent'), 0, 500);
  252      }
  253  

/home/genis/Proyectos/ProyectoXat/vendor/laravel/framework/src/Illuminate/Session/Middleware/StartSession.php:
   65          // Again, if the session has been configured we will need to close out the session
   66          // so that the attributes may be persisted to some storage medium. We will also
   67:         // add the session identifier cookie to the application response headers now.
   68          if ($this->sessionConfigured()) {
   69              $this->storeCurrentUrl($request, $session);
   ..
  174  
  175          if ($this->sessionIsPersistent($config = $this->manager->getSessionConfig())) {
  176:             $response->headers->setCookie(new Cookie(
  177                  $session->getName(), $session->getId(), $this->getCookieExpirationDate(),
  178                  $config['path'], $config['domain'], $config['secure'] ?? false,

/home/genis/Proyectos/ProyectoXat/vendor/laravel/framework/src/Illuminate/Support/NamespacedItemResolver.php:
   53      {
   54          // The first segment in a basic array will always be the group, so we can go
   55:         // ahead and grab that segment. If there is only one total segment we are
   56          // just pulling an entire group out of the array and not a single item.
   57          $group = $segments[0];

/home/genis/Proyectos/ProyectoXat/vendor/laravel/framework/src/Illuminate/Support/helpers.php:
  648  }
  649  
  650: if (! function_exists('head')) {
  651      /**
  652       * Get the first element of an array. Useful for method chaining.
  ...
  655       * @return mixed
  656       */
  657:     function head($array)
  658      {
  659          return reset($array);

/home/genis/Proyectos/ProyectoXat/vendor/laravel/framework/src/Illuminate/Validation/ValidationRuleParser.php:
  175      protected function mergeRulesForAttribute($results, $attribute, $rules)
  176      {
  177:         $merge = head($this->explodeRules([$rules]));
  178  
  179          $results[$attribute] = array_merge(

/home/genis/Proyectos/ProyectoXat/vendor/league/flysystem/docs/_layouts/default.html:
    1  <!DOCTYPE html>
    2  <html>
    3: <head>
    4      <meta charset="utf-8">
    5      <meta http-equiv="X-UA-Compatible" content="IE=edge">
    .
   25      <link rel="stylesheet" href="//theme.thephpleague.com/css/all.css">
   26      <base href="//flysystem.thephpleague.com{{ page.permalink }}">
   27: </head>
   28  <body>
   29  
   ..
   38  </section>
   39  
   40: <header>
   41      <a class="logo" href="/">
   42          {% if site.data.images.logo %}
   ..
   51          Presented by The League of Extraordinary Packages
   52      </a>
   53: </header>
   54  
   55  <input type="checkbox" id="menu">

/home/genis/Proyectos/ProyectoXat/vendor/league/flysystem/docs/upgrade-to-1.0.0.md:
   33  
   34  ~~~ php
   35: $filesystem = new Filesystem($adapter, $cacheAdapter);
   36  ~~~
   37  
   ..
   50  use League\Flysystem\Cached\CachedAdapter;
   51  
   52: $decoratedAdapter = new CachedAdapter($adapter, $cacheAdapter);
   53  $filesystem = new Filesystem($decoratedAdapter);
   54  ~~~

/home/genis/Proyectos/ProyectoXat/vendor/mockery/mockery/docs/conf.py:
  196  #latex_logo = None
  197  
  198: # For "manual" documents, if this is true, then toplevel headings are parts,
  199  # not chapters.
  200  #latex_use_parts = False

/home/genis/Proyectos/ProyectoXat/vendor/mockery/mockery/docs/reference/partial_mocks.rst:
   50  
   51  A generated partial test double, also known as a traditional partial mock,
   52: defines ahead of time which methods of a class are to be mocked and which are
   53  to be left unmocked (i.e. callable as normal). The syntax for creating
   54  traditional mocks is:

/home/genis/Proyectos/ProyectoXat/vendor/mockery/mockery/tests/Mockery/Generator/MockConfigurationTest.php:
  148       * @test
  149       */
  150:     public function shouldBringIteratorToHeadOfTargetListIfTraversablePresent()
  151      {
  152          $config = new MockConfiguration(array("Mockery\Generator\TestTraversableInterface2"));
  ...
  161       * @test
  162       */
  163:     public function shouldBringIteratorAggregateToHeadOfTargetListIfTraversablePresent()
  164      {
  165          $config = new MockConfiguration(array("Mockery\Generator\TestTraversableInterface3"));

/home/genis/Proyectos/ProyectoXat/vendor/monolog/monolog/.php_cs:
    1  <?php
    2  
    3: $header = <<<EOF
    4  This file is part of the Monolog package.
    5  
    .
   26          'binary_operator_spaces' => true,
   27          'blank_line_before_return' => true,
   28:         'header_comment' => array('header' => $header),
   29          'include' => true,
   30          'long_array_syntax' => true,

/home/genis/Proyectos/ProyectoXat/vendor/monolog/monolog/CHANGELOG.md:
    4    * Fixed GelfHandler truncation to be per field and not per message
    5    * Fixed compatibility issue with PHP <5.3.6
    6:   * Fixed support for headless Chrome in ChromePHPHandler
    7    * Fixed support for latest Aws SDK in DynamoDbHandler
    8    * Fixed support for SwiftMailer 6.0+ in SwiftMailerHandler
    .
  194    * Added sound support to the PushoverHandler
  195    * Fixed multi-threading support in StreamHandler
  196:   * Fixed empty headers issue when ChromePHPHandler received no records
  197    * Fixed default format of the ErrorLogHandler
  198  
  ...
  255    * Added support for previous exceptions in the LineFormatter exception serialization
  256    * Added Monolog\Logger::getLevels() to get all available levels
  257:   * Fixed ChromePHPHandler so it avoids sending headers larger than Chrome can handle
  258  
  259  ### 1.4.1 (2013-04-01)
  ...
  272    * Added `$useSSL` option to the PushoverHandler which is enabled by default
  273    * Fixed ChromePHPHandler and FirePHPHandler issue when multiple instances are used simultaneously
  274:   * Fixed header injection capability in the NativeMailHandler
  275  
  276  ### 1.3.1 (2013-01-11)
  ...
  302    * Added AmqpHandler (for use with AMQP servers)
  303    * Added CubeHandler
  304:   * Added NativeMailerHandler::addHeader() to send custom headers in mails
  305    * Added the possibility to specify more than one recipient in NativeMailerHandler
  306    * Added the possibility to specify float timeouts in SocketHandler
  ...
  326  ### 1.0.2 (2011-10-24)
  327  
  328:   * Fixed bug in IE with large response headers and FirePHPHandler
  329  
  330  ### 1.0.1 (2011-08-25)

/home/genis/Proyectos/ProyectoXat/vendor/monolog/monolog/src/Monolog/Formatter/HtmlFormatter.php:
   47       * Creates an HTML table row
   48       *
   49:      * @param  string $th       Row header content
   50       * @param  string $td       Row standard cell content
   51       * @param  bool   $escapeTd false if td content must not be html escaped

/home/genis/Proyectos/ProyectoXat/vendor/monolog/monolog/src/Monolog/Formatter/WildfireFormatter.php:
   15  
   16  /**
   17:  * Serializes a log message according to Wildfire's header requirements
   18   *
   19   * @author Eric Clemmons (@ericclemmons) <eric@uxdriven.com>

/home/genis/Proyectos/ProyectoXat/vendor/monolog/monolog/src/Monolog/Handler/BrowserConsoleHandler.php:
  114      {
  115          // Check content type
  116:         foreach (headers_list() as $header) {
  117:             if (stripos($header, 'content-type:') === 0) {
  118                  // This handler only works with HTML and javascript outputs
  119                  // text/javascript is obsolete in favour of application/javascript, but still used
  120:                 if (stripos($header, 'application/javascript') !== false || stripos($header, 'text/javascript') !== false) {
  121                      return 'js';
  122                  }
  123:                 if (stripos($header, 'text/html') === false) {
  124                      return 'unknown';
  125                  }

/home/genis/Proyectos/ProyectoXat/vendor/monolog/monolog/src/Monolog/Handler/ChromePHPHandler.php:
   30  
   31      /**
   32:      * Header name
   33       */
   34:     const HEADER_NAME = 'X-ChromeLogger-Data';
   35      
   36      /**
   37       * Regular expression to detect supported browsers (matches any Chrome, or Firefox 43+)
   38       */
   39:     const USER_AGENT_REGEX = '{\b(?:Chrome/\d+(?:\.\d+)*|HeadlessChrome|Firefox/(?:4[3-9]|[5-9]\d|\d{3,})(?:\.\d)*)\b}';
   40  
   41      protected static $initialized = false;
   ..
   44       * Tracks whether we sent too much data
   45       *
   46:      * Chrome limits the headers to 256KB, so when we sent 240KB we stop sending
   47       *
   48       * @var Boolean
   ..
   56      );
   57  
   58:     protected static $sendHeaders = true;
   59  
   60      /**
   ..
  100  
  101      /**
  102:      * Creates & sends header for a record
  103       *
  104:      * @see sendHeader()
  105       * @see send()
  106       * @param array $record
  ...
  114  
  115      /**
  116:      * Sends the log header
  117       *
  118:      * @see sendHeader()
  119       */
  120      protected function send()
  121      {
  122:         if (self::$overflowed || !self::$sendHeaders) {
  123              return;
  124          }
  ...
  127              self::$initialized = true;
  128  
  129:             self::$sendHeaders = $this->headersAccepted();
  130:             if (!self::$sendHeaders) {
  131                  return;
  132              }
  ...
  141  
  142              $record = array(
  143:                 'message' => 'Incomplete logs, chrome header size limit reached',
  144                  'context' => array(),
  145                  'level' => Logger::WARNING,
  ...
  155  
  156          if (trim($data) !== '') {
  157:             $this->sendHeader(self::HEADER_NAME, $data);
  158          }
  159      }
  160  
  161      /**
  162:      * Send header string to the client
  163       *
  164:      * @param string $header
  165       * @param string $content
  166       */
  167:     protected function sendHeader($header, $content)
  168      {
  169:         if (!headers_sent() && self::$sendHeaders) {
  170:             header(sprintf('%s: %s', $header, $content));
  171          }
  172      }
  173  
  174      /**
  175:      * Verifies if the headers are accepted by the current user agent
  176       *
  177       * @return Boolean
  178       */
  179:     protected function headersAccepted()
  180      {
  181          if (empty($_SERVER['HTTP_USER_AGENT'])) {
  ...
  187  
  188      /**
  189:      * BC getter for the sendHeaders property that has been made static
  190       */
  191      public function __get($property)
  192      {
  193:         if ('sendHeaders' !== $property) {
  194              throw new \InvalidArgumentException('Undefined property '.$property);
  195          }
  196  
  197:         return static::$sendHeaders;
  198      }
  199  
  200      /**
  201:      * BC setter for the sendHeaders property that has been made static
  202       */
  203      public function __set($property, $value)
  204      {
  205:         if ('sendHeaders' !== $property) {
  206              throw new \InvalidArgumentException('Undefined property '.$property);
  207          }
  208  
  209:         static::$sendHeaders = $value;
  210      }
  211  }

/home/genis/Proyectos/ProyectoXat/vendor/monolog/monolog/src/Monolog/Handler/CouchDBHandler.php:
   54                  'ignore_errors' => true,
   55                  'max_redirects' => 0,
   56:                 'header'        => 'Content-type: application/json',
   57              ),
   58          ));

/home/genis/Proyectos/ProyectoXat/vendor/monolog/monolog/src/Monolog/Handler/CubeHandler.php:
  142  
  143          curl_setopt($this->httpConnection, CURLOPT_POSTFIELDS, '['.$data.']');
  144:         curl_setopt($this->httpConnection, CURLOPT_HTTPHEADER, array(
  145              'Content-Type: application/json',
  146              'Content-Length: ' . strlen('['.$data.']'),

/home/genis/Proyectos/ProyectoXat/vendor/monolog/monolog/src/Monolog/Handler/FirePHPHandler.php:
   22  {
   23      /**
   24:      * WildFire JSON header message format
   25       */
   26      const PROTOCOL_URI = 'http://meta.wildfirehq.org/Protocol/JsonStream/0.2';
   ..
   32  
   33      /**
   34:      * Must reference a "known" plugin, otherwise headers won't display in FirePHP
   35       */
   36      const PLUGIN_URI = 'http://meta.firephp.org/Wildfire/Plugin/FirePHP/Library-FirePHPCore/0.3';
   37  
   38      /**
   39:      * Header prefix for Wildfire to recognize & parse headers
   40       */
   41:     const HEADER_PREFIX = 'X-Wf';
   42  
   43      /**
   44:      * Whether or not Wildfire vendor-specific headers have been generated & sent yet
   45       */
   46      protected static $initialized = false;
   ..
   52      protected static $messageIndex = 1;
   53  
   54:     protected static $sendHeaders = true;
   55  
   56      /**
   57:      * Base header creation function used by init headers & record headers
   58       *
   59       * @param  array  $meta    Wildfire Plugin, Protocol & Structure Indexes
   60       * @param  string $message Log message
   61:      * @return array  Complete header string ready for the client as key and message as value
   62       */
   63:     protected function createHeader(array $meta, $message)
   64      {
   65:         $header = sprintf('%s-%s', self::HEADER_PREFIX, join('-', $meta));
   66  
   67:         return array($header => $message);
   68      }
   69  
   70      /**
   71:      * Creates message header from record
   72       *
   73:      * @see createHeader()
   74       * @param  array  $record
   75       * @return string
   76       */
   77:     protected function createRecordHeader(array $record)
   78      {
   79          // Wildfire is extensible to support multiple protocols & plugins in a single request,
   80          // but we're not taking advantage of that (yet), so we're using "1" for simplicity's sake.
   81:         return $this->createHeader(
   82              array(1, 1, 1, self::$messageIndex++),
   83              $record['formatted']
   ..
   94  
   95      /**
   96:      * Wildfire initialization headers to enable message parsing
   97       *
   98:      * @see createHeader()
   99:      * @see sendHeader()
  100       * @return array
  101       */
  102:     protected function getInitHeaders()
  103      {
  104:         // Initial payload consists of required headers for Wildfire
  105          return array_merge(
  106:             $this->createHeader(array('Protocol', 1), self::PROTOCOL_URI),
  107:             $this->createHeader(array(1, 'Structure', 1), self::STRUCTURE_URI),
  108:             $this->createHeader(array(1, 'Plugin', 1), self::PLUGIN_URI)
  109          );
  110      }
  111  
  112      /**
  113:      * Send header string to the client
  114       *
  115:      * @param string $header
  116       * @param string $content
  117       */
  118:     protected function sendHeader($header, $content)
  119      {
  120:         if (!headers_sent() && self::$sendHeaders) {
  121:             header(sprintf('%s: %s', $header, $content));
  122          }
  123      }
  124  
  125      /**
  126:      * Creates & sends header for a record, ensuring init headers have been sent prior
  127       *
  128:      * @see sendHeader()
  129:      * @see sendInitHeaders()
  130       * @param array $record
  131       */
  132      protected function write(array $record)
  133      {
  134:         if (!self::$sendHeaders) {
  135              return;
  136          }
  137  
  138:         // WildFire-specific headers must be sent prior to any messages
  139          if (!self::$initialized) {
  140              self::$initialized = true;
  141  
  142:             self::$sendHeaders = $this->headersAccepted();
  143:             if (!self::$sendHeaders) {
  144                  return;
  145              }
  146  
  147:             foreach ($this->getInitHeaders() as $header => $content) {
  148:                 $this->sendHeader($header, $content);
  149              }
  150          }
  151  
  152:         $header = $this->createRecordHeader($record);
  153:         if (trim(current($header)) !== '') {
  154:             $this->sendHeader(key($header), current($header));
  155          }
  156      }
  157  
  158      /**
  159:      * Verifies if the headers are accepted by the current user agent
  160       *
  161       * @return Boolean
  162       */
  163:     protected function headersAccepted()
  164      {
  165          if (!empty($_SERVER['HTTP_USER_AGENT']) && preg_match('{\bFirePHP/\d+\.\d+\b}', $_SERVER['HTTP_USER_AGENT'])) {
  ...
  171  
  172      /**
  173:      * BC getter for the sendHeaders property that has been made static
  174       */
  175      public function __get($property)
  176      {
  177:         if ('sendHeaders' !== $property) {
  178              throw new \InvalidArgumentException('Undefined property '.$property);
  179          }
  180  
  181:         return static::$sendHeaders;
  182      }
  183  
  184      /**
  185:      * BC setter for the sendHeaders property that has been made static
  186       */
  187      public function __set($property, $value)
  188      {
  189:         if ('sendHeaders' !== $property) {
  190              throw new \InvalidArgumentException('Undefined property '.$property);
  191          }
  192  
  193:         static::$sendHeaders = $value;
  194      }
  195  }

/home/genis/Proyectos/ProyectoXat/vendor/monolog/monolog/src/Monolog/Handler/FleepHookHandler.php:
   90          $content = $this->buildContent($record);
   91  
   92:         return $this->buildHeader($content) . $content;
   93      }
   94  
   95      /**
   96:      * Builds the header of the API Call
   97       *
   98       * @param  string $content
   99       * @return string
  100       */
  101:     private function buildHeader($content)
  102      {
  103:         $header = "POST " . self::FLEEP_HOOK_URI . $this->token . " HTTP/1.1\r\n";
  104:         $header .= "Host: " . self::FLEEP_HOST . "\r\n";
  105:         $header .= "Content-Type: application/x-www-form-urlencoded\r\n";
  106:         $header .= "Content-Length: " . strlen($content) . "\r\n";
  107:         $header .= "\r\n";
  108  
  109:         return $header;
  110      }
  111  

/home/genis/Proyectos/ProyectoXat/vendor/monolog/monolog/src/Monolog/Handler/FlowdockHandler.php:
   95          $content = $this->buildContent($record);
   96  
   97:         return $this->buildHeader($content) . $content;
   98      }
   99  
  ...
  110  
  111      /**
  112:      * Builds the header of the API Call
  113       *
  114       * @param  string $content
  115       * @return string
  116       */
  117:     private function buildHeader($content)
  118      {
  119:         $header = "POST /v1/messages/team_inbox/" . $this->apiToken . " HTTP/1.1\r\n";
  120:         $header .= "Host: api.flowdock.com\r\n";
  121:         $header .= "Content-Type: application/json\r\n";
  122:         $header .= "Content-Length: " . strlen($content) . "\r\n";
  123:         $header .= "\r\n";
  124  
  125:         return $header;
  126      }
  127  }

/home/genis/Proyectos/ProyectoXat/vendor/monolog/monolog/src/Monolog/Handler/HipChatHandler.php:
  124          $content = $this->buildContent($record);
  125  
  126:         return $this->buildHeader($content) . $content;
  127      }
  128  
  ...
  167  
  168      /**
  169:      * Builds the header of the API Call
  170       *
  171       * @param  string $content
  172       * @return string
  173       */
  174:     private function buildHeader($content)
  175      {
  176          if ($this->version == self::API_V1) {
  177:             $header = "POST /v1/rooms/message?format=json&auth_token={$this->token} HTTP/1.1\r\n";
  178          } else {
  179              // needed for rooms with special (spaces, etc) characters in the name
  180              $room = rawurlencode($this->room);
  181:             $header = "POST /v2/room/{$room}/notification?auth_token={$this->token} HTTP/1.1\r\n";
  182          }
  183  
  184:         $header .= "Host: {$this->host}\r\n";
  185:         $header .= "Content-Type: application/x-www-form-urlencoded\r\n";
  186:         $header .= "Content-Length: " . strlen($content) . "\r\n";
  187:         $header .= "\r\n";
  188  
  189:         return $header;
  190      }
  191  

/home/genis/Proyectos/ProyectoXat/vendor/monolog/monolog/src/Monolog/Handler/IFTTTHandler.php:
   61          curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
   62          curl_setopt($ch, CURLOPT_POSTFIELDS, $postString);
   63:         curl_setopt($ch, CURLOPT_HTTPHEADER, array(
   64              "Content-Type: application/json",
   65          ));

/home/genis/Proyectos/ProyectoXat/vendor/monolog/monolog/src/Monolog/Handler/LogglyHandler.php:
   79          $url = sprintf("https://%s/%s/%s/", self::HOST, $endpoint, $this->token);
   80  
   81:         $headers = array('Content-Type: application/json');
   82  
   83          if (!empty($this->tag)) {
   84:             $headers[] = 'X-LOGGLY-TAG: '.implode(',', $this->tag);
   85          }
   86  
   ..
   90          curl_setopt($ch, CURLOPT_POST, true);
   91          curl_setopt($ch, CURLOPT_POSTFIELDS, $data);
   92:         curl_setopt($ch, CURLOPT_HTTPHEADER, $headers);
   93          curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
   94  

/home/genis/Proyectos/ProyectoXat/vendor/monolog/monolog/src/Monolog/Handler/NativeMailerHandler.php:
   36  
   37      /**
   38:      * Optional headers for the message
   39       * @var array
   40       */
   41:     protected $headers = array();
   42  
   43      /**
   ..
   78          $this->to = is_array($to) ? $to : array($to);
   79          $this->subject = $subject;
   80:         $this->addHeader(sprintf('From: %s', $from));
   81          $this->maxColumnWidth = $maxColumnWidth;
   82      }
   83  
   84      /**
   85:      * Add headers to the message
   86       *
   87:      * @param  string|array $headers Custom added headers
   88       * @return self
   89       */
   90:     public function addHeader($headers)
   91      {
   92:         foreach ((array) $headers as $header) {
   93:             if (strpos($header, "\n") !== false || strpos($header, "\r") !== false) {
   94:                 throw new \InvalidArgumentException('Headers can not contain newline characters for security reasons');
   95              }
   96:             $this->headers[] = $header;
   97          }
   98  
   ..
  119      {
  120          $content = wordwrap($content, $this->maxColumnWidth);
  121:         $headers = ltrim(implode("\r\n", $this->headers) . "\r\n", "\r\n");
  122:         $headers .= 'Content-type: ' . $this->getContentType() . '; charset=' . $this->getEncoding() . "\r\n";
  123:         if ($this->getContentType() == 'text/html' && false === strpos($headers, 'MIME-Version:')) {
  124:             $headers .= 'MIME-Version: 1.0' . "\r\n";
  125          }
  126  
  ...
  133          $parameters = implode(' ', $this->parameters);
  134          foreach ($this->to as $to) {
  135:             mail($to, $subject, $content, $headers, $parameters);
  136          }
  137      }
  ...
  161      {
  162          if (strpos($contentType, "\n") !== false || strpos($contentType, "\r") !== false) {
  163:             throw new \InvalidArgumentException('The content type can not contain newline characters to prevent email header injection');
  164          }
  165  
  ...
  176      {
  177          if (strpos($encoding, "\n") !== false || strpos($encoding, "\r") !== false) {
  178:             throw new \InvalidArgumentException('The encoding can not contain newline characters to prevent email header injection');
  179          }
  180  

/home/genis/Proyectos/ProyectoXat/vendor/monolog/monolog/src/Monolog/Handler/PHPConsoleHandler.php:
   49          'registerHelper' => true, // bool Register PhpConsole\Helper that allows short debug calls like PC::debug($var, 'ta.g.s')
   50          'serverEncoding' => null, // string|null Server internal encoding
   51:         'headersLimit' => null, // int|null Set headers size limit for your web-server
   52          'password' => null, // string|null Protect PHP Console connection by password
   53          'enableSslOnlyMode' => false, // bool Force connection by SSL for clients with PHP Console installed
   ..
  128                  $connector->setAllowedIpMasks($this->options['ipMasks']);
  129              }
  130:             if ($this->options['headersLimit']) {
  131:                 $connector->setHeadersLimit($this->options['headersLimit']);
  132              }
  133              if ($this->options['detectDumpTraceAndSource']) {

/home/genis/Proyectos/ProyectoXat/vendor/monolog/monolog/src/Monolog/Handler/PushoverHandler.php:
   98          $content = $this->buildContent($record);
   99  
  100:         return $this->buildHeader($content) . $content;
  101      }
  102  
  ...
  142      }
  143  
  144:     private function buildHeader($content)
  145      {
  146:         $header = "POST /1/messages.json HTTP/1.1\r\n";
  147:         $header .= "Host: api.pushover.net\r\n";
  148:         $header .= "Content-Type: application/x-www-form-urlencoded\r\n";
  149:         $header .= "Content-Length: " . strlen($content) . "\r\n";
  150:         $header .= "\r\n";
  151  
  152:         return $header;
  153      }
  154  

/home/genis/Proyectos/ProyectoXat/vendor/monolog/monolog/src/Monolog/Handler/SlackHandler.php:
   86          $content = $this->buildContent($record);
   87  
   88:         return $this->buildHeader($content) . $content;
   89      }
   90  
   ..
  121  
  122      /**
  123:      * Builds the header of the API Call
  124       *
  125       * @param  string $content
  126       * @return string
  127       */
  128:     private function buildHeader($content)
  129      {
  130:         $header = "POST /api/chat.postMessage HTTP/1.1\r\n";
  131:         $header .= "Host: slack.com\r\n";
  132:         $header .= "Content-Type: application/x-www-form-urlencoded\r\n";
  133:         $header .= "Content-Length: " . strlen($content) . "\r\n";
  134:         $header .= "\r\n";
  135  
  136:         return $header;
  137      }
  138  

/home/genis/Proyectos/ProyectoXat/vendor/monolog/monolog/src/Monolog/Handler/SlackWebhookHandler.php:
   86              CURLOPT_POST => true,
   87              CURLOPT_RETURNTRANSFER => true,
   88:             CURLOPT_HTTPHEADER => array('Content-type: application/json'),
   89              CURLOPT_POSTFIELDS => $postString
   90          );

/home/genis/Proyectos/ProyectoXat/vendor/monolog/monolog/src/Monolog/Handler/SyslogUdp/UdpSocket.php:
   27      }
   28  
   29:     public function write($line, $header = "")
   30      {
   31:         $this->send($this->assembleMessage($line, $header));
   32      }
   33  
   ..
   48      }
   49  
   50:     protected function assembleMessage($line, $header)
   51      {
   52:         $chunkSize = self::DATAGRAM_MAX_LENGTH - strlen($header);
   53  
   54:         return $header . substr($line, 0, $chunkSize);
   55      }
   56  }

/home/genis/Proyectos/ProyectoXat/vendor/monolog/monolog/src/Monolog/Handler/SyslogUdpHandler.php:
   46          $lines = $this->splitMessageIntoLines($record['formatted']);
   47  
   48:         $header = $this->makeCommonSyslogHeader($this->logLevels[$record['level']]);
   49  
   50          foreach ($lines as $line) {
   51:             $this->socket->write($line, $header);
   52          }
   53      }
   ..
   68  
   69      /**
   70:      * Make common syslog header (see rfc5424)
   71       */
   72:     protected function makeCommonSyslogHeader($severity)
   73      {
   74          $priority = $severity + $this->facility;

/home/genis/Proyectos/ProyectoXat/vendor/monolog/monolog/src/Monolog/Logger.php:
  265       * microtime(true), formatting the result via sprintf() and then parsing
  266       * the resulting string via \DateTime::createFromFormat() can incur
  267:      * a measurable runtime overhead vs simple usage of DateTime to capture
  268       * a second resolution timestamp in systems which generate a large number
  269       * of log events.

/home/genis/Proyectos/ProyectoXat/vendor/monolog/monolog/tests/Monolog/Handler/ChromePHPHandlerTest.php:
   29       * @dataProvider agentsProvider
   30       */
   31:     public function testHeaders($agent)
   32      {
   33          $_SERVER['HTTP_USER_AGENT'] = $agent;
   ..
   50          );
   51  
   52:         $this->assertEquals($expected, $handler->getHeaders());
   53      }
   54  
   ..
   59              array('Mozilla/5.0 (X11; Ubuntu; Linux x86_64; rv:52.0) Gecko/20100101 Firefox/52.0'),
   60              array('Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Ubuntu Chromium/56.0.2924.76 Chrome/56.0.2924.76 Safari/537.36'),
   61:             array('Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) HeadlessChrome Safari/537.36'),
   62          );
   63      }
   64  
   65:     public function testHeadersOverflow()
   66      {
   67          $handler = new TestChromePHPHandler();
   ..
   69          $handler->handle($this->getRecord(Logger::WARNING, str_repeat('a', 150 * 1024)));
   70  
   71:         // overflow chrome headers limit
   72          $handler->handle($this->getRecord(Logger::WARNING, str_repeat('a', 100 * 1024)));
   73  
   ..
   91                      array(
   92                          'monolog',
   93:                         'Incomplete logs, chrome header size limit reached',
   94                          'unknown',
   95                          'warn',
   ..
  100          );
  101  
  102:         $this->assertEquals($expected, $handler->getHeaders());
  103      }
  104  
  ...
  129          );
  130  
  131:         $this->assertEquals($expected, $handler2->getHeaders());
  132      }
  133  }
  ...
  135  class TestChromePHPHandler extends ChromePHPHandler
  136  {
  137:     protected $headers = array();
  138  
  139      public static function reset()
  ...
  141          self::$initialized = false;
  142          self::$overflowed = false;
  143:         self::$sendHeaders = true;
  144          self::$json['rows'] = array();
  145      }
  146  
  147:     protected function sendHeader($header, $content)
  148      {
  149:         $this->headers[$header] = $content;
  150      }
  151  
  152:     public function getHeaders()
  153      {
  154:         return $this->headers;
  155      }
  156  }

/home/genis/Proyectos/ProyectoXat/vendor/monolog/monolog/tests/Monolog/Handler/FirePHPHandlerTest.php:
   26      }
   27  
   28:     public function testHeaders()
   29      {
   30          $handler = new TestFirePHPHandler;
   ..
   41          );
   42  
   43:         $this->assertEquals($expected, $handler->getHeaders());
   44      }
   45  
   ..
   69          );
   70  
   71:         $this->assertEquals($expected, $handler->getHeaders());
   72:         $this->assertEquals($expected2, $handler2->getHeaders());
   73      }
   74  }
   ..
   76  class TestFirePHPHandler extends FirePHPHandler
   77  {
   78:     protected $headers = array();
   79  
   80      public static function reset()
   81      {
   82          self::$initialized = false;
   83:         self::$sendHeaders = true;
   84          self::$messageIndex = 1;
   85      }
   86  
   87:     protected function sendHeader($header, $content)
   88      {
   89:         $this->headers[$header] = $content;
   90      }
   91  
   92:     public function getHeaders()
   93      {
   94:         return $this->headers;
   95      }
   96  }

/home/genis/Proyectos/ProyectoXat/vendor/monolog/monolog/tests/Monolog/Handler/FlowdockHandlerTest.php:
   39      }
   40  
   41:     public function testWriteHeader()
   42      {
   43          $this->createHandler();
   ..
   52  
   53      /**
   54:      * @depends testWriteHeader
   55       */
   56      public function testWriteContent($content)

/home/genis/Proyectos/ProyectoXat/vendor/monolog/monolog/tests/Monolog/Handler/HipChatHandlerTest.php:
   25      private $handler;
   26  
   27:     public function testWriteHeader()
   28      {
   29          $this->createHandler();
   ..
   37      }
   38  
   39:     public function testWriteCustomHostHeader()
   40      {
   41          $this->createHandler('myToken', 'room1', 'Monolog', true, 'hipchat.foo.bar');
   ..
   86  
   87      /**
   88:      * @depends testWriteHeader
   89       */
   90      public function testWriteContent($content)
   ..
  106  
  107      /**
  108:      * @depends testWriteCustomHostHeader
  109       */
  110      public function testWriteContentNotify($content)

/home/genis/Proyectos/ProyectoXat/vendor/monolog/monolog/tests/Monolog/Handler/NativeMailerHandlerTest.php:
   16  use InvalidArgumentException;
   17  
   18: function mail($to, $subject, $message, $additional_headers = null, $additional_parameters = null)
   19  {
   20      $GLOBALS['mail'][] = func_get_args();
   ..
   31       * @expectedException InvalidArgumentException
   32       */
   33:     public function testConstructorHeaderInjection()
   34      {
   35          $mailer = new NativeMailerHandler('spammer@example.org', 'dear victim', "receiver@example.org\r\nFrom: faked@attacker.org");
   ..
   39       * @expectedException InvalidArgumentException
   40       */
   41:     public function testSetterHeaderInjection()
   42      {
   43          $mailer = new NativeMailerHandler('spammer@example.org', 'dear victim', 'receiver@example.org');
   44:         $mailer->addHeader("Content-Type: text/html\r\nFrom: faked@attacker.org");
   45      }
   46  
   ..
   48       * @expectedException InvalidArgumentException
   49       */
   50:     public function testSetterArrayHeaderInjection()
   51      {
   52          $mailer = new NativeMailerHandler('spammer@example.org', 'dear victim', 'receiver@example.org');
   53:         $mailer->addHeader(array("Content-Type: text/html\r\nFrom: faked@attacker.org"));
   54      }
   55  

/home/genis/Proyectos/ProyectoXat/vendor/monolog/monolog/tests/Monolog/Handler/PHPConsoleHandlerTest.php:
   80                  'enableSslOnlyMode',
   81                  'setAllowedIpMasks',
   82:                 'setHeadersLimit',
   83                  'startEvalRequestsListener',
   84              ))
   ..
  229              array('enableSslOnlyMode', 'enableSslOnlyMode', true, false),
  230              array('ipMasks', 'setAllowedIpMasks', array('127.0.0.*')),
  231:             array('headersLimit', 'setHeadersLimit', 2500),
  232              array('enableEvalListener', 'startEvalRequestsListener', true, false),
  233          );

/home/genis/Proyectos/ProyectoXat/vendor/monolog/monolog/tests/Monolog/Handler/PushoverHandlerTest.php:
   16  
   17  /**
   18:  * Almost all examples (expected header, titles, messages) taken from
   19   * https://www.pushover.net/api
   20   * @author Sebastian Göttschkes <sebastian.goettschkes@googlemail.com>
   ..
   26      private $handler;
   27  
   28:     public function testWriteHeader()
   29      {
   30          $this->createHandler();
   ..
   40  
   41      /**
   42:      * @depends testWriteHeader
   43       */
   44      public function testWriteContent($content)

/home/genis/Proyectos/ProyectoXat/vendor/monolog/monolog/tests/Monolog/Handler/SlackHandlerTest.php:
   40      }
   41  
   42:     public function testWriteHeader()
   43      {
   44          $this->createHandler();

/home/genis/Proyectos/ProyectoXat/vendor/monolog/monolog/tests/Monolog/Handler/UdpSocketTest.php:
   26          $socket->expects($this->at(0))
   27              ->method('send')
   28:             ->with("HEADER: The quick brown fox jumps over the lazy dog");
   29  
   30:         $socket->write("The quick brown fox jumps over the lazy dog", "HEADER: ");
   31      }
   32  
   ..
   39          $socket->expects($this->exactly(1))
   40              ->method('send')
   41:             ->with("HEADER" . $truncatedString);
   42  
   43          $longString = str_repeat("derp", 20000);
   44  
   45:         $socket->write($longString, "HEADER");
   46      }
   47  
   ..
   60          $socket = new UdpSocket('127.0.0.1', 514);
   61          $socket->close();
   62:         $socket->write('foo', "HEADER");
   63      }
   64  }

/home/genis/Proyectos/ProyectoXat/vendor/nikic/php-parser/grammar/php5.y:
   17  top_statement_list:
   18        top_statement_list_ex
   19:           { makeNop($nop, $this->lookaheadStartAttributes);
   20              if ($nop !== null) { $1[] = $nop; } $$ = $1; }
   21  ;
   ..
  149  inner_statement_list:
  150        inner_statement_list_ex
  151:           { makeNop($nop, $this->lookaheadStartAttributes);
  152              if ($nop !== null) { $1[] = $nop; } $$ = $1; }
  153  ;

/home/genis/Proyectos/ProyectoXat/vendor/nikic/php-parser/grammar/php7.y:
   17  top_statement_list:
   18        top_statement_list_ex
   19:           { makeNop($nop, $this->lookaheadStartAttributes);
   20              if ($nop !== null) { $1[] = $nop; } $$ = $1; }
   21  ;
   ..
  185  inner_statement_list:
  186        inner_statement_list_ex
  187:           { makeNop($nop, $this->lookaheadStartAttributes);
  188              if ($nop !== null) { $1[] = $nop; } $$ = $1; }
  189  ;

/home/genis/Proyectos/ProyectoXat/vendor/nikic/php-parser/lib/PhpParser/Parser/Php5.php:
  917  
  918      protected function reduceRule4() {
  919:          $startAttributes = $this->lookaheadStartAttributes; if (isset($startAttributes['comments'])) { $nop = new Stmt\Nop(['comments' => $startAttributes['comments']]); } else { $nop = null; };
  920              if ($nop !== null) { $this->semStack[$this->stackPos-(1-1)][] = $nop; } $this->semValue = $this->semStack[$this->stackPos-(1-1)];
  921      }
  ...
 1396  
 1397      protected function reduceRule122() {
 1398:          $startAttributes = $this->lookaheadStartAttributes; if (isset($startAttributes['comments'])) { $nop = new Stmt\Nop(['comments' => $startAttributes['comments']]); } else { $nop = null; };
 1399              if ($nop !== null) { $this->semStack[$this->stackPos-(1-1)][] = $nop; } $this->semValue = $this->semStack[$this->stackPos-(1-1)];
 1400      }

/home/genis/Proyectos/ProyectoXat/vendor/nikic/php-parser/lib/PhpParser/Parser/Php7.php:
  827  
  828      protected function reduceRule4() {
  829:          $startAttributes = $this->lookaheadStartAttributes; if (isset($startAttributes['comments'])) { $nop = new Stmt\Nop(['comments' => $startAttributes['comments']]); } else { $nop = null; };
  830              if ($nop !== null) { $this->semStack[$this->stackPos-(1-1)][] = $nop; } $this->semValue = $this->semStack[$this->stackPos-(1-1)];
  831      }
  ...
 1350  
 1351      protected function reduceRule133() {
 1352:          $startAttributes = $this->lookaheadStartAttributes; if (isset($startAttributes['comments'])) { $nop = new Stmt\Nop(['comments' => $startAttributes['comments']]); } else { $nop = null; };
 1353              if ($nop !== null) { $this->semStack[$this->stackPos-(1-1)][] = $nop; } $this->semValue = $this->semStack[$this->stackPos-(1-1)];
 1354      }

/home/genis/Proyectos/ProyectoXat/vendor/nikic/php-parser/lib/PhpParser/ParserAbstract.php:
  103      protected $endAttributes;
  104      /** @var array Start attributes of last *read* token */
  105:     protected $lookaheadStartAttributes;
  106  
  107      /** @var ErrorHandler Error handler */
  ...
  147          $this->lexer->startLexing($code, $this->errorHandler);
  148  
  149:         // We start off with no lookahead-token
  150          $symbol = self::SYMBOL_NONE;
  151  
  ...
  202                      $this->startAttributeStack[$this->stackPos+1] = $startAttributes;
  203                      $this->endAttributeStack[$this->stackPos+1] = $endAttributes;
  204:                     $this->lookaheadStartAttributes = $startAttributes;
  205  
  206                      //$this->traceRead($symbol);
  ...
  395      protected function traceNewState($state, $symbol) {
  396          echo '% State ' . $state
  397:             . ', Lookahead ' . ($symbol == self::SYMBOL_NONE ? '--none--' : $this->symbolToName[$symbol]) . "\n";
  398      }
  399  

/home/genis/Proyectos/ProyectoXat/vendor/phar-io/manifest/tests/_fixture/test.phar:
    <binary>

/home/genis/Proyectos/ProyectoXat/vendor/phpunit/php-code-coverage/.php_cs:
    1  <?php
    2: $header = <<<'EOF'
    3  This file is part of the php-code-coverage package.
    4  
    .
   35              'full_opening_tag' => true,
   36              'function_declaration' => true,
   37:             'header_comment' => ['header' => $header, 'separate' => 'none'],
   38              'indentation_type' => true,
   39              'line_ending' => true,

/home/genis/Proyectos/ProyectoXat/vendor/phpunit/php-code-coverage/src/Report/Html/Renderer/Template/css/bootstrap.min.css:
    3   * Copyright 2011-2016 Twitter, Inc.
    4   * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)
    5:  *//*! normalize.css v3.0.3 | MIT License | github.com/necolas/normalize.css */html{font-family:sans-serif;-webkit-text-size-adjust:100%;-ms-text-size-adjust:100%}body{margin:0}article,aside,details,figcaption,figure,footer,header,hgroup,main,menu,nav,section,summary{display:block}audio,canvas,progress,video{display:inline-block;vertical-align:baseline}audio:not([controls]){display:none;height:0}[hidden],template{display:none}a{background-color:transparent}a:active,a:hover{outline:0}abbr[title]{border-bottom:1px dotted}b,strong{font-weight:700}dfn{font-style:italic}h1{margin:.67em 0;font-size:2em}mark{color:#000;background:#ff0}small{font-size:80%}sub,sup{position:relative;font-size:75%;line-height:0;vertical-align:baseline}sup{top:-.5em}sub{bottom:-.25em}img{border:0}svg:not(:root){overflow:hidden}figure{margin:1em 40px}hr{height:0;-webkit-box-sizing:content-box;-moz-box-sizing:content-box;box-sizing:content-box}pre{overflow:auto}code,kbd,pre,samp{font-family:monospace,monospace;font-size:1em}button,input,optgroup,select,textarea{margin:0;font:inherit;color:inherit}button{overflow:visible}button,select{text-transform:none}button,html input[type=button],input[type=reset],input[type=submit]{-webkit-appearance:button;cursor:pointer}button[disabled],html input[disabled]{cursor:default}button::-moz-focus-inner,input::-moz-focus-inner{padding:0;border:0}input{line-height:normal}input[type=checkbox],input[type=radio]{-webkit-box-sizing:border-box;-moz-box-sizing:border-box;box-sizing:border-box;padding:0}input[type=number]::-webkit-inner-spin-button,input[type=number]::-webkit-outer-spin-button{height:auto}input[type=search]{-webkit-box-sizing:content-box;-moz-box-sizing:content-box;box-sizing:content-box;-webkit-appearance:textfield}input[type=search]::-webkit-search-cancel-button,input[type=search]::-webkit-search-decoration{-webkit-appearance:none}fieldset{padding:.35em .625em .75em;margin:0 2px;border:1px solid silver}legend{padding:0;border:0}textarea{overflow:auto}optgroup{font-weight:700}table{border-spacing:0;border-collapse:collapse}td,th{padding:0}/*! Source: https://github.com/h5bp/html5-boilerplate/blob/master/src/css/main.css */@media print{*,:after,:before{color:#000!important;text-shadow:none!important;background:0 0!important;-webkit-box-shadow:none!important;box-shadow:none!important}a,a:visited{text-decoration:underline}a[href]:after{content:" (" attr(href) ")"}abbr[title]:after{content:" (" attr(title) ")"}a[href^="javascript:"]:after,a[href^="#"]:after{content:""}blockquote,pre{border:1px solid #999;page-break-inside:avoid}thead{display:table-header-group}img,tr{page-break-inside:avoid}img{max-width:100%!important}h2,h3,p{orphans:3;widows:3}h2,h3{page-break-after:avoid}.navbar{display:none}.btn>.caret,.dropup>.btn>.caret{border-top-color:#000!important}.label{border:1px solid #000}.table{border-collapse:collapse!important}.table td,.table th{background-color:#fff!important}.table-bordered td,.table-bordered th{border:1px solid #ddd!important}}@font-face{font-family:'Glyphicons Halflings';src:url(../fonts/glyphicons-halflings-regular.eot);src:url(../fonts/glyphicons-halflings-regular.eot?#iefix) format('embedded-opentype'),url(../fonts/glyphicons-halflings-regular.woff2) format('woff2'),url(../fonts/glyphicons-halflings-regular.woff) format('woff'),url(../fonts/glyphicons-halflings-regular.ttf) format('truetype'),url(../fonts/glyphicons-halflings-regular.svg#glyphicons_halflingsregular) format('svg')}.glyphicon{position:relative;top:1px;display:inline-block;font-family:'Glyphicons Halflings';font-style:normal;font-weight:400;line-height:1;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale}.glyphicon-asterisk:before{content:"\002a"}.glyphicon-plus:before{content:"\002b"}.glyphicon-eur:before,.glyphicon-euro:before{content:"\20ac"}.glyphicon-minus:before{content:"\2212"}.glyphicon-cloud:before{content:"\2601"}.glyphicon-envelope:before{content:"\2709"}.glyphicon-pencil:before{content:"\270f"}.glyphicon-glass:before{content:"\e001"}.glyphicon-music:before{content:"\e002"}.glyphicon-search:before{content:"\e003"}.glyphicon-heart:before{content:"\e005"}.glyphicon-star:before{content:"\e006"}.glyphicon-star-empty:before{content:"\e007"}.glyphicon-user:before{content:"\e008"}.glyphicon-film:before{content:"\e009"}.glyphicon-th-large:before{content:"\e010"}.glyphicon-th:before{content:"\e011"}.glyphicon-th-list:before{content:"\e012"}.glyphicon-ok:before{content:"\e013"}.glyphicon-remove:before{content:"\e014"}.glyphicon-zoom-in:before{content:"\e015"}.glyphicon-zoom-out:before{content:"\e016"}.glyphicon-off:before{content:"\e017"}.glyphicon-signal:before{content:"\e018"}.glyphicon-cog:before{content:"\e019"}.glyphicon-trash:before{content:"\e020"}.glyphicon-home:before{content:"\e021"}.glyphicon-file:before{content:"\e022"}.glyphicon-time:before{content:"\e023"}.glyphicon-road:before{content:"\e024"}.glyphicon-download-alt:before{content:"\e025"}.glyphicon-download:before{content:"\e026"}.glyphicon-upload:before{content:"\e027"}.glyphicon-inbox:before{content:"\e028"}.glyphicon-play-circle:before{content:"\e029"}.glyphicon-repeat:before{content:"\e030"}.glyphicon-refresh:before{content:"\e031"}.glyphicon-list-alt:before{content:"\e032"}.glyphicon-lock:before{content:"\e033"}.glyphicon-flag:before{content:"\e034"}.glyphicon-headphones:before{content:"\e035"}.glyphicon-volume-off:before{content:"\e036"}.glyphicon-volume-down:before{content:"\e037"}.glyphicon-volume-up:before{content:"\e038"}.glyphicon-qrcode:before{content:"\e039"}.glyphicon-barcode:before{content:"\e040"}.glyphicon-tag:before{content:"\e041"}.glyphicon-tags:before{content:"\e042"}.glyphicon-book:before{content:"\e043"}.glyphicon-bookmark:before{content:"\e044"}.glyphicon-print:before{content:"\e045"}.glyphicon-camera:before{content:"\e046"}.glyphicon-font:before{content:"\e047"}.glyphicon-bold:before{content:"\e048"}.glyphicon-italic:before{content:"\e049"}.glyphicon-text-height:before{content:"\e050"}.glyphicon-text-width:before{content:"\e051"}.glyphicon-align-left:before{content:"\e052"}.glyphicon-align-center:before{content:"\e053"}.glyphicon-align-right:before{content:"\e054"}.glyphicon-align-justify:before{content:"\e055"}.glyphicon-list:before{content:"\e056"}.glyphicon-indent-left:before{content:"\e057"}.glyphicon-indent-right:before{content:"\e058"}.glyphicon-facetime-video:before{content:"\e059"}.glyphicon-picture:before{content:"\e060"}.glyphicon-map-marker:before{content:"\e062"}.glyphicon-adjust:before{content:"\e063"}.glyphicon-tint:before{content:"\e064"}.glyphicon-edit:before{content:"\e065"}.glyphicon-share:before{content:"\e066"}.glyphicon-check:before{content:"\e067"}.glyphicon-move:before{content:"\e068"}.glyphicon-step-backward:before{content:"\e069"}.glyphicon-fast-backward:before{content:"\e070"}.glyphicon-backward:before{content:"\e071"}.glyphicon-play:before{content:"\e072"}.glyphicon-pause:before{content:"\e073"}.glyphicon-stop:before{content:"\e074"}.glyphicon-forward:before{content:"\e075"}.glyphicon-fast-forward:before{content:"\e076"}.glyphicon-step-forward:before{content:"\e077"}.glyphicon-eject:before{content:"\e078"}.glyphicon-chevron-left:before{content:"\e079"}.glyphicon-chevron-right:before{content:"\e080"}.glyphicon-plus-sign:before{content:"\e081"}.glyphicon-minus-sign:before{content:"\e082"}.glyphicon-remove-sign:before{content:"\e083"}.glyphicon-ok-sign:before{content:"\e084"}.glyphicon-question-sign:before{content:"\e085"}.glyphicon-info-sign:before{content:"\e086"}.glyphicon-screenshot:before{content:"\e087"}.glyphicon-remove-circle:before{content:"\e088"}.glyphicon-ok-circle:before{content:"\e089"}.glyphicon-ban-circle:before{content:"\e090"}.glyphicon-arrow-left:before{content:"\e091"}.glyphicon-arrow-right:before{content:"\e092"}.glyphicon-arrow-up:before{content:"\e093"}.glyphicon-arrow-down:before{content:"\e094"}.glyphicon-share-alt:before{content:"\e095"}.glyphicon-resize-full:before{content:"\e096"}.glyphicon-resize-small:before{content:"\e097"}.glyphicon-exclamation-sign:before{content:"\e101"}.glyphicon-gift:before{content:"\e102"}.glyphicon-leaf:before{content:"\e103"}.glyphicon-fire:before{content:"\e104"}.glyphicon-eye-open:before{content:"\e105"}.glyphicon-eye-close:before{content:"\e106"}.glyphicon-warning-sign:before{content:"\e107"}.glyphicon-plane:before{content:"\e108"}.glyphicon-calendar:before{content:"\e109"}.glyphicon-random:before{content:"\e110"}.glyphicon-comment:before{content:"\e111"}.glyphicon-magnet:before{content:"\e112"}.glyphicon-chevron-up:before{content:"\e113"}.glyphicon-chevron-down:before{content:"\e114"}.glyphicon-retweet:before{content:"\e115"}.glyphicon-shopping-cart:before{content:"\e116"}.glyphicon-folder-close:before{content:"\e117"}.glyphicon-folder-open:before{content:"\e118"}.glyphicon-resize-vertical:before{content:"\e119"}.glyphicon-resize-horizontal:before{content:"\e120"}.glyphicon-hdd:before{content:"\e121"}.glyphicon-bullhorn:before{content:"\e122"}.glyphicon-bell:before{content:"\e123"}.glyphicon-certificate:before{content:"\e124"}.glyphicon-thumbs-up:before{content:"\e125"}.glyphicon-thumbs-down:before{content:"\e126"}.glyphicon-hand-right:before{content:"\e127"}.glyphicon-hand-left:before{content:"\e128"}.glyphicon-hand-up:before{content:"\e129"}.glyphicon-hand-down:before{content:"\e130"}.glyphicon-circle-arrow-right:before{content:"\e131"}.glyphicon-circle-arrow-left:before{content:"\e132"}.glyphicon-circle-arrow-up:before{content:"\e133"}.glyphicon-circle-arrow-down:before{content:"\e134"}.glyphicon-globe:before{content:"\e135"}.glyphicon-wrench:before{content:"\e136"}.glyphicon-tasks:before{content:"\e137"}.glyphicon-filter:before{content:"\e138"}.glyphicon-briefcase:before{content:"\e139"}.glyphicon-fullscreen:before{content:"\e140"}.glyphicon-dashboard:before{content:"\e141"}.glyphicon-paperclip:before{content:"\e142"}.glyphicon-heart-empty:before{content:"\e143"}.glyphicon-link:before{content:"\e144"}.glyphicon-phone:before{content:"\e145"}.glyphicon-pushpin:before{content:"\e146"}.glyphicon-usd:before{content:"\e148"}.glyphicon-gbp:before{content:"\e149"}.glyphicon-sort:before{content:"\e150"}.glyphicon-sort-by-alphabet:before{content:"\e151"}.glyphicon-sort-by-alphabet-alt:before{content:"\e152"}.glyphicon-sort-by-order:before{content:"\e153"}.glyphicon-sort-by-order-alt:before{content:"\e154"}.glyphicon-sort-by-attributes:before{content:"\e155"}.glyphicon-sort-by-attributes-alt:before{content:"\e156"}.glyphicon-unchecked:before{content:"\e157"}.glyphicon-expand:before{content:"\e158"}.glyphicon-collapse-down:before{content:"\e159"}.glyphicon-collapse-up:before{content:"\e160"}.glyphicon-log-in:before{content:"\e161"}.glyphicon-flash:before{content:"\e162"}.glyphicon-log-out:before{content:"\e163"}.glyphicon-new-window:before{content:"\e164"}.glyphicon-record:before{content:"\e165"}.glyphicon-save:before{content:"\e166"}.glyphicon-open:before{content:"\e167"}.glyphicon-saved:before{content:"\e168"}.glyphicon-import:before{content:"\e169"}.glyphicon-export:before{content:"\e170"}.glyphicon-send:before{content:"\e171"}.glyphicon-floppy-disk:before{content:"\e172"}.glyphicon-floppy-saved:before{content:"\e173"}.glyphicon-floppy-remove:before{content:"\e174"}.glyphicon-floppy-save:before{content:"\e175"}.glyphicon-floppy-open:before{content:"\e176"}.glyphicon-credit-card:before{content:"\e177"}.glyphicon-transfer:before{content:"\e178"}.glyphicon-cutlery:before{content:"\e179"}.glyphicon-header:before{content:"\e180"}.glyphicon-compressed:before{content:"\e181"}.glyphicon-earphone:before{content:"\e182"}.glyphicon-phone-alt:before{content:"\e183"}.glyphicon-tower:before{content:"\e184"}.glyphicon-stats:before{content:"\e185"}.glyphicon-sd-video:before{content:"\e186"}.glyphicon-hd-video:before{content:"\e187"}.glyphicon-subtitles:before{content:"\e188"}.glyphicon-sound-stereo:before{content:"\e189"}.glyphicon-sound-dolby:before{content:"\e190"}.glyphicon-sound-5-1:before{content:"\e191"}.glyphicon-sound-6-1:before{content:"\e192"}.glyphicon-sound-7-1:before{content:"\e193"}.glyphicon-copyright-mark:before{content:"\e194"}.glyphicon-registration-mark:before{content:"\e195"}.glyphicon-cloud-download:before{content:"\e197"}.glyphicon-cloud-upload:before{content:"\e198"}.glyphicon-tree-conifer:before{content:"\e199"}.glyphicon-tree-deciduous:before{content:"\e200"}.glyphicon-cd:before{content:"\e201"}.glyphicon-save-file:before{content:"\e202"}.glyphicon-open-file:before{content:"\e203"}.glyphicon-level-up:before{content:"\e204"}.glyphicon-copy:before{content:"\e205"}.glyphicon-paste:before{content:"\e206"}.glyphicon-alert:before{content:"\e209"}.glyphicon-equalizer:before{content:"\e210"}.glyphicon-king:before{content:"\e211"}.glyphicon-queen:before{content:"\e212"}.glyphicon-pawn:before{content:"\e213"}.glyphicon-bishop:before{content:"\e214"}.glyphicon-knight:before{content:"\e215"}.glyphicon-baby-formula:before{content:"\e216"}.glyphicon-tent:before{content:"\26fa"}.glyphicon-blackboard:before{content:"\e218"}.glyphicon-bed:before{content:"\e219"}.glyphicon-apple:before{content:"\f8ff"}.glyphicon-erase:before{content:"\e221"}.glyphicon-hourglass:before{content:"\231b"}.glyphicon-lamp:before{content:"\e223"}.glyphicon-duplicate:before{content:"\e224"}.glyphicon-piggy-bank:before{content:"\e225"}.glyphicon-scissors:before{content:"\e226"}.glyphicon-bitcoin:before{content:"\e227"}.glyphicon-btc:before{content:"\e227"}.glyphicon-xbt:before{content:"\e227"}.glyphicon-yen:before{content:"\00a5"}.glyphicon-jpy:before{content:"\00a5"}.glyphicon-ruble:before{content:"\20bd"}.glyphicon-rub:before{content:"\20bd"}.glyphicon-scale:before{content:"\e230"}.glyphicon-ice-lolly:before{content:"\e231"}.glyphicon-ice-lolly-tasted:before{content:"\e232"}.glyphicon-education:before{content:"\e233"}.glyphicon-option-horizontal:before{content:"\e234"}.glyphicon-option-vertical:before{content:"\e235"}.glyphicon-menu-hamburger:before{content:"\e236"}.glyphicon-modal-window:before{content:"\e237"}.glyphicon-oil:before{content:"\e238"}.glyphicon-grain:before{content:"\e239"}.glyphicon-sunglasses:before{content:"\e240"}.glyphicon-text-size:before{content:"\e241"}.glyphicon-text-color:before{content:"\e242"}.glyphicon-text-background:before{content:"\e243"}.glyphicon-object-align-top:before{content:"\e244"}.glyphicon-object-align-bottom:before{content:"\e245"}.glyphicon-object-align-horizontal:before{content:"\e246"}.glyphicon-object-align-left:before{content:"\e247"}.glyphicon-object-align-vertical:before{content:"\e248"}.glyphicon-object-align-right:before{content:"\e249"}.glyphicon-triangle-right:before{content:"\e250"}.glyphicon-triangle-left:before{content:"\e251"}.glyphicon-triangle-bottom:before{content:"\e252"}.glyphicon-triangle-top:before{content:"\e253"}.glyphicon-console:before{content:"\e254"}.glyphicon-superscript:before{content:"\e255"}.glyphicon-subscript:before{content:"\e256"}.glyphicon-menu-left:before{content:"\e257"}.glyphicon-menu-right:before{content:"\e258"}.glyphicon-menu-down:before{content:"\e259"}.glyphicon-menu-up:before{content:"\e260"}*{-webkit-box-sizing:border-box;-moz-box-sizing:border-box;box-sizing:border-box}:after,:before{-webkit-box-sizing:border-box;-moz-box-sizing:border-box;box-sizing:border-box}html{font-size:10px;-webkit-tap-highlight-color:rgba(0,0,0,0)}body{font-family:"Helvetica Neue",Helvetica,Arial,sans-serif;font-size:14px;line-height:1.42857143;color:#333;background-color:#fff}button,input,select,textarea{font-family:inherit;font-size:inherit;line-height:inherit}a{color:#337ab7;text-decoration:none}a:focus,a:hover{color:#23527c;text-decoration:underline}a:focus{outline:5px auto -webkit-focus-ring-color;outline-offset:-2px}figure{margin:0}img{vertical-align:middle}.carousel-inner>.item>a>img,.carousel-inner>.item>img,.img-responsive,.thumbnail a>img,.thumbnail>img{display:block;max-width:100%;height:auto}.img-rounded{border-radius:6px}.img-thumbnail{display:inline-block;max-width:100%;height:auto;padding:4px;line-height:1.42857143;background-color:#fff;border:1px solid #ddd;border-radius:4px;-webkit-transition:all .2s ease-in-out;-o-transition:all .2s ease-in-out;transition:all .2s ease-in-out}.img-circle{border-radius:50%}hr{margin-top:20px;margin-bottom:20px;border:0;border-top:1px solid #eee}.sr-only{position:absolute;width:1px;height:1px;padding:0;margin:-1px;overflow:hidden;clip:rect(0,0,0,0);border:0}.sr-only-focusable:active,.sr-only-focusable:focus{position:static;width:auto;height:auto;margin:0;overflow:visible;clip:auto}[role=button]{cursor:pointer}.h1,.h2,.h3,.h4,.h5,.h6,h1,h2,h3,h4,h5,h6{font-family:inherit;font-weight:500;line-height:1.1;color:inherit}.h1 .small,.h1 small,.h2 .small,.h2 small,.h3 .small,.h3 small,.h4 .small,.h4 small,.h5 .small,.h5 small,.h6 .small,.h6 small,h1 .small,h1 small,h2 .small,h2 small,h3 .small,h3 small,h4 .small,h4 small,h5 .small,h5 small,h6 .small,h6 small{font-weight:400;line-height:1;color:#777}.h1,.h2,.h3,h1,h2,h3{margin-top:20px;margin-bottom:10px}.h1 .small,.h1 small,.h2 .small,.h2 small,.h3 .small,.h3 small,h1 .small,h1 small,h2 .small,h2 small,h3 .small,h3 small{font-size:65%}.h4,.h5,.h6,h4,h5,h6{margin-top:10px;margin-bottom:10px}.h4 .small,.h4 small,.h5 .small,.h5 small,.h6 .small,.h6 small,h4 .small,h4 small,h5 .small,h5 small,h6 .small,h6 small{font-size:75%}.h1,h1{font-size:36px}.h2,h2{font-size:30px}.h3,h3{font-size:24px}.h4,h4{font-size:18px}.h5,h5{font-size:14px}.h6,h6{font-size:12px}p{margin:0 0 10px}.lead{margin-bottom:20px;font-size:16px;font-weight:300;line-height:1.4}@media (min-width:768px){.lead{font-size:21px}}.small,small{font-size:85%}.mark,mark{padding:.2em;background-color:#fcf8e3}.text-left{text-align:left}.text-right{text-align:right}.text-center{text-align:center}.text-justify{text-align:justify}.text-nowrap{white-space:nowrap}.text-lowercase{text-transform:lowercase}.text-uppercase{text-transform:uppercase}.text-capitalize{text-transform:capitalize}.text-muted{color:#777}.text-primary{color:#337ab7}a.text-primary:focus,a.text-primary:hover{color:#286090}.text-success{color:#3c763d}a.text-success:focus,a.text-success:hover{color:#2b542c}.text-info{color:#31708f}a.text-info:focus,a.text-info:hover{color:#245269}.text-warning{color:#8a6d3b}a.text-warning:focus,a.text-warning:hover{color:#66512c}.text-danger{color:#a94442}a.text-danger:focus,a.text-danger:hover{color:#843534}.bg-primary{color:#fff;background-color:#337ab7}a.bg-primary:focus,a.bg-primary:hover{background-color:#286090}.bg-success{background-color:#dff0d8}a.bg-success:focus,a.bg-success:hover{background-color:#c1e2b3}.bg-info{background-color:#d9edf7}a.bg-info:focus,a.bg-info:hover{background-color:#afd9ee}.bg-warning{background-color:#fcf8e3}a.bg-warning:focus,a.bg-warning:hover{background-color:#f7ecb5}.bg-danger{background-color:#f2dede}a.bg-danger:focus,a.bg-danger:hover{background-color:#e4b9b9}.page-header{padding-bottom:9px;margin:40px 0 20px;border-bottom:1px solid #eee}ol,ul{margin-top:0;margin-bottom:10px}ol ol,ol ul,ul ol,ul ul{margin-bottom:0}.list-unstyled{padding-left:0;list-style:none}.list-inline{padding-left:0;margin-left:-5px;list-style:none}.list-inline>li{display:inline-block;padding-right:5px;padding-left:5px}dl{margin-top:0;margin-bottom:20px}dd,dt{line-height:1.42857143}dt{font-weight:700}dd{margin-left:0}@media (min-width:768px){.dl-horizontal dt{float:left;width:160px;overflow:hidden;clear:left;text-align:right;text-overflow:ellipsis;white-space:nowrap}.dl-horizontal dd{margin-left:180px}}abbr[data-original-title],abbr[title]{cursor:help;border-bottom:1px dotted #777}.initialism{font-size:90%;text-transform:uppercase}blockquote{padding:10px 20px;margin:0 0 20px;font-size:17.5px;border-left:5px solid #eee}blockquote ol:last-child,blockquote p:last-child,blockquote ul:last-child{margin-bottom:0}blockquote .small,blockquote footer,blockquote small{display:block;font-size:80%;line-height:1.42857143;color:#777}blockquote .small:before,blockquote footer:before,blockquote small:before{content:'\2014 \00A0'}.blockquote-reverse,blockquote.pull-right{padding-right:15px;padding-left:0;text-align:right;border-right:5px solid #eee;border-left:0}.blockquote-reverse .small:before,.blockquote-reverse footer:before,.blockquote-reverse small:before,blockquote.pull-right .small:before,blockquote.pull-right footer:before,blockquote.pull-right small:before{content:''}.blockquote-reverse .small:after,.blockquote-reverse footer:after,.blockquote-reverse small:after,blockquote.pull-right .small:after,blockquote.pull-right footer:after,blockquote.pull-right small:after{content:'\00A0 \2014'}address{margin-bottom:20px;font-style:normal;line-height:1.42857143}code,kbd,pre,samp{font-family:Menlo,Monaco,Consolas,"Courier New",monospace}code{padding:2px 4px;font-size:90%;color:#c7254e;background-color:#f9f2f4;border-radius:4px}kbd{padding:2px 4px;font-size:90%;color:#fff;background-color:#333;border-radius:3px;-webkit-box-shadow:inset 0 -1px 0 rgba(0,0,0,.25);box-shadow:inset 0 -1px 0 rgba(0,0,0,.25)}kbd kbd{padding:0;font-size:100%;font-weight:700;-webkit-box-shadow:none;box-shadow:none}pre{display:block;padding:9.5px;margin:0 0 10px;font-size:13px;line-height:1.42857143;color:#333;word-break:break-all;word-wrap:break-word;background-color:#f5f5f5;border:1px solid #ccc;border-radius:4px}pre code{padding:0;font-size:inherit;color:inherit;white-space:pre-wrap;background-color:transparent;border-radius:0}.pre-scrollable{max-height:340px;overflow-y:scroll}.container{padding-right:15px;padding-left:15px;margin-right:auto;margin-left:auto}@media (min-width:768px){.container{width:750px}}@media (min-width:992px){.container{width:970px}}@media (min-width:1200px){.container{width:1170px}}.container-fluid{padding-right:15px;padding-left:15px;margin-right:auto;margin-left:auto}.row{margin-right:-15px;margin-left:-15px}.col-lg-1,.col-lg-10,.col-lg-11,.col-lg-12,.col-lg-2,.col-lg-3,.col-lg-4,.col-lg-5,.col-lg-6,.col-lg-7,.col-lg-8,.col-lg-9,.col-md-1,.col-md-10,.col-md-11,.col-md-12,.col-md-2,.col-md-3,.col-md-4,.col-md-5,.col-md-6,.col-md-7,.col-md-8,.col-md-9,.col-sm-1,.col-sm-10,.col-sm-11,.col-sm-12,.col-sm-2,.col-sm-3,.col-sm-4,.col-sm-5,.col-sm-6,.col-sm-7,.col-sm-8,.col-sm-9,.col-xs-1,.col-xs-10,.col-xs-11,.col-xs-12,.col-xs-2,.col-xs-3,.col-xs-4,.col-xs-5,.col-xs-6,.col-xs-7,.col-xs-8,.col-xs-9{position:relative;min-height:1px;padding-right:15px;padding-left:15px}.col-xs-1,.col-xs-10,.col-xs-11,.col-xs-12,.col-xs-2,.col-xs-3,.col-xs-4,.col-xs-5,.col-xs-6,.col-xs-7,.col-xs-8,.col-xs-9{float:left}.col-xs-12{width:100%}.col-xs-11{width:91.66666667%}.col-xs-10{width:83.33333333%}.col-xs-9{width:75%}.col-xs-8{width:66.66666667%}.col-xs-7{width:58.33333333%}.col-xs-6{width:50%}.col-xs-5{width:41.66666667%}.col-xs-4{width:33.33333333%}.col-xs-3{width:25%}.col-xs-2{width:16.66666667%}.col-xs-1{width:8.33333333%}.col-xs-pull-12{right:100%}.col-xs-pull-11{right:91.66666667%}.col-xs-pull-10{right:83.33333333%}.col-xs-pull-9{right:75%}.col-xs-pull-8{right:66.66666667%}.col-xs-pull-7{right:58.33333333%}.col-xs-pull-6{right:50%}.col-xs-pull-5{right:41.66666667%}.col-xs-pull-4{right:33.33333333%}.col-xs-pull-3{right:25%}.col-xs-pull-2{right:16.66666667%}.col-xs-pull-1{right:8.33333333%}.col-xs-pull-0{right:auto}.col-xs-push-12{left:100%}.col-xs-push-11{left:91.66666667%}.col-xs-push-10{left:83.33333333%}.col-xs-push-9{left:75%}.col-xs-push-8{left:66.66666667%}.col-xs-push-7{left:58.33333333%}.col-xs-push-6{left:50%}.col-xs-push-5{left:41.66666667%}.col-xs-push-4{left:33.33333333%}.col-xs-push-3{left:25%}.col-xs-push-2{left:16.66666667%}.col-xs-push-1{left:8.33333333%}.col-xs-push-0{left:auto}.col-xs-offset-12{margin-left:100%}.col-xs-offset-11{margin-left:91.66666667%}.col-xs-offset-10{margin-left:83.33333333%}.col-xs-offset-9{margin-left:75%}.col-xs-offset-8{margin-left:66.66666667%}.col-xs-offset-7{margin-left:58.33333333%}.col-xs-offset-6{margin-left:50%}.col-xs-offset-5{margin-left:41.66666667%}.col-xs-offset-4{margin-left:33.33333333%}.col-xs-offset-3{margin-left:25%}.col-xs-offset-2{margin-left:16.66666667%}.col-xs-offset-1{margin-left:8.33333333%}.col-xs-offset-0{margin-left:0}@media (min-width:768px){.col-sm-1,.col-sm-10,.col-sm-11,.col-sm-12,.col-sm-2,.col-sm-3,.col-sm-4,.col-sm-5,.col-sm-6,.col-sm-7,.col-sm-8,.col-sm-9{float:left}.col-sm-12{width:100%}.col-sm-11{width:91.66666667%}.col-sm-10{width:83.33333333%}.col-sm-9{width:75%}.col-sm-8{width:66.66666667%}.col-sm-7{width:58.33333333%}.col-sm-6{width:50%}.col-sm-5{width:41.66666667%}.col-sm-4{width:33.33333333%}.col-sm-3{width:25%}.col-sm-2{width:16.66666667%}.col-sm-1{width:8.33333333%}.col-sm-pull-12{right:100%}.col-sm-pull-11{right:91.66666667%}.col-sm-pull-10{right:83.33333333%}.col-sm-pull-9{right:75%}.col-sm-pull-8{right:66.66666667%}.col-sm-pull-7{right:58.33333333%}.col-sm-pull-6{right:50%}.col-sm-pull-5{right:41.66666667%}.col-sm-pull-4{right:33.33333333%}.col-sm-pull-3{right:25%}.col-sm-pull-2{right:16.66666667%}.col-sm-pull-1{right:8.33333333%}.col-sm-pull-0{right:auto}.col-sm-push-12{left:100%}.col-sm-push-11{left:91.66666667%}.col-sm-push-10{left:83.33333333%}.col-sm-push-9{left:75%}.col-sm-push-8{left:66.66666667%}.col-sm-push-7{left:58.33333333%}.col-sm-push-6{left:50%}.col-sm-push-5{left:41.66666667%}.col-sm-push-4{left:33.33333333%}.col-sm-push-3{left:25%}.col-sm-push-2{left:16.66666667%}.col-sm-push-1{left:8.33333333%}.col-sm-push-0{left:auto}.col-sm-offset-12{margin-left:100%}.col-sm-offset-11{margin-left:91.66666667%}.col-sm-offset-10{margin-left:83.33333333%}.col-sm-offset-9{margin-left:75%}.col-sm-offset-8{margin-left:66.66666667%}.col-sm-offset-7{margin-left:58.33333333%}.col-sm-offset-6{margin-left:50%}.col-sm-offset-5{margin-left:41.66666667%}.col-sm-offset-4{margin-left:33.33333333%}.col-sm-offset-3{margin-left:25%}.col-sm-offset-2{margin-left:16.66666667%}.col-sm-offset-1{margin-left:8.33333333%}.col-sm-offset-0{margin-left:0}}@media (min-width:992px){.col-md-1,.col-md-10,.col-md-11,.col-md-12,.col-md-2,.col-md-3,.col-md-4,.col-md-5,.col-md-6,.col-md-7,.col-md-8,.col-md-9{float:left}.col-md-12{width:100%}.col-md-11{width:91.66666667%}.col-md-10{width:83.33333333%}.col-md-9{width:75%}.col-md-8{width:66.66666667%}.col-md-7{width:58.33333333%}.col-md-6{width:50%}.col-md-5{width:41.66666667%}.col-md-4{width:33.33333333%}.col-md-3{width:25%}.col-md-2{width:16.66666667%}.col-md-1{width:8.33333333%}.col-md-pull-12{right:100%}.col-md-pull-11{right:91.66666667%}.col-md-pull-10{right:83.33333333%}.col-md-pull-9{right:75%}.col-md-pull-8{right:66.66666667%}.col-md-pull-7{right:58.33333333%}.col-md-pull-6{right:50%}.col-md-pull-5{right:41.66666667%}.col-md-pull-4{right:33.33333333%}.col-md-pull-3{right:25%}.col-md-pull-2{right:16.66666667%}.col-md-pull-1{right:8.33333333%}.col-md-pull-0{right:auto}.col-md-push-12{left:100%}.col-md-push-11{left:91.66666667%}.col-md-push-10{left:83.33333333%}.col-md-push-9{left:75%}.col-md-push-8{left:66.66666667%}.col-md-push-7{left:58.33333333%}.col-md-push-6{left:50%}.col-md-push-5{left:41.66666667%}.col-md-push-4{left:33.33333333%}.col-md-push-3{left:25%}.col-md-push-2{left:16.66666667%}.col-md-push-1{left:8.33333333%}.col-md-push-0{left:auto}.col-md-offset-12{margin-left:100%}.col-md-offset-11{margin-left:91.66666667%}.col-md-offset-10{margin-left:83.33333333%}.col-md-offset-9{margin-left:75%}.col-md-offset-8{margin-left:66.66666667%}.col-md-offset-7{margin-left:58.33333333%}.col-md-offset-6{margin-left:50%}.col-md-offset-5{margin-left:41.66666667%}.col-md-offset-4{margin-left:33.33333333%}.col-md-offset-3{margin-left:25%}.col-md-offset-2{margin-left:16.66666667%}.col-md-offset-1{margin-left:8.33333333%}.col-md-offset-0{margin-left:0}}@media (min-width:1200px){.col-lg-1,.col-lg-10,.col-lg-11,.col-lg-12,.col-lg-2,.col-lg-3,.col-lg-4,.col-lg-5,.col-lg-6,.col-lg-7,.col-lg-8,.col-lg-9{float:left}.col-lg-12{width:100%}.col-lg-11{width:91.66666667%}.col-lg-10{width:83.33333333%}.col-lg-9{width:75%}.col-lg-8{width:66.66666667%}.col-lg-7{width:58.33333333%}.col-lg-6{width:50%}.col-lg-5{width:41.66666667%}.col-lg-4{width:33.33333333%}.col-lg-3{width:25%}.col-lg-2{width:16.66666667%}.col-lg-1{width:8.33333333%}.col-lg-pull-12{right:100%}.col-lg-pull-11{right:91.66666667%}.col-lg-pull-10{right:83.33333333%}.col-lg-pull-9{right:75%}.col-lg-pull-8{right:66.66666667%}.col-lg-pull-7{right:58.33333333%}.col-lg-pull-6{right:50%}.col-lg-pull-5{right:41.66666667%}.col-lg-pull-4{right:33.33333333%}.col-lg-pull-3{right:25%}.col-lg-pull-2{right:16.66666667%}.col-lg-pull-1{right:8.33333333%}.col-lg-pull-0{right:auto}.col-lg-push-12{left:100%}.col-lg-push-11{left:91.66666667%}.col-lg-push-10{left:83.33333333%}.col-lg-push-9{left:75%}.col-lg-push-8{left:66.66666667%}.col-lg-push-7{left:58.33333333%}.col-lg-push-6{left:50%}.col-lg-push-5{left:41.66666667%}.col-lg-push-4{left:33.33333333%}.col-lg-push-3{left:25%}.col-lg-push-2{left:16.66666667%}.col-lg-push-1{left:8.33333333%}.col-lg-push-0{left:auto}.col-lg-offset-12{margin-left:100%}.col-lg-offset-11{margin-left:91.66666667%}.col-lg-offset-10{margin-left:83.33333333%}.col-lg-offset-9{margin-left:75%}.col-lg-offset-8{margin-left:66.66666667%}.col-lg-offset-7{margin-left:58.33333333%}.col-lg-offset-6{margin-left:50%}.col-lg-offset-5{margin-left:41.66666667%}.col-lg-offset-4{margin-left:33.33333333%}.col-lg-offset-3{margin-left:25%}.col-lg-offset-2{margin-left:16.66666667%}.col-lg-offset-1{margin-left:8.33333333%}.col-lg-offset-0{margin-left:0}}table{background-color:transparent}caption{padding-top:8px;padding-bottom:8px;color:#777;text-align:left}th{text-align:left}.table{width:100%;max-width:100%;margin-bottom:20px}.table>tbody>tr>td,.table>tbody>tr>th,.table>tfoot>tr>td,.table>tfoot>tr>th,.table>thead>tr>td,.table>thead>tr>th{padding:8px;line-height:1.42857143;vertical-align:top;border-top:1px solid #ddd}.table>thead>tr>th{vertical-align:bottom;border-bottom:2px solid #ddd}.table>caption+thead>tr:first-child>td,.table>caption+thead>tr:first-child>th,.table>colgroup+thead>tr:first-child>td,.table>colgroup+thead>tr:first-child>th,.table>thead:first-child>tr:first-child>td,.table>thead:first-child>tr:first-child>th{border-top:0}.table>tbody+tbody{border-top:2px solid #ddd}.table .table{background-color:#fff}.table-condensed>tbody>tr>td,.table-condensed>tbody>tr>th,.table-condensed>tfoot>tr>td,.table-condensed>tfoot>tr>th,.table-condensed>thead>tr>td,.table-condensed>thead>tr>th{padding:5px}.table-bordered{border:1px solid #ddd}.table-bordered>tbody>tr>td,.table-bordered>tbody>tr>th,.table-bordered>tfoot>tr>td,.table-bordered>tfoot>tr>th,.table-bordered>thead>tr>td,.table-bordered>thead>tr>th{border:1px solid #ddd}.table-bordered>thead>tr>td,.table-bordered>thead>tr>th{border-bottom-width:2px}.table-striped>tbody>tr:nth-of-type(odd){background-color:#f9f9f9}.table-hover>tbody>tr:hover{background-color:#f5f5f5}table col[class*=col-]{position:static;display:table-column;float:none}table td[class*=col-],table th[class*=col-]{position:static;display:table-cell;float:none}.table>tbody>tr.active>td,.table>tbody>tr.active>th,.table>tbody>tr>td.active,.table>tbody>tr>th.active,.table>tfoot>tr.active>td,.table>tfoot>tr.active>th,.table>tfoot>tr>td.active,.table>tfoot>tr>th.active,.table>thead>tr.active>td,.table>thead>tr.active>th,.table>thead>tr>td.active,.table>thead>tr>th.active{background-color:#f5f5f5}.table-hover>tbody>tr.active:hover>td,.table-hover>tbody>tr.active:hover>th,.table-hover>tbody>tr:hover>.active,.table-hover>tbody>tr>td.active:hover,.table-hover>tbody>tr>th.active:hover{background-color:#e8e8e8}.table>tbody>tr.success>td,.table>tbody>tr.success>th,.table>tbody>tr>td.success,.table>tbody>tr>th.success,.table>tfoot>tr.success>td,.table>tfoot>tr.success>th,.table>tfoot>tr>td.success,.table>tfoot>tr>th.success,.table>thead>tr.success>td,.table>thead>tr.success>th,.table>thead>tr>td.success,.table>thead>tr>th.success{background-color:#dff0d8}.table-hover>tbody>tr.success:hover>td,.table-hover>tbody>tr.success:hover>th,.table-hover>tbody>tr:hover>.success,.table-hover>tbody>tr>td.success:hover,.table-hover>tbody>tr>th.success:hover{background-color:#d0e9c6}.table>tbody>tr.info>td,.table>tbody>tr.info>th,.table>tbody>tr>td.info,.table>tbody>tr>th.info,.table>tfoot>tr.info>td,.table>tfoot>tr.info>th,.table>tfoot>tr>td.info,.table>tfoot>tr>th.info,.table>thead>tr.info>td,.table>thead>tr.info>th,.table>thead>tr>td.info,.table>thead>tr>th.info{background-color:#d9edf7}.table-hover>tbody>tr.info:hover>td,.table-hover>tbody>tr.info:hover>th,.table-hover>tbody>tr:hover>.info,.table-hover>tbody>tr>td.info:hover,.table-hover>tbody>tr>th.info:hover{background-color:#c4e3f3}.table>tbody>tr.warning>td,.table>tbody>tr.warning>th,.table>tbody>tr>td.warning,.table>tbody>tr>th.warning,.table>tfoot>tr.warning>td,.table>tfoot>tr.warning>th,.table>tfoot>tr>td.warning,.table>tfoot>tr>th.warning,.table>thead>tr.warning>td,.table>thead>tr.warning>th,.table>thead>tr>td.warning,.table>thead>tr>th.warning{background-color:#fcf8e3}.table-hover>tbody>tr.warning:hover>td,.table-hover>tbody>tr.warning:hover>th,.table-hover>tbody>tr:hover>.warning,.table-hover>tbody>tr>td.warning:hover,.table-hover>tbody>tr>th.warning:hover{background-color:#faf2cc}.table>tbody>tr.danger>td,.table>tbody>tr.danger>th,.table>tbody>tr>td.danger,.table>tbody>tr>th.danger,.table>tfoot>tr.danger>td,.table>tfoot>tr.danger>th,.table>tfoot>tr>td.danger,.table>tfoot>tr>th.danger,.table>thead>tr.danger>td,.table>thead>tr.danger>th,.table>thead>tr>td.danger,.table>thead>tr>th.danger{background-color:#f2dede}.table-hover>tbody>tr.danger:hover>td,.table-hover>tbody>tr.danger:hover>th,.table-hover>tbody>tr:hover>.danger,.table-hover>tbody>tr>td.danger:hover,.table-hover>tbody>tr>th.danger:hover{background-color:#ebcccc}.table-responsive{min-height:.01%;overflow-x:auto}@media screen and (max-width:767px){.table-responsive{width:100%;margin-bottom:15px;overflow-y:hidden;-ms-overflow-style:-ms-autohiding-scrollbar;border:1px solid #ddd}.table-responsive>.table{margin-bottom:0}.table-responsive>.table>tbody>tr>td,.table-responsive>.table>tbody>tr>th,.table-responsive>.table>tfoot>tr>td,.table-responsive>.table>tfoot>tr>th,.table-responsive>.table>thead>tr>td,.table-responsive>.table>thead>tr>th{white-space:nowrap}.table-responsive>.table-bordered{border:0}.table-responsive>.table-bordered>tbody>tr>td:first-child,.table-responsive>.table-bordered>tbody>tr>th:first-child,.table-responsive>.table-bordered>tfoot>tr>td:first-child,.table-responsive>.table-bordered>tfoot>tr>th:first-child,.table-responsive>.table-bordered>thead>tr>td:first-child,.table-responsive>.table-bordered>thead>tr>th:first-child{border-left:0}.table-responsive>.table-bordered>tbody>tr>td:last-child,.table-responsive>.table-bordered>tbody>tr>th:last-child,.table-responsive>.table-bordered>tfoot>tr>td:last-child,.table-responsive>.table-bordered>tfoot>tr>th:last-child,.table-responsive>.table-bordered>thead>tr>td:last-child,.table-responsive>.table-bordered>thead>tr>th:last-child{border-right:0}.table-responsive>.table-bordered>tbody>tr:last-child>td,.table-responsive>.table-bordered>tbody>tr:last-child>th,.table-responsive>.table-bordered>tfoot>tr:last-child>td,.table-responsive>.table-bordered>tfoot>tr:last-child>th{border-bottom:0}}fieldset{min-width:0;padding:0;margin:0;border:0}legend{display:block;width:100%;padding:0;margin-bottom:20px;font-size:21px;line-height:inherit;color:#333;border:0;border-bottom:1px solid #e5e5e5}label{display:inline-block;max-width:100%;margin-bottom:5px;font-weight:700}input[type=search]{-webkit-box-sizing:border-box;-moz-box-sizing:border-box;box-sizing:border-box}input[type=checkbox],input[type=radio]{margin:4px 0 0;margin-top:1px\9;line-height:normal}input[type=file]{display:block}input[type=range]{display:block;width:100%}select[multiple],select[size]{height:auto}input[type=file]:focus,input[type=checkbox]:focus,input[type=radio]:focus{outline:5px auto -webkit-focus-ring-color;outline-offset:-2px}output{display:block;padding-top:7px;font-size:14px;line-height:1.42857143;color:#555}.form-control{display:block;width:100%;height:34px;padding:6px 12px;font-size:14px;line-height:1.42857143;color:#555;background-color:#fff;background-image:none;border:1px solid #ccc;border-radius:4px;-webkit-box-shadow:inset 0 1px 1px rgba(0,0,0,.075);box-shadow:inset 0 1px 1px rgba(0,0,0,.075);-webkit-transition:border-color ease-in-out .15s,-webkit-box-shadow ease-in-out .15s;-o-transition:border-color ease-in-out .15s,box-shadow ease-in-out .15s;transition:border-color ease-in-out .15s,box-shadow ease-in-out .15s}.form-control:focus{border-color:#66afe9;outline:0;-webkit-box-shadow:inset 0 1px 1px rgba(0,0,0,.075),0 0 8px rgba(102,175,233,.6);box-shadow:inset 0 1px 1px rgba(0,0,0,.075),0 0 8px rgba(102,175,233,.6)}.form-control::-moz-placeholder{color:#999;opacity:1}.form-control:-ms-input-placeholder{color:#999}.form-control::-webkit-input-placeholder{color:#999}.form-control::-ms-expand{background-color:transparent;border:0}.form-control[disabled],.form-control[readonly],fieldset[disabled] .form-control{background-color:#eee;opacity:1}.form-control[disabled],fieldset[disabled] .form-control{cursor:not-allowed}textarea.form-control{height:auto}input[type=search]{-webkit-appearance:none}@media screen and (-webkit-min-device-pixel-ratio:0){input[type=date].form-control,input[type=time].form-control,input[type=datetime-local].form-control,input[type=month].form-control{line-height:34px}.input-group-sm input[type=date],.input-group-sm input[type=time],.input-group-sm input[type=datetime-local],.input-group-sm input[type=month],input[type=date].input-sm,input[type=time].input-sm,input[type=datetime-local].input-sm,input[type=month].input-sm{line-height:30px}.input-group-lg input[type=date],.input-group-lg input[type=time],.input-group-lg input[type=datetime-local],.input-group-lg input[type=month],input[type=date].input-lg,input[type=time].input-lg,input[type=datetime-local].input-lg,input[type=month].input-lg{line-height:46px}}.form-group{margin-bottom:15px}.checkbox,.radio{position:relative;display:block;margin-top:10px;margin-bottom:10px}.checkbox label,.radio label{min-height:20px;padding-left:20px;margin-bottom:0;font-weight:400;cursor:pointer}.checkbox input[type=checkbox],.checkbox-inline input[type=checkbox],.radio input[type=radio],.radio-inline input[type=radio]{position:absolute;margin-top:4px\9;margin-left:-20px}.checkbox+.checkbox,.radio+.radio{margin-top:-5px}.checkbox-inline,.radio-inline{position:relative;display:inline-block;padding-left:20px;margin-bottom:0;font-weight:400;vertical-align:middle;cursor:pointer}.checkbox-inline+.checkbox-inline,.radio-inline+.radio-inline{margin-top:0;margin-left:10px}fieldset[disabled] input[type=checkbox],fieldset[disabled] input[type=radio],input[type=checkbox].disabled,input[type=checkbox][disabled],input[type=radio].disabled,input[type=radio][disabled]{cursor:not-allowed}.checkbox-inline.disabled,.radio-inline.disabled,fieldset[disabled] .checkbox-inline,fieldset[disabled] .radio-inline{cursor:not-allowed}.checkbox.disabled label,.radio.disabled label,fieldset[disabled] .checkbox label,fieldset[disabled] .radio label{cursor:not-allowed}.form-control-static{min-height:34px;padding-top:7px;padding-bottom:7px;margin-bottom:0}.form-control-static.input-lg,.form-control-static.input-sm{padding-right:0;padding-left:0}.input-sm{height:30px;padding:5px 10px;font-size:12px;line-height:1.5;border-radius:3px}select.input-sm{height:30px;line-height:30px}select[multiple].input-sm,textarea.input-sm{height:auto}.form-group-sm .form-control{height:30px;padding:5px 10px;font-size:12px;line-height:1.5;border-radius:3px}.form-group-sm select.form-control{height:30px;line-height:30px}.form-group-sm select[multiple].form-control,.form-group-sm textarea.form-control{height:auto}.form-group-sm .form-control-static{height:30px;min-height:32px;padding:6px 10px;font-size:12px;line-height:1.5}.input-lg{height:46px;padding:10px 16px;font-size:18px;line-height:1.3333333;border-radius:6px}select.input-lg{height:46px;line-height:46px}select[multiple].input-lg,textarea.input-lg{height:auto}.form-group-lg .form-control{height:46px;padding:10px 16px;font-size:18px;line-height:1.3333333;border-radius:6px}.form-group-lg select.form-control{height:46px;line-height:46px}.form-group-lg select[multiple].form-control,.form-group-lg textarea.form-control{height:auto}.form-group-lg .form-control-static{height:46px;min-height:38px;padding:11px 16px;font-size:18px;line-height:1.3333333}.has-feedback{position:relative}.has-feedback .form-control{padding-right:42.5px}.form-control-feedback{position:absolute;top:0;right:0;z-index:2;display:block;width:34px;height:34px;line-height:34px;text-align:center;pointer-events:none}.form-group-lg .form-control+.form-control-feedback,.input-group-lg+.form-control-feedback,.input-lg+.form-control-feedback{width:46px;height:46px;line-height:46px}.form-group-sm .form-control+.form-control-feedback,.input-group-sm+.form-control-feedback,.input-sm+.form-control-feedback{width:30px;height:30px;line-height:30px}.has-success .checkbox,.has-success .checkbox-inline,.has-success .control-label,.has-success .help-block,.has-success .radio,.has-success .radio-inline,.has-success.checkbox label,.has-success.checkbox-inline label,.has-success.radio label,.has-success.radio-inline label{color:#3c763d}.has-success .form-control{border-color:#3c763d;-webkit-box-shadow:inset 0 1px 1px rgba(0,0,0,.075);box-shadow:inset 0 1px 1px rgba(0,0,0,.075)}.has-success .form-control:focus{border-color:#2b542c;-webkit-box-shadow:inset 0 1px 1px rgba(0,0,0,.075),0 0 6px #67b168;box-shadow:inset 0 1px 1px rgba(0,0,0,.075),0 0 6px #67b168}.has-success .input-group-addon{color:#3c763d;background-color:#dff0d8;border-color:#3c763d}.has-success .form-control-feedback{color:#3c763d}.has-warning .checkbox,.has-warning .checkbox-inline,.has-warning .control-label,.has-warning .help-block,.has-warning .radio,.has-warning .radio-inline,.has-warning.checkbox label,.has-warning.checkbox-inline label,.has-warning.radio label,.has-warning.radio-inline label{color:#8a6d3b}.has-warning .form-control{border-color:#8a6d3b;-webkit-box-shadow:inset 0 1px 1px rgba(0,0,0,.075);box-shadow:inset 0 1px 1px rgba(0,0,0,.075)}.has-warning .form-control:focus{border-color:#66512c;-webkit-box-shadow:inset 0 1px 1px rgba(0,0,0,.075),0 0 6px #c0a16b;box-shadow:inset 0 1px 1px rgba(0,0,0,.075),0 0 6px #c0a16b}.has-warning .input-group-addon{color:#8a6d3b;background-color:#fcf8e3;border-color:#8a6d3b}.has-warning .form-control-feedback{color:#8a6d3b}.has-error .checkbox,.has-error .checkbox-inline,.has-error .control-label,.has-error .help-block,.has-error .radio,.has-error .radio-inline,.has-error.checkbox label,.has-error.checkbox-inline label,.has-error.radio label,.has-error.radio-inline label{color:#a94442}.has-error .form-control{border-color:#a94442;-webkit-box-shadow:inset 0 1px 1px rgba(0,0,0,.075);box-shadow:inset 0 1px 1px rgba(0,0,0,.075)}.has-error .form-control:focus{border-color:#843534;-webkit-box-shadow:inset 0 1px 1px rgba(0,0,0,.075),0 0 6px #ce8483;box-shadow:inset 0 1px 1px rgba(0,0,0,.075),0 0 6px #ce8483}.has-error .input-group-addon{color:#a94442;background-color:#f2dede;border-color:#a94442}.has-error .form-control-feedback{color:#a94442}.has-feedback label~.form-control-feedback{top:25px}.has-feedback label.sr-only~.form-control-feedback{top:0}.help-block{display:block;margin-top:5px;margin-bottom:10px;color:#737373}@media (min-width:768px){.form-inline .form-group{display:inline-block;margin-bottom:0;vertical-align:middle}.form-inline .form-control{display:inline-block;width:auto;vertical-align:middle}.form-inline .form-control-static{display:inline-block}.form-inline .input-group{display:inline-table;vertical-align:middle}.form-inline .input-group .form-control,.form-inline .input-group .input-group-addon,.form-inline .input-group .input-group-btn{width:auto}.form-inline .input-group>.form-control{width:100%}.form-inline .control-label{margin-bottom:0;vertical-align:middle}.form-inline .checkbox,.form-inline .radio{display:inline-block;margin-top:0;margin-bottom:0;vertical-align:middle}.form-inline .checkbox label,.form-inline .radio label{padding-left:0}.form-inline .checkbox input[type=checkbox],.form-inline .radio input[type=radio]{position:relative;margin-left:0}.form-inline .has-feedback .form-control-feedback{top:0}}.form-horizontal .checkbox,.form-horizontal .checkbox-inline,.form-horizontal .radio,.form-horizontal .radio-inline{padding-top:7px;margin-top:0;margin-bottom:0}.form-horizontal .checkbox,.form-horizontal .radio{min-height:27px}.form-horizontal .form-group{margin-right:-15px;margin-left:-15px}@media (min-width:768px){.form-horizontal .control-label{padding-top:7px;margin-bottom:0;text-align:right}}.form-horizontal .has-feedback .form-control-feedback{right:15px}@media (min-width:768px){.form-horizontal .form-group-lg .control-label{padding-top:11px;font-size:18px}}@media (min-width:768px){.form-horizontal .form-group-sm .control-label{padding-top:6px;font-size:12px}}.btn{display:inline-block;padding:6px 12px;margin-bottom:0;font-size:14px;font-weight:400;line-height:1.42857143;text-align:center;white-space:nowrap;vertical-align:middle;-ms-touch-action:manipulation;touch-action:manipulation;cursor:pointer;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;background-image:none;border:1px solid transparent;border-radius:4px}.btn.active.focus,.btn.active:focus,.btn.focus,.btn:active.focus,.btn:active:focus,.btn:focus{outline:5px auto -webkit-focus-ring-color;outline-offset:-2px}.btn.focus,.btn:focus,.btn:hover{color:#333;text-decoration:none}.btn.active,.btn:active{background-image:none;outline:0;-webkit-box-shadow:inset 0 3px 5px rgba(0,0,0,.125);box-shadow:inset 0 3px 5px rgba(0,0,0,.125)}.btn.disabled,.btn[disabled],fieldset[disabled] .btn{cursor:not-allowed;filter:alpha(opacity=65);-webkit-box-shadow:none;box-shadow:none;opacity:.65}a.btn.disabled,fieldset[disabled] a.btn{pointer-events:none}.btn-default{color:#333;background-color:#fff;border-color:#ccc}.btn-default.focus,.btn-default:focus{color:#333;background-color:#e6e6e6;border-color:#8c8c8c}.btn-default:hover{color:#333;background-color:#e6e6e6;border-color:#adadad}.btn-default.active,.btn-default:active,.open>.dropdown-toggle.btn-default{color:#333;background-color:#e6e6e6;border-color:#adadad}.btn-default.active.focus,.btn-default.active:focus,.btn-default.active:hover,.btn-default:active.focus,.btn-default:active:focus,.btn-default:active:hover,.open>.dropdown-toggle.btn-default.focus,.open>.dropdown-toggle.btn-default:focus,.open>.dropdown-toggle.btn-default:hover{color:#333;background-color:#d4d4d4;border-color:#8c8c8c}.btn-default.active,.btn-default:active,.open>.dropdown-toggle.btn-default{background-image:none}.btn-default.disabled.focus,.btn-default.disabled:focus,.btn-default.disabled:hover,.btn-default[disabled].focus,.btn-default[disabled]:focus,.btn-default[disabled]:hover,fieldset[disabled] .btn-default.focus,fieldset[disabled] .btn-default:focus,fieldset[disabled] .btn-default:hover{background-color:#fff;border-color:#ccc}.btn-default .badge{color:#fff;background-color:#333}.btn-primary{color:#fff;background-color:#337ab7;border-color:#2e6da4}.btn-primary.focus,.btn-primary:focus{color:#fff;background-color:#286090;border-color:#122b40}.btn-primary:hover{color:#fff;background-color:#286090;border-color:#204d74}.btn-primary.active,.btn-primary:active,.open>.dropdown-toggle.btn-primary{color:#fff;background-color:#286090;border-color:#204d74}.btn-primary.active.focus,.btn-primary.active:focus,.btn-primary.active:hover,.btn-primary:active.focus,.btn-primary:active:focus,.btn-primary:active:hover,.open>.dropdown-toggle.btn-primary.focus,.open>.dropdown-toggle.btn-primary:focus,.open>.dropdown-toggle.btn-primary:hover{color:#fff;background-color:#204d74;border-color:#122b40}.btn-primary.active,.btn-primary:active,.open>.dropdown-toggle.btn-primary{background-image:none}.btn-primary.disabled.focus,.btn-primary.disabled:focus,.btn-primary.disabled:hover,.btn-primary[disabled].focus,.btn-primary[disabled]:focus,.btn-primary[disabled]:hover,fieldset[disabled] .btn-primary.focus,fieldset[disabled] .btn-primary:focus,fieldset[disabled] .btn-primary:hover{background-color:#337ab7;border-color:#2e6da4}.btn-primary .badge{color:#337ab7;background-color:#fff}.btn-success{color:#fff;background-color:#5cb85c;border-color:#4cae4c}.btn-success.focus,.btn-success:focus{color:#fff;background-color:#449d44;border-color:#255625}.btn-success:hover{color:#fff;background-color:#449d44;border-color:#398439}.btn-success.active,.btn-success:active,.open>.dropdown-toggle.btn-success{color:#fff;background-color:#449d44;border-color:#398439}.btn-success.active.focus,.btn-success.active:focus,.btn-success.active:hover,.btn-success:active.focus,.btn-success:active:focus,.btn-success:active:hover,.open>.dropdown-toggle.btn-success.focus,.open>.dropdown-toggle.btn-success:focus,.open>.dropdown-toggle.btn-success:hover{color:#fff;background-color:#398439;border-color:#255625}.btn-success.active,.btn-success:active,.open>.dropdown-toggle.btn-success{background-image:none}.btn-success.disabled.focus,.btn-success.disabled:focus,.btn-success.disabled:hover,.btn-success[disabled].focus,.btn-success[disabled]:focus,.btn-success[disabled]:hover,fieldset[disabled] .btn-success.focus,fieldset[disabled] .btn-success:focus,fieldset[disabled] .btn-success:hover{background-color:#5cb85c;border-color:#4cae4c}.btn-success .badge{color:#5cb85c;background-color:#fff}.btn-info{color:#fff;background-color:#5bc0de;border-color:#46b8da}.btn-info.focus,.btn-info:focus{color:#fff;background-color:#31b0d5;border-color:#1b6d85}.btn-info:hover{color:#fff;background-color:#31b0d5;border-color:#269abc}.btn-info.active,.btn-info:active,.open>.dropdown-toggle.btn-info{color:#fff;background-color:#31b0d5;border-color:#269abc}.btn-info.active.focus,.btn-info.active:focus,.btn-info.active:hover,.btn-info:active.focus,.btn-info:active:focus,.btn-info:active:hover,.open>.dropdown-toggle.btn-info.focus,.open>.dropdown-toggle.btn-info:focus,.open>.dropdown-toggle.btn-info:hover{color:#fff;background-color:#269abc;border-color:#1b6d85}.btn-info.active,.btn-info:active,.open>.dropdown-toggle.btn-info{background-image:none}.btn-info.disabled.focus,.btn-info.disabled:focus,.btn-info.disabled:hover,.btn-info[disabled].focus,.btn-info[disabled]:focus,.btn-info[disabled]:hover,fieldset[disabled] .btn-info.focus,fieldset[disabled] .btn-info:focus,fieldset[disabled] .btn-info:hover{background-color:#5bc0de;border-color:#46b8da}.btn-info .badge{color:#5bc0de;background-color:#fff}.btn-warning{color:#fff;background-color:#f0ad4e;border-color:#eea236}.btn-warning.focus,.btn-warning:focus{color:#fff;background-color:#ec971f;border-color:#985f0d}.btn-warning:hover{color:#fff;background-color:#ec971f;border-color:#d58512}.btn-warning.active,.btn-warning:active,.open>.dropdown-toggle.btn-warning{color:#fff;background-color:#ec971f;border-color:#d58512}.btn-warning.active.focus,.btn-warning.active:focus,.btn-warning.active:hover,.btn-warning:active.focus,.btn-warning:active:focus,.btn-warning:active:hover,.open>.dropdown-toggle.btn-warning.focus,.open>.dropdown-toggle.btn-warning:focus,.open>.dropdown-toggle.btn-warning:hover{color:#fff;background-color:#d58512;border-color:#985f0d}.btn-warning.active,.btn-warning:active,.open>.dropdown-toggle.btn-warning{background-image:none}.btn-warning.disabled.focus,.btn-warning.disabled:focus,.btn-warning.disabled:hover,.btn-warning[disabled].focus,.btn-warning[disabled]:focus,.btn-warning[disabled]:hover,fieldset[disabled] .btn-warning.focus,fieldset[disabled] .btn-warning:focus,fieldset[disabled] .btn-warning:hover{background-color:#f0ad4e;border-color:#eea236}.btn-warning .badge{color:#f0ad4e;background-color:#fff}.btn-danger{color:#fff;background-color:#d9534f;border-color:#d43f3a}.btn-danger.focus,.btn-danger:focus{color:#fff;background-color:#c9302c;border-color:#761c19}.btn-danger:hover{color:#fff;background-color:#c9302c;border-color:#ac2925}.btn-danger.active,.btn-danger:active,.open>.dropdown-toggle.btn-danger{color:#fff;background-color:#c9302c;border-color:#ac2925}.btn-danger.active.focus,.btn-danger.active:focus,.btn-danger.active:hover,.btn-danger:active.focus,.btn-danger:active:focus,.btn-danger:active:hover,.open>.dropdown-toggle.btn-danger.focus,.open>.dropdown-toggle.btn-danger:focus,.open>.dropdown-toggle.btn-danger:hover{color:#fff;background-color:#ac2925;border-color:#761c19}.btn-danger.active,.btn-danger:active,.open>.dropdown-toggle.btn-danger{background-image:none}.btn-danger.disabled.focus,.btn-danger.disabled:focus,.btn-danger.disabled:hover,.btn-danger[disabled].focus,.btn-danger[disabled]:focus,.btn-danger[disabled]:hover,fieldset[disabled] .btn-danger.focus,fieldset[disabled] .btn-danger:focus,fieldset[disabled] .btn-danger:hover{background-color:#d9534f;border-color:#d43f3a}.btn-danger .badge{color:#d9534f;background-color:#fff}.btn-link{font-weight:400;color:#337ab7;border-radius:0}.btn-link,.btn-link.active,.btn-link:active,.btn-link[disabled],fieldset[disabled] .btn-link{background-color:transparent;-webkit-box-shadow:none;box-shadow:none}.btn-link,.btn-link:active,.btn-link:focus,.btn-link:hover{border-color:transparent}.btn-link:focus,.btn-link:hover{color:#23527c;text-decoration:underline;background-color:transparent}.btn-link[disabled]:focus,.btn-link[disabled]:hover,fieldset[disabled] .btn-link:focus,fieldset[disabled] .btn-link:hover{color:#777;text-decoration:none}.btn-group-lg>.btn,.btn-lg{padding:10px 16px;font-size:18px;line-height:1.3333333;border-radius:6px}.btn-group-sm>.btn,.btn-sm{padding:5px 10px;font-size:12px;line-height:1.5;border-radius:3px}.btn-group-xs>.btn,.btn-xs{padding:1px 5px;font-size:12px;line-height:1.5;border-radius:3px}.btn-block{display:block;width:100%}.btn-block+.btn-block{margin-top:5px}input[type=button].btn-block,input[type=reset].btn-block,input[type=submit].btn-block{width:100%}.fade{opacity:0;-webkit-transition:opacity .15s linear;-o-transition:opacity .15s linear;transition:opacity .15s linear}.fade.in{opacity:1}.collapse{display:none}.collapse.in{display:block}tr.collapse.in{display:table-row}tbody.collapse.in{display:table-row-group}.collapsing{position:relative;height:0;overflow:hidden;-webkit-transition-timing-function:ease;-o-transition-timing-function:ease;transition-timing-function:ease;-webkit-transition-duration:.35s;-o-transition-duration:.35s;transition-duration:.35s;-webkit-transition-property:height,visibility;-o-transition-property:height,visibility;transition-property:height,visibility}.caret{display:inline-block;width:0;height:0;margin-left:2px;vertical-align:middle;border-top:4px dashed;border-top:4px solid\9;border-right:4px solid transparent;border-left:4px solid transparent}.dropdown,.dropup{position:relative}.dropdown-toggle:focus{outline:0}.dropdown-menu{position:absolute;top:100%;left:0;z-index:1000;display:none;float:left;min-width:160px;padding:5px 0;margin:2px 0 0;font-size:14px;text-align:left;list-style:none;background-color:#fff;-webkit-background-clip:padding-box;background-clip:padding-box;border:1px solid #ccc;border:1px solid rgba(0,0,0,.15);border-radius:4px;-webkit-box-shadow:0 6px 12px rgba(0,0,0,.175);box-shadow:0 6px 12px rgba(0,0,0,.175)}.dropdown-menu.pull-right{right:0;left:auto}.dropdown-menu .divider{height:1px;margin:9px 0;overflow:hidden;background-color:#e5e5e5}.dropdown-menu>li>a{display:block;padding:3px 20px;clear:both;font-weight:400;line-height:1.42857143;color:#333;white-space:nowrap}.dropdown-menu>li>a:focus,.dropdown-menu>li>a:hover{color:#262626;text-decoration:none;background-color:#f5f5f5}.dropdown-menu>.active>a,.dropdown-menu>.active>a:focus,.dropdown-menu>.active>a:hover{color:#fff;text-decoration:none;background-color:#337ab7;outline:0}.dropdown-menu>.disabled>a,.dropdown-menu>.disabled>a:focus,.dropdown-menu>.disabled>a:hover{color:#777}.dropdown-menu>.disabled>a:focus,.dropdown-menu>.disabled>a:hover{text-decoration:none;cursor:not-allowed;background-color:transparent;background-image:none;filter:progid:DXImageTransform.Microsoft.gradient(enabled=false)}.open>.dropdown-menu{display:block}.open>a{outline:0}.dropdown-menu-right{right:0;left:auto}.dropdown-menu-left{right:auto;left:0}.dropdown-header{display:block;padding:3px 20px;font-size:12px;line-height:1.42857143;color:#777;white-space:nowrap}.dropdown-backdrop{position:fixed;top:0;right:0;bottom:0;left:0;z-index:990}.pull-right>.dropdown-menu{right:0;left:auto}.dropup .caret,.navbar-fixed-bottom .dropdown .caret{content:"";border-top:0;border-bottom:4px dashed;border-bottom:4px solid\9}.dropup .dropdown-menu,.navbar-fixed-bottom .dropdown .dropdown-menu{top:auto;bottom:100%;margin-bottom:2px}@media (min-width:768px){.navbar-right .dropdown-menu{right:0;left:auto}.navbar-right .dropdown-menu-left{right:auto;left:0}}.btn-group,.btn-group-vertical{position:relative;display:inline-block;vertical-align:middle}.btn-group-vertical>.btn,.btn-group>.btn{position:relative;float:left}.btn-group-vertical>.btn.active,.btn-group-vertical>.btn:active,.btn-group-vertical>.btn:focus,.btn-group-vertical>.btn:hover,.btn-group>.btn.active,.btn-group>.btn:active,.btn-group>.btn:focus,.btn-group>.btn:hover{z-index:2}.btn-group .btn+.btn,.btn-group .btn+.btn-group,.btn-group .btn-group+.btn,.btn-group .btn-group+.btn-group{margin-left:-1px}.btn-toolbar{margin-left:-5px}.btn-toolbar .btn,.btn-toolbar .btn-group,.btn-toolbar .input-group{float:left}.btn-toolbar>.btn,.btn-toolbar>.btn-group,.btn-toolbar>.input-group{margin-left:5px}.btn-group>.btn:not(:first-child):not(:last-child):not(.dropdown-toggle){border-radius:0}.btn-group>.btn:first-child{margin-left:0}.btn-group>.btn:first-child:not(:last-child):not(.dropdown-toggle){border-top-right-radius:0;border-bottom-right-radius:0}.btn-group>.btn:last-child:not(:first-child),.btn-group>.dropdown-toggle:not(:first-child){border-top-left-radius:0;border-bottom-left-radius:0}.btn-group>.btn-group{float:left}.btn-group>.btn-group:not(:first-child):not(:last-child)>.btn{border-radius:0}.btn-group>.btn-group:first-child:not(:last-child)>.btn:last-child,.btn-group>.btn-group:first-child:not(:last-child)>.dropdown-toggle{border-top-right-radius:0;border-bottom-right-radius:0}.btn-group>.btn-group:last-child:not(:first-child)>.btn:first-child{border-top-left-radius:0;border-bottom-left-radius:0}.btn-group .dropdown-toggle:active,.btn-group.open .dropdown-toggle{outline:0}.btn-group>.btn+.dropdown-toggle{padding-right:8px;padding-left:8px}.btn-group>.btn-lg+.dropdown-toggle{padding-right:12px;padding-left:12px}.btn-group.open .dropdown-toggle{-webkit-box-shadow:inset 0 3px 5px rgba(0,0,0,.125);box-shadow:inset 0 3px 5px rgba(0,0,0,.125)}.btn-group.open .dropdown-toggle.btn-link{-webkit-box-shadow:none;box-shadow:none}.btn .caret{margin-left:0}.btn-lg .caret{border-width:5px 5px 0;border-bottom-width:0}.dropup .btn-lg .caret{border-width:0 5px 5px}.btn-group-vertical>.btn,.btn-group-vertical>.btn-group,.btn-group-vertical>.btn-group>.btn{display:block;float:none;width:100%;max-width:100%}.btn-group-vertical>.btn-group>.btn{float:none}.btn-group-vertical>.btn+.btn,.btn-group-vertical>.btn+.btn-group,.btn-group-vertical>.btn-group+.btn,.btn-group-vertical>.btn-group+.btn-group{margin-top:-1px;margin-left:0}.btn-group-vertical>.btn:not(:first-child):not(:last-child){border-radius:0}.btn-group-vertical>.btn:first-child:not(:last-child){border-top-left-radius:4px;border-top-right-radius:4px;border-bottom-right-radius:0;border-bottom-left-radius:0}.btn-group-vertical>.btn:last-child:not(:first-child){border-top-left-radius:0;border-top-right-radius:0;border-bottom-right-radius:4px;border-bottom-left-radius:4px}.btn-group-vertical>.btn-group:not(:first-child):not(:last-child)>.btn{border-radius:0}.btn-group-vertical>.btn-group:first-child:not(:last-child)>.btn:last-child,.btn-group-vertical>.btn-group:first-child:not(:last-child)>.dropdown-toggle{border-bottom-right-radius:0;border-bottom-left-radius:0}.btn-group-vertical>.btn-group:last-child:not(:first-child)>.btn:first-child{border-top-left-radius:0;border-top-right-radius:0}.btn-group-justified{display:table;width:100%;table-layout:fixed;border-collapse:separate}.btn-group-justified>.btn,.btn-group-justified>.btn-group{display:table-cell;float:none;width:1%}.btn-group-justified>.btn-group .btn{width:100%}.btn-group-justified>.btn-group .dropdown-menu{left:auto}[data-toggle=buttons]>.btn input[type=checkbox],[data-toggle=buttons]>.btn input[type=radio],[data-toggle=buttons]>.btn-group>.btn input[type=checkbox],[data-toggle=buttons]>.btn-group>.btn input[type=radio]{position:absolute;clip:rect(0,0,0,0);pointer-events:none}.input-group{position:relative;display:table;border-collapse:separate}.input-group[class*=col-]{float:none;padding-right:0;padding-left:0}.input-group .form-control{position:relative;z-index:2;float:left;width:100%;margin-bottom:0}.input-group .form-control:focus{z-index:3}.input-group-lg>.form-control,.input-group-lg>.input-group-addon,.input-group-lg>.input-group-btn>.btn{height:46px;padding:10px 16px;font-size:18px;line-height:1.3333333;border-radius:6px}select.input-group-lg>.form-control,select.input-group-lg>.input-group-addon,select.input-group-lg>.input-group-btn>.btn{height:46px;line-height:46px}select[multiple].input-group-lg>.form-control,select[multiple].input-group-lg>.input-group-addon,select[multiple].input-group-lg>.input-group-btn>.btn,textarea.input-group-lg>.form-control,textarea.input-group-lg>.input-group-addon,textarea.input-group-lg>.input-group-btn>.btn{height:auto}.input-group-sm>.form-control,.input-group-sm>.input-group-addon,.input-group-sm>.input-group-btn>.btn{height:30px;padding:5px 10px;font-size:12px;line-height:1.5;border-radius:3px}select.input-group-sm>.form-control,select.input-group-sm>.input-group-addon,select.input-group-sm>.input-group-btn>.btn{height:30px;line-height:30px}select[multiple].input-group-sm>.form-control,select[multiple].input-group-sm>.input-group-addon,select[multiple].input-group-sm>.input-group-btn>.btn,textarea.input-group-sm>.form-control,textarea.input-group-sm>.input-group-addon,textarea.input-group-sm>.input-group-btn>.btn{height:auto}.input-group .form-control,.input-group-addon,.input-group-btn{display:table-cell}.input-group .form-control:not(:first-child):not(:last-child),.input-group-addon:not(:first-child):not(:last-child),.input-group-btn:not(:first-child):not(:last-child){border-radius:0}.input-group-addon,.input-group-btn{width:1%;white-space:nowrap;vertical-align:middle}.input-group-addon{padding:6px 12px;font-size:14px;font-weight:400;line-height:1;color:#555;text-align:center;background-color:#eee;border:1px solid #ccc;border-radius:4px}.input-group-addon.input-sm{padding:5px 10px;font-size:12px;border-radius:3px}.input-group-addon.input-lg{padding:10px 16px;font-size:18px;border-radius:6px}.input-group-addon input[type=checkbox],.input-group-addon input[type=radio]{margin-top:0}.input-group .form-control:first-child,.input-group-addon:first-child,.input-group-btn:first-child>.btn,.input-group-btn:first-child>.btn-group>.btn,.input-group-btn:first-child>.dropdown-toggle,.input-group-btn:last-child>.btn-group:not(:last-child)>.btn,.input-group-btn:last-child>.btn:not(:last-child):not(.dropdown-toggle){border-top-right-radius:0;border-bottom-right-radius:0}.input-group-addon:first-child{border-right:0}.input-group .form-control:last-child,.input-group-addon:last-child,.input-group-btn:first-child>.btn-group:not(:first-child)>.btn,.input-group-btn:first-child>.btn:not(:first-child),.input-group-btn:last-child>.btn,.input-group-btn:last-child>.btn-group>.btn,.input-group-btn:last-child>.dropdown-toggle{border-top-left-radius:0;border-bottom-left-radius:0}.input-group-addon:last-child{border-left:0}.input-group-btn{position:relative;font-size:0;white-space:nowrap}.input-group-btn>.btn{position:relative}.input-group-btn>.btn+.btn{margin-left:-1px}.input-group-btn>.btn:active,.input-group-btn>.btn:focus,.input-group-btn>.btn:hover{z-index:2}.input-group-btn:first-child>.btn,.input-group-btn:first-child>.btn-group{margin-right:-1px}.input-group-btn:last-child>.btn,.input-group-btn:last-child>.btn-group{z-index:2;margin-left:-1px}.nav{padding-left:0;margin-bottom:0;list-style:none}.nav>li{position:relative;display:block}.nav>li>a{position:relative;display:block;padding:10px 15px}.nav>li>a:focus,.nav>li>a:hover{text-decoration:none;background-color:#eee}.nav>li.disabled>a{color:#777}.nav>li.disabled>a:focus,.nav>li.disabled>a:hover{color:#777;text-decoration:none;cursor:not-allowed;background-color:transparent}.nav .open>a,.nav .open>a:focus,.nav .open>a:hover{background-color:#eee;border-color:#337ab7}.nav .nav-divider{height:1px;margin:9px 0;overflow:hidden;background-color:#e5e5e5}.nav>li>a>img{max-width:none}.nav-tabs{border-bottom:1px solid #ddd}.nav-tabs>li{float:left;margin-bottom:-1px}.nav-tabs>li>a{margin-right:2px;line-height:1.42857143;border:1px solid transparent;border-radius:4px 4px 0 0}.nav-tabs>li>a:hover{border-color:#eee #eee #ddd}.nav-tabs>li.active>a,.nav-tabs>li.active>a:focus,.nav-tabs>li.active>a:hover{color:#555;cursor:default;background-color:#fff;border:1px solid #ddd;border-bottom-color:transparent}.nav-tabs.nav-justified{width:100%;border-bottom:0}.nav-tabs.nav-justified>li{float:none}.nav-tabs.nav-justified>li>a{margin-bottom:5px;text-align:center}.nav-tabs.nav-justified>.dropdown .dropdown-menu{top:auto;left:auto}@media (min-width:768px){.nav-tabs.nav-justified>li{display:table-cell;width:1%}.nav-tabs.nav-justified>li>a{margin-bottom:0}}.nav-tabs.nav-justified>li>a{margin-right:0;border-radius:4px}.nav-tabs.nav-justified>.active>a,.nav-tabs.nav-justified>.active>a:focus,.nav-tabs.nav-justified>.active>a:hover{border:1px solid #ddd}@media (min-width:768px){.nav-tabs.nav-justified>li>a{border-bottom:1px solid #ddd;border-radius:4px 4px 0 0}.nav-tabs.nav-justified>.active>a,.nav-tabs.nav-justified>.active>a:focus,.nav-tabs.nav-justified>.active>a:hover{border-bottom-color:#fff}}.nav-pills>li{float:left}.nav-pills>li>a{border-radius:4px}.nav-pills>li+li{margin-left:2px}.nav-pills>li.active>a,.nav-pills>li.active>a:focus,.nav-pills>li.active>a:hover{color:#fff;background-color:#337ab7}.nav-stacked>li{float:none}.nav-stacked>li+li{margin-top:2px;margin-left:0}.nav-justified{width:100%}.nav-justified>li{float:none}.nav-justified>li>a{margin-bottom:5px;text-align:center}.nav-justified>.dropdown .dropdown-menu{top:auto;left:auto}@media (min-width:768px){.nav-justified>li{display:table-cell;width:1%}.nav-justified>li>a{margin-bottom:0}}.nav-tabs-justified{border-bottom:0}.nav-tabs-justified>li>a{margin-right:0;border-radius:4px}.nav-tabs-justified>.active>a,.nav-tabs-justified>.active>a:focus,.nav-tabs-justified>.active>a:hover{border:1px solid #ddd}@media (min-width:768px){.nav-tabs-justified>li>a{border-bottom:1px solid #ddd;border-radius:4px 4px 0 0}.nav-tabs-justified>.active>a,.nav-tabs-justified>.active>a:focus,.nav-tabs-justified>.active>a:hover{border-bottom-color:#fff}}.tab-content>.tab-pane{display:none}.tab-content>.active{display:block}.nav-tabs .dropdown-menu{margin-top:-1px;border-top-left-radius:0;border-top-right-radius:0}.navbar{position:relative;min-height:50px;margin-bottom:20px;border:1px solid transparent}@media (min-width:768px){.navbar{border-radius:4px}}@media (min-width:768px){.navbar-header{float:left}}.navbar-collapse{padding-right:15px;padding-left:15px;overflow-x:visible;-webkit-overflow-scrolling:touch;border-top:1px solid transparent;-webkit-box-shadow:inset 0 1px 0 rgba(255,255,255,.1);box-shadow:inset 0 1px 0 rgba(255,255,255,.1)}.navbar-collapse.in{overflow-y:auto}@media (min-width:768px){.navbar-collapse{width:auto;border-top:0;-webkit-box-shadow:none;box-shadow:none}.navbar-collapse.collapse{display:block!important;height:auto!important;padding-bottom:0;overflow:visible!important}.navbar-collapse.in{overflow-y:visible}.navbar-fixed-bottom .navbar-collapse,.navbar-fixed-top .navbar-collapse,.navbar-static-top .navbar-collapse{padding-right:0;padding-left:0}}.navbar-fixed-bottom .navbar-collapse,.navbar-fixed-top .navbar-collapse{max-height:340px}@media (max-device-width:480px) and (orientation:landscape){.navbar-fixed-bottom .navbar-collapse,.navbar-fixed-top .navbar-collapse{max-height:200px}}.container-fluid>.navbar-collapse,.container-fluid>.navbar-header,.container>.navbar-collapse,.container>.navbar-header{margin-right:-15px;margin-left:-15px}@media (min-width:768px){.container-fluid>.navbar-collapse,.container-fluid>.navbar-header,.container>.navbar-collapse,.container>.navbar-header{margin-right:0;margin-left:0}}.navbar-static-top{z-index:1000;border-width:0 0 1px}@media (min-width:768px){.navbar-static-top{border-radius:0}}.navbar-fixed-bottom,.navbar-fixed-top{position:fixed;right:0;left:0;z-index:1030}@media (min-width:768px){.navbar-fixed-bottom,.navbar-fixed-top{border-radius:0}}.navbar-fixed-top{top:0;border-width:0 0 1px}.navbar-fixed-bottom{bottom:0;margin-bottom:0;border-width:1px 0 0}.navbar-brand{float:left;height:50px;padding:15px 15px;font-size:18px;line-height:20px}.navbar-brand:focus,.navbar-brand:hover{text-decoration:none}.navbar-brand>img{display:block}@media (min-width:768px){.navbar>.container .navbar-brand,.navbar>.container-fluid .navbar-brand{margin-left:-15px}}.navbar-toggle{position:relative;float:right;padding:9px 10px;margin-top:8px;margin-right:15px;margin-bottom:8px;background-color:transparent;background-image:none;border:1px solid transparent;border-radius:4px}.navbar-toggle:focus{outline:0}.navbar-toggle .icon-bar{display:block;width:22px;height:2px;border-radius:1px}.navbar-toggle .icon-bar+.icon-bar{margin-top:4px}@media (min-width:768px){.navbar-toggle{display:none}}.navbar-nav{margin:7.5px -15px}.navbar-nav>li>a{padding-top:10px;padding-bottom:10px;line-height:20px}@media (max-width:767px){.navbar-nav .open .dropdown-menu{position:static;float:none;width:auto;margin-top:0;background-color:transparent;border:0;-webkit-box-shadow:none;box-shadow:none}.navbar-nav .open .dropdown-menu .dropdown-header,.navbar-nav .open .dropdown-menu>li>a{padding:5px 15px 5px 25px}.navbar-nav .open .dropdown-menu>li>a{line-height:20px}.navbar-nav .open .dropdown-menu>li>a:focus,.navbar-nav .open .dropdown-menu>li>a:hover{background-image:none}}@media (min-width:768px){.navbar-nav{float:left;margin:0}.navbar-nav>li{float:left}.navbar-nav>li>a{padding-top:15px;padding-bottom:15px}}.navbar-form{padding:10px 15px;margin-top:8px;margin-right:-15px;margin-bottom:8px;margin-left:-15px;border-top:1px solid transparent;border-bottom:1px solid transparent;-webkit-box-shadow:inset 0 1px 0 rgba(255,255,255,.1),0 1px 0 rgba(255,255,255,.1);box-shadow:inset 0 1px 0 rgba(255,255,255,.1),0 1px 0 rgba(255,255,255,.1)}@media (min-width:768px){.navbar-form .form-group{display:inline-block;margin-bottom:0;vertical-align:middle}.navbar-form .form-control{display:inline-block;width:auto;vertical-align:middle}.navbar-form .form-control-static{display:inline-block}.navbar-form .input-group{display:inline-table;vertical-align:middle}.navbar-form .input-group .form-control,.navbar-form .input-group .input-group-addon,.navbar-form .input-group .input-group-btn{width:auto}.navbar-form .input-group>.form-control{width:100%}.navbar-form .control-label{margin-bottom:0;vertical-align:middle}.navbar-form .checkbox,.navbar-form .radio{display:inline-block;margin-top:0;margin-bottom:0;vertical-align:middle}.navbar-form .checkbox label,.navbar-form .radio label{padding-left:0}.navbar-form .checkbox input[type=checkbox],.navbar-form .radio input[type=radio]{position:relative;margin-left:0}.navbar-form .has-feedback .form-control-feedback{top:0}}@media (max-width:767px){.navbar-form .form-group{margin-bottom:5px}.navbar-form .form-group:last-child{margin-bottom:0}}@media (min-width:768px){.navbar-form{width:auto;padding-top:0;padding-bottom:0;margin-right:0;margin-left:0;border:0;-webkit-box-shadow:none;box-shadow:none}}.navbar-nav>li>.dropdown-menu{margin-top:0;border-top-left-radius:0;border-top-right-radius:0}.navbar-fixed-bottom .navbar-nav>li>.dropdown-menu{margin-bottom:0;border-top-left-radius:4px;border-top-right-radius:4px;border-bottom-right-radius:0;border-bottom-left-radius:0}.navbar-btn{margin-top:8px;margin-bottom:8px}.navbar-btn.btn-sm{margin-top:10px;margin-bottom:10px}.navbar-btn.btn-xs{margin-top:14px;margin-bottom:14px}.navbar-text{margin-top:15px;margin-bottom:15px}@media (min-width:768px){.navbar-text{float:left;margin-right:15px;margin-left:15px}}@media (min-width:768px){.navbar-left{float:left!important}.navbar-right{float:right!important;margin-right:-15px}.navbar-right~.navbar-right{margin-right:0}}.navbar-default{background-color:#f8f8f8;border-color:#e7e7e7}.navbar-default .navbar-brand{color:#777}.navbar-default .navbar-brand:focus,.navbar-default .navbar-brand:hover{color:#5e5e5e;background-color:transparent}.navbar-default .navbar-text{color:#777}.navbar-default .navbar-nav>li>a{color:#777}.navbar-default .navbar-nav>li>a:focus,.navbar-default .navbar-nav>li>a:hover{color:#333;background-color:transparent}.navbar-default .navbar-nav>.active>a,.navbar-default .navbar-nav>.active>a:focus,.navbar-default .navbar-nav>.active>a:hover{color:#555;background-color:#e7e7e7}.navbar-default .navbar-nav>.disabled>a,.navbar-default .navbar-nav>.disabled>a:focus,.navbar-default .navbar-nav>.disabled>a:hover{color:#ccc;background-color:transparent}.navbar-default .navbar-toggle{border-color:#ddd}.navbar-default .navbar-toggle:focus,.navbar-default .navbar-toggle:hover{background-color:#ddd}.navbar-default .navbar-toggle .icon-bar{background-color:#888}.navbar-default .navbar-collapse,.navbar-default .navbar-form{border-color:#e7e7e7}.navbar-default .navbar-nav>.open>a,.navbar-default .navbar-nav>.open>a:focus,.navbar-default .navbar-nav>.open>a:hover{color:#555;background-color:#e7e7e7}@media (max-width:767px){.navbar-default .navbar-nav .open .dropdown-menu>li>a{color:#777}.navbar-default .navbar-nav .open .dropdown-menu>li>a:focus,.navbar-default .navbar-nav .open .dropdown-menu>li>a:hover{color:#333;background-color:transparent}.navbar-default .navbar-nav .open .dropdown-menu>.active>a,.navbar-default .navbar-nav .open .dropdown-menu>.active>a:focus,.navbar-default .navbar-nav .open .dropdown-menu>.active>a:hover{color:#555;background-color:#e7e7e7}.navbar-default .navbar-nav .open .dropdown-menu>.disabled>a,.navbar-default .navbar-nav .open .dropdown-menu>.disabled>a:focus,.navbar-default .navbar-nav .open .dropdown-menu>.disabled>a:hover{color:#ccc;background-color:transparent}}.navbar-default .navbar-link{color:#777}.navbar-default .navbar-link:hover{color:#333}.navbar-default .btn-link{color:#777}.navbar-default .btn-link:focus,.navbar-default .btn-link:hover{color:#333}.navbar-default .btn-link[disabled]:focus,.navbar-default .btn-link[disabled]:hover,fieldset[disabled] .navbar-default .btn-link:focus,fieldset[disabled] .navbar-default .btn-link:hover{color:#ccc}.navbar-inverse{background-color:#222;border-color:#080808}.navbar-inverse .navbar-brand{color:#9d9d9d}.navbar-inverse .navbar-brand:focus,.navbar-inverse .navbar-brand:hover{color:#fff;background-color:transparent}.navbar-inverse .navbar-text{color:#9d9d9d}.navbar-inverse .navbar-nav>li>a{color:#9d9d9d}.navbar-inverse .navbar-nav>li>a:focus,.navbar-inverse .navbar-nav>li>a:hover{color:#fff;background-color:transparent}.navbar-inverse .navbar-nav>.active>a,.navbar-inverse .navbar-nav>.active>a:focus,.navbar-inverse .navbar-nav>.active>a:hover{color:#fff;background-color:#080808}.navbar-inverse .navbar-nav>.disabled>a,.navbar-inverse .navbar-nav>.disabled>a:focus,.navbar-inverse .navbar-nav>.disabled>a:hover{color:#444;background-color:transparent}.navbar-inverse .navbar-toggle{border-color:#333}.navbar-inverse .navbar-toggle:focus,.navbar-inverse .navbar-toggle:hover{background-color:#333}.navbar-inverse .navbar-toggle .icon-bar{background-color:#fff}.navbar-inverse .navbar-collapse,.navbar-inverse .navbar-form{border-color:#101010}.navbar-inverse .navbar-nav>.open>a,.navbar-inverse .navbar-nav>.open>a:focus,.navbar-inverse .navbar-nav>.open>a:hover{color:#fff;background-color:#080808}@media (max-width:767px){.navbar-inverse .navbar-nav .open .dropdown-menu>.dropdown-header{border-color:#080808}.navbar-inverse .navbar-nav .open .dropdown-menu .divider{background-color:#080808}.navbar-inverse .navbar-nav .open .dropdown-menu>li>a{color:#9d9d9d}.navbar-inverse .navbar-nav .open .dropdown-menu>li>a:focus,.navbar-inverse .navbar-nav .open .dropdown-menu>li>a:hover{color:#fff;background-color:transparent}.navbar-inverse .navbar-nav .open .dropdown-menu>.active>a,.navbar-inverse .navbar-nav .open .dropdown-menu>.active>a:focus,.navbar-inverse .navbar-nav .open .dropdown-menu>.active>a:hover{color:#fff;background-color:#080808}.navbar-inverse .navbar-nav .open .dropdown-menu>.disabled>a,.navbar-inverse .navbar-nav .open .dropdown-menu>.disabled>a:focus,.navbar-inverse .navbar-nav .open .dropdown-menu>.disabled>a:hover{color:#444;background-color:transparent}}.navbar-inverse .navbar-link{color:#9d9d9d}.navbar-inverse .navbar-link:hover{color:#fff}.navbar-inverse .btn-link{color:#9d9d9d}.navbar-inverse .btn-link:focus,.navbar-inverse .btn-link:hover{color:#fff}.navbar-inverse .btn-link[disabled]:focus,.navbar-inverse .btn-link[disabled]:hover,fieldset[disabled] .navbar-inverse .btn-link:focus,fieldset[disabled] .navbar-inverse .btn-link:hover{color:#444}.breadcrumb{padding:8px 15px;margin-bottom:20px;list-style:none;background-color:#f5f5f5;border-radius:4px}.breadcrumb>li{display:inline-block}.breadcrumb>li+li:before{padding:0 5px;color:#ccc;content:"/\00a0"}.breadcrumb>.active{color:#777}.pagination{display:inline-block;padding-left:0;margin:20px 0;border-radius:4px}.pagination>li{display:inline}.pagination>li>a,.pagination>li>span{position:relative;float:left;padding:6px 12px;margin-left:-1px;line-height:1.42857143;color:#337ab7;text-decoration:none;background-color:#fff;border:1px solid #ddd}.pagination>li:first-child>a,.pagination>li:first-child>span{margin-left:0;border-top-left-radius:4px;border-bottom-left-radius:4px}.pagination>li:last-child>a,.pagination>li:last-child>span{border-top-right-radius:4px;border-bottom-right-radius:4px}.pagination>li>a:focus,.pagination>li>a:hover,.pagination>li>span:focus,.pagination>li>span:hover{z-index:2;color:#23527c;background-color:#eee;border-color:#ddd}.pagination>.active>a,.pagination>.active>a:focus,.pagination>.active>a:hover,.pagination>.active>span,.pagination>.active>span:focus,.pagination>.active>span:hover{z-index:3;color:#fff;cursor:default;background-color:#337ab7;border-color:#337ab7}.pagination>.disabled>a,.pagination>.disabled>a:focus,.pagination>.disabled>a:hover,.pagination>.disabled>span,.pagination>.disabled>span:focus,.pagination>.disabled>span:hover{color:#777;cursor:not-allowed;background-color:#fff;border-color:#ddd}.pagination-lg>li>a,.pagination-lg>li>span{padding:10px 16px;font-size:18px;line-height:1.3333333}.pagination-lg>li:first-child>a,.pagination-lg>li:first-child>span{border-top-left-radius:6px;border-bottom-left-radius:6px}.pagination-lg>li:last-child>a,.pagination-lg>li:last-child>span{border-top-right-radius:6px;border-bottom-right-radius:6px}.pagination-sm>li>a,.pagination-sm>li>span{padding:5px 10px;font-size:12px;line-height:1.5}.pagination-sm>li:first-child>a,.pagination-sm>li:first-child>span{border-top-left-radius:3px;border-bottom-left-radius:3px}.pagination-sm>li:last-child>a,.pagination-sm>li:last-child>span{border-top-right-radius:3px;border-bottom-right-radius:3px}.pager{padding-left:0;margin:20px 0;text-align:center;list-style:none}.pager li{display:inline}.pager li>a,.pager li>span{display:inline-block;padding:5px 14px;background-color:#fff;border:1px solid #ddd;border-radius:15px}.pager li>a:focus,.pager li>a:hover{text-decoration:none;background-color:#eee}.pager .next>a,.pager .next>span{float:right}.pager .previous>a,.pager .previous>span{float:left}.pager .disabled>a,.pager .disabled>a:focus,.pager .disabled>a:hover,.pager .disabled>span{color:#777;cursor:not-allowed;background-color:#fff}.label{display:inline;padding:.2em .6em .3em;font-size:75%;font-weight:700;line-height:1;color:#fff;text-align:center;white-space:nowrap;vertical-align:baseline;border-radius:.25em}a.label:focus,a.label:hover{color:#fff;text-decoration:none;cursor:pointer}.label:empty{display:none}.btn .label{position:relative;top:-1px}.label-default{background-color:#777}.label-default[href]:focus,.label-default[href]:hover{background-color:#5e5e5e}.label-primary{background-color:#337ab7}.label-primary[href]:focus,.label-primary[href]:hover{background-color:#286090}.label-success{background-color:#5cb85c}.label-success[href]:focus,.label-success[href]:hover{background-color:#449d44}.label-info{background-color:#5bc0de}.label-info[href]:focus,.label-info[href]:hover{background-color:#31b0d5}.label-warning{background-color:#f0ad4e}.label-warning[href]:focus,.label-warning[href]:hover{background-color:#ec971f}.label-danger{background-color:#d9534f}.label-danger[href]:focus,.label-danger[href]:hover{background-color:#c9302c}.badge{display:inline-block;min-width:10px;padding:3px 7px;font-size:12px;font-weight:700;line-height:1;color:#fff;text-align:center;white-space:nowrap;vertical-align:middle;background-color:#777;border-radius:10px}.badge:empty{display:none}.btn .badge{position:relative;top:-1px}.btn-group-xs>.btn .badge,.btn-xs .badge{top:0;padding:1px 5px}a.badge:focus,a.badge:hover{color:#fff;text-decoration:none;cursor:pointer}.list-group-item.active>.badge,.nav-pills>.active>a>.badge{color:#337ab7;background-color:#fff}.list-group-item>.badge{float:right}.list-group-item>.badge+.badge{margin-right:5px}.nav-pills>li>a>.badge{margin-left:3px}.jumbotron{padding-top:30px;padding-bottom:30px;margin-bottom:30px;color:inherit;background-color:#eee}.jumbotron .h1,.jumbotron h1{color:inherit}.jumbotron p{margin-bottom:15px;font-size:21px;font-weight:200}.jumbotron>hr{border-top-color:#d5d5d5}.container .jumbotron,.container-fluid .jumbotron{padding-right:15px;padding-left:15px;border-radius:6px}.jumbotron .container{max-width:100%}@media screen and (min-width:768px){.jumbotron{padding-top:48px;padding-bottom:48px}.container .jumbotron,.container-fluid .jumbotron{padding-right:60px;padding-left:60px}.jumbotron .h1,.jumbotron h1{font-size:63px}}.thumbnail{display:block;padding:4px;margin-bottom:20px;line-height:1.42857143;background-color:#fff;border:1px solid #ddd;border-radius:4px;-webkit-transition:border .2s ease-in-out;-o-transition:border .2s ease-in-out;transition:border .2s ease-in-out}.thumbnail a>img,.thumbnail>img{margin-right:auto;margin-left:auto}a.thumbnail.active,a.thumbnail:focus,a.thumbnail:hover{border-color:#337ab7}.thumbnail .caption{padding:9px;color:#333}.alert{padding:15px;margin-bottom:20px;border:1px solid transparent;border-radius:4px}.alert h4{margin-top:0;color:inherit}.alert .alert-link{font-weight:700}.alert>p,.alert>ul{margin-bottom:0}.alert>p+p{margin-top:5px}.alert-dismissable,.alert-dismissible{padding-right:35px}.alert-dismissable .close,.alert-dismissible .close{position:relative;top:-2px;right:-21px;color:inherit}.alert-success{color:#3c763d;background-color:#dff0d8;border-color:#d6e9c6}.alert-success hr{border-top-color:#c9e2b3}.alert-success .alert-link{color:#2b542c}.alert-info{color:#31708f;background-color:#d9edf7;border-color:#bce8f1}.alert-info hr{border-top-color:#a6e1ec}.alert-info .alert-link{color:#245269}.alert-warning{color:#8a6d3b;background-color:#fcf8e3;border-color:#faebcc}.alert-warning hr{border-top-color:#f7e1b5}.alert-warning .alert-link{color:#66512c}.alert-danger{color:#a94442;background-color:#f2dede;border-color:#ebccd1}.alert-danger hr{border-top-color:#e4b9c0}.alert-danger .alert-link{color:#843534}@-webkit-keyframes progress-bar-stripes{from{background-position:40px 0}to{background-position:0 0}}@-o-keyframes progress-bar-stripes{from{background-position:40px 0}to{background-position:0 0}}@keyframes progress-bar-stripes{from{background-position:40px 0}to{background-position:0 0}}.progress{height:20px;margin-bottom:20px;overflow:hidden;background-color:#f5f5f5;border-radius:4px;-webkit-box-shadow:inset 0 1px 2px rgba(0,0,0,.1);box-shadow:inset 0 1px 2px rgba(0,0,0,.1)}.progress-bar{float:left;width:0;height:100%;font-size:12px;line-height:20px;color:#fff;text-align:center;background-color:#337ab7;-webkit-box-shadow:inset 0 -1px 0 rgba(0,0,0,.15);box-shadow:inset 0 -1px 0 rgba(0,0,0,.15);-webkit-transition:width .6s ease;-o-transition:width .6s ease;transition:width .6s ease}.progress-bar-striped,.progress-striped .progress-bar{background-image:-webkit-linear-gradient(45deg,rgba(255,255,255,.15) 25%,transparent 25%,transparent 50%,rgba(255,255,255,.15) 50%,rgba(255,255,255,.15) 75%,transparent 75%,transparent);background-image:-o-linear-gradient(45deg,rgba(255,255,255,.15) 25%,transparent 25%,transparent 50%,rgba(255,255,255,.15) 50%,rgba(255,255,255,.15) 75%,transparent 75%,transparent);background-image:linear-gradient(45deg,rgba(255,255,255,.15) 25%,transparent 25%,transparent 50%,rgba(255,255,255,.15) 50%,rgba(255,255,255,.15) 75%,transparent 75%,transparent);-webkit-background-size:40px 40px;background-size:40px 40px}.progress-bar.active,.progress.active .progress-bar{-webkit-animation:progress-bar-stripes 2s linear infinite;-o-animation:progress-bar-stripes 2s linear infinite;animation:progress-bar-stripes 2s linear infinite}.progress-bar-success{background-color:#5cb85c}.progress-striped .progress-bar-success{background-image:-webkit-linear-gradient(45deg,rgba(255,255,255,.15) 25%,transparent 25%,transparent 50%,rgba(255,255,255,.15) 50%,rgba(255,255,255,.15) 75%,transparent 75%,transparent);background-image:-o-linear-gradient(45deg,rgba(255,255,255,.15) 25%,transparent 25%,transparent 50%,rgba(255,255,255,.15) 50%,rgba(255,255,255,.15) 75%,transparent 75%,transparent);background-image:linear-gradient(45deg,rgba(255,255,255,.15) 25%,transparent 25%,transparent 50%,rgba(255,255,255,.15) 50%,rgba(255,255,255,.15) 75%,transparent 75%,transparent)}.progress-bar-info{background-color:#5bc0de}.progress-striped .progress-bar-info{background-image:-webkit-linear-gradient(45deg,rgba(255,255,255,.15) 25%,transparent 25%,transparent 50%,rgba(255,255,255,.15) 50%,rgba(255,255,255,.15) 75%,transparent 75%,transparent);background-image:-o-linear-gradient(45deg,rgba(255,255,255,.15) 25%,transparent 25%,transparent 50%,rgba(255,255,255,.15) 50%,rgba(255,255,255,.15) 75%,transparent 75%,transparent);background-image:linear-gradient(45deg,rgba(255,255,255,.15) 25%,transparent 25%,transparent 50%,rgba(255,255,255,.15) 50%,rgba(255,255,255,.15) 75%,transparent 75%,transparent)}.progress-bar-warning{background-color:#f0ad4e}.progress-striped .progress-bar-warning{background-image:-webkit-linear-gradient(45deg,rgba(255,255,255,.15) 25%,transparent 25%,transparent 50%,rgba(255,255,255,.15) 50%,rgba(255,255,255,.15) 75%,transparent 75%,transparent);background-image:-o-linear-gradient(45deg,rgba(255,255,255,.15) 25%,transparent 25%,transparent 50%,rgba(255,255,255,.15) 50%,rgba(255,255,255,.15) 75%,transparent 75%,transparent);background-image:linear-gradient(45deg,rgba(255,255,255,.15) 25%,transparent 25%,transparent 50%,rgba(255,255,255,.15) 50%,rgba(255,255,255,.15) 75%,transparent 75%,transparent)}.progress-bar-danger{background-color:#d9534f}.progress-striped .progress-bar-danger{background-image:-webkit-linear-gradient(45deg,rgba(255,255,255,.15) 25%,transparent 25%,transparent 50%,rgba(255,255,255,.15) 50%,rgba(255,255,255,.15) 75%,transparent 75%,transparent);background-image:-o-linear-gradient(45deg,rgba(255,255,255,.15) 25%,transparent 25%,transparent 50%,rgba(255,255,255,.15) 50%,rgba(255,255,255,.15) 75%,transparent 75%,transparent);background-image:linear-gradient(45deg,rgba(255,255,255,.15) 25%,transparent 25%,transparent 50%,rgba(255,255,255,.15) 50%,rgba(255,255,255,.15) 75%,transparent 75%,transparent)}.media{margin-top:15px}.media:first-child{margin-top:0}.media,.media-body{overflow:hidden;zoom:1}.media-body{width:10000px}.media-object{display:block}.media-object.img-thumbnail{max-width:none}.media-right,.media>.pull-right{padding-left:10px}.media-left,.media>.pull-left{padding-right:10px}.media-body,.media-left,.media-right{display:table-cell;vertical-align:top}.media-middle{vertical-align:middle}.media-bottom{vertical-align:bottom}.media-heading{margin-top:0;margin-bottom:5px}.media-list{padding-left:0;list-style:none}.list-group{padding-left:0;margin-bottom:20px}.list-group-item{position:relative;display:block;padding:10px 15px;margin-bottom:-1px;background-color:#fff;border:1px solid #ddd}.list-group-item:first-child{border-top-left-radius:4px;border-top-right-radius:4px}.list-group-item:last-child{margin-bottom:0;border-bottom-right-radius:4px;border-bottom-left-radius:4px}a.list-group-item,button.list-group-item{color:#555}a.list-group-item .list-group-item-heading,button.list-group-item .list-group-item-heading{color:#333}a.list-group-item:focus,a.list-group-item:hover,button.list-group-item:focus,button.list-group-item:hover{color:#555;text-decoration:none;background-color:#f5f5f5}button.list-group-item{width:100%;text-align:left}.list-group-item.disabled,.list-group-item.disabled:focus,.list-group-item.disabled:hover{color:#777;cursor:not-allowed;background-color:#eee}.list-group-item.disabled .list-group-item-heading,.list-group-item.disabled:focus .list-group-item-heading,.list-group-item.disabled:hover .list-group-item-heading{color:inherit}.list-group-item.disabled .list-group-item-text,.list-group-item.disabled:focus .list-group-item-text,.list-group-item.disabled:hover .list-group-item-text{color:#777}.list-group-item.active,.list-group-item.active:focus,.list-group-item.active:hover{z-index:2;color:#fff;background-color:#337ab7;border-color:#337ab7}.list-group-item.active .list-group-item-heading,.list-group-item.active .list-group-item-heading>.small,.list-group-item.active .list-group-item-heading>small,.list-group-item.active:focus .list-group-item-heading,.list-group-item.active:focus .list-group-item-heading>.small,.list-group-item.active:focus .list-group-item-heading>small,.list-group-item.active:hover .list-group-item-heading,.list-group-item.active:hover .list-group-item-heading>.small,.list-group-item.active:hover .list-group-item-heading>small{color:inherit}.list-group-item.active .list-group-item-text,.list-group-item.active:focus .list-group-item-text,.list-group-item.active:hover .list-group-item-text{color:#c7ddef}.list-group-item-success{color:#3c763d;background-color:#dff0d8}a.list-group-item-success,button.list-group-item-success{color:#3c763d}a.list-group-item-success .list-group-item-heading,button.list-group-item-success .list-group-item-heading{color:inherit}a.list-group-item-success:focus,a.list-group-item-success:hover,button.list-group-item-success:focus,button.list-group-item-success:hover{color:#3c763d;background-color:#d0e9c6}a.list-group-item-success.active,a.list-group-item-success.active:focus,a.list-group-item-success.active:hover,button.list-group-item-success.active,button.list-group-item-success.active:focus,button.list-group-item-success.active:hover{color:#fff;background-color:#3c763d;border-color:#3c763d}.list-group-item-info{color:#31708f;background-color:#d9edf7}a.list-group-item-info,button.list-group-item-info{color:#31708f}a.list-group-item-info .list-group-item-heading,button.list-group-item-info .list-group-item-heading{color:inherit}a.list-group-item-info:focus,a.list-group-item-info:hover,button.list-group-item-info:focus,button.list-group-item-info:hover{color:#31708f;background-color:#c4e3f3}a.list-group-item-info.active,a.list-group-item-info.active:focus,a.list-group-item-info.active:hover,button.list-group-item-info.active,button.list-group-item-info.active:focus,button.list-group-item-info.active:hover{color:#fff;background-color:#31708f;border-color:#31708f}.list-group-item-warning{color:#8a6d3b;background-color:#fcf8e3}a.list-group-item-warning,button.list-group-item-warning{color:#8a6d3b}a.list-group-item-warning .list-group-item-heading,button.list-group-item-warning .list-group-item-heading{color:inherit}a.list-group-item-warning:focus,a.list-group-item-warning:hover,button.list-group-item-warning:focus,button.list-group-item-warning:hover{color:#8a6d3b;background-color:#faf2cc}a.list-group-item-warning.active,a.list-group-item-warning.active:focus,a.list-group-item-warning.active:hover,button.list-group-item-warning.active,button.list-group-item-warning.active:focus,button.list-group-item-warning.active:hover{color:#fff;background-color:#8a6d3b;border-color:#8a6d3b}.list-group-item-danger{color:#a94442;background-color:#f2dede}a.list-group-item-danger,button.list-group-item-danger{color:#a94442}a.list-group-item-danger .list-group-item-heading,button.list-group-item-danger .list-group-item-heading{color:inherit}a.list-group-item-danger:focus,a.list-group-item-danger:hover,button.list-group-item-danger:focus,button.list-group-item-danger:hover{color:#a94442;background-color:#ebcccc}a.list-group-item-danger.active,a.list-group-item-danger.active:focus,a.list-group-item-danger.active:hover,button.list-group-item-danger.active,button.list-group-item-danger.active:focus,button.list-group-item-danger.active:hover{color:#fff;background-color:#a94442;border-color:#a94442}.list-group-item-heading{margin-top:0;margin-bottom:5px}.list-group-item-text{margin-bottom:0;line-height:1.3}.panel{margin-bottom:20px;background-color:#fff;border:1px solid transparent;border-radius:4px;-webkit-box-shadow:0 1px 1px rgba(0,0,0,.05);box-shadow:0 1px 1px rgba(0,0,0,.05)}.panel-body{padding:15px}.panel-heading{padding:10px 15px;border-bottom:1px solid transparent;border-top-left-radius:3px;border-top-right-radius:3px}.panel-heading>.dropdown .dropdown-toggle{color:inherit}.panel-title{margin-top:0;margin-bottom:0;font-size:16px;color:inherit}.panel-title>.small,.panel-title>.small>a,.panel-title>a,.panel-title>small,.panel-title>small>a{color:inherit}.panel-footer{padding:10px 15px;background-color:#f5f5f5;border-top:1px solid #ddd;border-bottom-right-radius:3px;border-bottom-left-radius:3px}.panel>.list-group,.panel>.panel-collapse>.list-group{margin-bottom:0}.panel>.list-group .list-group-item,.panel>.panel-collapse>.list-group .list-group-item{border-width:1px 0;border-radius:0}.panel>.list-group:first-child .list-group-item:first-child,.panel>.panel-collapse>.list-group:first-child .list-group-item:first-child{border-top:0;border-top-left-radius:3px;border-top-right-radius:3px}.panel>.list-group:last-child .list-group-item:last-child,.panel>.panel-collapse>.list-group:last-child .list-group-item:last-child{border-bottom:0;border-bottom-right-radius:3px;border-bottom-left-radius:3px}.panel>.panel-heading+.panel-collapse>.list-group .list-group-item:first-child{border-top-left-radius:0;border-top-right-radius:0}.panel-heading+.list-group .list-group-item:first-child{border-top-width:0}.list-group+.panel-footer{border-top-width:0}.panel>.panel-collapse>.table,.panel>.table,.panel>.table-responsive>.table{margin-bottom:0}.panel>.panel-collapse>.table caption,.panel>.table caption,.panel>.table-responsive>.table caption{padding-right:15px;padding-left:15px}.panel>.table-responsive:first-child>.table:first-child,.panel>.table:first-child{border-top-left-radius:3px;border-top-right-radius:3px}.panel>.table-responsive:first-child>.table:first-child>tbody:first-child>tr:first-child,.panel>.table-responsive:first-child>.table:first-child>thead:first-child>tr:first-child,.panel>.table:first-child>tbody:first-child>tr:first-child,.panel>.table:first-child>thead:first-child>tr:first-child{border-top-left-radius:3px;border-top-right-radius:3px}.panel>.table-responsive:first-child>.table:first-child>tbody:first-child>tr:first-child td:first-child,.panel>.table-responsive:first-child>.table:first-child>tbody:first-child>tr:first-child th:first-child,.panel>.table-responsive:first-child>.table:first-child>thead:first-child>tr:first-child td:first-child,.panel>.table-responsive:first-child>.table:first-child>thead:first-child>tr:first-child th:first-child,.panel>.table:first-child>tbody:first-child>tr:first-child td:first-child,.panel>.table:first-child>tbody:first-child>tr:first-child th:first-child,.panel>.table:first-child>thead:first-child>tr:first-child td:first-child,.panel>.table:first-child>thead:first-child>tr:first-child th:first-child{border-top-left-radius:3px}.panel>.table-responsive:first-child>.table:first-child>tbody:first-child>tr:first-child td:last-child,.panel>.table-responsive:first-child>.table:first-child>tbody:first-child>tr:first-child th:last-child,.panel>.table-responsive:first-child>.table:first-child>thead:first-child>tr:first-child td:last-child,.panel>.table-responsive:first-child>.table:first-child>thead:first-child>tr:first-child th:last-child,.panel>.table:first-child>tbody:first-child>tr:first-child td:last-child,.panel>.table:first-child>tbody:first-child>tr:first-child th:last-child,.panel>.table:first-child>thead:first-child>tr:first-child td:last-child,.panel>.table:first-child>thead:first-child>tr:first-child th:last-child{border-top-right-radius:3px}.panel>.table-responsive:last-child>.table:last-child,.panel>.table:last-child{border-bottom-right-radius:3px;border-bottom-left-radius:3px}.panel>.table-responsive:last-child>.table:last-child>tbody:last-child>tr:last-child,.panel>.table-responsive:last-child>.table:last-child>tfoot:last-child>tr:last-child,.panel>.table:last-child>tbody:last-child>tr:last-child,.panel>.table:last-child>tfoot:last-child>tr:last-child{border-bottom-right-radius:3px;border-bottom-left-radius:3px}.panel>.table-responsive:last-child>.table:last-child>tbody:last-child>tr:last-child td:first-child,.panel>.table-responsive:last-child>.table:last-child>tbody:last-child>tr:last-child th:first-child,.panel>.table-responsive:last-child>.table:last-child>tfoot:last-child>tr:last-child td:first-child,.panel>.table-responsive:last-child>.table:last-child>tfoot:last-child>tr:last-child th:first-child,.panel>.table:last-child>tbody:last-child>tr:last-child td:first-child,.panel>.table:last-child>tbody:last-child>tr:last-child th:first-child,.panel>.table:last-child>tfoot:last-child>tr:last-child td:first-child,.panel>.table:last-child>tfoot:last-child>tr:last-child th:first-child{border-bottom-left-radius:3px}.panel>.table-responsive:last-child>.table:last-child>tbody:last-child>tr:last-child td:last-child,.panel>.table-responsive:last-child>.table:last-child>tbody:last-child>tr:last-child th:last-child,.panel>.table-responsive:last-child>.table:last-child>tfoot:last-child>tr:last-child td:last-child,.panel>.table-responsive:last-child>.table:last-child>tfoot:last-child>tr:last-child th:last-child,.panel>.table:last-child>tbody:last-child>tr:last-child td:last-child,.panel>.table:last-child>tbody:last-child>tr:last-child th:last-child,.panel>.table:last-child>tfoot:last-child>tr:last-child td:last-child,.panel>.table:last-child>tfoot:last-child>tr:last-child th:last-child{border-bottom-right-radius:3px}.panel>.panel-body+.table,.panel>.panel-body+.table-responsive,.panel>.table+.panel-body,.panel>.table-responsive+.panel-body{border-top:1px solid #ddd}.panel>.table>tbody:first-child>tr:first-child td,.panel>.table>tbody:first-child>tr:first-child th{border-top:0}.panel>.table-bordered,.panel>.table-responsive>.table-bordered{border:0}.panel>.table-bordered>tbody>tr>td:first-child,.panel>.table-bordered>tbody>tr>th:first-child,.panel>.table-bordered>tfoot>tr>td:first-child,.panel>.table-bordered>tfoot>tr>th:first-child,.panel>.table-bordered>thead>tr>td:first-child,.panel>.table-bordered>thead>tr>th:first-child,.panel>.table-responsive>.table-bordered>tbody>tr>td:first-child,.panel>.table-responsive>.table-bordered>tbody>tr>th:first-child,.panel>.table-responsive>.table-bordered>tfoot>tr>td:first-child,.panel>.table-responsive>.table-bordered>tfoot>tr>th:first-child,.panel>.table-responsive>.table-bordered>thead>tr>td:first-child,.panel>.table-responsive>.table-bordered>thead>tr>th:first-child{border-left:0}.panel>.table-bordered>tbody>tr>td:last-child,.panel>.table-bordered>tbody>tr>th:last-child,.panel>.table-bordered>tfoot>tr>td:last-child,.panel>.table-bordered>tfoot>tr>th:last-child,.panel>.table-bordered>thead>tr>td:last-child,.panel>.table-bordered>thead>tr>th:last-child,.panel>.table-responsive>.table-bordered>tbody>tr>td:last-child,.panel>.table-responsive>.table-bordered>tbody>tr>th:last-child,.panel>.table-responsive>.table-bordered>tfoot>tr>td:last-child,.panel>.table-responsive>.table-bordered>tfoot>tr>th:last-child,.panel>.table-responsive>.table-bordered>thead>tr>td:last-child,.panel>.table-responsive>.table-bordered>thead>tr>th:last-child{border-right:0}.panel>.table-bordered>tbody>tr:first-child>td,.panel>.table-bordered>tbody>tr:first-child>th,.panel>.table-bordered>thead>tr:first-child>td,.panel>.table-bordered>thead>tr:first-child>th,.panel>.table-responsive>.table-bordered>tbody>tr:first-child>td,.panel>.table-responsive>.table-bordered>tbody>tr:first-child>th,.panel>.table-responsive>.table-bordered>thead>tr:first-child>td,.panel>.table-responsive>.table-bordered>thead>tr:first-child>th{border-bottom:0}.panel>.table-bordered>tbody>tr:last-child>td,.panel>.table-bordered>tbody>tr:last-child>th,.panel>.table-bordered>tfoot>tr:last-child>td,.panel>.table-bordered>tfoot>tr:last-child>th,.panel>.table-responsive>.table-bordered>tbody>tr:last-child>td,.panel>.table-responsive>.table-bordered>tbody>tr:last-child>th,.panel>.table-responsive>.table-bordered>tfoot>tr:last-child>td,.panel>.table-responsive>.table-bordered>tfoot>tr:last-child>th{border-bottom:0}.panel>.table-responsive{margin-bottom:0;border:0}.panel-group{margin-bottom:20px}.panel-group .panel{margin-bottom:0;border-radius:4px}.panel-group .panel+.panel{margin-top:5px}.panel-group .panel-heading{border-bottom:0}.panel-group .panel-heading+.panel-collapse>.list-group,.panel-group .panel-heading+.panel-collapse>.panel-body{border-top:1px solid #ddd}.panel-group .panel-footer{border-top:0}.panel-group .panel-footer+.panel-collapse .panel-body{border-bottom:1px solid #ddd}.panel-default{border-color:#ddd}.panel-default>.panel-heading{color:#333;background-color:#f5f5f5;border-color:#ddd}.panel-default>.panel-heading+.panel-collapse>.panel-body{border-top-color:#ddd}.panel-default>.panel-heading .badge{color:#f5f5f5;background-color:#333}.panel-default>.panel-footer+.panel-collapse>.panel-body{border-bottom-color:#ddd}.panel-primary{border-color:#337ab7}.panel-primary>.panel-heading{color:#fff;background-color:#337ab7;border-color:#337ab7}.panel-primary>.panel-heading+.panel-collapse>.panel-body{border-top-color:#337ab7}.panel-primary>.panel-heading .badge{color:#337ab7;background-color:#fff}.panel-primary>.panel-footer+.panel-collapse>.panel-body{border-bottom-color:#337ab7}.panel-success{border-color:#d6e9c6}.panel-success>.panel-heading{color:#3c763d;background-color:#dff0d8;border-color:#d6e9c6}.panel-success>.panel-heading+.panel-collapse>.panel-body{border-top-color:#d6e9c6}.panel-success>.panel-heading .badge{color:#dff0d8;background-color:#3c763d}.panel-success>.panel-footer+.panel-collapse>.panel-body{border-bottom-color:#d6e9c6}.panel-info{border-color:#bce8f1}.panel-info>.panel-heading{color:#31708f;background-color:#d9edf7;border-color:#bce8f1}.panel-info>.panel-heading+.panel-collapse>.panel-body{border-top-color:#bce8f1}.panel-info>.panel-heading .badge{color:#d9edf7;background-color:#31708f}.panel-info>.panel-footer+.panel-collapse>.panel-body{border-bottom-color:#bce8f1}.panel-warning{border-color:#faebcc}.panel-warning>.panel-heading{color:#8a6d3b;background-color:#fcf8e3;border-color:#faebcc}.panel-warning>.panel-heading+.panel-collapse>.panel-body{border-top-color:#faebcc}.panel-warning>.panel-heading .badge{color:#fcf8e3;background-color:#8a6d3b}.panel-warning>.panel-footer+.panel-collapse>.panel-body{border-bottom-color:#faebcc}.panel-danger{border-color:#ebccd1}.panel-danger>.panel-heading{color:#a94442;background-color:#f2dede;border-color:#ebccd1}.panel-danger>.panel-heading+.panel-collapse>.panel-body{border-top-color:#ebccd1}.panel-danger>.panel-heading .badge{color:#f2dede;background-color:#a94442}.panel-danger>.panel-footer+.panel-collapse>.panel-body{border-bottom-color:#ebccd1}.embed-responsive{position:relative;display:block;height:0;padding:0;overflow:hidden}.embed-responsive .embed-responsive-item,.embed-responsive embed,.embed-responsive iframe,.embed-responsive object,.embed-responsive video{position:absolute;top:0;bottom:0;left:0;width:100%;height:100%;border:0}.embed-responsive-16by9{padding-bottom:56.25%}.embed-responsive-4by3{padding-bottom:75%}.well{min-height:20px;padding:19px;margin-bottom:20px;background-color:#f5f5f5;border:1px solid #e3e3e3;border-radius:4px;-webkit-box-shadow:inset 0 1px 1px rgba(0,0,0,.05);box-shadow:inset 0 1px 1px rgba(0,0,0,.05)}.well blockquote{border-color:#ddd;border-color:rgba(0,0,0,.15)}.well-lg{padding:24px;border-radius:6px}.well-sm{padding:9px;border-radius:3px}.close{float:right;font-size:21px;font-weight:700;line-height:1;color:#000;text-shadow:0 1px 0 #fff;filter:alpha(opacity=20);opacity:.2}.close:focus,.close:hover{color:#000;text-decoration:none;cursor:pointer;filter:alpha(opacity=50);opacity:.5}button.close{-webkit-appearance:none;padding:0;cursor:pointer;background:0 0;border:0}.modal-open{overflow:hidden}.modal{position:fixed;top:0;right:0;bottom:0;left:0;z-index:1050;display:none;overflow:hidden;-webkit-overflow-scrolling:touch;outline:0}.modal.fade .modal-dialog{-webkit-transition:-webkit-transform .3s ease-out;-o-transition:-o-transform .3s ease-out;transition:transform .3s ease-out;-webkit-transform:translate(0,-25%);-ms-transform:translate(0,-25%);-o-transform:translate(0,-25%);transform:translate(0,-25%)}.modal.in .modal-dialog{-webkit-transform:translate(0,0);-ms-transform:translate(0,0);-o-transform:translate(0,0);transform:translate(0,0)}.modal-open .modal{overflow-x:hidden;overflow-y:auto}.modal-dialog{position:relative;width:auto;margin:10px}.modal-content{position:relative;background-color:#fff;-webkit-background-clip:padding-box;background-clip:padding-box;border:1px solid #999;border:1px solid rgba(0,0,0,.2);border-radius:6px;outline:0;-webkit-box-shadow:0 3px 9px rgba(0,0,0,.5);box-shadow:0 3px 9px rgba(0,0,0,.5)}.modal-backdrop{position:fixed;top:0;right:0;bottom:0;left:0;z-index:1040;background-color:#000}.modal-backdrop.fade{filter:alpha(opacity=0);opacity:0}.modal-backdrop.in{filter:alpha(opacity=50);opacity:.5}.modal-header{padding:15px;border-bottom:1px solid #e5e5e5}.modal-header .close{margin-top:-2px}.modal-title{margin:0;line-height:1.42857143}.modal-body{position:relative;padding:15px}.modal-footer{padding:15px;text-align:right;border-top:1px solid #e5e5e5}.modal-footer .btn+.btn{margin-bottom:0;margin-left:5px}.modal-footer .btn-group .btn+.btn{margin-left:-1px}.modal-footer .btn-block+.btn-block{margin-left:0}.modal-scrollbar-measure{position:absolute;top:-9999px;width:50px;height:50px;overflow:scroll}@media (min-width:768px){.modal-dialog{width:600px;margin:30px auto}.modal-content{-webkit-box-shadow:0 5px 15px rgba(0,0,0,.5);box-shadow:0 5px 15px rgba(0,0,0,.5)}.modal-sm{width:300px}}@media (min-width:992px){.modal-lg{width:900px}}.tooltip{position:absolute;z-index:1070;display:block;font-family:"Helvetica Neue",Helvetica,Arial,sans-serif;font-size:12px;font-style:normal;font-weight:400;line-height:1.42857143;text-align:left;text-align:start;text-decoration:none;text-shadow:none;text-transform:none;letter-spacing:normal;word-break:normal;word-spacing:normal;word-wrap:normal;white-space:normal;filter:alpha(opacity=0);opacity:0;line-break:auto}.tooltip.in{filter:alpha(opacity=90);opacity:.9}.tooltip.top{padding:5px 0;margin-top:-3px}.tooltip.right{padding:0 5px;margin-left:3px}.tooltip.bottom{padding:5px 0;margin-top:3px}.tooltip.left{padding:0 5px;margin-left:-3px}.tooltip-inner{max-width:200px;padding:3px 8px;color:#fff;text-align:center;background-color:#000;border-radius:4px}.tooltip-arrow{position:absolute;width:0;height:0;border-color:transparent;border-style:solid}.tooltip.top .tooltip-arrow{bottom:0;left:50%;margin-left:-5px;border-width:5px 5px 0;border-top-color:#000}.tooltip.top-left .tooltip-arrow{right:5px;bottom:0;margin-bottom:-5px;border-width:5px 5px 0;border-top-color:#000}.tooltip.top-right .tooltip-arrow{bottom:0;left:5px;margin-bottom:-5px;border-width:5px 5px 0;border-top-color:#000}.tooltip.right .tooltip-arrow{top:50%;left:0;margin-top:-5px;border-width:5px 5px 5px 0;border-right-color:#000}.tooltip.left .tooltip-arrow{top:50%;right:0;margin-top:-5px;border-width:5px 0 5px 5px;border-left-color:#000}.tooltip.bottom .tooltip-arrow{top:0;left:50%;margin-left:-5px;border-width:0 5px 5px;border-bottom-color:#000}.tooltip.bottom-left .tooltip-arrow{top:0;right:5px;margin-top:-5px;border-width:0 5px 5px;border-bottom-color:#000}.tooltip.bottom-right .tooltip-arrow{top:0;left:5px;margin-top:-5px;border-width:0 5px 5px;border-bottom-color:#000}.popover{position:absolute;top:0;left:0;z-index:1060;display:none;max-width:276px;padding:1px;font-family:"Helvetica Neue",Helvetica,Arial,sans-serif;font-size:14px;font-style:normal;font-weight:400;line-height:1.42857143;text-align:left;text-align:start;text-decoration:none;text-shadow:none;text-transform:none;letter-spacing:normal;word-break:normal;word-spacing:normal;word-wrap:normal;white-space:normal;background-color:#fff;-webkit-background-clip:padding-box;background-clip:padding-box;border:1px solid #ccc;border:1px solid rgba(0,0,0,.2);border-radius:6px;-webkit-box-shadow:0 5px 10px rgba(0,0,0,.2);box-shadow:0 5px 10px rgba(0,0,0,.2);line-break:auto}.popover.top{margin-top:-10px}.popover.right{margin-left:10px}.popover.bottom{margin-top:10px}.popover.left{margin-left:-10px}.popover-title{padding:8px 14px;margin:0;font-size:14px;background-color:#f7f7f7;border-bottom:1px solid #ebebeb;border-radius:5px 5px 0 0}.popover-content{padding:9px 14px}.popover>.arrow,.popover>.arrow:after{position:absolute;display:block;width:0;height:0;border-color:transparent;border-style:solid}.popover>.arrow{border-width:11px}.popover>.arrow:after{content:"";border-width:10px}.popover.top>.arrow{bottom:-11px;left:50%;margin-left:-11px;border-top-color:#999;border-top-color:rgba(0,0,0,.25);border-bottom-width:0}.popover.top>.arrow:after{bottom:1px;margin-left:-10px;content:" ";border-top-color:#fff;border-bottom-width:0}.popover.right>.arrow{top:50%;left:-11px;margin-top:-11px;border-right-color:#999;border-right-color:rgba(0,0,0,.25);border-left-width:0}.popover.right>.arrow:after{bottom:-10px;left:1px;content:" ";border-right-color:#fff;border-left-width:0}.popover.bottom>.arrow{top:-11px;left:50%;margin-left:-11px;border-top-width:0;border-bottom-color:#999;border-bottom-color:rgba(0,0,0,.25)}.popover.bottom>.arrow:after{top:1px;margin-left:-10px;content:" ";border-top-width:0;border-bottom-color:#fff}.popover.left>.arrow{top:50%;right:-11px;margin-top:-11px;border-right-width:0;border-left-color:#999;border-left-color:rgba(0,0,0,.25)}.popover.left>.arrow:after{right:1px;bottom:-10px;content:" ";border-right-width:0;border-left-color:#fff}.carousel{position:relative}.carousel-inner{position:relative;width:100%;overflow:hidden}.carousel-inner>.item{position:relative;display:none;-webkit-transition:.6s ease-in-out left;-o-transition:.6s ease-in-out left;transition:.6s ease-in-out left}.carousel-inner>.item>a>img,.carousel-inner>.item>img{line-height:1}@media all and (transform-3d),(-webkit-transform-3d){.carousel-inner>.item{-webkit-transition:-webkit-transform .6s ease-in-out;-o-transition:-o-transform .6s ease-in-out;transition:transform .6s ease-in-out;-webkit-backface-visibility:hidden;backface-visibility:hidden;-webkit-perspective:1000px;perspective:1000px}.carousel-inner>.item.active.right,.carousel-inner>.item.next{left:0;-webkit-transform:translate3d(100%,0,0);transform:translate3d(100%,0,0)}.carousel-inner>.item.active.left,.carousel-inner>.item.prev{left:0;-webkit-transform:translate3d(-100%,0,0);transform:translate3d(-100%,0,0)}.carousel-inner>.item.active,.carousel-inner>.item.next.left,.carousel-inner>.item.prev.right{left:0;-webkit-transform:translate3d(0,0,0);transform:translate3d(0,0,0)}}.carousel-inner>.active,.carousel-inner>.next,.carousel-inner>.prev{display:block}.carousel-inner>.active{left:0}.carousel-inner>.next,.carousel-inner>.prev{position:absolute;top:0;width:100%}.carousel-inner>.next{left:100%}.carousel-inner>.prev{left:-100%}.carousel-inner>.next.left,.carousel-inner>.prev.right{left:0}.carousel-inner>.active.left{left:-100%}.carousel-inner>.active.right{left:100%}.carousel-control{position:absolute;top:0;bottom:0;left:0;width:15%;font-size:20px;color:#fff;text-align:center;text-shadow:0 1px 2px rgba(0,0,0,.6);background-color:rgba(0,0,0,0);filter:alpha(opacity=50);opacity:.5}.carousel-control.left{background-image:-webkit-linear-gradient(left,rgba(0,0,0,.5) 0,rgba(0,0,0,.0001) 100%);background-image:-o-linear-gradient(left,rgba(0,0,0,.5) 0,rgba(0,0,0,.0001) 100%);background-image:-webkit-gradient(linear,left top,right top,from(rgba(0,0,0,.5)),to(rgba(0,0,0,.0001)));background-image:linear-gradient(to right,rgba(0,0,0,.5) 0,rgba(0,0,0,.0001) 100%);filter:progid:DXImageTransform.Microsoft.gradient(startColorstr='#80000000', endColorstr='#00000000', GradientType=1);background-repeat:repeat-x}.carousel-control.right{right:0;left:auto;background-image:-webkit-linear-gradient(left,rgba(0,0,0,.0001) 0,rgba(0,0,0,.5) 100%);background-image:-o-linear-gradient(left,rgba(0,0,0,.0001) 0,rgba(0,0,0,.5) 100%);background-image:-webkit-gradient(linear,left top,right top,from(rgba(0,0,0,.0001)),to(rgba(0,0,0,.5)));background-image:linear-gradient(to right,rgba(0,0,0,.0001) 0,rgba(0,0,0,.5) 100%);filter:progid:DXImageTransform.Microsoft.gradient(startColorstr='#00000000', endColorstr='#80000000', GradientType=1);background-repeat:repeat-x}.carousel-control:focus,.carousel-control:hover{color:#fff;text-decoration:none;filter:alpha(opacity=90);outline:0;opacity:.9}.carousel-control .glyphicon-chevron-left,.carousel-control .glyphicon-chevron-right,.carousel-control .icon-next,.carousel-control .icon-prev{position:absolute;top:50%;z-index:5;display:inline-block;margin-top:-10px}.carousel-control .glyphicon-chevron-left,.carousel-control .icon-prev{left:50%;margin-left:-10px}.carousel-control .glyphicon-chevron-right,.carousel-control .icon-next{right:50%;margin-right:-10px}.carousel-control .icon-next,.carousel-control .icon-prev{width:20px;height:20px;font-family:serif;line-height:1}.carousel-control .icon-prev:before{content:'\2039'}.carousel-control .icon-next:before{content:'\203a'}.carousel-indicators{position:absolute;bottom:10px;left:50%;z-index:15;width:60%;padding-left:0;margin-left:-30%;text-align:center;list-style:none}.carousel-indicators li{display:inline-block;width:10px;height:10px;margin:1px;text-indent:-999px;cursor:pointer;background-color:#000\9;background-color:rgba(0,0,0,0);border:1px solid #fff;border-radius:10px}.carousel-indicators .active{width:12px;height:12px;margin:0;background-color:#fff}.carousel-caption{position:absolute;right:15%;bottom:20px;left:15%;z-index:10;padding-top:20px;padding-bottom:20px;color:#fff;text-align:center;text-shadow:0 1px 2px rgba(0,0,0,.6)}.carousel-caption .btn{text-shadow:none}@media screen and (min-width:768px){.carousel-control .glyphicon-chevron-left,.carousel-control .glyphicon-chevron-right,.carousel-control .icon-next,.carousel-control .icon-prev{width:30px;height:30px;margin-top:-10px;font-size:30px}.carousel-control .glyphicon-chevron-left,.carousel-control .icon-prev{margin-left:-10px}.carousel-control .glyphicon-chevron-right,.carousel-control .icon-next{margin-right:-10px}.carousel-caption{right:20%;left:20%;padding-bottom:30px}.carousel-indicators{bottom:20px}}.btn-group-vertical>.btn-group:after,.btn-group-vertical>.btn-group:before,.btn-toolbar:after,.btn-toolbar:before,.clearfix:after,.clearfix:before,.container-fluid:after,.container-fluid:before,.container:after,.container:before,.dl-horizontal dd:after,.dl-horizontal dd:before,.form-horizontal .form-group:after,.form-horizontal .form-group:before,.modal-footer:after,.modal-footer:before,.modal-header:after,.modal-header:before,.nav:after,.nav:before,.navbar-collapse:after,.navbar-collapse:before,.navbar-header:after,.navbar-header:before,.navbar:after,.navbar:before,.pager:after,.pager:before,.panel-body:after,.panel-body:before,.row:after,.row:before{display:table;content:" "}.btn-group-vertical>.btn-group:after,.btn-toolbar:after,.clearfix:after,.container-fluid:after,.container:after,.dl-horizontal dd:after,.form-horizontal .form-group:after,.modal-footer:after,.modal-header:after,.nav:after,.navbar-collapse:after,.navbar-header:after,.navbar:after,.pager:after,.panel-body:after,.row:after{clear:both}.center-block{display:block;margin-right:auto;margin-left:auto}.pull-right{float:right!important}.pull-left{float:left!important}.hide{display:none!important}.show{display:block!important}.invisible{visibility:hidden}.text-hide{font:0/0 a;color:transparent;text-shadow:none;background-color:transparent;border:0}.hidden{display:none!important}.affix{position:fixed}@-ms-viewport{width:device-width}.visible-lg,.visible-md,.visible-sm,.visible-xs{display:none!important}.visible-lg-block,.visible-lg-inline,.visible-lg-inline-block,.visible-md-block,.visible-md-inline,.visible-md-inline-block,.visible-sm-block,.visible-sm-inline,.visible-sm-inline-block,.visible-xs-block,.visible-xs-inline,.visible-xs-inline-block{display:none!important}@media (max-width:767px){.visible-xs{display:block!important}table.visible-xs{display:table!important}tr.visible-xs{display:table-row!important}td.visible-xs,th.visible-xs{display:table-cell!important}}@media (max-width:767px){.visible-xs-block{display:block!important}}@media (max-width:767px){.visible-xs-inline{display:inline!important}}@media (max-width:767px){.visible-xs-inline-block{display:inline-block!important}}@media (min-width:768px) and (max-width:991px){.visible-sm{display:block!important}table.visible-sm{display:table!important}tr.visible-sm{display:table-row!important}td.visible-sm,th.visible-sm{display:table-cell!important}}@media (min-width:768px) and (max-width:991px){.visible-sm-block{display:block!important}}@media (min-width:768px) and (max-width:991px){.visible-sm-inline{display:inline!important}}@media (min-width:768px) and (max-width:991px){.visible-sm-inline-block{display:inline-block!important}}@media (min-width:992px) and (max-width:1199px){.visible-md{display:block!important}table.visible-md{display:table!important}tr.visible-md{display:table-row!important}td.visible-md,th.visible-md{display:table-cell!important}}@media (min-width:992px) and (max-width:1199px){.visible-md-block{display:block!important}}@media (min-width:992px) and (max-width:1199px){.visible-md-inline{display:inline!important}}@media (min-width:992px) and (max-width:1199px){.visible-md-inline-block{display:inline-block!important}}@media (min-width:1200px){.visible-lg{display:block!important}table.visible-lg{display:table!important}tr.visible-lg{display:table-row!important}td.visible-lg,th.visible-lg{display:table-cell!important}}@media (min-width:1200px){.visible-lg-block{display:block!important}}@media (min-width:1200px){.visible-lg-inline{display:inline!important}}@media (min-width:1200px){.visible-lg-inline-block{display:inline-block!important}}@media (max-width:767px){.hidden-xs{display:none!important}}@media (min-width:768px) and (max-width:991px){.hidden-sm{display:none!important}}@media (min-width:992px) and (max-width:1199px){.hidden-md{display:none!important}}@media (min-width:1200px){.hidden-lg{display:none!important}}.visible-print{display:none!important}@media print{.visible-print{display:block!important}table.visible-print{display:table!important}tr.visible-print{display:table-row!important}td.visible-print,th.visible-print{display:table-cell!important}}.visible-print-block{display:none!important}@media print{.visible-print-block{display:block!important}}.visible-print-inline{display:none!important}@media print{.visible-print-inline{display:inline!important}}.visible-print-inline-block{display:none!important}@media print{.visible-print-inline-block{display:inline-block!important}}@media print{.hidden-print{display:none!important}}
    6  /*# sourceMappingURL=bootstrap.min.css.map */

/home/genis/Proyectos/ProyectoXat/vendor/phpunit/php-code-coverage/src/Report/Html/Renderer/Template/css/style.css:
   11  }
   12  
   13: .table-bordered>thead>tr>td {
   14   border-bottom-width: 1px;
   15  }
   16  
   17: .table tbody>tr>td, .table thead>tr>td {
   18   padding-top: 3px;
   19   padding-bottom: 3px;

/home/genis/Proyectos/ProyectoXat/vendor/phpunit/php-code-coverage/src/Report/Html/Renderer/Template/dashboard.html.dist:
    1  <!DOCTYPE html>
    2  <html lang="en">
    3:  <head>
    4    <meta charset="UTF-8">
    5    <title>Dashboard for {{full_path}}</title>
    .
   12    <script src="{{path_to_root}}.js/respond.min.js"></script>
   13    <![endif]-->
   14:  </head>
   15   <body>
   16:   <header>
   17     <div class="container">
   18      <div class="row">
   ..
   24      </div>
   25     </div>
   26:   </header>
   27    <div class="container">
   28     <div class="row">
   ..
   50       <div class="scrollbox">
   51        <table class="table">
   52:        <thead>
   53          <tr>
   54           <th>Class</th>
   55           <th class="text-right">Coverage</th>
   56          </tr>
   57:        </thead>
   58         <tbody>
   59  {{insufficient_coverage_classes}}
   ..
   66       <div class="scrollbox">
   67        <table class="table">
   68:        <thead>
   69          <tr>
   70           <th>Class</th>
   71           <th class="text-right"><abbr title="Change Risk Anti-Patterns (CRAP) Index">CRAP</abbr></th>
   72          </tr>
   73:        </thead>
   74         <tbody>
   75  {{project_risks_classes}}
   ..
  103       <div class="scrollbox">
  104        <table class="table">
  105:        <thead>
  106          <tr>
  107           <th>Method</th>
  108           <th class="text-right">Coverage</th>
  109          </tr>
  110:        </thead>
  111         <tbody>
  112  {{insufficient_coverage_methods}}
  ...
  119       <div class="scrollbox">
  120        <table class="table">
  121:        <thead>
  122          <tr>
  123           <th>Method</th>
  124           <th class="text-right"><abbr title="Change Risk Anti-Patterns (CRAP) Index">CRAP</abbr></th>
  125          </tr>
  126:        </thead>
  127         <tbody>
  128  {{project_risks_methods}}

/home/genis/Proyectos/ProyectoXat/vendor/phpunit/php-code-coverage/src/Report/Html/Renderer/Template/directory.html.dist:
    1  <!DOCTYPE html>
    2  <html lang="en">
    3:  <head>
    4    <meta charset="UTF-8">
    5    <title>Code Coverage for {{full_path}}</title>
    .
   11    <script src="{{path_to_root}}.js/respond.min.js"></script>
   12    <![endif]-->
   13:  </head>
   14   <body>
   15:   <header>
   16     <div class="container">
   17      <div class="row">
   ..
   23      </div>
   24     </div>
   25:   </header>
   26    <div class="container">
   27     <table class="table table-bordered">
   28:     <thead>
   29       <tr>
   30        <td>&nbsp;</td>
   ..
   37        <td colspan="3"><div align="center"><strong>Classes and Traits</strong></div></td>
   38       </tr>
   39:     </thead>
   40      <tbody>
   41  {{items}}

/home/genis/Proyectos/ProyectoXat/vendor/phpunit/php-code-coverage/src/Report/Html/Renderer/Template/file.html.dist:
    1  <!DOCTYPE html>
    2  <html lang="en">
    3:  <head>
    4    <meta charset="UTF-8">
    5    <title>Code Coverage for {{full_path}}</title>
    .
   11    <script src="{{path_to_root}}.js/respond.min.js"></script>
   12    <![endif]-->
   13:  </head>
   14   <body>
   15:   <header>
   16     <div class="container">
   17      <div class="row">
   ..
   23      </div>
   24     </div>
   25:   </header>
   26    <div class="container">
   27     <table class="table table-bordered">
   28:     <thead>
   29       <tr>
   30        <td>&nbsp;</td>
   ..
   37        <td colspan="3"><div align="center"><strong>Lines</strong></div></td>
   38       </tr>
   39:     </thead>
   40      <tbody>
   41  {{items}}

/home/genis/Proyectos/ProyectoXat/vendor/phpunit/php-code-coverage/src/Report/Html/Renderer/Template/fonts/glyphicons-halflings-regular.ttf:
    <binary>

/home/genis/Proyectos/ProyectoXat/vendor/phpunit/php-code-coverage/src/Report/Html/Renderer/Template/fonts/glyphicons-halflings-regular.woff:
    <binary>

/home/genis/Proyectos/ProyectoXat/vendor/phpunit/php-code-coverage/src/Report/Html/Renderer/Template/js/d3.min.js:
    1: !function(){function n(n){return n&&(n.ownerDocument||n.document||n).documentElement}function t(n){return n&&(n.ownerDocument&&n.ownerDocument.defaultView||n.document&&n||n.defaultView)}function e(n,t){return t>n?-1:n>t?1:n>=t?0:NaN}function r(n){return null===n?NaN:+n}function i(n){return!isNaN(n)}function u(n){return{left:function(t,e,r,i){for(arguments.length<3&&(r=0),arguments.length<4&&(i=t.length);i>r;){var u=r+i>>>1;n(t[u],e)<0?r=u+1:i=u}return r},right:function(t,e,r,i){for(arguments.length<3&&(r=0),arguments.length<4&&(i=t.length);i>r;){var u=r+i>>>1;n(t[u],e)>0?i=u:r=u+1}return r}}}function o(n){return n.length}function a(n){for(var t=1;n*t%1;)t*=10;return t}function l(n,t){for(var e in t)Object.defineProperty(n.prototype,e,{value:t[e],enumerable:!1})}function c(){this._=Object.create(null)}function f(n){return(n+="")===bo||n[0]===_o?_o+n:n}function s(n){return(n+="")[0]===_o?n.slice(1):n}function h(n){return f(n)in this._}function p(n){return(n=f(n))in this._&&delete this._[n]}function g(){var n=[];for(var t in this._)n.push(s(t));return n}function v(){var n=0;for(var t in this._)++n;return n}function d(){for(var n in this._)return!1;return!0}function y(){this._=Object.create(null)}function m(n){return n}function M(n,t,e){return function(){var r=e.apply(t,arguments);return r===t?n:r}}function x(n,t){if(t in n)return t;t=t.charAt(0).toUpperCase()+t.slice(1);for(var e=0,r=wo.length;r>e;++e){var i=wo[e]+t;if(i in n)return i}}function b(){}function _(){}function w(n){function t(){for(var t,r=e,i=-1,u=r.length;++i<u;)(t=r[i].on)&&t.apply(this,arguments);return n}var e=[],r=new c;return t.on=function(t,i){var u,o=r.get(t);return arguments.length<2?o&&o.on:(o&&(o.on=null,e=e.slice(0,u=e.indexOf(o)).concat(e.slice(u+1)),r.remove(t)),i&&e.push(r.set(t,{on:i})),n)},t}function S(){ao.event.preventDefault()}function k(){for(var n,t=ao.event;n=t.sourceEvent;)t=n;return t}function N(n){for(var t=new _,e=0,r=arguments.length;++e<r;)t[arguments[e]]=w(t);return t.of=function(e,r){return function(i){try{var u=i.sourceEvent=ao.event;i.target=n,ao.event=i,t[i.type].apply(e,r)}finally{ao.event=u}}},t}function E(n){return ko(n,Co),n}function A(n){return"function"==typeof n?n:function(){return No(n,this)}}function C(n){return"function"==typeof n?n:function(){return Eo(n,this)}}function z(n,t){function e(){this.removeAttribute(n)}function r(){this.removeAttributeNS(n.space,n.local)}function i(){this.setAttribute(n,t)}function u(){this.setAttributeNS(n.space,n.local,t)}function o(){var e=t.apply(this,arguments);null==e?this.removeAttribute(n):this.setAttribute(n,e)}function a(){var e=t.apply(this,arguments);null==e?this.removeAttributeNS(n.space,n.local):this.setAttributeNS(n.space,n.local,e)}return n=ao.ns.qualify(n),null==t?n.local?r:e:"function"==typeof t?n.local?a:o:n.local?u:i}function L(n){return n.trim().replace(/\s+/g," ")}function q(n){return new RegExp("(?:^|\\s+)"+ao.requote(n)+"(?:\\s+|$)","g")}function T(n){return(n+"").trim().split(/^|\s+/)}function R(n,t){function e(){for(var e=-1;++e<i;)n[e](this,t)}function r(){for(var e=-1,r=t.apply(this,arguments);++e<i;)n[e](this,r)}n=T(n).map(D);var i=n.length;return"function"==typeof t?r:e}function D(n){var t=q(n);return function(e,r){if(i=e.classList)return r?i.add(n):i.remove(n);var i=e.getAttribute("class")||"";r?(t.lastIndex=0,t.test(i)||e.setAttribute("class",L(i+" "+n))):e.setAttribute("class",L(i.replace(t," ")))}}function P(n,t,e){function r(){this.style.removeProperty(n)}function i(){this.style.setProperty(n,t,e)}function u(){var r=t.apply(this,arguments);null==r?this.style.removeProperty(n):this.style.setProperty(n,r,e)}return null==t?r:"function"==typeof t?u:i}function U(n,t){function e(){delete this[n]}function r(){this[n]=t}function i(){var e=t.apply(this,arguments);null==e?delete this[n]:this[n]=e}return null==t?e:"function"==typeof t?i:r}function j(n){function t(){var t=this.ownerDocument,e=this.namespaceURI;return e===zo&&t.documentElement.namespaceURI===zo?t.createElement(n):t.createElementNS(e,n)}function e(){return this.ownerDocument.createElementNS(n.space,n.local)}return"function"==typeof n?n:(n=ao.ns.qualify(n)).local?e:t}function F(){var n=this.parentNode;n&&n.removeChild(this)}function H(n){return{__data__:n}}function O(n){return function(){return Ao(this,n)}}function I(n){return arguments.length||(n=e),function(t,e){return t&&e?n(t.__data__,e.__data__):!t-!e}}function Y(n,t){for(var e=0,r=n.length;r>e;e++)for(var i,u=n[e],o=0,a=u.length;a>o;o++)(i=u[o])&&t(i,o,e);return n}function Z(n){return ko(n,qo),n}function V(n){var t,e;return function(r,i,u){var o,a=n[u].update,l=a.length;for(u!=e&&(e=u,t=0),i>=t&&(t=i+1);!(o=a[t])&&++t<l;);return o}}function X(n,t,e){function r(){var t=this[o];t&&(this.removeEventListener(n,t,t.$),delete this[o])}function i(){var i=l(t,co(arguments));r.call(this),this.addEventListener(n,this[o]=i,i.$=e),i._=t}function u(){var t,e=new RegExp("^__on([^.]+)"+ao.requote(n)+"$");for(var r in this)if(t=r.match(e)){var i=this[r];this.removeEventListener(t[1],i,i.$),delete this[r]}}var o="__on"+n,a=n.indexOf("."),l=$;a>0&&(n=n.slice(0,a));var c=To.get(n);return c&&(n=c,l=B),a?t?i:r:t?b:u}function $(n,t){return function(e){var r=ao.event;ao.event=e,t[0]=this.__data__;try{n.apply(this,t)}finally{ao.event=r}}}function B(n,t){var e=$(n,t);return function(n){var t=this,r=n.relatedTarget;r&&(r===t||8&r.compareDocumentPosition(t))||e.call(t,n)}}function W(e){var r=".dragsuppress-"+ ++Do,i="click"+r,u=ao.select(t(e)).on("touchmove"+r,S).on("dragstart"+r,S).on("selectstart"+r,S);if(null==Ro&&(Ro="onselectstart"in e?!1:x(e.style,"userSelect")),Ro){var o=n(e).style,a=o[Ro];o[Ro]="none"}return function(n){if(u.on(r,null),Ro&&(o[Ro]=a),n){var t=function(){u.on(i,null)};u.on(i,function(){S(),t()},!0),setTimeout(t,0)}}}function J(n,e){e.changedTouches&&(e=e.changedTouches[0]);var r=n.ownerSVGElement||n;if(r.createSVGPoint){var i=r.createSVGPoint();if(0>Po){var u=t(n);if(u.scrollX||u.scrollY){r=ao.select("body").append("svg").style({position:"absolute",top:0,left:0,margin:0,padding:0,border:"none"},"important");var o=r[0][0].getScreenCTM();Po=!(o.f||o.e),r.remove()}}return Po?(i.x=e.pageX,i.y=e.pageY):(i.x=e.clientX,i.y=e.clientY),i=i.matrixTransform(n.getScreenCTM().inverse()),[i.x,i.y]}var a=n.getBoundingClientRect();return[e.clientX-a.left-n.clientLeft,e.clientY-a.top-n.clientTop]}function G(){return ao.event.changedTouches[0].identifier}function K(n){return n>0?1:0>n?-1:0}function Q(n,t,e){return(t[0]-n[0])*(e[1]-n[1])-(t[1]-n[1])*(e[0]-n[0])}function nn(n){return n>1?0:-1>n?Fo:Math.acos(n)}function tn(n){return n>1?Io:-1>n?-Io:Math.asin(n)}function en(n){return((n=Math.exp(n))-1/n)/2}function rn(n){return((n=Math.exp(n))+1/n)/2}function un(n){return((n=Math.exp(2*n))-1)/(n+1)}function on(n){return(n=Math.sin(n/2))*n}function an(){}function ln(n,t,e){return this instanceof ln?(this.h=+n,this.s=+t,void(this.l=+e)):arguments.length<2?n instanceof ln?new ln(n.h,n.s,n.l):_n(""+n,wn,ln):new ln(n,t,e)}function cn(n,t,e){function r(n){return n>360?n-=360:0>n&&(n+=360),60>n?u+(o-u)*n/60:180>n?o:240>n?u+(o-u)*(240-n)/60:u}function i(n){return Math.round(255*r(n))}var u,o;return n=isNaN(n)?0:(n%=360)<0?n+360:n,t=isNaN(t)?0:0>t?0:t>1?1:t,e=0>e?0:e>1?1:e,o=.5>=e?e*(1+t):e+t-e*t,u=2*e-o,new mn(i(n+120),i(n),i(n-120))}function fn(n,t,e){return this instanceof fn?(this.h=+n,this.c=+t,void(this.l=+e)):arguments.length<2?n instanceof fn?new fn(n.h,n.c,n.l):n instanceof hn?gn(n.l,n.a,n.b):gn((n=Sn((n=ao.rgb(n)).r,n.g,n.b)).l,n.a,n.b):new fn(n,t,e)}function sn(n,t,e){return isNaN(n)&&(n=0),isNaN(t)&&(t=0),new hn(e,Math.cos(n*=Yo)*t,Math.sin(n)*t)}function hn(n,t,e){return this instanceof hn?(this.l=+n,this.a=+t,void(this.b=+e)):arguments.length<2?n instanceof hn?new hn(n.l,n.a,n.b):n instanceof fn?sn(n.h,n.c,n.l):Sn((n=mn(n)).r,n.g,n.b):new hn(n,t,e)}function pn(n,t,e){var r=(n+16)/116,i=r+t/500,u=r-e/200;return i=vn(i)*na,r=vn(r)*ta,u=vn(u)*ea,new mn(yn(3.2404542*i-1.5371385*r-.4985314*u),yn(-.969266*i+1.8760108*r+.041556*u),yn(.0556434*i-.2040259*r+1.0572252*u))}function gn(n,t,e){return n>0?new fn(Math.atan2(e,t)*Zo,Math.sqrt(t*t+e*e),n):new fn(NaN,NaN,n)}function vn(n){return n>.206893034?n*n*n:(n-4/29)/7.787037}function dn(n){return n>.008856?Math.pow(n,1/3):7.787037*n+4/29}function yn(n){return Math.round(255*(.00304>=n?12.92*n:1.055*Math.pow(n,1/2.4)-.055))}function mn(n,t,e){return this instanceof mn?(this.r=~~n,this.g=~~t,void(this.b=~~e)):arguments.length<2?n instanceof mn?new mn(n.r,n.g,n.b):_n(""+n,mn,cn):new mn(n,t,e)}function Mn(n){return new mn(n>>16,n>>8&255,255&n)}function xn(n){return Mn(n)+""}function bn(n){return 16>n?"0"+Math.max(0,n).toString(16):Math.min(255,n).toString(16)}function _n(n,t,e){var r,i,u,o=0,a=0,l=0;if(r=/([a-z]+)\((.*)\)/.exec(n=n.toLowerCase()))switch(i=r[2].split(","),r[1]){case"hsl":return e(parseFloat(i[0]),parseFloat(i[1])/100,parseFloat(i[2])/100);case"rgb":return t(Nn(i[0]),Nn(i[1]),Nn(i[2]))}return(u=ua.get(n))?t(u.r,u.g,u.b):(null==n||"#"!==n.charAt(0)||isNaN(u=parseInt(n.slice(1),16))||(4===n.length?(o=(3840&u)>>4,o=o>>4|o,a=240&u,a=a>>4|a,l=15&u,l=l<<4|l):7===n.length&&(o=(16711680&u)>>16,a=(65280&u)>>8,l=255&u)),t(o,a,l))}function wn(n,t,e){var r,i,u=Math.min(n/=255,t/=255,e/=255),o=Math.max(n,t,e),a=o-u,l=(o+u)/2;return a?(i=.5>l?a/(o+u):a/(2-o-u),r=n==o?(t-e)/a+(e>t?6:0):t==o?(e-n)/a+2:(n-t)/a+4,r*=60):(r=NaN,i=l>0&&1>l?0:r),new ln(r,i,l)}function Sn(n,t,e){n=kn(n),t=kn(t),e=kn(e);var r=dn((.4124564*n+.3575761*t+.1804375*e)/na),i=dn((.2126729*n+.7151522*t+.072175*e)/ta),u=dn((.0193339*n+.119192*t+.9503041*e)/ea);return hn(116*i-16,500*(r-i),200*(i-u))}function kn(n){return(n/=255)<=.04045?n/12.92:Math.pow((n+.055)/1.055,2.4)}function Nn(n){var t=parseFloat(n);return"%"===n.charAt(n.length-1)?Math.round(2.55*t):t}function En(n){return"function"==typeof n?n:function(){return n}}function An(n){return function(t,e,r){return 2===arguments.length&&"function"==typeof e&&(r=e,e=null),Cn(t,e,n,r)}}function Cn(n,t,e,r){function i(){var n,t=l.status;if(!t&&Ln(l)||t>=200&&300>t||304===t){try{n=e.call(u,l)}catch(r){return void o.error.call(u,r)}o.load.call(u,n)}else o.error.call(u,l)}var u={},o=ao.dispatch("beforesend","progress","load","error"),a={},l=new XMLHttpRequest,c=null;return!this.XDomainRequest||"withCredentials"in l||!/^(http(s)?:)?\/\//.test(n)||(l=new XDomainRequest),"onload"in l?l.onload=l.onerror=i:l.onreadystatechange=function(){l.readyState>3&&i()},l.onprogress=function(n){var t=ao.event;ao.event=n;try{o.progress.call(u,l)}finally{ao.event=t}},u.header=function(n,t){return n=(n+"").toLowerCase(),arguments.length<2?a[n]:(null==t?delete a[n]:a[n]=t+"",u)},u.mimeType=function(n){return arguments.length?(t=null==n?null:n+"",u):t},u.responseType=function(n){return arguments.length?(c=n,u):c},u.response=function(n){return e=n,u},["get","post"].forEach(function(n){u[n]=function(){return u.send.apply(u,[n].concat(co(arguments)))}}),u.send=function(e,r,i){if(2===arguments.length&&"function"==typeof r&&(i=r,r=null),l.open(e,n,!0),null==t||"accept"in a||(a.accept=t+",*/*"),l.setRequestHeader)for(var f in a)l.setRequestHeader(f,a[f]);return null!=t&&l.overrideMimeType&&l.overrideMimeType(t),null!=c&&(l.responseType=c),null!=i&&u.on("error",i).on("load",function(n){i(null,n)}),o.beforesend.call(u,l),l.send(null==r?null:r),u},u.abort=function(){return l.abort(),u},ao.rebind(u,o,"on"),null==r?u:u.get(zn(r))}function zn(n){return 1===n.length?function(t,e){n(null==t?e:null)}:n}function Ln(n){var t=n.responseType;return t&&"text"!==t?n.response:n.responseText}function qn(n,t,e){var r=arguments.length;2>r&&(t=0),3>r&&(e=Date.now());var i=e+t,u={c:n,t:i,n:null};return aa?aa.n=u:oa=u,aa=u,la||(ca=clearTimeout(ca),la=1,fa(Tn)),u}function Tn(){var n=Rn(),t=Dn()-n;t>24?(isFinite(t)&&(clearTimeout(ca),ca=setTimeout(Tn,t)),la=0):(la=1,fa(Tn))}function Rn(){for(var n=Date.now(),t=oa;t;)n>=t.t&&t.c(n-t.t)&&(t.c=null),t=t.n;return n}function Dn(){for(var n,t=oa,e=1/0;t;)t.c?(t.t<e&&(e=t.t),t=(n=t).n):t=n?n.n=t.n:oa=t.n;return aa=n,e}function Pn(n,t){return t-(n?Math.ceil(Math.log(n)/Math.LN10):1)}function Un(n,t){var e=Math.pow(10,3*xo(8-t));return{scale:t>8?function(n){return n/e}:function(n){return n*e},symbol:n}}function jn(n){var t=n.decimal,e=n.thousands,r=n.grouping,i=n.currency,u=r&&e?function(n,t){for(var i=n.length,u=[],o=0,a=r[0],l=0;i>0&&a>0&&(l+a+1>t&&(a=Math.max(1,t-l)),u.push(n.substring(i-=a,i+a)),!((l+=a+1)>t));)a=r[o=(o+1)%r.length];return u.reverse().join(e)}:m;return function(n){var e=ha.exec(n),r=e[1]||" ",o=e[2]||">",a=e[3]||"-",l=e[4]||"",c=e[5],f=+e[6],s=e[7],h=e[8],p=e[9],g=1,v="",d="",y=!1,m=!0;switch(h&&(h=+h.substring(1)),(c||"0"===r&&"="===o)&&(c=r="0",o="="),p){case"n":s=!0,p="g";break;case"%":g=100,d="%",p="f";break;case"p":g=100,d="%",p="r";break;case"b":case"o":case"x":case"X":"#"===l&&(v="0"+p.toLowerCase());case"c":m=!1;case"d":y=!0,h=0;break;case"s":g=-1,p="r"}"$"===l&&(v=i[0],d=i[1]),"r"!=p||h||(p="g"),null!=h&&("g"==p?h=Math.max(1,Math.min(21,h)):"e"!=p&&"f"!=p||(h=Math.max(0,Math.min(20,h)))),p=pa.get(p)||Fn;var M=c&&s;return function(n){var e=d;if(y&&n%1)return"";var i=0>n||0===n&&0>1/n?(n=-n,"-"):"-"===a?"":a;if(0>g){var l=ao.formatPrefix(n,h);n=l.scale(n),e=l.symbol+d}else n*=g;n=p(n,h);var x,b,_=n.lastIndexOf(".");if(0>_){var w=m?n.lastIndexOf("e"):-1;0>w?(x=n,b=""):(x=n.substring(0,w),b=n.substring(w))}else x=n.substring(0,_),b=t+n.substring(_+1);!c&&s&&(x=u(x,1/0));var S=v.length+x.length+b.length+(M?0:i.length),k=f>S?new Array(S=f-S+1).join(r):"";return M&&(x=u(k+x,k.length?f-b.length:1/0)),i+=v,n=x+b,("<"===o?i+n+k:">"===o?k+i+n:"^"===o?k.substring(0,S>>=1)+i+n+k.substring(S):i+(M?n:k+n))+e}}}function Fn(n){return n+""}function Hn(){this._=new Date(arguments.length>1?Date.UTC.apply(this,arguments):arguments[0])}function On(n,t,e){function r(t){var e=n(t),r=u(e,1);return r-t>t-e?e:r}function i(e){return t(e=n(new va(e-1)),1),e}function u(n,e){return t(n=new va(+n),e),n}function o(n,r,u){var o=i(n),a=[];if(u>1)for(;r>o;)e(o)%u||a.push(new Date(+o)),t(o,1);else for(;r>o;)a.push(new Date(+o)),t(o,1);return a}function a(n,t,e){try{va=Hn;var r=new Hn;return r._=n,o(r,t,e)}finally{va=Date}}n.floor=n,n.round=r,n.ceil=i,n.offset=u,n.range=o;var l=n.utc=In(n);return l.floor=l,l.round=In(r),l.ceil=In(i),l.offset=In(u),l.range=a,n}function In(n){return function(t,e){try{va=Hn;var r=new Hn;return r._=t,n(r,e)._}finally{va=Date}}}function Yn(n){function t(n){function t(t){for(var e,i,u,o=[],a=-1,l=0;++a<r;)37===n.charCodeAt(a)&&(o.push(n.slice(l,a)),null!=(i=ya[e=n.charAt(++a)])&&(e=n.charAt(++a)),(u=A[e])&&(e=u(t,null==i?"e"===e?" ":"0":i)),o.push(e),l=a+1);return o.push(n.slice(l,a)),o.join("")}var r=n.length;return t.parse=function(t){var r={y:1900,m:0,d:1,H:0,M:0,S:0,L:0,Z:null},i=e(r,n,t,0);if(i!=t.length)return null;"p"in r&&(r.H=r.H%12+12*r.p);var u=null!=r.Z&&va!==Hn,o=new(u?Hn:va);return"j"in r?o.setFullYear(r.y,0,r.j):"W"in r||"U"in r?("w"in r||(r.w="W"in r?1:0),o.setFullYear(r.y,0,1),o.setFullYear(r.y,0,"W"in r?(r.w+6)%7+7*r.W-(o.getDay()+5)%7:r.w+7*r.U-(o.getDay()+6)%7)):o.setFullYear(r.y,r.m,r.d),o.setHours(r.H+(r.Z/100|0),r.M+r.Z%100,r.S,r.L),u?o._:o},t.toString=function(){return n},t}function e(n,t,e,r){for(var i,u,o,a=0,l=t.length,c=e.length;l>a;){if(r>=c)return-1;if(i=t.charCodeAt(a++),37===i){if(o=t.charAt(a++),u=C[o in ya?t.charAt(a++):o],!u||(r=u(n,e,r))<0)return-1}else if(i!=e.charCodeAt(r++))return-1}return r}function r(n,t,e){_.lastIndex=0;var r=_.exec(t.slice(e));return r?(n.w=w.get(r[0].toLowerCase()),e+r[0].length):-1}function i(n,t,e){x.lastIndex=0;var r=x.exec(t.slice(e));return r?(n.w=b.get(r[0].toLowerCase()),e+r[0].length):-1}function u(n,t,e){N.lastIndex=0;var r=N.exec(t.slice(e));return r?(n.m=E.get(r[0].toLowerCase()),e+r[0].length):-1}function o(n,t,e){S.lastIndex=0;var r=S.exec(t.slice(e));return r?(n.m=k.get(r[0].toLowerCase()),e+r[0].length):-1}function a(n,t,r){return e(n,A.c.toString(),t,r)}function l(n,t,r){return e(n,A.x.toString(),t,r)}function c(n,t,r){return e(n,A.X.toString(),t,r)}function f(n,t,e){var r=M.get(t.slice(e,e+=2).toLowerCase());return null==r?-1:(n.p=r,e)}var s=n.dateTime,h=n.date,p=n.time,g=n.periods,v=n.days,d=n.shortDays,y=n.months,m=n.shortMonths;t.utc=function(n){function e(n){try{va=Hn;var t=new va;return t._=n,r(t)}finally{va=Date}}var r=t(n);return e.parse=function(n){try{va=Hn;var t=r.parse(n);return t&&t._}finally{va=Date}},e.toString=r.toString,e},t.multi=t.utc.multi=ct;var M=ao.map(),x=Vn(v),b=Xn(v),_=Vn(d),w=Xn(d),S=Vn(y),k=Xn(y),N=Vn(m),E=Xn(m);g.forEach(function(n,t){M.set(n.toLowerCase(),t)});var A={a:function(n){return d[n.getDay()]},A:function(n){return v[n.getDay()]},b:function(n){return m[n.getMonth()]},B:function(n){return y[n.getMonth()]},c:t(s),d:function(n,t){return Zn(n.getDate(),t,2)},e:function(n,t){return Zn(n.getDate(),t,2)},H:function(n,t){return Zn(n.getHours(),t,2)},I:function(n,t){return Zn(n.getHours()%12||12,t,2)},j:function(n,t){return Zn(1+ga.dayOfYear(n),t,3)},L:function(n,t){return Zn(n.getMilliseconds(),t,3)},m:function(n,t){return Zn(n.getMonth()+1,t,2)},M:function(n,t){return Zn(n.getMinutes(),t,2)},p:function(n){return g[+(n.getHours()>=12)]},S:function(n,t){return Zn(n.getSeconds(),t,2)},U:function(n,t){return Zn(ga.sundayOfYear(n),t,2)},w:function(n){return n.getDay()},W:function(n,t){return Zn(ga.mondayOfYear(n),t,2)},x:t(h),X:t(p),y:function(n,t){return Zn(n.getFullYear()%100,t,2)},Y:function(n,t){return Zn(n.getFullYear()%1e4,t,4)},Z:at,"%":function(){return"%"}},C={a:r,A:i,b:u,B:o,c:a,d:tt,e:tt,H:rt,I:rt,j:et,L:ot,m:nt,M:it,p:f,S:ut,U:Bn,w:$n,W:Wn,x:l,X:c,y:Gn,Y:Jn,Z:Kn,"%":lt};return t}function Zn(n,t,e){var r=0>n?"-":"",i=(r?-n:n)+"",u=i.length;return r+(e>u?new Array(e-u+1).join(t)+i:i)}function Vn(n){return new RegExp("^(?:"+n.map(ao.requote).join("|")+")","i")}function Xn(n){for(var t=new c,e=-1,r=n.length;++e<r;)t.set(n[e].toLowerCase(),e);return t}function $n(n,t,e){ma.lastIndex=0;var r=ma.exec(t.slice(e,e+1));return r?(n.w=+r[0],e+r[0].length):-1}function Bn(n,t,e){ma.lastIndex=0;var r=ma.exec(t.slice(e));return r?(n.U=+r[0],e+r[0].length):-1}function Wn(n,t,e){ma.lastIndex=0;var r=ma.exec(t.slice(e));return r?(n.W=+r[0],e+r[0].length):-1}function Jn(n,t,e){ma.lastIndex=0;var r=ma.exec(t.slice(e,e+4));return r?(n.y=+r[0],e+r[0].length):-1}function Gn(n,t,e){ma.lastIndex=0;var r=ma.exec(t.slice(e,e+2));return r?(n.y=Qn(+r[0]),e+r[0].length):-1}function Kn(n,t,e){return/^[+-]\d{4}$/.test(t=t.slice(e,e+5))?(n.Z=-t,e+5):-1}function Qn(n){return n+(n>68?1900:2e3)}function nt(n,t,e){ma.lastIndex=0;var r=ma.exec(t.slice(e,e+2));return r?(n.m=r[0]-1,e+r[0].length):-1}function tt(n,t,e){ma.lastIndex=0;var r=ma.exec(t.slice(e,e+2));return r?(n.d=+r[0],e+r[0].length):-1}function et(n,t,e){ma.lastIndex=0;var r=ma.exec(t.slice(e,e+3));return r?(n.j=+r[0],e+r[0].length):-1}function rt(n,t,e){ma.lastIndex=0;var r=ma.exec(t.slice(e,e+2));return r?(n.H=+r[0],e+r[0].length):-1}function it(n,t,e){ma.lastIndex=0;var r=ma.exec(t.slice(e,e+2));return r?(n.M=+r[0],e+r[0].length):-1}function ut(n,t,e){ma.lastIndex=0;var r=ma.exec(t.slice(e,e+2));return r?(n.S=+r[0],e+r[0].length):-1}function ot(n,t,e){ma.lastIndex=0;var r=ma.exec(t.slice(e,e+3));return r?(n.L=+r[0],e+r[0].length):-1}function at(n){var t=n.getTimezoneOffset(),e=t>0?"-":"+",r=xo(t)/60|0,i=xo(t)%60;return e+Zn(r,"0",2)+Zn(i,"0",2)}function lt(n,t,e){Ma.lastIndex=0;var r=Ma.exec(t.slice(e,e+1));return r?e+r[0].length:-1}function ct(n){for(var t=n.length,e=-1;++e<t;)n[e][0]=this(n[e][0]);return function(t){for(var e=0,r=n[e];!r[1](t);)r=n[++e];return r[0](t)}}function ft(){}function st(n,t,e){var r=e.s=n+t,i=r-n,u=r-i;e.t=n-u+(t-i)}function ht(n,t){n&&wa.hasOwnProperty(n.type)&&wa[n.type](n,t)}function pt(n,t,e){var r,i=-1,u=n.length-e;for(t.lineStart();++i<u;)r=n[i],t.point(r[0],r[1],r[2]);t.lineEnd()}function gt(n,t){var e=-1,r=n.length;for(t.polygonStart();++e<r;)pt(n[e],t,1);t.polygonEnd()}function vt(){function n(n,t){n*=Yo,t=t*Yo/2+Fo/4;var e=n-r,o=e>=0?1:-1,a=o*e,l=Math.cos(t),c=Math.sin(t),f=u*c,s=i*l+f*Math.cos(a),h=f*o*Math.sin(a);ka.add(Math.atan2(h,s)),r=n,i=l,u=c}var t,e,r,i,u;Na.point=function(o,a){Na.point=n,r=(t=o)*Yo,i=Math.cos(a=(e=a)*Yo/2+Fo/4),u=Math.sin(a)},Na.lineEnd=function(){n(t,e)}}function dt(n){var t=n[0],e=n[1],r=Math.cos(e);return[r*Math.cos(t),r*Math.sin(t),Math.sin(e)]}function yt(n,t){return n[0]*t[0]+n[1]*t[1]+n[2]*t[2]}function mt(n,t){return[n[1]*t[2]-n[2]*t[1],n[2]*t[0]-n[0]*t[2],n[0]*t[1]-n[1]*t[0]]}function Mt(n,t){n[0]+=t[0],n[1]+=t[1],n[2]+=t[2]}function xt(n,t){return[n[0]*t,n[1]*t,n[2]*t]}function bt(n){var t=Math.sqrt(n[0]*n[0]+n[1]*n[1]+n[2]*n[2]);n[0]/=t,n[1]/=t,n[2]/=t}function _t(n){return[Math.atan2(n[1],n[0]),tn(n[2])]}function wt(n,t){return xo(n[0]-t[0])<Uo&&xo(n[1]-t[1])<Uo}function St(n,t){n*=Yo;var e=Math.cos(t*=Yo);kt(e*Math.cos(n),e*Math.sin(n),Math.sin(t))}function kt(n,t,e){++Ea,Ca+=(n-Ca)/Ea,za+=(t-za)/Ea,La+=(e-La)/Ea}function Nt(){function n(n,i){n*=Yo;var u=Math.cos(i*=Yo),o=u*Math.cos(n),a=u*Math.sin(n),l=Math.sin(i),c=Math.atan2(Math.sqrt((c=e*l-r*a)*c+(c=r*o-t*l)*c+(c=t*a-e*o)*c),t*o+e*a+r*l);Aa+=c,qa+=c*(t+(t=o)),Ta+=c*(e+(e=a)),Ra+=c*(r+(r=l)),kt(t,e,r)}var t,e,r;ja.point=function(i,u){i*=Yo;var o=Math.cos(u*=Yo);t=o*Math.cos(i),e=o*Math.sin(i),r=Math.sin(u),ja.point=n,kt(t,e,r)}}function Et(){ja.point=St}function At(){function n(n,t){n*=Yo;var e=Math.cos(t*=Yo),o=e*Math.cos(n),a=e*Math.sin(n),l=Math.sin(t),c=i*l-u*a,f=u*o-r*l,s=r*a-i*o,h=Math.sqrt(c*c+f*f+s*s),p=r*o+i*a+u*l,g=h&&-nn(p)/h,v=Math.atan2(h,p);Da+=g*c,Pa+=g*f,Ua+=g*s,Aa+=v,qa+=v*(r+(r=o)),Ta+=v*(i+(i=a)),Ra+=v*(u+(u=l)),kt(r,i,u)}var t,e,r,i,u;ja.point=function(o,a){t=o,e=a,ja.point=n,o*=Yo;var l=Math.cos(a*=Yo);r=l*Math.cos(o),i=l*Math.sin(o),u=Math.sin(a),kt(r,i,u)},ja.lineEnd=function(){n(t,e),ja.lineEnd=Et,ja.point=St}}function Ct(n,t){function e(e,r){return e=n(e,r),t(e[0],e[1])}return n.invert&&t.invert&&(e.invert=function(e,r){return e=t.invert(e,r),e&&n.invert(e[0],e[1])}),e}function zt(){return!0}function Lt(n,t,e,r,i){var u=[],o=[];if(n.forEach(function(n){if(!((t=n.length-1)<=0)){var t,e=n[0],r=n[t];if(wt(e,r)){i.lineStart();for(var a=0;t>a;++a)i.point((e=n[a])[0],e[1]);return void i.lineEnd()}var l=new Tt(e,n,null,!0),c=new Tt(e,null,l,!1);l.o=c,u.push(l),o.push(c),l=new Tt(r,n,null,!1),c=new Tt(r,null,l,!0),l.o=c,u.push(l),o.push(c)}}),o.sort(t),qt(u),qt(o),u.length){for(var a=0,l=e,c=o.length;c>a;++a)o[a].e=l=!l;for(var f,s,h=u[0];;){for(var p=h,g=!0;p.v;)if((p=p.n)===h)return;f=p.z,i.lineStart();do{if(p.v=p.o.v=!0,p.e){if(g)for(var a=0,c=f.length;c>a;++a)i.point((s=f[a])[0],s[1]);else r(p.x,p.n.x,1,i);p=p.n}else{if(g){f=p.p.z;for(var a=f.length-1;a>=0;--a)i.point((s=f[a])[0],s[1])}else r(p.x,p.p.x,-1,i);p=p.p}p=p.o,f=p.z,g=!g}while(!p.v);i.lineEnd()}}}function qt(n){if(t=n.length){for(var t,e,r=0,i=n[0];++r<t;)i.n=e=n[r],e.p=i,i=e;i.n=e=n[0],e.p=i}}function Tt(n,t,e,r){this.x=n,this.z=t,this.o=e,this.e=r,this.v=!1,this.n=this.p=null}function Rt(n,t,e,r){return function(i,u){function o(t,e){var r=i(t,e);n(t=r[0],e=r[1])&&u.point(t,e)}function a(n,t){var e=i(n,t);d.point(e[0],e[1])}function l(){m.point=a,d.lineStart()}function c(){m.point=o,d.lineEnd()}function f(n,t){v.push([n,t]);var e=i(n,t);x.point(e[0],e[1])}function s(){x.lineStart(),v=[]}function h(){f(v[0][0],v[0][1]),x.lineEnd();var n,t=x.clean(),e=M.buffer(),r=e.length;if(v.pop(),g.push(v),v=null,r)if(1&t){n=e[0];var i,r=n.length-1,o=-1;if(r>0){for(b||(u.polygonStart(),b=!0),u.lineStart();++o<r;)u.point((i=n[o])[0],i[1]);u.lineEnd()}}else r>1&&2&t&&e.push(e.pop().concat(e.shift())),p.push(e.filter(Dt))}var p,g,v,d=t(u),y=i.invert(r[0],r[1]),m={point:o,lineStart:l,lineEnd:c,polygonStart:function(){m.point=f,m.lineStart=s,m.lineEnd=h,p=[],g=[]},polygonEnd:function(){m.point=o,m.lineStart=l,m.lineEnd=c,p=ao.merge(p);var n=Ot(y,g);p.length?(b||(u.polygonStart(),b=!0),Lt(p,Ut,n,e,u)):n&&(b||(u.polygonStart(),b=!0),u.lineStart(),e(null,null,1,u),u.lineEnd()),b&&(u.polygonEnd(),b=!1),p=g=null},sphere:function(){u.polygonStart(),u.lineStart(),e(null,null,1,u),u.lineEnd(),u.polygonEnd()}},M=Pt(),x=t(M),b=!1;return m}}function Dt(n){return n.length>1}function Pt(){var n,t=[];return{lineStart:function(){t.push(n=[])},point:function(t,e){n.push([t,e])},lineEnd:b,buffer:function(){var e=t;return t=[],n=null,e},rejoin:function(){t.length>1&&t.push(t.pop().concat(t.shift()))}}}function Ut(n,t){return((n=n.x)[0]<0?n[1]-Io-Uo:Io-n[1])-((t=t.x)[0]<0?t[1]-Io-Uo:Io-t[1])}function jt(n){var t,e=NaN,r=NaN,i=NaN;return{lineStart:function(){n.lineStart(),t=1},point:function(u,o){var a=u>0?Fo:-Fo,l=xo(u-e);xo(l-Fo)<Uo?(n.point(e,r=(r+o)/2>0?Io:-Io),n.point(i,r),n.lineEnd(),n.lineStart(),n.point(a,r),n.point(u,r),t=0):i!==a&&l>=Fo&&(xo(e-i)<Uo&&(e-=i*Uo),xo(u-a)<Uo&&(u-=a*Uo),r=Ft(e,r,u,o),n.point(i,r),n.lineEnd(),n.lineStart(),n.point(a,r),t=0),n.point(e=u,r=o),i=a},lineEnd:function(){n.lineEnd(),e=r=NaN},clean:function(){return 2-t}}}function Ft(n,t,e,r){var i,u,o=Math.sin(n-e);return xo(o)>Uo?Math.atan((Math.sin(t)*(u=Math.cos(r))*Math.sin(e)-Math.sin(r)*(i=Math.cos(t))*Math.sin(n))/(i*u*o)):(t+r)/2}function Ht(n,t,e,r){var i;if(null==n)i=e*Io,r.point(-Fo,i),r.point(0,i),r.point(Fo,i),r.point(Fo,0),r.point(Fo,-i),r.point(0,-i),r.point(-Fo,-i),r.point(-Fo,0),r.point(-Fo,i);else if(xo(n[0]-t[0])>Uo){var u=n[0]<t[0]?Fo:-Fo;i=e*u/2,r.point(-u,i),r.point(0,i),r.point(u,i)}else r.point(t[0],t[1])}function Ot(n,t){var e=n[0],r=n[1],i=[Math.sin(e),-Math.cos(e),0],u=0,o=0;ka.reset();for(var a=0,l=t.length;l>a;++a){var c=t[a],f=c.length;if(f)for(var s=c[0],h=s[0],p=s[1]/2+Fo/4,g=Math.sin(p),v=Math.cos(p),d=1;;){d===f&&(d=0),n=c[d];var y=n[0],m=n[1]/2+Fo/4,M=Math.sin(m),x=Math.cos(m),b=y-h,_=b>=0?1:-1,w=_*b,S=w>Fo,k=g*M;if(ka.add(Math.atan2(k*_*Math.sin(w),v*x+k*Math.cos(w))),u+=S?b+_*Ho:b,S^h>=e^y>=e){var N=mt(dt(s),dt(n));bt(N);var E=mt(i,N);bt(E);var A=(S^b>=0?-1:1)*tn(E[2]);(r>A||r===A&&(N[0]||N[1]))&&(o+=S^b>=0?1:-1)}if(!d++)break;h=y,g=M,v=x,s=n}}return(-Uo>u||Uo>u&&-Uo>ka)^1&o}function It(n){function t(n,t){return Math.cos(n)*Math.cos(t)>u}function e(n){var e,u,l,c,f;return{lineStart:function(){c=l=!1,f=1},point:function(s,h){var p,g=[s,h],v=t(s,h),d=o?v?0:i(s,h):v?i(s+(0>s?Fo:-Fo),h):0;if(!e&&(c=l=v)&&n.lineStart(),v!==l&&(p=r(e,g),(wt(e,p)||wt(g,p))&&(g[0]+=Uo,g[1]+=Uo,v=t(g[0],g[1]))),v!==l)f=0,v?(n.lineStart(),p=r(g,e),n.point(p[0],p[1])):(p=r(e,g),n.point(p[0],p[1]),n.lineEnd()),e=p;else if(a&&e&&o^v){var y;d&u||!(y=r(g,e,!0))||(f=0,o?(n.lineStart(),n.point(y[0][0],y[0][1]),n.point(y[1][0],y[1][1]),n.lineEnd()):(n.point(y[1][0],y[1][1]),n.lineEnd(),n.lineStart(),n.point(y[0][0],y[0][1])))}!v||e&&wt(e,g)||n.point(g[0],g[1]),e=g,l=v,u=d},lineEnd:function(){l&&n.lineEnd(),e=null},clean:function(){return f|(c&&l)<<1}}}function r(n,t,e){var r=dt(n),i=dt(t),o=[1,0,0],a=mt(r,i),l=yt(a,a),c=a[0],f=l-c*c;if(!f)return!e&&n;var s=u*l/f,h=-u*c/f,p=mt(o,a),g=xt(o,s),v=xt(a,h);Mt(g,v);var d=p,y=yt(g,d),m=yt(d,d),M=y*y-m*(yt(g,g)-1);if(!(0>M)){var x=Math.sqrt(M),b=xt(d,(-y-x)/m);if(Mt(b,g),b=_t(b),!e)return b;var _,w=n[0],S=t[0],k=n[1],N=t[1];w>S&&(_=w,w=S,S=_);var E=S-w,A=xo(E-Fo)<Uo,C=A||Uo>E;if(!A&&k>N&&(_=k,k=N,N=_),C?A?k+N>0^b[1]<(xo(b[0]-w)<Uo?k:N):k<=b[1]&&b[1]<=N:E>Fo^(w<=b[0]&&b[0]<=S)){var z=xt(d,(-y+x)/m);return Mt(z,g),[b,_t(z)]}}}function i(t,e){var r=o?n:Fo-n,i=0;return-r>t?i|=1:t>r&&(i|=2),-r>e?i|=4:e>r&&(i|=8),i}var u=Math.cos(n),o=u>0,a=xo(u)>Uo,l=ve(n,6*Yo);return Rt(t,e,l,o?[0,-n]:[-Fo,n-Fo])}function Yt(n,t,e,r){return function(i){var u,o=i.a,a=i.b,l=o.x,c=o.y,f=a.x,s=a.y,h=0,p=1,g=f-l,v=s-c;if(u=n-l,g||!(u>0)){if(u/=g,0>g){if(h>u)return;p>u&&(p=u)}else if(g>0){if(u>p)return;u>h&&(h=u)}if(u=e-l,g||!(0>u)){if(u/=g,0>g){if(u>p)return;u>h&&(h=u)}else if(g>0){if(h>u)return;p>u&&(p=u)}if(u=t-c,v||!(u>0)){if(u/=v,0>v){if(h>u)return;p>u&&(p=u)}else if(v>0){if(u>p)return;u>h&&(h=u)}if(u=r-c,v||!(0>u)){if(u/=v,0>v){if(u>p)return;u>h&&(h=u)}else if(v>0){if(h>u)return;p>u&&(p=u)}return h>0&&(i.a={x:l+h*g,y:c+h*v}),1>p&&(i.b={x:l+p*g,y:c+p*v}),i}}}}}}function Zt(n,t,e,r){function i(r,i){return xo(r[0]-n)<Uo?i>0?0:3:xo(r[0]-e)<Uo?i>0?2:1:xo(r[1]-t)<Uo?i>0?1:0:i>0?3:2}function u(n,t){return o(n.x,t.x)}function o(n,t){var e=i(n,1),r=i(t,1);return e!==r?e-r:0===e?t[1]-n[1]:1===e?n[0]-t[0]:2===e?n[1]-t[1]:t[0]-n[0]}return function(a){function l(n){for(var t=0,e=d.length,r=n[1],i=0;e>i;++i)for(var u,o=1,a=d[i],l=a.length,c=a[0];l>o;++o)u=a[o],c[1]<=r?u[1]>r&&Q(c,u,n)>0&&++t:u[1]<=r&&Q(c,u,n)<0&&--t,c=u;return 0!==t}function c(u,a,l,c){var f=0,s=0;if(null==u||(f=i(u,l))!==(s=i(a,l))||o(u,a)<0^l>0){do c.point(0===f||3===f?n:e,f>1?r:t);while((f=(f+l+4)%4)!==s)}else c.point(a[0],a[1])}function f(i,u){return i>=n&&e>=i&&u>=t&&r>=u}function s(n,t){f(n,t)&&a.point(n,t)}function h(){C.point=g,d&&d.push(y=[]),S=!0,w=!1,b=_=NaN}function p(){v&&(g(m,M),x&&w&&E.rejoin(),v.push(E.buffer())),C.point=s,w&&a.lineEnd()}function g(n,t){n=Math.max(-Ha,Math.min(Ha,n)),t=Math.max(-Ha,Math.min(Ha,t));var e=f(n,t);if(d&&y.push([n,t]),S)m=n,M=t,x=e,S=!1,e&&(a.lineStart(),a.point(n,t));else if(e&&w)a.point(n,t);else{var r={a:{x:b,y:_},b:{x:n,y:t}};A(r)?(w||(a.lineStart(),a.point(r.a.x,r.a.y)),a.point(r.b.x,r.b.y),e||a.lineEnd(),k=!1):e&&(a.lineStart(),a.point(n,t),k=!1)}b=n,_=t,w=e}var v,d,y,m,M,x,b,_,w,S,k,N=a,E=Pt(),A=Yt(n,t,e,r),C={point:s,lineStart:h,lineEnd:p,polygonStart:function(){a=E,v=[],d=[],k=!0},polygonEnd:function(){a=N,v=ao.merge(v);var t=l([n,r]),e=k&&t,i=v.length;(e||i)&&(a.polygonStart(),e&&(a.lineStart(),c(null,null,1,a),a.lineEnd()),i&&Lt(v,u,t,c,a),a.polygonEnd()),v=d=y=null}};return C}}function Vt(n){var t=0,e=Fo/3,r=ae(n),i=r(t,e);return i.parallels=function(n){return arguments.length?r(t=n[0]*Fo/180,e=n[1]*Fo/180):[t/Fo*180,e/Fo*180]},i}function Xt(n,t){function e(n,t){var e=Math.sqrt(u-2*i*Math.sin(t))/i;return[e*Math.sin(n*=i),o-e*Math.cos(n)]}var r=Math.sin(n),i=(r+Math.sin(t))/2,u=1+r*(2*i-r),o=Math.sqrt(u)/i;return e.invert=function(n,t){var e=o-t;return[Math.atan2(n,e)/i,tn((u-(n*n+e*e)*i*i)/(2*i))]},e}function $t(){function n(n,t){Ia+=i*n-r*t,r=n,i=t}var t,e,r,i;$a.point=function(u,o){$a.point=n,t=r=u,e=i=o},$a.lineEnd=function(){n(t,e)}}function Bt(n,t){Ya>n&&(Ya=n),n>Va&&(Va=n),Za>t&&(Za=t),t>Xa&&(Xa=t)}function Wt(){function n(n,t){o.push("M",n,",",t,u)}function t(n,t){o.push("M",n,",",t),a.point=e}function e(n,t){o.push("L",n,",",t)}function r(){a.point=n}function i(){o.push("Z")}var u=Jt(4.5),o=[],a={point:n,lineStart:function(){a.point=t},lineEnd:r,polygonStart:function(){a.lineEnd=i},polygonEnd:function(){a.lineEnd=r,a.point=n},pointRadius:function(n){return u=Jt(n),a},result:function(){if(o.length){var n=o.join("");return o=[],n}}};return a}function Jt(n){return"m0,"+n+"a"+n+","+n+" 0 1,1 0,"+-2*n+"a"+n+","+n+" 0 1,1 0,"+2*n+"z"}function Gt(n,t){Ca+=n,za+=t,++La}function Kt(){function n(n,r){var i=n-t,u=r-e,o=Math.sqrt(i*i+u*u);qa+=o*(t+n)/2,Ta+=o*(e+r)/2,Ra+=o,Gt(t=n,e=r)}var t,e;Wa.point=function(r,i){Wa.point=n,Gt(t=r,e=i)}}function Qt(){Wa.point=Gt}function ne(){function n(n,t){var e=n-r,u=t-i,o=Math.sqrt(e*e+u*u);qa+=o*(r+n)/2,Ta+=o*(i+t)/2,Ra+=o,o=i*n-r*t,Da+=o*(r+n),Pa+=o*(i+t),Ua+=3*o,Gt(r=n,i=t)}var t,e,r,i;Wa.point=function(u,o){Wa.point=n,Gt(t=r=u,e=i=o)},Wa.lineEnd=function(){n(t,e)}}function te(n){function t(t,e){n.moveTo(t+o,e),n.arc(t,e,o,0,Ho)}function e(t,e){n.moveTo(t,e),a.point=r}function r(t,e){n.lineTo(t,e)}function i(){a.point=t}function u(){n.closePath()}var o=4.5,a={point:t,lineStart:function(){a.point=e},lineEnd:i,polygonStart:function(){a.lineEnd=u},polygonEnd:function(){a.lineEnd=i,a.point=t},pointRadius:function(n){return o=n,a},result:b};return a}function ee(n){function t(n){return(a?r:e)(n)}function e(t){return ue(t,function(e,r){e=n(e,r),t.point(e[0],e[1])})}function r(t){function e(e,r){e=n(e,r),t.point(e[0],e[1])}function r(){M=NaN,S.point=u,t.lineStart()}function u(e,r){var u=dt([e,r]),o=n(e,r);i(M,x,m,b,_,w,M=o[0],x=o[1],m=e,b=u[0],_=u[1],w=u[2],a,t),t.point(M,x)}function o(){S.point=e,t.lineEnd()}function l(){
    2  r(),S.point=c,S.lineEnd=f}function c(n,t){u(s=n,h=t),p=M,g=x,v=b,d=_,y=w,S.point=u}function f(){i(M,x,m,b,_,w,p,g,s,v,d,y,a,t),S.lineEnd=o,o()}var s,h,p,g,v,d,y,m,M,x,b,_,w,S={point:e,lineStart:r,lineEnd:o,polygonStart:function(){t.polygonStart(),S.lineStart=l},polygonEnd:function(){t.polygonEnd(),S.lineStart=r}};return S}function i(t,e,r,a,l,c,f,s,h,p,g,v,d,y){var m=f-t,M=s-e,x=m*m+M*M;if(x>4*u&&d--){var b=a+p,_=l+g,w=c+v,S=Math.sqrt(b*b+_*_+w*w),k=Math.asin(w/=S),N=xo(xo(w)-1)<Uo||xo(r-h)<Uo?(r+h)/2:Math.atan2(_,b),E=n(N,k),A=E[0],C=E[1],z=A-t,L=C-e,q=M*z-m*L;(q*q/x>u||xo((m*z+M*L)/x-.5)>.3||o>a*p+l*g+c*v)&&(i(t,e,r,a,l,c,A,C,N,b/=S,_/=S,w,d,y),y.point(A,C),i(A,C,N,b,_,w,f,s,h,p,g,v,d,y))}}var u=.5,o=Math.cos(30*Yo),a=16;return t.precision=function(n){return arguments.length?(a=(u=n*n)>0&&16,t):Math.sqrt(u)},t}function re(n){var t=ee(function(t,e){return n([t*Zo,e*Zo])});return function(n){return le(t(n))}}function ie(n){this.stream=n}function ue(n,t){return{point:t,sphere:function(){n.sphere()},lineStart:function(){n.lineStart()},lineEnd:function(){n.lineEnd()},polygonStart:function(){n.polygonStart()},polygonEnd:function(){n.polygonEnd()}}}function oe(n){return ae(function(){return n})()}function ae(n){function t(n){return n=a(n[0]*Yo,n[1]*Yo),[n[0]*h+l,c-n[1]*h]}function e(n){return n=a.invert((n[0]-l)/h,(c-n[1])/h),n&&[n[0]*Zo,n[1]*Zo]}function r(){a=Ct(o=se(y,M,x),u);var n=u(v,d);return l=p-n[0]*h,c=g+n[1]*h,i()}function i(){return f&&(f.valid=!1,f=null),t}var u,o,a,l,c,f,s=ee(function(n,t){return n=u(n,t),[n[0]*h+l,c-n[1]*h]}),h=150,p=480,g=250,v=0,d=0,y=0,M=0,x=0,b=Fa,_=m,w=null,S=null;return t.stream=function(n){return f&&(f.valid=!1),f=le(b(o,s(_(n)))),f.valid=!0,f},t.clipAngle=function(n){return arguments.length?(b=null==n?(w=n,Fa):It((w=+n)*Yo),i()):w},t.clipExtent=function(n){return arguments.length?(S=n,_=n?Zt(n[0][0],n[0][1],n[1][0],n[1][1]):m,i()):S},t.scale=function(n){return arguments.length?(h=+n,r()):h},t.translate=function(n){return arguments.length?(p=+n[0],g=+n[1],r()):[p,g]},t.center=function(n){return arguments.length?(v=n[0]%360*Yo,d=n[1]%360*Yo,r()):[v*Zo,d*Zo]},t.rotate=function(n){return arguments.length?(y=n[0]%360*Yo,M=n[1]%360*Yo,x=n.length>2?n[2]%360*Yo:0,r()):[y*Zo,M*Zo,x*Zo]},ao.rebind(t,s,"precision"),function(){return u=n.apply(this,arguments),t.invert=u.invert&&e,r()}}function le(n){return ue(n,function(t,e){n.point(t*Yo,e*Yo)})}function ce(n,t){return[n,t]}function fe(n,t){return[n>Fo?n-Ho:-Fo>n?n+Ho:n,t]}function se(n,t,e){return n?t||e?Ct(pe(n),ge(t,e)):pe(n):t||e?ge(t,e):fe}function he(n){return function(t,e){return t+=n,[t>Fo?t-Ho:-Fo>t?t+Ho:t,e]}}function pe(n){var t=he(n);return t.invert=he(-n),t}function ge(n,t){function e(n,t){var e=Math.cos(t),a=Math.cos(n)*e,l=Math.sin(n)*e,c=Math.sin(t),f=c*r+a*i;return[Math.atan2(l*u-f*o,a*r-c*i),tn(f*u+l*o)]}var r=Math.cos(n),i=Math.sin(n),u=Math.cos(t),o=Math.sin(t);return e.invert=function(n,t){var e=Math.cos(t),a=Math.cos(n)*e,l=Math.sin(n)*e,c=Math.sin(t),f=c*u-l*o;return[Math.atan2(l*u+c*o,a*r+f*i),tn(f*r-a*i)]},e}function ve(n,t){var e=Math.cos(n),r=Math.sin(n);return function(i,u,o,a){var l=o*t;null!=i?(i=de(e,i),u=de(e,u),(o>0?u>i:i>u)&&(i+=o*Ho)):(i=n+o*Ho,u=n-.5*l);for(var c,f=i;o>0?f>u:u>f;f-=l)a.point((c=_t([e,-r*Math.cos(f),-r*Math.sin(f)]))[0],c[1])}}function de(n,t){var e=dt(t);e[0]-=n,bt(e);var r=nn(-e[1]);return((-e[2]<0?-r:r)+2*Math.PI-Uo)%(2*Math.PI)}function ye(n,t,e){var r=ao.range(n,t-Uo,e).concat(t);return function(n){return r.map(function(t){return[n,t]})}}function me(n,t,e){var r=ao.range(n,t-Uo,e).concat(t);return function(n){return r.map(function(t){return[t,n]})}}function Me(n){return n.source}function xe(n){return n.target}function be(n,t,e,r){var i=Math.cos(t),u=Math.sin(t),o=Math.cos(r),a=Math.sin(r),l=i*Math.cos(n),c=i*Math.sin(n),f=o*Math.cos(e),s=o*Math.sin(e),h=2*Math.asin(Math.sqrt(on(r-t)+i*o*on(e-n))),p=1/Math.sin(h),g=h?function(n){var t=Math.sin(n*=h)*p,e=Math.sin(h-n)*p,r=e*l+t*f,i=e*c+t*s,o=e*u+t*a;return[Math.atan2(i,r)*Zo,Math.atan2(o,Math.sqrt(r*r+i*i))*Zo]}:function(){return[n*Zo,t*Zo]};return g.distance=h,g}function _e(){function n(n,i){var u=Math.sin(i*=Yo),o=Math.cos(i),a=xo((n*=Yo)-t),l=Math.cos(a);Ja+=Math.atan2(Math.sqrt((a=o*Math.sin(a))*a+(a=r*u-e*o*l)*a),e*u+r*o*l),t=n,e=u,r=o}var t,e,r;Ga.point=function(i,u){t=i*Yo,e=Math.sin(u*=Yo),r=Math.cos(u),Ga.point=n},Ga.lineEnd=function(){Ga.point=Ga.lineEnd=b}}function we(n,t){function e(t,e){var r=Math.cos(t),i=Math.cos(e),u=n(r*i);return[u*i*Math.sin(t),u*Math.sin(e)]}return e.invert=function(n,e){var r=Math.sqrt(n*n+e*e),i=t(r),u=Math.sin(i),o=Math.cos(i);return[Math.atan2(n*u,r*o),Math.asin(r&&e*u/r)]},e}function Se(n,t){function e(n,t){o>0?-Io+Uo>t&&(t=-Io+Uo):t>Io-Uo&&(t=Io-Uo);var e=o/Math.pow(i(t),u);return[e*Math.sin(u*n),o-e*Math.cos(u*n)]}var r=Math.cos(n),i=function(n){return Math.tan(Fo/4+n/2)},u=n===t?Math.sin(n):Math.log(r/Math.cos(t))/Math.log(i(t)/i(n)),o=r*Math.pow(i(n),u)/u;return u?(e.invert=function(n,t){var e=o-t,r=K(u)*Math.sqrt(n*n+e*e);return[Math.atan2(n,e)/u,2*Math.atan(Math.pow(o/r,1/u))-Io]},e):Ne}function ke(n,t){function e(n,t){var e=u-t;return[e*Math.sin(i*n),u-e*Math.cos(i*n)]}var r=Math.cos(n),i=n===t?Math.sin(n):(r-Math.cos(t))/(t-n),u=r/i+n;return xo(i)<Uo?ce:(e.invert=function(n,t){var e=u-t;return[Math.atan2(n,e)/i,u-K(i)*Math.sqrt(n*n+e*e)]},e)}function Ne(n,t){return[n,Math.log(Math.tan(Fo/4+t/2))]}function Ee(n){var t,e=oe(n),r=e.scale,i=e.translate,u=e.clipExtent;return e.scale=function(){var n=r.apply(e,arguments);return n===e?t?e.clipExtent(null):e:n},e.translate=function(){var n=i.apply(e,arguments);return n===e?t?e.clipExtent(null):e:n},e.clipExtent=function(n){var o=u.apply(e,arguments);if(o===e){if(t=null==n){var a=Fo*r(),l=i();u([[l[0]-a,l[1]-a],[l[0]+a,l[1]+a]])}}else t&&(o=null);return o},e.clipExtent(null)}function Ae(n,t){return[Math.log(Math.tan(Fo/4+t/2)),-n]}function Ce(n){return n[0]}function ze(n){return n[1]}function Le(n){for(var t=n.length,e=[0,1],r=2,i=2;t>i;i++){for(;r>1&&Q(n[e[r-2]],n[e[r-1]],n[i])<=0;)--r;e[r++]=i}return e.slice(0,r)}function qe(n,t){return n[0]-t[0]||n[1]-t[1]}function Te(n,t,e){return(e[0]-t[0])*(n[1]-t[1])<(e[1]-t[1])*(n[0]-t[0])}function Re(n,t,e,r){var i=n[0],u=e[0],o=t[0]-i,a=r[0]-u,l=n[1],c=e[1],f=t[1]-l,s=r[1]-c,h=(a*(l-c)-s*(i-u))/(s*o-a*f);return[i+h*o,l+h*f]}function De(n){var t=n[0],e=n[n.length-1];return!(t[0]-e[0]||t[1]-e[1])}function Pe(){rr(this),this.edge=this.site=this.circle=null}function Ue(n){var t=cl.pop()||new Pe;return t.site=n,t}function je(n){Be(n),ol.remove(n),cl.push(n),rr(n)}function Fe(n){var t=n.circle,e=t.x,r=t.cy,i={x:e,y:r},u=n.P,o=n.N,a=[n];je(n);for(var l=u;l.circle&&xo(e-l.circle.x)<Uo&&xo(r-l.circle.cy)<Uo;)u=l.P,a.unshift(l),je(l),l=u;a.unshift(l),Be(l);for(var c=o;c.circle&&xo(e-c.circle.x)<Uo&&xo(r-c.circle.cy)<Uo;)o=c.N,a.push(c),je(c),c=o;a.push(c),Be(c);var f,s=a.length;for(f=1;s>f;++f)c=a[f],l=a[f-1],nr(c.edge,l.site,c.site,i);l=a[0],c=a[s-1],c.edge=Ke(l.site,c.site,null,i),$e(l),$e(c)}function He(n){for(var t,e,r,i,u=n.x,o=n.y,a=ol._;a;)if(r=Oe(a,o)-u,r>Uo)a=a.L;else{if(i=u-Ie(a,o),!(i>Uo)){r>-Uo?(t=a.P,e=a):i>-Uo?(t=a,e=a.N):t=e=a;break}if(!a.R){t=a;break}a=a.R}var l=Ue(n);if(ol.insert(t,l),t||e){if(t===e)return Be(t),e=Ue(t.site),ol.insert(l,e),l.edge=e.edge=Ke(t.site,l.site),$e(t),void $e(e);if(!e)return void(l.edge=Ke(t.site,l.site));Be(t),Be(e);var c=t.site,f=c.x,s=c.y,h=n.x-f,p=n.y-s,g=e.site,v=g.x-f,d=g.y-s,y=2*(h*d-p*v),m=h*h+p*p,M=v*v+d*d,x={x:(d*m-p*M)/y+f,y:(h*M-v*m)/y+s};nr(e.edge,c,g,x),l.edge=Ke(c,n,null,x),e.edge=Ke(n,g,null,x),$e(t),$e(e)}}function Oe(n,t){var e=n.site,r=e.x,i=e.y,u=i-t;if(!u)return r;var o=n.P;if(!o)return-(1/0);e=o.site;var a=e.x,l=e.y,c=l-t;if(!c)return a;var f=a-r,s=1/u-1/c,h=f/c;return s?(-h+Math.sqrt(h*h-2*s*(f*f/(-2*c)-l+c/2+i-u/2)))/s+r:(r+a)/2}function Ie(n,t){var e=n.N;if(e)return Oe(e,t);var r=n.site;return r.y===t?r.x:1/0}function Ye(n){this.site=n,this.edges=[]}function Ze(n){for(var t,e,r,i,u,o,a,l,c,f,s=n[0][0],h=n[1][0],p=n[0][1],g=n[1][1],v=ul,d=v.length;d--;)if(u=v[d],u&&u.prepare())for(a=u.edges,l=a.length,o=0;l>o;)f=a[o].end(),r=f.x,i=f.y,c=a[++o%l].start(),t=c.x,e=c.y,(xo(r-t)>Uo||xo(i-e)>Uo)&&(a.splice(o,0,new tr(Qe(u.site,f,xo(r-s)<Uo&&g-i>Uo?{x:s,y:xo(t-s)<Uo?e:g}:xo(i-g)<Uo&&h-r>Uo?{x:xo(e-g)<Uo?t:h,y:g}:xo(r-h)<Uo&&i-p>Uo?{x:h,y:xo(t-h)<Uo?e:p}:xo(i-p)<Uo&&r-s>Uo?{x:xo(e-p)<Uo?t:s,y:p}:null),u.site,null)),++l)}function Ve(n,t){return t.angle-n.angle}function Xe(){rr(this),this.x=this.y=this.arc=this.site=this.cy=null}function $e(n){var t=n.P,e=n.N;if(t&&e){var r=t.site,i=n.site,u=e.site;if(r!==u){var o=i.x,a=i.y,l=r.x-o,c=r.y-a,f=u.x-o,s=u.y-a,h=2*(l*s-c*f);if(!(h>=-jo)){var p=l*l+c*c,g=f*f+s*s,v=(s*p-c*g)/h,d=(l*g-f*p)/h,s=d+a,y=fl.pop()||new Xe;y.arc=n,y.site=i,y.x=v+o,y.y=s+Math.sqrt(v*v+d*d),y.cy=s,n.circle=y;for(var m=null,M=ll._;M;)if(y.y<M.y||y.y===M.y&&y.x<=M.x){if(!M.L){m=M.P;break}M=M.L}else{if(!M.R){m=M;break}M=M.R}ll.insert(m,y),m||(al=y)}}}}function Be(n){var t=n.circle;t&&(t.P||(al=t.N),ll.remove(t),fl.push(t),rr(t),n.circle=null)}function We(n){for(var t,e=il,r=Yt(n[0][0],n[0][1],n[1][0],n[1][1]),i=e.length;i--;)t=e[i],(!Je(t,n)||!r(t)||xo(t.a.x-t.b.x)<Uo&&xo(t.a.y-t.b.y)<Uo)&&(t.a=t.b=null,e.splice(i,1))}function Je(n,t){var e=n.b;if(e)return!0;var r,i,u=n.a,o=t[0][0],a=t[1][0],l=t[0][1],c=t[1][1],f=n.l,s=n.r,h=f.x,p=f.y,g=s.x,v=s.y,d=(h+g)/2,y=(p+v)/2;if(v===p){if(o>d||d>=a)return;if(h>g){if(u){if(u.y>=c)return}else u={x:d,y:l};e={x:d,y:c}}else{if(u){if(u.y<l)return}else u={x:d,y:c};e={x:d,y:l}}}else if(r=(h-g)/(v-p),i=y-r*d,-1>r||r>1)if(h>g){if(u){if(u.y>=c)return}else u={x:(l-i)/r,y:l};e={x:(c-i)/r,y:c}}else{if(u){if(u.y<l)return}else u={x:(c-i)/r,y:c};e={x:(l-i)/r,y:l}}else if(v>p){if(u){if(u.x>=a)return}else u={x:o,y:r*o+i};e={x:a,y:r*a+i}}else{if(u){if(u.x<o)return}else u={x:a,y:r*a+i};e={x:o,y:r*o+i}}return n.a=u,n.b=e,!0}function Ge(n,t){this.l=n,this.r=t,this.a=this.b=null}function Ke(n,t,e,r){var i=new Ge(n,t);return il.push(i),e&&nr(i,n,t,e),r&&nr(i,t,n,r),ul[n.i].edges.push(new tr(i,n,t)),ul[t.i].edges.push(new tr(i,t,n)),i}function Qe(n,t,e){var r=new Ge(n,null);return r.a=t,r.b=e,il.push(r),r}function nr(n,t,e,r){n.a||n.b?n.l===e?n.b=r:n.a=r:(n.a=r,n.l=t,n.r=e)}function tr(n,t,e){var r=n.a,i=n.b;this.edge=n,this.site=t,this.angle=e?Math.atan2(e.y-t.y,e.x-t.x):n.l===t?Math.atan2(i.x-r.x,r.y-i.y):Math.atan2(r.x-i.x,i.y-r.y)}function er(){this._=null}function rr(n){n.U=n.C=n.L=n.R=n.P=n.N=null}function ir(n,t){var e=t,r=t.R,i=e.U;i?i.L===e?i.L=r:i.R=r:n._=r,r.U=i,e.U=r,e.R=r.L,e.R&&(e.R.U=e),r.L=e}function ur(n,t){var e=t,r=t.L,i=e.U;i?i.L===e?i.L=r:i.R=r:n._=r,r.U=i,e.U=r,e.L=r.R,e.L&&(e.L.U=e),r.R=e}function or(n){for(;n.L;)n=n.L;return n}function ar(n,t){var e,r,i,u=n.sort(lr).pop();for(il=[],ul=new Array(n.length),ol=new er,ll=new er;;)if(i=al,u&&(!i||u.y<i.y||u.y===i.y&&u.x<i.x))u.x===e&&u.y===r||(ul[u.i]=new Ye(u),He(u),e=u.x,r=u.y),u=n.pop();else{if(!i)break;Fe(i.arc)}t&&(We(t),Ze(t));var o={cells:ul,edges:il};return ol=ll=il=ul=null,o}function lr(n,t){return t.y-n.y||t.x-n.x}function cr(n,t,e){return(n.x-e.x)*(t.y-n.y)-(n.x-t.x)*(e.y-n.y)}function fr(n){return n.x}function sr(n){return n.y}function hr(){return{leaf:!0,nodes:[],point:null,x:null,y:null}}function pr(n,t,e,r,i,u){if(!n(t,e,r,i,u)){var o=.5*(e+i),a=.5*(r+u),l=t.nodes;l[0]&&pr(n,l[0],e,r,o,a),l[1]&&pr(n,l[1],o,r,i,a),l[2]&&pr(n,l[2],e,a,o,u),l[3]&&pr(n,l[3],o,a,i,u)}}function gr(n,t,e,r,i,u,o){var a,l=1/0;return function c(n,f,s,h,p){if(!(f>u||s>o||r>h||i>p)){if(g=n.point){var g,v=t-n.x,d=e-n.y,y=v*v+d*d;if(l>y){var m=Math.sqrt(l=y);r=t-m,i=e-m,u=t+m,o=e+m,a=g}}for(var M=n.nodes,x=.5*(f+h),b=.5*(s+p),_=t>=x,w=e>=b,S=w<<1|_,k=S+4;k>S;++S)if(n=M[3&S])switch(3&S){case 0:c(n,f,s,x,b);break;case 1:c(n,x,s,h,b);break;case 2:c(n,f,b,x,p);break;case 3:c(n,x,b,h,p)}}}(n,r,i,u,o),a}function vr(n,t){n=ao.rgb(n),t=ao.rgb(t);var e=n.r,r=n.g,i=n.b,u=t.r-e,o=t.g-r,a=t.b-i;return function(n){return"#"+bn(Math.round(e+u*n))+bn(Math.round(r+o*n))+bn(Math.round(i+a*n))}}function dr(n,t){var e,r={},i={};for(e in n)e in t?r[e]=Mr(n[e],t[e]):i[e]=n[e];for(e in t)e in n||(i[e]=t[e]);return function(n){for(e in r)i[e]=r[e](n);return i}}function yr(n,t){return n=+n,t=+t,function(e){return n*(1-e)+t*e}}function mr(n,t){var e,r,i,u=hl.lastIndex=pl.lastIndex=0,o=-1,a=[],l=[];for(n+="",t+="";(e=hl.exec(n))&&(r=pl.exec(t));)(i=r.index)>u&&(i=t.slice(u,i),a[o]?a[o]+=i:a[++o]=i),(e=e[0])===(r=r[0])?a[o]?a[o]+=r:a[++o]=r:(a[++o]=null,l.push({i:o,x:yr(e,r)})),u=pl.lastIndex;return u<t.length&&(i=t.slice(u),a[o]?a[o]+=i:a[++o]=i),a.length<2?l[0]?(t=l[0].x,function(n){return t(n)+""}):function(){return t}:(t=l.length,function(n){for(var e,r=0;t>r;++r)a[(e=l[r]).i]=e.x(n);return a.join("")})}function Mr(n,t){for(var e,r=ao.interpolators.length;--r>=0&&!(e=ao.interpolators[r](n,t)););return e}function xr(n,t){var e,r=[],i=[],u=n.length,o=t.length,a=Math.min(n.length,t.length);for(e=0;a>e;++e)r.push(Mr(n[e],t[e]));for(;u>e;++e)i[e]=n[e];for(;o>e;++e)i[e]=t[e];return function(n){for(e=0;a>e;++e)i[e]=r[e](n);return i}}function br(n){return function(t){return 0>=t?0:t>=1?1:n(t)}}function _r(n){return function(t){return 1-n(1-t)}}function wr(n){return function(t){return.5*(.5>t?n(2*t):2-n(2-2*t))}}function Sr(n){return n*n}function kr(n){return n*n*n}function Nr(n){if(0>=n)return 0;if(n>=1)return 1;var t=n*n,e=t*n;return 4*(.5>n?e:3*(n-t)+e-.75)}function Er(n){return function(t){return Math.pow(t,n)}}function Ar(n){return 1-Math.cos(n*Io)}function Cr(n){return Math.pow(2,10*(n-1))}function zr(n){return 1-Math.sqrt(1-n*n)}function Lr(n,t){var e;return arguments.length<2&&(t=.45),arguments.length?e=t/Ho*Math.asin(1/n):(n=1,e=t/4),function(r){return 1+n*Math.pow(2,-10*r)*Math.sin((r-e)*Ho/t)}}function qr(n){return n||(n=1.70158),function(t){return t*t*((n+1)*t-n)}}function Tr(n){return 1/2.75>n?7.5625*n*n:2/2.75>n?7.5625*(n-=1.5/2.75)*n+.75:2.5/2.75>n?7.5625*(n-=2.25/2.75)*n+.9375:7.5625*(n-=2.625/2.75)*n+.984375}function Rr(n,t){n=ao.hcl(n),t=ao.hcl(t);var e=n.h,r=n.c,i=n.l,u=t.h-e,o=t.c-r,a=t.l-i;return isNaN(o)&&(o=0,r=isNaN(r)?t.c:r),isNaN(u)?(u=0,e=isNaN(e)?t.h:e):u>180?u-=360:-180>u&&(u+=360),function(n){return sn(e+u*n,r+o*n,i+a*n)+""}}function Dr(n,t){n=ao.hsl(n),t=ao.hsl(t);var e=n.h,r=n.s,i=n.l,u=t.h-e,o=t.s-r,a=t.l-i;return isNaN(o)&&(o=0,r=isNaN(r)?t.s:r),isNaN(u)?(u=0,e=isNaN(e)?t.h:e):u>180?u-=360:-180>u&&(u+=360),function(n){return cn(e+u*n,r+o*n,i+a*n)+""}}function Pr(n,t){n=ao.lab(n),t=ao.lab(t);var e=n.l,r=n.a,i=n.b,u=t.l-e,o=t.a-r,a=t.b-i;return function(n){return pn(e+u*n,r+o*n,i+a*n)+""}}function Ur(n,t){return t-=n,function(e){return Math.round(n+t*e)}}function jr(n){var t=[n.a,n.b],e=[n.c,n.d],r=Hr(t),i=Fr(t,e),u=Hr(Or(e,t,-i))||0;t[0]*e[1]<e[0]*t[1]&&(t[0]*=-1,t[1]*=-1,r*=-1,i*=-1),this.rotate=(r?Math.atan2(t[1],t[0]):Math.atan2(-e[0],e[1]))*Zo,this.translate=[n.e,n.f],this.scale=[r,u],this.skew=u?Math.atan2(i,u)*Zo:0}function Fr(n,t){return n[0]*t[0]+n[1]*t[1]}function Hr(n){var t=Math.sqrt(Fr(n,n));return t&&(n[0]/=t,n[1]/=t),t}function Or(n,t,e){return n[0]+=e*t[0],n[1]+=e*t[1],n}function Ir(n){return n.length?n.pop()+",":""}function Yr(n,t,e,r){if(n[0]!==t[0]||n[1]!==t[1]){var i=e.push("translate(",null,",",null,")");r.push({i:i-4,x:yr(n[0],t[0])},{i:i-2,x:yr(n[1],t[1])})}else(t[0]||t[1])&&e.push("translate("+t+")")}function Zr(n,t,e,r){n!==t?(n-t>180?t+=360:t-n>180&&(n+=360),r.push({i:e.push(Ir(e)+"rotate(",null,")")-2,x:yr(n,t)})):t&&e.push(Ir(e)+"rotate("+t+")")}function Vr(n,t,e,r){n!==t?r.push({i:e.push(Ir(e)+"skewX(",null,")")-2,x:yr(n,t)}):t&&e.push(Ir(e)+"skewX("+t+")")}function Xr(n,t,e,r){if(n[0]!==t[0]||n[1]!==t[1]){var i=e.push(Ir(e)+"scale(",null,",",null,")");r.push({i:i-4,x:yr(n[0],t[0])},{i:i-2,x:yr(n[1],t[1])})}else 1===t[0]&&1===t[1]||e.push(Ir(e)+"scale("+t+")")}function $r(n,t){var e=[],r=[];return n=ao.transform(n),t=ao.transform(t),Yr(n.translate,t.translate,e,r),Zr(n.rotate,t.rotate,e,r),Vr(n.skew,t.skew,e,r),Xr(n.scale,t.scale,e,r),n=t=null,function(n){for(var t,i=-1,u=r.length;++i<u;)e[(t=r[i]).i]=t.x(n);return e.join("")}}function Br(n,t){return t=(t-=n=+n)||1/t,function(e){return(e-n)/t}}function Wr(n,t){return t=(t-=n=+n)||1/t,function(e){return Math.max(0,Math.min(1,(e-n)/t))}}function Jr(n){for(var t=n.source,e=n.target,r=Kr(t,e),i=[t];t!==r;)t=t.parent,i.push(t);for(var u=i.length;e!==r;)i.splice(u,0,e),e=e.parent;return i}function Gr(n){for(var t=[],e=n.parent;null!=e;)t.push(n),n=e,e=e.parent;return t.push(n),t}function Kr(n,t){if(n===t)return n;for(var e=Gr(n),r=Gr(t),i=e.pop(),u=r.pop(),o=null;i===u;)o=i,i=e.pop(),u=r.pop();return o}function Qr(n){n.fixed|=2}function ni(n){n.fixed&=-7}function ti(n){n.fixed|=4,n.px=n.x,n.py=n.y}function ei(n){n.fixed&=-5}function ri(n,t,e){var r=0,i=0;if(n.charge=0,!n.leaf)for(var u,o=n.nodes,a=o.length,l=-1;++l<a;)u=o[l],null!=u&&(ri(u,t,e),n.charge+=u.charge,r+=u.charge*u.cx,i+=u.charge*u.cy);if(n.point){n.leaf||(n.point.x+=Math.random()-.5,n.point.y+=Math.random()-.5);var c=t*e[n.point.index];n.charge+=n.pointCharge=c,r+=c*n.point.x,i+=c*n.point.y}n.cx=r/n.charge,n.cy=i/n.charge}function ii(n,t){return ao.rebind(n,t,"sort","children","value"),n.nodes=n,n.links=fi,n}function ui(n,t){for(var e=[n];null!=(n=e.pop());)if(t(n),(i=n.children)&&(r=i.length))for(var r,i;--r>=0;)e.push(i[r])}function oi(n,t){for(var e=[n],r=[];null!=(n=e.pop());)if(r.push(n),(u=n.children)&&(i=u.length))for(var i,u,o=-1;++o<i;)e.push(u[o]);for(;null!=(n=r.pop());)t(n)}function ai(n){return n.children}function li(n){return n.value}function ci(n,t){return t.value-n.value}function fi(n){return ao.merge(n.map(function(n){return(n.children||[]).map(function(t){return{source:n,target:t}})}))}function si(n){return n.x}function hi(n){return n.y}function pi(n,t,e){n.y0=t,n.y=e}function gi(n){return ao.range(n.length)}function vi(n){for(var t=-1,e=n[0].length,r=[];++t<e;)r[t]=0;return r}function di(n){for(var t,e=1,r=0,i=n[0][1],u=n.length;u>e;++e)(t=n[e][1])>i&&(r=e,i=t);return r}function yi(n){return n.reduce(mi,0)}function mi(n,t){return n+t[1]}function Mi(n,t){return xi(n,Math.ceil(Math.log(t.length)/Math.LN2+1))}function xi(n,t){for(var e=-1,r=+n[0],i=(n[1]-r)/t,u=[];++e<=t;)u[e]=i*e+r;return u}function bi(n){return[ao.min(n),ao.max(n)]}function _i(n,t){return n.value-t.value}function wi(n,t){var e=n._pack_next;n._pack_next=t,t._pack_prev=n,t._pack_next=e,e._pack_prev=t}function Si(n,t){n._pack_next=t,t._pack_prev=n}function ki(n,t){var e=t.x-n.x,r=t.y-n.y,i=n.r+t.r;return.999*i*i>e*e+r*r}function Ni(n){function t(n){f=Math.min(n.x-n.r,f),s=Math.max(n.x+n.r,s),h=Math.min(n.y-n.r,h),p=Math.max(n.y+n.r,p)}if((e=n.children)&&(c=e.length)){var e,r,i,u,o,a,l,c,f=1/0,s=-(1/0),h=1/0,p=-(1/0);if(e.forEach(Ei),r=e[0],r.x=-r.r,r.y=0,t(r),c>1&&(i=e[1],i.x=i.r,i.y=0,t(i),c>2))for(u=e[2],zi(r,i,u),t(u),wi(r,u),r._pack_prev=u,wi(u,i),i=r._pack_next,o=3;c>o;o++){zi(r,i,u=e[o]);var g=0,v=1,d=1;for(a=i._pack_next;a!==i;a=a._pack_next,v++)if(ki(a,u)){g=1;break}if(1==g)for(l=r._pack_prev;l!==a._pack_prev&&!ki(l,u);l=l._pack_prev,d++);g?(d>v||v==d&&i.r<r.r?Si(r,i=a):Si(r=l,i),o--):(wi(r,u),i=u,t(u))}var y=(f+s)/2,m=(h+p)/2,M=0;for(o=0;c>o;o++)u=e[o],u.x-=y,u.y-=m,M=Math.max(M,u.r+Math.sqrt(u.x*u.x+u.y*u.y));n.r=M,e.forEach(Ai)}}function Ei(n){n._pack_next=n._pack_prev=n}function Ai(n){delete n._pack_next,delete n._pack_prev}function Ci(n,t,e,r){var i=n.children;if(n.x=t+=r*n.x,n.y=e+=r*n.y,n.r*=r,i)for(var u=-1,o=i.length;++u<o;)Ci(i[u],t,e,r)}function zi(n,t,e){var r=n.r+e.r,i=t.x-n.x,u=t.y-n.y;if(r&&(i||u)){var o=t.r+e.r,a=i*i+u*u;o*=o,r*=r;var l=.5+(r-o)/(2*a),c=Math.sqrt(Math.max(0,2*o*(r+a)-(r-=a)*r-o*o))/(2*a);e.x=n.x+l*i+c*u,e.y=n.y+l*u-c*i}else e.x=n.x+r,e.y=n.y}function Li(n,t){return n.parent==t.parent?1:2}function qi(n){var t=n.children;return t.length?t[0]:n.t}function Ti(n){var t,e=n.children;return(t=e.length)?e[t-1]:n.t}function Ri(n,t,e){var r=e/(t.i-n.i);t.c-=r,t.s+=e,n.c+=r,t.z+=e,t.m+=e}function Di(n){for(var t,e=0,r=0,i=n.children,u=i.length;--u>=0;)t=i[u],t.z+=e,t.m+=e,e+=t.s+(r+=t.c)}function Pi(n,t,e){return n.a.parent===t.parent?n.a:e}function Ui(n){return 1+ao.max(n,function(n){return n.y})}function ji(n){return n.reduce(function(n,t){return n+t.x},0)/n.length}function Fi(n){var t=n.children;return t&&t.length?Fi(t[0]):n}function Hi(n){var t,e=n.children;return e&&(t=e.length)?Hi(e[t-1]):n}function Oi(n){return{x:n.x,y:n.y,dx:n.dx,dy:n.dy}}function Ii(n,t){var e=n.x+t[3],r=n.y+t[0],i=n.dx-t[1]-t[3],u=n.dy-t[0]-t[2];return 0>i&&(e+=i/2,i=0),0>u&&(r+=u/2,u=0),{x:e,y:r,dx:i,dy:u}}function Yi(n){var t=n[0],e=n[n.length-1];return e>t?[t,e]:[e,t]}function Zi(n){return n.rangeExtent?n.rangeExtent():Yi(n.range())}function Vi(n,t,e,r){var i=e(n[0],n[1]),u=r(t[0],t[1]);return function(n){return u(i(n))}}function Xi(n,t){var e,r=0,i=n.length-1,u=n[r],o=n[i];return u>o&&(e=r,r=i,i=e,e=u,u=o,o=e),n[r]=t.floor(u),n[i]=t.ceil(o),n}function $i(n){return n?{floor:function(t){return Math.floor(t/n)*n},ceil:function(t){return Math.ceil(t/n)*n}}:Sl}function Bi(n,t,e,r){var i=[],u=[],o=0,a=Math.min(n.length,t.length)-1;for(n[a]<n[0]&&(n=n.slice().reverse(),t=t.slice().reverse());++o<=a;)i.push(e(n[o-1],n[o])),u.push(r(t[o-1],t[o]));return function(t){var e=ao.bisect(n,t,1,a)-1;return u[e](i[e](t))}}function Wi(n,t,e,r){function i(){var i=Math.min(n.length,t.length)>2?Bi:Vi,l=r?Wr:Br;return o=i(n,t,l,e),a=i(t,n,l,Mr),u}function u(n){return o(n)}var o,a;return u.invert=function(n){return a(n)},u.domain=function(t){return arguments.length?(n=t.map(Number),i()):n},u.range=function(n){return arguments.length?(t=n,i()):t},u.rangeRound=function(n){return u.range(n).interpolate(Ur)},u.clamp=function(n){return arguments.length?(r=n,i()):r},u.interpolate=function(n){return arguments.length?(e=n,i()):e},u.ticks=function(t){return Qi(n,t)},u.tickFormat=function(t,e){return nu(n,t,e)},u.nice=function(t){return Gi(n,t),i()},u.copy=function(){return Wi(n,t,e,r)},i()}function Ji(n,t){return ao.rebind(n,t,"range","rangeRound","interpolate","clamp")}function Gi(n,t){return Xi(n,$i(Ki(n,t)[2])),Xi(n,$i(Ki(n,t)[2])),n}function Ki(n,t){null==t&&(t=10);var e=Yi(n),r=e[1]-e[0],i=Math.pow(10,Math.floor(Math.log(r/t)/Math.LN10)),u=t/r*i;return.15>=u?i*=10:.35>=u?i*=5:.75>=u&&(i*=2),e[0]=Math.ceil(e[0]/i)*i,e[1]=Math.floor(e[1]/i)*i+.5*i,e[2]=i,e}function Qi(n,t){return ao.range.apply(ao,Ki(n,t))}function nu(n,t,e){var r=Ki(n,t);if(e){var i=ha.exec(e);if(i.shift(),"s"===i[8]){var u=ao.formatPrefix(Math.max(xo(r[0]),xo(r[1])));return i[7]||(i[7]="."+tu(u.scale(r[2]))),i[8]="f",e=ao.format(i.join("")),function(n){return e(u.scale(n))+u.symbol}}i[7]||(i[7]="."+eu(i[8],r)),e=i.join("")}else e=",."+tu(r[2])+"f";return ao.format(e)}function tu(n){return-Math.floor(Math.log(n)/Math.LN10+.01)}function eu(n,t){var e=tu(t[2]);return n in kl?Math.abs(e-tu(Math.max(xo(t[0]),xo(t[1]))))+ +("e"!==n):e-2*("%"===n)}function ru(n,t,e,r){function i(n){return(e?Math.log(0>n?0:n):-Math.log(n>0?0:-n))/Math.log(t)}function u(n){return e?Math.pow(t,n):-Math.pow(t,-n)}function o(t){return n(i(t))}return o.invert=function(t){return u(n.invert(t))},o.domain=function(t){return arguments.length?(e=t[0]>=0,n.domain((r=t.map(Number)).map(i)),o):r},o.base=function(e){return arguments.length?(t=+e,n.domain(r.map(i)),o):t},o.nice=function(){var t=Xi(r.map(i),e?Math:El);return n.domain(t),r=t.map(u),o},o.ticks=function(){var n=Yi(r),o=[],a=n[0],l=n[1],c=Math.floor(i(a)),f=Math.ceil(i(l)),s=t%1?2:t;if(isFinite(f-c)){if(e){for(;f>c;c++)for(var h=1;s>h;h++)o.push(u(c)*h);o.push(u(c))}else for(o.push(u(c));c++<f;)for(var h=s-1;h>0;h--)o.push(u(c)*h);for(c=0;o[c]<a;c++);for(f=o.length;o[f-1]>l;f--);o=o.slice(c,f)}return o},o.tickFormat=function(n,e){if(!arguments.length)return Nl;arguments.length<2?e=Nl:"function"!=typeof e&&(e=ao.format(e));var r=Math.max(1,t*n/o.ticks().length);return function(n){var o=n/u(Math.round(i(n)));return t-.5>o*t&&(o*=t),r>=o?e(n):""}},o.copy=function(){return ru(n.copy(),t,e,r)},Ji(o,n)}function iu(n,t,e){function r(t){return n(i(t))}var i=uu(t),u=uu(1/t);return r.invert=function(t){return u(n.invert(t))},r.domain=function(t){return arguments.length?(n.domain((e=t.map(Number)).map(i)),r):e},r.ticks=function(n){return Qi(e,n)},r.tickFormat=function(n,t){return nu(e,n,t)},r.nice=function(n){return r.domain(Gi(e,n))},r.exponent=function(o){return arguments.length?(i=uu(t=o),u=uu(1/t),n.domain(e.map(i)),r):t},r.copy=function(){return iu(n.copy(),t,e)},Ji(r,n)}function uu(n){return function(t){return 0>t?-Math.pow(-t,n):Math.pow(t,n)}}function ou(n,t){function e(e){return u[((i.get(e)||("range"===t.t?i.set(e,n.push(e)):NaN))-1)%u.length]}function r(t,e){return ao.range(n.length).map(function(n){return t+e*n})}var i,u,o;return e.domain=function(r){if(!arguments.length)return n;n=[],i=new c;for(var u,o=-1,a=r.length;++o<a;)i.has(u=r[o])||i.set(u,n.push(u));return e[t.t].apply(e,t.a)},e.range=function(n){return arguments.length?(u=n,o=0,t={t:"range",a:arguments},e):u},e.rangePoints=function(i,a){arguments.length<2&&(a=0);var l=i[0],c=i[1],f=n.length<2?(l=(l+c)/2,0):(c-l)/(n.length-1+a);return u=r(l+f*a/2,f),o=0,t={t:"rangePoints",a:arguments},e},e.rangeRoundPoints=function(i,a){arguments.length<2&&(a=0);var l=i[0],c=i[1],f=n.length<2?(l=c=Math.round((l+c)/2),0):(c-l)/(n.length-1+a)|0;return u=r(l+Math.round(f*a/2+(c-l-(n.length-1+a)*f)/2),f),o=0,t={t:"rangeRoundPoints",a:arguments},e},e.rangeBands=function(i,a,l){arguments.length<2&&(a=0),arguments.length<3&&(l=a);var c=i[1]<i[0],f=i[c-0],s=i[1-c],h=(s-f)/(n.length-a+2*l);return u=r(f+h*l,h),c&&u.reverse(),o=h*(1-a),t={t:"rangeBands",a:arguments},e},e.rangeRoundBands=function(i,a,l){arguments.length<2&&(a=0),arguments.length<3&&(l=a);var c=i[1]<i[0],f=i[c-0],s=i[1-c],h=Math.floor((s-f)/(n.length-a+2*l));return u=r(f+Math.round((s-f-(n.length-a)*h)/2),h),c&&u.reverse(),o=Math.round(h*(1-a)),t={t:"rangeRoundBands",a:arguments},e},e.rangeBand=function(){return o},e.rangeExtent=function(){return Yi(t.a[0])},e.copy=function(){return ou(n,t)},e.domain(n)}function au(n,t){function u(){var e=0,r=t.length;for(a=[];++e<r;)a[e-1]=ao.quantile(n,e/r);return o}function o(n){return isNaN(n=+n)?void 0:t[ao.bisect(a,n)]}var a;return o.domain=function(t){return arguments.length?(n=t.map(r).filter(i).sort(e),u()):n},o.range=function(n){return arguments.length?(t=n,u()):t},o.quantiles=function(){return a},o.invertExtent=function(e){return e=t.indexOf(e),0>e?[NaN,NaN]:[e>0?a[e-1]:n[0],e<a.length?a[e]:n[n.length-1]]},o.copy=function(){return au(n,t)},u()}function lu(n,t,e){function r(t){return e[Math.max(0,Math.min(o,Math.floor(u*(t-n))))]}function i(){return u=e.length/(t-n),o=e.length-1,r}var u,o;return r.domain=function(e){return arguments.length?(n=+e[0],t=+e[e.length-1],i()):[n,t]},r.range=function(n){return arguments.length?(e=n,i()):e},r.invertExtent=function(t){return t=e.indexOf(t),t=0>t?NaN:t/u+n,[t,t+1/u]},r.copy=function(){return lu(n,t,e)},i()}function cu(n,t){function e(e){return e>=e?t[ao.bisect(n,e)]:void 0}return e.domain=function(t){return arguments.length?(n=t,e):n},e.range=function(n){return arguments.length?(t=n,e):t},e.invertExtent=function(e){return e=t.indexOf(e),[n[e-1],n[e]]},e.copy=function(){return cu(n,t)},e}function fu(n){function t(n){return+n}return t.invert=t,t.domain=t.range=function(e){return arguments.length?(n=e.map(t),t):n},t.ticks=function(t){return Qi(n,t)},t.tickFormat=function(t,e){return nu(n,t,e)},t.copy=function(){return fu(n)},t}function su(){return 0}function hu(n){return n.innerRadius}function pu(n){return n.outerRadius}function gu(n){return n.startAngle}function vu(n){return n.endAngle}function du(n){return n&&n.padAngle}function yu(n,t,e,r){return(n-e)*t-(t-r)*n>0?0:1}function mu(n,t,e,r,i){var u=n[0]-t[0],o=n[1]-t[1],a=(i?r:-r)/Math.sqrt(u*u+o*o),l=a*o,c=-a*u,f=n[0]+l,s=n[1]+c,h=t[0]+l,p=t[1]+c,g=(f+h)/2,v=(s+p)/2,d=h-f,y=p-s,m=d*d+y*y,M=e-r,x=f*p-h*s,b=(0>y?-1:1)*Math.sqrt(Math.max(0,M*M*m-x*x)),_=(x*y-d*b)/m,w=(-x*d-y*b)/m,S=(x*y+d*b)/m,k=(-x*d+y*b)/m,N=_-g,E=w-v,A=S-g,C=k-v;return N*N+E*E>A*A+C*C&&(_=S,w=k),[[_-l,w-c],[_*e/M,w*e/M]]}function Mu(n){function t(t){function o(){c.push("M",u(n(f),a))}for(var l,c=[],f=[],s=-1,h=t.length,p=En(e),g=En(r);++s<h;)i.call(this,l=t[s],s)?f.push([+p.call(this,l,s),+g.call(this,l,s)]):f.length&&(o(),f=[]);return f.length&&o(),c.length?c.join(""):null}var e=Ce,r=ze,i=zt,u=xu,o=u.key,a=.7;return t.x=function(n){return arguments.length?(e=n,t):e},t.y=function(n){return arguments.length?(r=n,t):r},t.defined=function(n){return arguments.length?(i=n,t):i},t.interpolate=function(n){return arguments.length?(o="function"==typeof n?u=n:(u=Tl.get(n)||xu).key,t):o},t.tension=function(n){return arguments.length?(a=n,t):a},t}function xu(n){return n.length>1?n.join("L"):n+"Z"}function bu(n){return n.join("L")+"Z"}function _u(n){for(var t=0,e=n.length,r=n[0],i=[r[0],",",r[1]];++t<e;)i.push("H",(r[0]+(r=n[t])[0])/2,"V",r[1]);return e>1&&i.push("H",r[0]),i.join("")}function wu(n){for(var t=0,e=n.length,r=n[0],i=[r[0],",",r[1]];++t<e;)i.push("V",(r=n[t])[1],"H",r[0]);return i.join("")}function Su(n){for(var t=0,e=n.length,r=n[0],i=[r[0],",",r[1]];++t<e;)i.push("H",(r=n[t])[0],"V",r[1]);return i.join("")}function ku(n,t){return n.length<4?xu(n):n[1]+Au(n.slice(1,-1),Cu(n,t))}function Nu(n,t){return n.length<3?bu(n):n[0]+Au((n.push(n[0]),n),Cu([n[n.length-2]].concat(n,[n[1]]),t))}function Eu(n,t){return n.length<3?xu(n):n[0]+Au(n,Cu(n,t))}function Au(n,t){if(t.length<1||n.length!=t.length&&n.length!=t.length+2)return xu(n);var e=n.length!=t.length,r="",i=n[0],u=n[1],o=t[0],a=o,l=1;if(e&&(r+="Q"+(u[0]-2*o[0]/3)+","+(u[1]-2*o[1]/3)+","+u[0]+","+u[1],i=n[1],l=2),t.length>1){a=t[1],u=n[l],l++,r+="C"+(i[0]+o[0])+","+(i[1]+o[1])+","+(u[0]-a[0])+","+(u[1]-a[1])+","+u[0]+","+u[1];for(var c=2;c<t.length;c++,l++)u=n[l],a=t[c],r+="S"+(u[0]-a[0])+","+(u[1]-a[1])+","+u[0]+","+u[1]}if(e){var f=n[l];r+="Q"+(u[0]+2*a[0]/3)+","+(u[1]+2*a[1]/3)+","+f[0]+","+f[1]}return r}function Cu(n,t){for(var e,r=[],i=(1-t)/2,u=n[0],o=n[1],a=1,l=n.length;++a<l;)e=u,u=o,o=n[a],r.push([i*(o[0]-e[0]),i*(o[1]-e[1])]);return r}function zu(n){if(n.length<3)return xu(n);var t=1,e=n.length,r=n[0],i=r[0],u=r[1],o=[i,i,i,(r=n[1])[0]],a=[u,u,u,r[1]],l=[i,",",u,"L",Ru(Pl,o),",",Ru(Pl,a)];for(n.push(n[e-1]);++t<=e;)r=n[t],o.shift(),o.push(r[0]),a.shift(),a.push(r[1]),Du(l,o,a);return n.pop(),l.push("L",r),l.join("")}function Lu(n){if(n.length<4)return xu(n);for(var t,e=[],r=-1,i=n.length,u=[0],o=[0];++r<3;)t=n[r],u.push(t[0]),o.push(t[1]);for(e.push(Ru(Pl,u)+","+Ru(Pl,o)),--r;++r<i;)t=n[r],u.shift(),u.push(t[0]),o.shift(),o.push(t[1]),Du(e,u,o);return e.join("")}function qu(n){for(var t,e,r=-1,i=n.length,u=i+4,o=[],a=[];++r<4;)e=n[r%i],o.push(e[0]),a.push(e[1]);for(t=[Ru(Pl,o),",",Ru(Pl,a)],--r;++r<u;)e=n[r%i],o.shift(),o.push(e[0]),a.shift(),a.push(e[1]),Du(t,o,a);return t.join("")}function Tu(n,t){var e=n.length-1;if(e)for(var r,i,u=n[0][0],o=n[0][1],a=n[e][0]-u,l=n[e][1]-o,c=-1;++c<=e;)r=n[c],i=c/e,r[0]=t*r[0]+(1-t)*(u+i*a),r[1]=t*r[1]+(1-t)*(o+i*l);return zu(n)}function Ru(n,t){return n[0]*t[0]+n[1]*t[1]+n[2]*t[2]+n[3]*t[3]}function Du(n,t,e){n.push("C",Ru(Rl,t),",",Ru(Rl,e),",",Ru(Dl,t),",",Ru(Dl,e),",",Ru(Pl,t),",",Ru(Pl,e))}function Pu(n,t){return(t[1]-n[1])/(t[0]-n[0])}function Uu(n){for(var t=0,e=n.length-1,r=[],i=n[0],u=n[1],o=r[0]=Pu(i,u);++t<e;)r[t]=(o+(o=Pu(i=u,u=n[t+1])))/2;return r[t]=o,r}function ju(n){for(var t,e,r,i,u=[],o=Uu(n),a=-1,l=n.length-1;++a<l;)t=Pu(n[a],n[a+1]),xo(t)<Uo?o[a]=o[a+1]=0:(e=o[a]/t,r=o[a+1]/t,i=e*e+r*r,i>9&&(i=3*t/Math.sqrt(i),o[a]=i*e,o[a+1]=i*r));for(a=-1;++a<=l;)i=(n[Math.min(l,a+1)][0]-n[Math.max(0,a-1)][0])/(6*(1+o[a]*o[a])),u.push([i||0,o[a]*i||0]);return u}function Fu(n){return n.length<3?xu(n):n[0]+Au(n,ju(n))}function Hu(n){for(var t,e,r,i=-1,u=n.length;++i<u;)t=n[i],e=t[0],r=t[1]-Io,t[0]=e*Math.cos(r),t[1]=e*Math.sin(r);return n}function Ou(n){function t(t){function l(){v.push("M",a(n(y),s),f,c(n(d.reverse()),s),"Z")}for(var h,p,g,v=[],d=[],y=[],m=-1,M=t.length,x=En(e),b=En(i),_=e===r?function(){
    3  return p}:En(r),w=i===u?function(){return g}:En(u);++m<M;)o.call(this,h=t[m],m)?(d.push([p=+x.call(this,h,m),g=+b.call(this,h,m)]),y.push([+_.call(this,h,m),+w.call(this,h,m)])):d.length&&(l(),d=[],y=[]);return d.length&&l(),v.length?v.join(""):null}var e=Ce,r=Ce,i=0,u=ze,o=zt,a=xu,l=a.key,c=a,f="L",s=.7;return t.x=function(n){return arguments.length?(e=r=n,t):r},t.x0=function(n){return arguments.length?(e=n,t):e},t.x1=function(n){return arguments.length?(r=n,t):r},t.y=function(n){return arguments.length?(i=u=n,t):u},t.y0=function(n){return arguments.length?(i=n,t):i},t.y1=function(n){return arguments.length?(u=n,t):u},t.defined=function(n){return arguments.length?(o=n,t):o},t.interpolate=function(n){return arguments.length?(l="function"==typeof n?a=n:(a=Tl.get(n)||xu).key,c=a.reverse||a,f=a.closed?"M":"L",t):l},t.tension=function(n){return arguments.length?(s=n,t):s},t}function Iu(n){return n.radius}function Yu(n){return[n.x,n.y]}function Zu(n){return function(){var t=n.apply(this,arguments),e=t[0],r=t[1]-Io;return[e*Math.cos(r),e*Math.sin(r)]}}function Vu(){return 64}function Xu(){return"circle"}function $u(n){var t=Math.sqrt(n/Fo);return"M0,"+t+"A"+t+","+t+" 0 1,1 0,"+-t+"A"+t+","+t+" 0 1,1 0,"+t+"Z"}function Bu(n){return function(){var t,e,r;(t=this[n])&&(r=t[e=t.active])&&(r.timer.c=null,r.timer.t=NaN,--t.count?delete t[e]:delete this[n],t.active+=.5,r.event&&r.event.interrupt.call(this,this.__data__,r.index))}}function Wu(n,t,e){return ko(n,Yl),n.namespace=t,n.id=e,n}function Ju(n,t,e,r){var i=n.id,u=n.namespace;return Y(n,"function"==typeof e?function(n,o,a){n[u][i].tween.set(t,r(e.call(n,n.__data__,o,a)))}:(e=r(e),function(n){n[u][i].tween.set(t,e)}))}function Gu(n){return null==n&&(n=""),function(){this.textContent=n}}function Ku(n){return null==n?"__transition__":"__transition_"+n+"__"}function Qu(n,t,e,r,i){function u(n){var t=v.delay;return f.t=t+l,n>=t?o(n-t):void(f.c=o)}function o(e){var i=g.active,u=g[i];u&&(u.timer.c=null,u.timer.t=NaN,--g.count,delete g[i],u.event&&u.event.interrupt.call(n,n.__data__,u.index));for(var o in g)if(r>+o){var c=g[o];c.timer.c=null,c.timer.t=NaN,--g.count,delete g[o]}f.c=a,qn(function(){return f.c&&a(e||1)&&(f.c=null,f.t=NaN),1},0,l),g.active=r,v.event&&v.event.start.call(n,n.__data__,t),p=[],v.tween.forEach(function(e,r){(r=r.call(n,n.__data__,t))&&p.push(r)}),h=v.ease,s=v.duration}function a(i){for(var u=i/s,o=h(u),a=p.length;a>0;)p[--a].call(n,o);return u>=1?(v.event&&v.event.end.call(n,n.__data__,t),--g.count?delete g[r]:delete n[e],1):void 0}var l,f,s,h,p,g=n[e]||(n[e]={active:0,count:0}),v=g[r];v||(l=i.time,f=qn(u,0,l),v=g[r]={tween:new c,time:l,timer:f,delay:i.delay,duration:i.duration,ease:i.ease,index:t},i=null,++g.count)}function no(n,t,e){n.attr("transform",function(n){var r=t(n);return"translate("+(isFinite(r)?r:e(n))+",0)"})}function to(n,t,e){n.attr("transform",function(n){var r=t(n);return"translate(0,"+(isFinite(r)?r:e(n))+")"})}function eo(n){return n.toISOString()}function ro(n,t,e){function r(t){return n(t)}function i(n,e){var r=n[1]-n[0],i=r/e,u=ao.bisect(Kl,i);return u==Kl.length?[t.year,Ki(n.map(function(n){return n/31536e6}),e)[2]]:u?t[i/Kl[u-1]<Kl[u]/i?u-1:u]:[tc,Ki(n,e)[2]]}return r.invert=function(t){return io(n.invert(t))},r.domain=function(t){return arguments.length?(n.domain(t),r):n.domain().map(io)},r.nice=function(n,t){function e(e){return!isNaN(e)&&!n.range(e,io(+e+1),t).length}var u=r.domain(),o=Yi(u),a=null==n?i(o,10):"number"==typeof n&&i(o,n);return a&&(n=a[0],t=a[1]),r.domain(Xi(u,t>1?{floor:function(t){for(;e(t=n.floor(t));)t=io(t-1);return t},ceil:function(t){for(;e(t=n.ceil(t));)t=io(+t+1);return t}}:n))},r.ticks=function(n,t){var e=Yi(r.domain()),u=null==n?i(e,10):"number"==typeof n?i(e,n):!n.range&&[{range:n},t];return u&&(n=u[0],t=u[1]),n.range(e[0],io(+e[1]+1),1>t?1:t)},r.tickFormat=function(){return e},r.copy=function(){return ro(n.copy(),t,e)},Ji(r,n)}function io(n){return new Date(n)}function uo(n){return JSON.parse(n.responseText)}function oo(n){var t=fo.createRange();return t.selectNode(fo.body),t.createContextualFragment(n.responseText)}var ao={version:"3.5.17"},lo=[].slice,co=function(n){return lo.call(n)},fo=this.document;if(fo)try{co(fo.documentElement.childNodes)[0].nodeType}catch(so){co=function(n){for(var t=n.length,e=new Array(t);t--;)e[t]=n[t];return e}}if(Date.now||(Date.now=function(){return+new Date}),fo)try{fo.createElement("DIV").style.setProperty("opacity",0,"")}catch(ho){var po=this.Element.prototype,go=po.setAttribute,vo=po.setAttributeNS,yo=this.CSSStyleDeclaration.prototype,mo=yo.setProperty;po.setAttribute=function(n,t){go.call(this,n,t+"")},po.setAttributeNS=function(n,t,e){vo.call(this,n,t,e+"")},yo.setProperty=function(n,t,e){mo.call(this,n,t+"",e)}}ao.ascending=e,ao.descending=function(n,t){return n>t?-1:t>n?1:t>=n?0:NaN},ao.min=function(n,t){var e,r,i=-1,u=n.length;if(1===arguments.length){for(;++i<u;)if(null!=(r=n[i])&&r>=r){e=r;break}for(;++i<u;)null!=(r=n[i])&&e>r&&(e=r)}else{for(;++i<u;)if(null!=(r=t.call(n,n[i],i))&&r>=r){e=r;break}for(;++i<u;)null!=(r=t.call(n,n[i],i))&&e>r&&(e=r)}return e},ao.max=function(n,t){var e,r,i=-1,u=n.length;if(1===arguments.length){for(;++i<u;)if(null!=(r=n[i])&&r>=r){e=r;break}for(;++i<u;)null!=(r=n[i])&&r>e&&(e=r)}else{for(;++i<u;)if(null!=(r=t.call(n,n[i],i))&&r>=r){e=r;break}for(;++i<u;)null!=(r=t.call(n,n[i],i))&&r>e&&(e=r)}return e},ao.extent=function(n,t){var e,r,i,u=-1,o=n.length;if(1===arguments.length){for(;++u<o;)if(null!=(r=n[u])&&r>=r){e=i=r;break}for(;++u<o;)null!=(r=n[u])&&(e>r&&(e=r),r>i&&(i=r))}else{for(;++u<o;)if(null!=(r=t.call(n,n[u],u))&&r>=r){e=i=r;break}for(;++u<o;)null!=(r=t.call(n,n[u],u))&&(e>r&&(e=r),r>i&&(i=r))}return[e,i]},ao.sum=function(n,t){var e,r=0,u=n.length,o=-1;if(1===arguments.length)for(;++o<u;)i(e=+n[o])&&(r+=e);else for(;++o<u;)i(e=+t.call(n,n[o],o))&&(r+=e);return r},ao.mean=function(n,t){var e,u=0,o=n.length,a=-1,l=o;if(1===arguments.length)for(;++a<o;)i(e=r(n[a]))?u+=e:--l;else for(;++a<o;)i(e=r(t.call(n,n[a],a)))?u+=e:--l;return l?u/l:void 0},ao.quantile=function(n,t){var e=(n.length-1)*t+1,r=Math.floor(e),i=+n[r-1],u=e-r;return u?i+u*(n[r]-i):i},ao.median=function(n,t){var u,o=[],a=n.length,l=-1;if(1===arguments.length)for(;++l<a;)i(u=r(n[l]))&&o.push(u);else for(;++l<a;)i(u=r(t.call(n,n[l],l)))&&o.push(u);return o.length?ao.quantile(o.sort(e),.5):void 0},ao.variance=function(n,t){var e,u,o=n.length,a=0,l=0,c=-1,f=0;if(1===arguments.length)for(;++c<o;)i(e=r(n[c]))&&(u=e-a,a+=u/++f,l+=u*(e-a));else for(;++c<o;)i(e=r(t.call(n,n[c],c)))&&(u=e-a,a+=u/++f,l+=u*(e-a));return f>1?l/(f-1):void 0},ao.deviation=function(){var n=ao.variance.apply(this,arguments);return n?Math.sqrt(n):n};var Mo=u(e);ao.bisectLeft=Mo.left,ao.bisect=ao.bisectRight=Mo.right,ao.bisector=function(n){return u(1===n.length?function(t,r){return e(n(t),r)}:n)},ao.shuffle=function(n,t,e){(u=arguments.length)<3&&(e=n.length,2>u&&(t=0));for(var r,i,u=e-t;u;)i=Math.random()*u--|0,r=n[u+t],n[u+t]=n[i+t],n[i+t]=r;return n},ao.permute=function(n,t){for(var e=t.length,r=new Array(e);e--;)r[e]=n[t[e]];return r},ao.pairs=function(n){for(var t,e=0,r=n.length-1,i=n[0],u=new Array(0>r?0:r);r>e;)u[e]=[t=i,i=n[++e]];return u},ao.transpose=function(n){if(!(i=n.length))return[];for(var t=-1,e=ao.min(n,o),r=new Array(e);++t<e;)for(var i,u=-1,a=r[t]=new Array(i);++u<i;)a[u]=n[u][t];return r},ao.zip=function(){return ao.transpose(arguments)},ao.keys=function(n){var t=[];for(var e in n)t.push(e);return t},ao.values=function(n){var t=[];for(var e in n)t.push(n[e]);return t},ao.entries=function(n){var t=[];for(var e in n)t.push({key:e,value:n[e]});return t},ao.merge=function(n){for(var t,e,r,i=n.length,u=-1,o=0;++u<i;)o+=n[u].length;for(e=new Array(o);--i>=0;)for(r=n[i],t=r.length;--t>=0;)e[--o]=r[t];return e};var xo=Math.abs;ao.range=function(n,t,e){if(arguments.length<3&&(e=1,arguments.length<2&&(t=n,n=0)),(t-n)/e===1/0)throw new Error("infinite range");var r,i=[],u=a(xo(e)),o=-1;if(n*=u,t*=u,e*=u,0>e)for(;(r=n+e*++o)>t;)i.push(r/u);else for(;(r=n+e*++o)<t;)i.push(r/u);return i},ao.map=function(n,t){var e=new c;if(n instanceof c)n.forEach(function(n,t){e.set(n,t)});else if(Array.isArray(n)){var r,i=-1,u=n.length;if(1===arguments.length)for(;++i<u;)e.set(i,n[i]);else for(;++i<u;)e.set(t.call(n,r=n[i],i),r)}else for(var o in n)e.set(o,n[o]);return e};var bo="__proto__",_o="\x00";l(c,{has:h,get:function(n){return this._[f(n)]},set:function(n,t){return this._[f(n)]=t},remove:p,keys:g,values:function(){var n=[];for(var t in this._)n.push(this._[t]);return n},entries:function(){var n=[];for(var t in this._)n.push({key:s(t),value:this._[t]});return n},size:v,empty:d,forEach:function(n){for(var t in this._)n.call(this,s(t),this._[t])}}),ao.nest=function(){function n(t,o,a){if(a>=u.length)return r?r.call(i,o):e?o.sort(e):o;for(var l,f,s,h,p=-1,g=o.length,v=u[a++],d=new c;++p<g;)(h=d.get(l=v(f=o[p])))?h.push(f):d.set(l,[f]);return t?(f=t(),s=function(e,r){f.set(e,n(t,r,a))}):(f={},s=function(e,r){f[e]=n(t,r,a)}),d.forEach(s),f}function t(n,e){if(e>=u.length)return n;var r=[],i=o[e++];return n.forEach(function(n,i){r.push({key:n,values:t(i,e)})}),i?r.sort(function(n,t){return i(n.key,t.key)}):r}var e,r,i={},u=[],o=[];return i.map=function(t,e){return n(e,t,0)},i.entries=function(e){return t(n(ao.map,e,0),0)},i.key=function(n){return u.push(n),i},i.sortKeys=function(n){return o[u.length-1]=n,i},i.sortValues=function(n){return e=n,i},i.rollup=function(n){return r=n,i},i},ao.set=function(n){var t=new y;if(n)for(var e=0,r=n.length;r>e;++e)t.add(n[e]);return t},l(y,{has:h,add:function(n){return this._[f(n+="")]=!0,n},remove:p,values:g,size:v,empty:d,forEach:function(n){for(var t in this._)n.call(this,s(t))}}),ao.behavior={},ao.rebind=function(n,t){for(var e,r=1,i=arguments.length;++r<i;)n[e=arguments[r]]=M(n,t,t[e]);return n};var wo=["webkit","ms","moz","Moz","o","O"];ao.dispatch=function(){for(var n=new _,t=-1,e=arguments.length;++t<e;)n[arguments[t]]=w(n);return n},_.prototype.on=function(n,t){var e=n.indexOf("."),r="";if(e>=0&&(r=n.slice(e+1),n=n.slice(0,e)),n)return arguments.length<2?this[n].on(r):this[n].on(r,t);if(2===arguments.length){if(null==t)for(n in this)this.hasOwnProperty(n)&&this[n].on(r,null);return this}},ao.event=null,ao.requote=function(n){return n.replace(So,"\\$&")};var So=/[\\\^\$\*\+\?\|\[\]\(\)\.\{\}]/g,ko={}.__proto__?function(n,t){n.__proto__=t}:function(n,t){for(var e in t)n[e]=t[e]},No=function(n,t){return t.querySelector(n)},Eo=function(n,t){return t.querySelectorAll(n)},Ao=function(n,t){var e=n.matches||n[x(n,"matchesSelector")];return(Ao=function(n,t){return e.call(n,t)})(n,t)};"function"==typeof Sizzle&&(No=function(n,t){return Sizzle(n,t)[0]||null},Eo=Sizzle,Ao=Sizzle.matchesSelector),ao.selection=function(){return ao.select(fo.documentElement)};var Co=ao.selection.prototype=[];Co.select=function(n){var t,e,r,i,u=[];n=A(n);for(var o=-1,a=this.length;++o<a;){u.push(t=[]),t.parentNode=(r=this[o]).parentNode;for(var l=-1,c=r.length;++l<c;)(i=r[l])?(t.push(e=n.call(i,i.__data__,l,o)),e&&"__data__"in i&&(e.__data__=i.__data__)):t.push(null)}return E(u)},Co.selectAll=function(n){var t,e,r=[];n=C(n);for(var i=-1,u=this.length;++i<u;)for(var o=this[i],a=-1,l=o.length;++a<l;)(e=o[a])&&(r.push(t=co(n.call(e,e.__data__,a,i))),t.parentNode=e);return E(r)};var zo="http://www.w3.org/1999/xhtml",Lo={svg:"http://www.w3.org/2000/svg",xhtml:zo,xlink:"http://www.w3.org/1999/xlink",xml:"http://www.w3.org/XML/1998/namespace",xmlns:"http://www.w3.org/2000/xmlns/"};ao.ns={prefix:Lo,qualify:function(n){var t=n.indexOf(":"),e=n;return t>=0&&"xmlns"!==(e=n.slice(0,t))&&(n=n.slice(t+1)),Lo.hasOwnProperty(e)?{space:Lo[e],local:n}:n}},Co.attr=function(n,t){if(arguments.length<2){if("string"==typeof n){var e=this.node();return n=ao.ns.qualify(n),n.local?e.getAttributeNS(n.space,n.local):e.getAttribute(n)}for(t in n)this.each(z(t,n[t]));return this}return this.each(z(n,t))},Co.classed=function(n,t){if(arguments.length<2){if("string"==typeof n){var e=this.node(),r=(n=T(n)).length,i=-1;if(t=e.classList){for(;++i<r;)if(!t.contains(n[i]))return!1}else for(t=e.getAttribute("class");++i<r;)if(!q(n[i]).test(t))return!1;return!0}for(t in n)this.each(R(t,n[t]));return this}return this.each(R(n,t))},Co.style=function(n,e,r){var i=arguments.length;if(3>i){if("string"!=typeof n){2>i&&(e="");for(r in n)this.each(P(r,n[r],e));return this}if(2>i){var u=this.node();return t(u).getComputedStyle(u,null).getPropertyValue(n)}r=""}return this.each(P(n,e,r))},Co.property=function(n,t){if(arguments.length<2){if("string"==typeof n)return this.node()[n];for(t in n)this.each(U(t,n[t]));return this}return this.each(U(n,t))},Co.text=function(n){return arguments.length?this.each("function"==typeof n?function(){var t=n.apply(this,arguments);this.textContent=null==t?"":t}:null==n?function(){this.textContent=""}:function(){this.textContent=n}):this.node().textContent},Co.html=function(n){return arguments.length?this.each("function"==typeof n?function(){var t=n.apply(this,arguments);this.innerHTML=null==t?"":t}:null==n?function(){this.innerHTML=""}:function(){this.innerHTML=n}):this.node().innerHTML},Co.append=function(n){return n=j(n),this.select(function(){return this.appendChild(n.apply(this,arguments))})},Co.insert=function(n,t){return n=j(n),t=A(t),this.select(function(){return this.insertBefore(n.apply(this,arguments),t.apply(this,arguments)||null)})},Co.remove=function(){return this.each(F)},Co.data=function(n,t){function e(n,e){var r,i,u,o=n.length,s=e.length,h=Math.min(o,s),p=new Array(s),g=new Array(s),v=new Array(o);if(t){var d,y=new c,m=new Array(o);for(r=-1;++r<o;)(i=n[r])&&(y.has(d=t.call(i,i.__data__,r))?v[r]=i:y.set(d,i),m[r]=d);for(r=-1;++r<s;)(i=y.get(d=t.call(e,u=e[r],r)))?i!==!0&&(p[r]=i,i.__data__=u):g[r]=H(u),y.set(d,!0);for(r=-1;++r<o;)r in m&&y.get(m[r])!==!0&&(v[r]=n[r])}else{for(r=-1;++r<h;)i=n[r],u=e[r],i?(i.__data__=u,p[r]=i):g[r]=H(u);for(;s>r;++r)g[r]=H(e[r]);for(;o>r;++r)v[r]=n[r]}g.update=p,g.parentNode=p.parentNode=v.parentNode=n.parentNode,a.push(g),l.push(p),f.push(v)}var r,i,u=-1,o=this.length;if(!arguments.length){for(n=new Array(o=(r=this[0]).length);++u<o;)(i=r[u])&&(n[u]=i.__data__);return n}var a=Z([]),l=E([]),f=E([]);if("function"==typeof n)for(;++u<o;)e(r=this[u],n.call(r,r.parentNode.__data__,u));else for(;++u<o;)e(r=this[u],n);return l.enter=function(){return a},l.exit=function(){return f},l},Co.datum=function(n){return arguments.length?this.property("__data__",n):this.property("__data__")},Co.filter=function(n){var t,e,r,i=[];"function"!=typeof n&&(n=O(n));for(var u=0,o=this.length;o>u;u++){i.push(t=[]),t.parentNode=(e=this[u]).parentNode;for(var a=0,l=e.length;l>a;a++)(r=e[a])&&n.call(r,r.__data__,a,u)&&t.push(r)}return E(i)},Co.order=function(){for(var n=-1,t=this.length;++n<t;)for(var e,r=this[n],i=r.length-1,u=r[i];--i>=0;)(e=r[i])&&(u&&u!==e.nextSibling&&u.parentNode.insertBefore(e,u),u=e);return this},Co.sort=function(n){n=I.apply(this,arguments);for(var t=-1,e=this.length;++t<e;)this[t].sort(n);return this.order()},Co.each=function(n){return Y(this,function(t,e,r){n.call(t,t.__data__,e,r)})},Co.call=function(n){var t=co(arguments);return n.apply(t[0]=this,t),this},Co.empty=function(){return!this.node()},Co.node=function(){for(var n=0,t=this.length;t>n;n++)for(var e=this[n],r=0,i=e.length;i>r;r++){var u=e[r];if(u)return u}return null},Co.size=function(){var n=0;return Y(this,function(){++n}),n};var qo=[];ao.selection.enter=Z,ao.selection.enter.prototype=qo,qo.append=Co.append,qo.empty=Co.empty,qo.node=Co.node,qo.call=Co.call,qo.size=Co.size,qo.select=function(n){for(var t,e,r,i,u,o=[],a=-1,l=this.length;++a<l;){r=(i=this[a]).update,o.push(t=[]),t.parentNode=i.parentNode;for(var c=-1,f=i.length;++c<f;)(u=i[c])?(t.push(r[c]=e=n.call(i.parentNode,u.__data__,c,a)),e.__data__=u.__data__):t.push(null)}return E(o)},qo.insert=function(n,t){return arguments.length<2&&(t=V(this)),Co.insert.call(this,n,t)},ao.select=function(t){var e;return"string"==typeof t?(e=[No(t,fo)],e.parentNode=fo.documentElement):(e=[t],e.parentNode=n(t)),E([e])},ao.selectAll=function(n){var t;return"string"==typeof n?(t=co(Eo(n,fo)),t.parentNode=fo.documentElement):(t=co(n),t.parentNode=null),E([t])},Co.on=function(n,t,e){var r=arguments.length;if(3>r){if("string"!=typeof n){2>r&&(t=!1);for(e in n)this.each(X(e,n[e],t));return this}if(2>r)return(r=this.node()["__on"+n])&&r._;e=!1}return this.each(X(n,t,e))};var To=ao.map({mouseenter:"mouseover",mouseleave:"mouseout"});fo&&To.forEach(function(n){"on"+n in fo&&To.remove(n)});var Ro,Do=0;ao.mouse=function(n){return J(n,k())};var Po=this.navigator&&/WebKit/.test(this.navigator.userAgent)?-1:0;ao.touch=function(n,t,e){if(arguments.length<3&&(e=t,t=k().changedTouches),t)for(var r,i=0,u=t.length;u>i;++i)if((r=t[i]).identifier===e)return J(n,r)},ao.behavior.drag=function(){function n(){this.on("mousedown.drag",u).on("touchstart.drag",o)}function e(n,t,e,u,o){return function(){function a(){var n,e,r=t(h,v);r&&(n=r[0]-M[0],e=r[1]-M[1],g|=n|e,M=r,p({type:"drag",x:r[0]+c[0],y:r[1]+c[1],dx:n,dy:e}))}function l(){t(h,v)&&(y.on(u+d,null).on(o+d,null),m(g),p({type:"dragend"}))}var c,f=this,s=ao.event.target.correspondingElement||ao.event.target,h=f.parentNode,p=r.of(f,arguments),g=0,v=n(),d=".drag"+(null==v?"":"-"+v),y=ao.select(e(s)).on(u+d,a).on(o+d,l),m=W(s),M=t(h,v);i?(c=i.apply(f,arguments),c=[c.x-M[0],c.y-M[1]]):c=[0,0],p({type:"dragstart"})}}var r=N(n,"drag","dragstart","dragend"),i=null,u=e(b,ao.mouse,t,"mousemove","mouseup"),o=e(G,ao.touch,m,"touchmove","touchend");return n.origin=function(t){return arguments.length?(i=t,n):i},ao.rebind(n,r,"on")},ao.touches=function(n,t){return arguments.length<2&&(t=k().touches),t?co(t).map(function(t){var e=J(n,t);return e.identifier=t.identifier,e}):[]};var Uo=1e-6,jo=Uo*Uo,Fo=Math.PI,Ho=2*Fo,Oo=Ho-Uo,Io=Fo/2,Yo=Fo/180,Zo=180/Fo,Vo=Math.SQRT2,Xo=2,$o=4;ao.interpolateZoom=function(n,t){var e,r,i=n[0],u=n[1],o=n[2],a=t[0],l=t[1],c=t[2],f=a-i,s=l-u,h=f*f+s*s;if(jo>h)r=Math.log(c/o)/Vo,e=function(n){return[i+n*f,u+n*s,o*Math.exp(Vo*n*r)]};else{var p=Math.sqrt(h),g=(c*c-o*o+$o*h)/(2*o*Xo*p),v=(c*c-o*o-$o*h)/(2*c*Xo*p),d=Math.log(Math.sqrt(g*g+1)-g),y=Math.log(Math.sqrt(v*v+1)-v);r=(y-d)/Vo,e=function(n){var t=n*r,e=rn(d),a=o/(Xo*p)*(e*un(Vo*t+d)-en(d));return[i+a*f,u+a*s,o*e/rn(Vo*t+d)]}}return e.duration=1e3*r,e},ao.behavior.zoom=function(){function n(n){n.on(L,s).on(Wo+".zoom",p).on("dblclick.zoom",g).on(R,h)}function e(n){return[(n[0]-k.x)/k.k,(n[1]-k.y)/k.k]}function r(n){return[n[0]*k.k+k.x,n[1]*k.k+k.y]}function i(n){k.k=Math.max(A[0],Math.min(A[1],n))}function u(n,t){t=r(t),k.x+=n[0]-t[0],k.y+=n[1]-t[1]}function o(t,e,r,o){t.__chart__={x:k.x,y:k.y,k:k.k},i(Math.pow(2,o)),u(d=e,r),t=ao.select(t),C>0&&(t=t.transition().duration(C)),t.call(n.event)}function a(){b&&b.domain(x.range().map(function(n){return(n-k.x)/k.k}).map(x.invert)),w&&w.domain(_.range().map(function(n){return(n-k.y)/k.k}).map(_.invert))}function l(n){z++||n({type:"zoomstart"})}function c(n){a(),n({type:"zoom",scale:k.k,translate:[k.x,k.y]})}function f(n){--z||(n({type:"zoomend"}),d=null)}function s(){function n(){a=1,u(ao.mouse(i),h),c(o)}function r(){s.on(q,null).on(T,null),p(a),f(o)}var i=this,o=D.of(i,arguments),a=0,s=ao.select(t(i)).on(q,n).on(T,r),h=e(ao.mouse(i)),p=W(i);Il.call(i),l(o)}function h(){function n(){var n=ao.touches(g);return p=k.k,n.forEach(function(n){n.identifier in d&&(d[n.identifier]=e(n))}),n}function t(){var t=ao.event.target;ao.select(t).on(x,r).on(b,a),_.push(t);for(var e=ao.event.changedTouches,i=0,u=e.length;u>i;++i)d[e[i].identifier]=null;var l=n(),c=Date.now();if(1===l.length){if(500>c-M){var f=l[0];o(g,f,d[f.identifier],Math.floor(Math.log(k.k)/Math.LN2)+1),S()}M=c}else if(l.length>1){var f=l[0],s=l[1],h=f[0]-s[0],p=f[1]-s[1];y=h*h+p*p}}function r(){var n,t,e,r,o=ao.touches(g);Il.call(g);for(var a=0,l=o.length;l>a;++a,r=null)if(e=o[a],r=d[e.identifier]){if(t)break;n=e,t=r}if(r){var f=(f=e[0]-n[0])*f+(f=e[1]-n[1])*f,s=y&&Math.sqrt(f/y);n=[(n[0]+e[0])/2,(n[1]+e[1])/2],t=[(t[0]+r[0])/2,(t[1]+r[1])/2],i(s*p)}M=null,u(n,t),c(v)}function a(){if(ao.event.touches.length){for(var t=ao.event.changedTouches,e=0,r=t.length;r>e;++e)delete d[t[e].identifier];for(var i in d)return void n()}ao.selectAll(_).on(m,null),w.on(L,s).on(R,h),N(),f(v)}var p,g=this,v=D.of(g,arguments),d={},y=0,m=".zoom-"+ao.event.changedTouches[0].identifier,x="touchmove"+m,b="touchend"+m,_=[],w=ao.select(g),N=W(g);t(),l(v),w.on(L,null).on(R,t)}function p(){var n=D.of(this,arguments);m?clearTimeout(m):(Il.call(this),v=e(d=y||ao.mouse(this)),l(n)),m=setTimeout(function(){m=null,f(n)},50),S(),i(Math.pow(2,.002*Bo())*k.k),u(d,v),c(n)}function g(){var n=ao.mouse(this),t=Math.log(k.k)/Math.LN2;o(this,n,e(n),ao.event.shiftKey?Math.ceil(t)-1:Math.floor(t)+1)}var v,d,y,m,M,x,b,_,w,k={x:0,y:0,k:1},E=[960,500],A=Jo,C=250,z=0,L="mousedown.zoom",q="mousemove.zoom",T="mouseup.zoom",R="touchstart.zoom",D=N(n,"zoomstart","zoom","zoomend");return Wo||(Wo="onwheel"in fo?(Bo=function(){return-ao.event.deltaY*(ao.event.deltaMode?120:1)},"wheel"):"onmousewheel"in fo?(Bo=function(){return ao.event.wheelDelta},"mousewheel"):(Bo=function(){return-ao.event.detail},"MozMousePixelScroll")),n.event=function(n){n.each(function(){var n=D.of(this,arguments),t=k;Hl?ao.select(this).transition().each("start.zoom",function(){k=this.__chart__||{x:0,y:0,k:1},l(n)}).tween("zoom:zoom",function(){var e=E[0],r=E[1],i=d?d[0]:e/2,u=d?d[1]:r/2,o=ao.interpolateZoom([(i-k.x)/k.k,(u-k.y)/k.k,e/k.k],[(i-t.x)/t.k,(u-t.y)/t.k,e/t.k]);return function(t){var r=o(t),a=e/r[2];this.__chart__=k={x:i-r[0]*a,y:u-r[1]*a,k:a},c(n)}}).each("interrupt.zoom",function(){f(n)}).each("end.zoom",function(){f(n)}):(this.__chart__=k,l(n),c(n),f(n))})},n.translate=function(t){return arguments.length?(k={x:+t[0],y:+t[1],k:k.k},a(),n):[k.x,k.y]},n.scale=function(t){return arguments.length?(k={x:k.x,y:k.y,k:null},i(+t),a(),n):k.k},n.scaleExtent=function(t){return arguments.length?(A=null==t?Jo:[+t[0],+t[1]],n):A},n.center=function(t){return arguments.length?(y=t&&[+t[0],+t[1]],n):y},n.size=function(t){return arguments.length?(E=t&&[+t[0],+t[1]],n):E},n.duration=function(t){return arguments.length?(C=+t,n):C},n.x=function(t){return arguments.length?(b=t,x=t.copy(),k={x:0,y:0,k:1},n):b},n.y=function(t){return arguments.length?(w=t,_=t.copy(),k={x:0,y:0,k:1},n):w},ao.rebind(n,D,"on")};var Bo,Wo,Jo=[0,1/0];ao.color=an,an.prototype.toString=function(){return this.rgb()+""},ao.hsl=ln;var Go=ln.prototype=new an;Go.brighter=function(n){return n=Math.pow(.7,arguments.length?n:1),new ln(this.h,this.s,this.l/n)},Go.darker=function(n){return n=Math.pow(.7,arguments.length?n:1),new ln(this.h,this.s,n*this.l)},Go.rgb=function(){return cn(this.h,this.s,this.l)},ao.hcl=fn;var Ko=fn.prototype=new an;Ko.brighter=function(n){return new fn(this.h,this.c,Math.min(100,this.l+Qo*(arguments.length?n:1)))},Ko.darker=function(n){return new fn(this.h,this.c,Math.max(0,this.l-Qo*(arguments.length?n:1)))},Ko.rgb=function(){return sn(this.h,this.c,this.l).rgb()},ao.lab=hn;var Qo=18,na=.95047,ta=1,ea=1.08883,ra=hn.prototype=new an;ra.brighter=function(n){return new hn(Math.min(100,this.l+Qo*(arguments.length?n:1)),this.a,this.b)},ra.darker=function(n){return new hn(Math.max(0,this.l-Qo*(arguments.length?n:1)),this.a,this.b)},ra.rgb=function(){return pn(this.l,this.a,this.b)},ao.rgb=mn;var ia=mn.prototype=new an;ia.brighter=function(n){n=Math.pow(.7,arguments.length?n:1);var t=this.r,e=this.g,r=this.b,i=30;return t||e||r?(t&&i>t&&(t=i),e&&i>e&&(e=i),r&&i>r&&(r=i),new mn(Math.min(255,t/n),Math.min(255,e/n),Math.min(255,r/n))):new mn(i,i,i)},ia.darker=function(n){return n=Math.pow(.7,arguments.length?n:1),new mn(n*this.r,n*this.g,n*this.b)},ia.hsl=function(){return wn(this.r,this.g,this.b)},ia.toString=function(){return"#"+bn(this.r)+bn(this.g)+bn(this.b)};var ua=ao.map({aliceblue:15792383,antiquewhite:16444375,aqua:65535,aquamarine:8388564,azure:15794175,beige:16119260,bisque:16770244,black:0,blanchedalmond:16772045,blue:255,blueviolet:9055202,brown:10824234,burlywood:14596231,cadetblue:6266528,chartreuse:8388352,chocolate:13789470,coral:16744272,cornflowerblue:6591981,cornsilk:16775388,crimson:14423100,cyan:65535,darkblue:139,darkcyan:35723,darkgoldenrod:12092939,darkgray:11119017,darkgreen:25600,darkgrey:11119017,darkkhaki:12433259,darkmagenta:9109643,darkolivegreen:5597999,darkorange:16747520,darkorchid:10040012,darkred:9109504,darksalmon:15308410,darkseagreen:9419919,darkslateblue:4734347,darkslategray:3100495,darkslategrey:3100495,darkturquoise:52945,darkviolet:9699539,deeppink:16716947,deepskyblue:49151,dimgray:6908265,dimgrey:6908265,dodgerblue:2003199,firebrick:11674146,floralwhite:16775920,forestgreen:2263842,fuchsia:16711935,gainsboro:14474460,ghostwhite:16316671,gold:16766720,goldenrod:14329120,gray:8421504,green:32768,greenyellow:11403055,grey:8421504,honeydew:15794160,hotpink:16738740,indianred:13458524,indigo:4915330,ivory:16777200,khaki:15787660,lavender:15132410,lavenderblush:16773365,lawngreen:8190976,lemonchiffon:16775885,lightblue:11393254,lightcoral:15761536,lightcyan:14745599,lightgoldenrodyellow:16448210,lightgray:13882323,lightgreen:9498256,lightgrey:13882323,lightpink:16758465,lightsalmon:16752762,lightseagreen:2142890,lightskyblue:8900346,lightslategray:7833753,lightslategrey:7833753,lightsteelblue:11584734,lightyellow:16777184,lime:65280,limegreen:3329330,linen:16445670,magenta:16711935,maroon:8388608,mediumaquamarine:6737322,mediumblue:205,mediumorchid:12211667,mediumpurple:9662683,mediumseagreen:3978097,mediumslateblue:8087790,mediumspringgreen:64154,mediumturquoise:4772300,mediumvioletred:13047173,midnightblue:1644912,mintcream:16121850,mistyrose:16770273,moccasin:16770229,navajowhite:16768685,navy:128,oldlace:16643558,olive:8421376,olivedrab:7048739,orange:16753920,orangered:16729344,orchid:14315734,palegoldenrod:15657130,palegreen:10025880,paleturquoise:11529966,palevioletred:14381203,papayawhip:16773077,peachpuff:16767673,peru:13468991,pink:16761035,plum:14524637,powderblue:11591910,purple:8388736,rebeccapurple:6697881,red:16711680,rosybrown:12357519,royalblue:4286945,saddlebrown:9127187,salmon:16416882,sandybrown:16032864,seagreen:3050327,seashell:16774638,sienna:10506797,silver:12632256,skyblue:8900331,slateblue:6970061,slategray:7372944,slategrey:7372944,snow:16775930,springgreen:65407,steelblue:4620980,tan:13808780,teal:32896,thistle:14204888,tomato:16737095,turquoise:4251856,violet:15631086,wheat:16113331,white:16777215,whitesmoke:16119285,yellow:16776960,yellowgreen:10145074});ua.forEach(function(n,t){ua.set(n,Mn(t))}),ao.functor=En,ao.xhr=An(m),ao.dsv=function(n,t){function e(n,e,u){arguments.length<3&&(u=e,e=null);var o=Cn(n,t,null==e?r:i(e),u);return o.row=function(n){return arguments.length?o.response(null==(e=n)?r:i(n)):e},o}function r(n){return e.parse(n.responseText)}function i(n){return function(t){return e.parse(t.responseText,n)}}function u(t){return t.map(o).join(n)}function o(n){return a.test(n)?'"'+n.replace(/\"/g,'""')+'"':n}var a=new RegExp('["'+n+"\n]"),l=n.charCodeAt(0);return e.parse=function(n,t){var r;return e.parseRows(n,function(n,e){if(r)return r(n,e-1);var i=new Function("d","return {"+n.map(function(n,t){return JSON.stringify(n)+": d["+t+"]"}).join(",")+"}");r=t?function(n,e){return t(i(n),e)}:i})},e.parseRows=function(n,t){function e(){if(f>=c)return o;if(i)return i=!1,u;var t=f;if(34===n.charCodeAt(t)){for(var e=t;e++<c;)if(34===n.charCodeAt(e)){if(34!==n.charCodeAt(e+1))break;++e}f=e+2;var r=n.charCodeAt(e+1);return 13===r?(i=!0,10===n.charCodeAt(e+2)&&++f):10===r&&(i=!0),n.slice(t+1,e).replace(/""/g,'"')}for(;c>f;){var r=n.charCodeAt(f++),a=1;if(10===r)i=!0;else if(13===r)i=!0,10===n.charCodeAt(f)&&(++f,++a);else if(r!==l)continue;return n.slice(t,f-a)}return n.slice(t)}for(var r,i,u={},o={},a=[],c=n.length,f=0,s=0;(r=e())!==o;){for(var h=[];r!==u&&r!==o;)h.push(r),r=e();t&&null==(h=t(h,s++))||a.push(h)}return a},e.format=function(t){if(Array.isArray(t[0]))return e.formatRows(t);var r=new y,i=[];return t.forEach(function(n){for(var t in n)r.has(t)||i.push(r.add(t))}),[i.map(o).join(n)].concat(t.map(function(t){return i.map(function(n){return o(t[n])}).join(n)})).join("\n")},e.formatRows=function(n){return n.map(u).join("\n")},e},ao.csv=ao.dsv(",","text/csv"),ao.tsv=ao.dsv("	","text/tab-separated-values");var oa,aa,la,ca,fa=this[x(this,"requestAnimationFrame")]||function(n){setTimeout(n,17)};ao.timer=function(){qn.apply(this,arguments)},ao.timer.flush=function(){Rn(),Dn()},ao.round=function(n,t){return t?Math.round(n*(t=Math.pow(10,t)))/t:Math.round(n)};var sa=["y","z","a","f","p","n","\xb5","m","","k","M","G","T","P","E","Z","Y"].map(Un);ao.formatPrefix=function(n,t){var e=0;return(n=+n)&&(0>n&&(n*=-1),t&&(n=ao.round(n,Pn(n,t))),e=1+Math.floor(1e-12+Math.log(n)/Math.LN10),e=Math.max(-24,Math.min(24,3*Math.floor((e-1)/3)))),sa[8+e/3]};var ha=/(?:([^{])?([<>=^]))?([+\- ])?([$#])?(0)?(\d+)?(,)?(\.-?\d+)?([a-z%])?/i,pa=ao.map({b:function(n){return n.toString(2)},c:function(n){return String.fromCharCode(n)},o:function(n){return n.toString(8)},x:function(n){return n.toString(16)},X:function(n){return n.toString(16).toUpperCase()},g:function(n,t){return n.toPrecision(t)},e:function(n,t){return n.toExponential(t)},f:function(n,t){return n.toFixed(t)},r:function(n,t){return(n=ao.round(n,Pn(n,t))).toFixed(Math.max(0,Math.min(20,Pn(n*(1+1e-15),t))))}}),ga=ao.time={},va=Date;Hn.prototype={getDate:function(){return this._.getUTCDate()},getDay:function(){return this._.getUTCDay()},getFullYear:function(){return this._.getUTCFullYear()},getHours:function(){return this._.getUTCHours()},getMilliseconds:function(){return this._.getUTCMilliseconds()},getMinutes:function(){return this._.getUTCMinutes()},getMonth:function(){return this._.getUTCMonth()},getSeconds:function(){return this._.getUTCSeconds()},getTime:function(){return this._.getTime()},getTimezoneOffset:function(){return 0},valueOf:function(){return this._.valueOf()},setDate:function(){da.setUTCDate.apply(this._,arguments)},setDay:function(){da.setUTCDay.apply(this._,arguments)},setFullYear:function(){da.setUTCFullYear.apply(this._,arguments)},setHours:function(){da.setUTCHours.apply(this._,arguments)},setMilliseconds:function(){da.setUTCMilliseconds.apply(this._,arguments)},setMinutes:function(){da.setUTCMinutes.apply(this._,arguments)},setMonth:function(){da.setUTCMonth.apply(this._,arguments)},setSeconds:function(){da.setUTCSeconds.apply(this._,arguments)},setTime:function(){da.setTime.apply(this._,arguments)}};var da=Date.prototype;ga.year=On(function(n){return n=ga.day(n),n.setMonth(0,1),n},function(n,t){n.setFullYear(n.getFullYear()+t)},function(n){return n.getFullYear()}),ga.years=ga.year.range,ga.years.utc=ga.year.utc.range,ga.day=On(function(n){var t=new va(2e3,0);return t.setFullYear(n.getFullYear(),n.getMonth(),n.getDate()),t},function(n,t){n.setDate(n.getDate()+t)},function(n){return n.getDate()-1}),ga.days=ga.day.range,ga.days.utc=ga.day.utc.range,ga.dayOfYear=function(n){var t=ga.year(n);return Math.floor((n-t-6e4*(n.getTimezoneOffset()-t.getTimezoneOffset()))/864e5)},["sunday","monday","tuesday","wednesday","thursday","friday","saturday"].forEach(function(n,t){t=7-t;var e=ga[n]=On(function(n){return(n=ga.day(n)).setDate(n.getDate()-(n.getDay()+t)%7),n},function(n,t){n.setDate(n.getDate()+7*Math.floor(t))},function(n){var e=ga.year(n).getDay();return Math.floor((ga.dayOfYear(n)+(e+t)%7)/7)-(e!==t)});ga[n+"s"]=e.range,ga[n+"s"].utc=e.utc.range,ga[n+"OfYear"]=function(n){var e=ga.year(n).getDay();return Math.floor((ga.dayOfYear(n)+(e+t)%7)/7)}}),ga.week=ga.sunday,ga.weeks=ga.sunday.range,ga.weeks.utc=ga.sunday.utc.range,ga.weekOfYear=ga.sundayOfYear;var ya={"-":"",_:" ",0:"0"},ma=/^\s*\d+/,Ma=/^%/;ao.locale=function(n){return{numberFormat:jn(n),timeFormat:Yn(n)}};var xa=ao.locale({decimal:".",thousands:",",grouping:[3],currency:["$",""],dateTime:"%a %b %e %X %Y",date:"%m/%d/%Y",time:"%H:%M:%S",periods:["AM","PM"],days:["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],

/home/genis/Proyectos/ProyectoXat/vendor/phpunit/php-code-coverage/src/Report/Html/Renderer/Template/js/holder.min.js:
   10  
   11  */
   12: !function(a){if(a.document){var b=a.document;b.querySelectorAll||(b.querySelectorAll=function(c){var d,e=b.createElement("style"),f=[];for(b.documentElement.firstChild.appendChild(e),b._qsa=[],e.styleSheet.cssText=c+"{x-qsa:expression(document._qsa && document._qsa.push(this))}",a.scrollBy(0,0),e.parentNode.removeChild(e);b._qsa.length;)d=b._qsa.shift(),d.style.removeAttribute("x-qsa"),f.push(d);return b._qsa=null,f}),b.querySelector||(b.querySelector=function(a){var c=b.querySelectorAll(a);return c.length?c[0]:null}),b.getElementsByClassName||(b.getElementsByClassName=function(a){return a=String(a).replace(/^|\s+/g,"."),b.querySelectorAll(a)}),Object.keys||(Object.keys=function(a){if(a!==Object(a))throw TypeError("Object.keys called on non-object");var b,c=[];for(b in a)Object.prototype.hasOwnProperty.call(a,b)&&c.push(b);return c}),function(a){var b="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=";a.atob=a.atob||function(a){a=String(a);var c,d=0,e=[],f=0,g=0;if(a=a.replace(/\s/g,""),a.length%4===0&&(a=a.replace(/=+$/,"")),a.length%4===1)throw Error("InvalidCharacterError");if(/[^+/0-9A-Za-z]/.test(a))throw Error("InvalidCharacterError");for(;d<a.length;)c=b.indexOf(a.charAt(d)),f=f<<6|c,g+=6,24===g&&(e.push(String.fromCharCode(f>>16&255)),e.push(String.fromCharCode(f>>8&255)),e.push(String.fromCharCode(255&f)),g=0,f=0),d+=1;return 12===g?(f>>=4,e.push(String.fromCharCode(255&f))):18===g&&(f>>=2,e.push(String.fromCharCode(f>>8&255)),e.push(String.fromCharCode(255&f))),e.join("")},a.btoa=a.btoa||function(a){a=String(a);var c,d,e,f,g,h,i,j=0,k=[];if(/[^\x00-\xFF]/.test(a))throw Error("InvalidCharacterError");for(;j<a.length;)c=a.charCodeAt(j++),d=a.charCodeAt(j++),e=a.charCodeAt(j++),f=c>>2,g=(3&c)<<4|d>>4,h=(15&d)<<2|e>>6,i=63&e,j===a.length+2?(h=64,i=64):j===a.length+1&&(i=64),k.push(b.charAt(f),b.charAt(g),b.charAt(h),b.charAt(i));return k.join("")}}(a),Object.prototype.hasOwnProperty||(Object.prototype.hasOwnProperty=function(a){var b=this.__proto__||this.constructor.prototype;return a in this&&(!(a in b)||b[a]!==this[a])}),function(){if("performance"in a==!1&&(a.performance={}),Date.now=Date.now||function(){return(new Date).getTime()},"now"in a.performance==!1){var b=Date.now();performance.timing&&performance.timing.navigationStart&&(b=performance.timing.navigationStart),a.performance.now=function(){return Date.now()-b}}}(),a.requestAnimationFrame||(a.webkitRequestAnimationFrame?!function(a){a.requestAnimationFrame=function(b){return webkitRequestAnimationFrame(function(){b(a.performance.now())})},a.cancelAnimationFrame=webkitCancelAnimationFrame}(a):a.mozRequestAnimationFrame?!function(a){a.requestAnimationFrame=function(b){return mozRequestAnimationFrame(function(){b(a.performance.now())})},a.cancelAnimationFrame=mozCancelAnimationFrame}(a):!function(a){a.requestAnimationFrame=function(b){return a.setTimeout(b,1e3/60)},a.cancelAnimationFrame=a.clearTimeout}(a))}}(this),function(a,b){"object"==typeof exports&&"object"==typeof module?module.exports=b():"function"==typeof define&&define.amd?define(b):"object"==typeof exports?exports.Holder=b():a.Holder=b()}(this,function(){return function(a){function b(d){if(c[d])return c[d].exports;var e=c[d]={exports:{},id:d,loaded:!1};return a[d].call(e.exports,e,e.exports,b),e.loaded=!0,e.exports}var c={};return b.m=a,b.c=c,b.p="",b(0)}([function(a,b,c){(function(b){function d(a,b,c,d){var f=e(c.substr(c.lastIndexOf(a.domain)),a);f&&h({mode:null,el:d,flags:f,engineSettings:b})}function e(a,b){var c={theme:B(J.settings.themes.gray,null),stylesheets:b.stylesheets,instanceOptions:b};return a.match(/([\d]+p?)x([\d]+p?)(?:\?|$)/)?f(a,c):g(a,c)}function f(a,b){var c=a.split("?"),d=c[0].split("/");b.holderURL=a;var e=d[1],f=e.match(/([\d]+p?)x([\d]+p?)/);if(!f)return!1;if(b.fluid=-1!==e.indexOf("p"),b.dimensions={width:f[1].replace("p","%"),height:f[2].replace("p","%")},2===c.length){var g=A.parse(c[1]);if(g.bg&&(b.theme.background=(-1===g.bg.indexOf("#")?"#":"")+g.bg),g.fg&&(b.theme.foreground=(-1===g.fg.indexOf("#")?"#":"")+g.fg),g.theme&&b.instanceOptions.themes.hasOwnProperty(g.theme)&&(b.theme=B(b.instanceOptions.themes[g.theme],null)),g.text&&(b.text=g.text),g.textmode&&(b.textmode=g.textmode),g.size&&(b.size=g.size),g.font&&(b.font=g.font),g.align&&(b.align=g.align),b.nowrap=z.truthy(g.nowrap),b.auto=z.truthy(g.auto),z.truthy(g.random)){J.vars.cache.themeKeys=J.vars.cache.themeKeys||Object.keys(b.instanceOptions.themes);var h=J.vars.cache.themeKeys[0|Math.random()*J.vars.cache.themeKeys.length];b.theme=B(b.instanceOptions.themes[h],null)}}return b}function g(a,b){var c=!1,d=String.fromCharCode(11),e=a.replace(/([^\\])\//g,"$1"+d).split(d),f=/%[0-9a-f]{2}/gi,g=b.instanceOptions;b.holderURL=[];for(var h=e.length,i=0;h>i;i++){var j=e[i];if(j.match(f))try{j=decodeURIComponent(j)}catch(k){j=e[i]}var l=!1;if(J.flags.dimensions.match(j))c=!0,b.dimensions=J.flags.dimensions.output(j),l=!0;else if(J.flags.fluid.match(j))c=!0,b.dimensions=J.flags.fluid.output(j),b.fluid=!0,l=!0;else if(J.flags.textmode.match(j))b.textmode=J.flags.textmode.output(j),l=!0;else if(J.flags.colors.match(j)){var m=J.flags.colors.output(j);b.theme=B(b.theme,m),l=!0}else if(g.themes[j])g.themes.hasOwnProperty(j)&&(b.theme=B(g.themes[j],null)),l=!0;else if(J.flags.font.match(j))b.font=J.flags.font.output(j),l=!0;else if(J.flags.auto.match(j))b.auto=!0,l=!0;else if(J.flags.text.match(j))b.text=J.flags.text.output(j),l=!0;else if(J.flags.size.match(j))b.size=J.flags.size.output(j),l=!0;else if(J.flags.random.match(j)){null==J.vars.cache.themeKeys&&(J.vars.cache.themeKeys=Object.keys(g.themes));var n=J.vars.cache.themeKeys[0|Math.random()*J.vars.cache.themeKeys.length];b.theme=B(g.themes[n],null),l=!0}l&&b.holderURL.push(j)}return b.holderURL.unshift(g.domain),b.holderURL=b.holderURL.join("/"),c?b:!1}function h(a){var b=a.mode,c=a.el,d=a.flags,e=a.engineSettings,f=d.dimensions,g=d.theme,h=f.width+"x"+f.height;if(b=null==b?d.fluid?"fluid":"image":b,null!=d.text&&(g.text=d.text,"object"===c.nodeName.toLowerCase())){for(var j=g.text.split("\\n"),k=0;k<j.length;k++)j[k]=z.encodeHtmlEntity(j[k]);g.text=j.join("\\n")}var n=d.holderURL,o=B(e,null);if(d.font&&(g.font=d.font,!o.noFontFallback&&"img"===c.nodeName.toLowerCase()&&J.setup.supportsCanvas&&"svg"===o.renderer&&(o=B(o,{renderer:"canvas"}))),d.font&&"canvas"==o.renderer&&(o.reRender=!0),"background"==b)null==c.getAttribute("data-background-src")&&r(c,{"data-background-src":n});else{var p={};p[J.vars.dataAttr]=n,r(c,p)}d.theme=g,c.holderData={flags:d,engineSettings:o},("image"==b||"fluid"==b)&&r(c,{alt:g.text?g.text+" ["+h+"]":h});var q={mode:b,el:c,holderSettings:{dimensions:f,theme:g,flags:d},engineSettings:o};"image"==b?("html"!=o.renderer&&d.auto||(c.style.width=f.width+"px",c.style.height=f.height+"px"),"html"==o.renderer?c.style.backgroundColor=g.background:(i(q),"exact"==d.textmode&&(c.holderData.resizeUpdate=!0,J.vars.resizableImages.push(c),l(c)))):"background"==b&&"html"!=o.renderer?i(q):"fluid"==b&&(c.holderData.resizeUpdate=!0,"%"==f.height.slice(-1)?c.style.height=f.height:null!=d.auto&&d.auto||(c.style.height=f.height+"px"),"%"==f.width.slice(-1)?c.style.width=f.width:null!=d.auto&&d.auto||(c.style.width=f.width+"px"),("inline"==c.style.display||""===c.style.display||"none"==c.style.display)&&(c.style.display="block"),m(c),"html"==o.renderer?c.style.backgroundColor=g.background:(J.vars.resizableImages.push(c),l(c)))}function i(a){function c(){var b=null;switch(h.renderer){case"canvas":b=L(k,a);break;case"svg":b=M(k,a);break;default:throw"Holder: invalid renderer: "+h.renderer}return b}var d=null,e=a.mode,f=a.holderSettings,g=a.el,h=a.engineSettings;switch(h.renderer){case"svg":if(!J.setup.supportsSVG)return;break;case"canvas":if(!J.setup.supportsCanvas)return;break;default:return}var i={width:f.dimensions.width,height:f.dimensions.height,theme:f.theme,flags:f.flags},k=j(i);if(d=c(),null==d)throw"Holder: couldn't render placeholder";"background"==e?(g.style.backgroundImage="url("+d+")",g.style.backgroundSize=i.width+"px "+i.height+"px"):("img"===g.nodeName.toLowerCase()?r(g,{src:d}):"object"===g.nodeName.toLowerCase()&&(r(g,{data:d}),r(g,{type:"image/svg+xml"})),h.reRender&&b.setTimeout(function(){var a=c();if(null==a)throw"Holder: couldn't render placeholder";"img"===g.nodeName.toLowerCase()?r(g,{src:a}):"object"===g.nodeName.toLowerCase()&&(r(g,{data:a}),r(g,{type:"image/svg+xml"}))},100)),r(g,{"data-holder-rendered":!0})}function j(a){function b(a,b,c,d){b.width=c,b.height=d,a.width=Math.max(a.width,b.width),a.height+=b.height}var c=J.defaults.size;switch(parseFloat(a.theme.size)?c=a.theme.size:parseFloat(a.flags.size)&&(c=a.flags.size),a.font={family:a.theme.font?a.theme.font:"Arial, Helvetica, Open Sans, sans-serif",size:k(a.width,a.height,c),units:a.theme.units?a.theme.units:J.defaults.units,weight:a.theme.fontweight?a.theme.fontweight:"bold"},a.text=a.theme.text||Math.floor(a.width)+"x"+Math.floor(a.height),a.noWrap=a.theme.nowrap||a.flags.nowrap,a.align=a.theme.align||a.flags.align||"center",a.flags.textmode){case"literal":a.text=a.flags.dimensions.width+"x"+a.flags.dimensions.height;break;case"exact":if(!a.flags.exactDimensions)break;a.text=Math.floor(a.flags.exactDimensions.width)+"x"+Math.floor(a.flags.exactDimensions.height)}var d=new y({width:a.width,height:a.height}),e=d.Shape,f=new e.Rect("holderBg",{fill:a.theme.background});f.resize(a.width,a.height),d.root.add(f);var g=new e.Group("holderTextGroup",{text:a.text,align:a.align,font:a.font,fill:a.theme.foreground});g.moveTo(null,null,1),d.root.add(g);var h=g.textPositionData=K(d);if(!h)throw"Holder: staging fallback not supported yet.";g.properties.leading=h.boundingBox.height;var i=null,j=null,l=a.width*J.setup.lineWrapRatio,m=l;if(h.lineCount>1){var n,o=0,p=0,q=0;j=new e.Group("line"+q),("left"===a.align||"right"===a.align)&&(m=a.width*(1-2*(1-J.setup.lineWrapRatio)));for(var r=0;r<h.words.length;r++){var s=h.words[r];i=new e.Text(s.text);var t="\\n"==s.text;!a.noWrap&&(o+s.width>=m||t===!0)&&(b(g,j,o,g.properties.leading),g.add(j),o=0,p+=g.properties.leading,q+=1,j=new e.Group("line"+q),j.y=p),t!==!0&&(i.moveTo(o,0),o+=h.spaceWidth+s.width,j.add(i))}if(b(g,j,o,g.properties.leading),g.add(j),"left"===a.align)g.moveTo(a.width-l,null,null);else if("right"===a.align){for(n in g.children)j=g.children[n],j.moveTo(a.width-j.width,null,null);g.moveTo(0-(a.width-l),null,null)}else{for(n in g.children)j=g.children[n],j.moveTo((g.width-j.width)/2,null,null);g.moveTo((a.width-g.width)/2,null,null)}g.moveTo(null,(a.height-g.height)/2,null),(a.height-g.height)/2<0&&g.moveTo(null,0,null)}else i=new e.Text(a.text),j=new e.Group("line0"),j.add(i),g.add(j),"left"===a.align?g.moveTo(a.width-l,null,null):"right"===a.align?g.moveTo(0-(a.width-l),null,null):g.moveTo((a.width-h.boundingBox.width)/2,null,null),g.moveTo(null,(a.height-h.boundingBox.height)/2,null);return d}function k(a,b,c){var d=parseInt(a,10),e=parseInt(b,10),f=Math.max(d,e),g=Math.min(d,e),h=.8*Math.min(g,f*J.defaults.scale);return Math.round(Math.max(c,h))}function l(a){var b;b=null==a||null==a.nodeType?J.vars.resizableImages:[a];for(var c=0,d=b.length;d>c;c++){var e=b[c];if(e.holderData){var f=e.holderData.flags,g=D(e);if(g){if(!e.holderData.resizeUpdate)continue;if(f.fluid&&f.auto){var h=e.holderData.fluidConfig;switch(h.mode){case"width":g.height=g.width/h.ratio;break;case"height":g.width=g.height*h.ratio}}var j={mode:"image",holderSettings:{dimensions:g,theme:f.theme,flags:f},el:e,engineSettings:e.holderData.engineSettings};"exact"==f.textmode&&(f.exactDimensions=g,j.holderSettings.dimensions=f.dimensions),i(j)}else p(e)}}}function m(a){if(a.holderData){var b=D(a);if(b){var c=a.holderData.flags,d={fluidHeight:"%"==c.dimensions.height.slice(-1),fluidWidth:"%"==c.dimensions.width.slice(-1),mode:null,initialDimensions:b};d.fluidWidth&&!d.fluidHeight?(d.mode="width",d.ratio=d.initialDimensions.width/parseFloat(c.dimensions.height)):!d.fluidWidth&&d.fluidHeight&&(d.mode="height",d.ratio=parseFloat(c.dimensions.width)/d.initialDimensions.height),a.holderData.fluidConfig=d}else p(a)}}function n(){for(var a,c=[],d=Object.keys(J.vars.invisibleImages),e=0,f=d.length;f>e;e++)a=J.vars.invisibleImages[d[e]],D(a)&&"img"==a.nodeName.toLowerCase()&&(c.push(a),delete J.vars.invisibleImages[d[e]]);c.length&&I.run({images:c}),b.requestAnimationFrame(n)}function o(){J.vars.visibilityCheckStarted||(b.requestAnimationFrame(n),J.vars.visibilityCheckStarted=!0)}function p(a){a.holderData.invisibleId||(J.vars.invisibleId+=1,J.vars.invisibleImages["i"+J.vars.invisibleId]=a,a.holderData.invisibleId=J.vars.invisibleId)}function q(a,b){return null==b?document.createElement(a):document.createElementNS(b,a)}function r(a,b){for(var c in b)a.setAttribute(c,b[c])}function s(a,b,c){var d,e;null==a?(a=q("svg",E),d=q("defs",E),e=q("style",E),r(e,{type:"text/css"}),d.appendChild(e),a.appendChild(d)):e=a.querySelector("style"),a.webkitMatchesSelector&&a.setAttribute("xmlns",E);for(var f=0;f<a.childNodes.length;f++)a.childNodes[f].nodeType===F&&a.removeChild(a.childNodes[f]);for(;e.childNodes.length;)e.removeChild(e.childNodes[0]);return r(a,{width:b,height:c,viewBox:"0 0 "+b+" "+c,preserveAspectRatio:"none"}),a}function t(a,c){if(b.XMLSerializer){var d=new XMLSerializer,e="",f=c.stylesheets;if(c.svgXMLStylesheet){for(var g=u(),h=f.length-1;h>=0;h--){var i=g.createProcessingInstruction("xml-stylesheet",'href="'+f[h]+'" rel="stylesheet"');g.insertBefore(i,g.firstChild)}g.removeChild(g.documentElement),e=d.serializeToString(g)}var j=d.serializeToString(a);return j=j.replace(/\&amp;(\#[0-9]{2,}\;)/g,"&$1"),e+j}}function u(){return b.DOMParser?(new DOMParser).parseFromString("<xml />","application/xml"):void 0}function v(a){J.vars.debounceTimer||a.call(this),J.vars.debounceTimer&&b.clearTimeout(J.vars.debounceTimer),J.vars.debounceTimer=b.setTimeout(function(){J.vars.debounceTimer=null,a.call(this)},J.setup.debounce)}function w(){v(function(){l(null)})}var x=c(1),y=c(2),z=c(3),A=c(4),B=z.extend,C=z.getNodeArray,D=z.dimensionCheck,E="http://www.w3.org/2000/svg",F=8,G="2.7.1",H="\nCreated with Holder.js "+G+".\nLearn more at http://holderjs.com\n(c) 2012-2015 Ivan Malopinsky - http://imsky.co\n",I={version:G,addTheme:function(a,b){return null!=a&&null!=b&&(J.settings.themes[a]=b),delete J.vars.cache.themeKeys,this},addImage:function(a,b){var c=document.querySelectorAll(b);if(c.length)for(var d=0,e=c.length;e>d;d++){var f=q("img"),g={};g[J.vars.dataAttr]=a,r(f,g),c[d].appendChild(f)}return this},setResizeUpdate:function(a,b){a.holderData&&(a.holderData.resizeUpdate=!!b,a.holderData.resizeUpdate&&l(a))},run:function(a){a=a||{};var c={},f=B(J.settings,a);J.vars.preempted=!0,J.vars.dataAttr=f.dataAttr||J.vars.dataAttr,c.renderer=f.renderer?f.renderer:J.setup.renderer,-1===J.setup.renderers.join(",").indexOf(c.renderer)&&(c.renderer=J.setup.supportsSVG?"svg":J.setup.supportsCanvas?"canvas":"html");var g=C(f.images),i=C(f.bgnodes),j=C(f.stylenodes),k=C(f.objects);c.stylesheets=[],c.svgXMLStylesheet=!0,c.noFontFallback=f.noFontFallback?f.noFontFallback:!1;for(var l=0;l<j.length;l++){var m=j[l];if(m.attributes.rel&&m.attributes.href&&"stylesheet"==m.attributes.rel.value){var n=m.attributes.href.value,o=q("a");o.href=n;var p=o.protocol+"//"+o.host+o.pathname+o.search;c.stylesheets.push(p)}}for(l=0;l<i.length;l++)if(b.getComputedStyle){var r=b.getComputedStyle(i[l],null).getPropertyValue("background-image"),s=i[l].getAttribute("data-background-src"),t=null;t=null==s?r:s;var u=null,v="?"+f.domain+"/";if(0===t.indexOf(v))u=t.slice(1);else if(-1!=t.indexOf(v)){var w=t.substr(t.indexOf(v)).slice(1),x=w.match(/([^\"]*)"?\)/);null!=x&&(u=x[1])}if(null!=u){var y=e(u,f);y&&h({mode:"background",el:i[l],flags:y,engineSettings:c})}}for(l=0;l<k.length;l++){var A=k[l],D={};try{D.data=A.getAttribute("data"),D.dataSrc=A.getAttribute(J.vars.dataAttr)}catch(E){}var F=null!=D.data&&0===D.data.indexOf(f.domain),G=null!=D.dataSrc&&0===D.dataSrc.indexOf(f.domain);F?d(f,c,D.data,A):G&&d(f,c,D.dataSrc,A)}for(l=0;l<g.length;l++){var H=g[l],I={};try{I.src=H.getAttribute("src"),I.dataSrc=H.getAttribute(J.vars.dataAttr),I.rendered=H.getAttribute("data-holder-rendered")}catch(E){}var K=null!=I.src,L=null!=I.dataSrc&&0===I.dataSrc.indexOf(f.domain),M=null!=I.rendered&&"true"==I.rendered;K?0===I.src.indexOf(f.domain)?d(f,c,I.src,H):L&&(M?d(f,c,I.dataSrc,H):!function(a,b,c,e,f){z.imageExists(a,function(a){a||d(b,c,e,f)})}(I.src,f,c,I.dataSrc,H)):L&&d(f,c,I.dataSrc,H)}return this}},J={settings:{domain:"holder.js",images:"img",objects:"object",bgnodes:"body .holderjs",stylenodes:"head link.holderjs",stylesheets:[],themes:{gray:{background:"#EEEEEE",foreground:"#AAAAAA"},social:{background:"#3a5a97",foreground:"#FFFFFF"},industrial:{background:"#434A52",foreground:"#C2F200"},sky:{background:"#0D8FDB",foreground:"#FFFFFF"},vine:{background:"#39DBAC",foreground:"#1E292C"},lava:{background:"#F8591A",foreground:"#1C2846"}}},defaults:{size:10,units:"pt",scale:1/16},flags:{dimensions:{regex:/^(\d+)x(\d+)$/,output:function(a){var b=this.regex.exec(a);return{width:+b[1],height:+b[2]}}},fluid:{regex:/^([0-9]+%?)x([0-9]+%?)$/,output:function(a){var b=this.regex.exec(a);return{width:b[1],height:b[2]}}},colors:{regex:/(?:#|\^)([0-9a-f]{3,})\:(?:#|\^)([0-9a-f]{3,})/i,output:function(a){var b=this.regex.exec(a);return{foreground:"#"+b[2],background:"#"+b[1]}}},text:{regex:/text\:(.*)/,output:function(a){return this.regex.exec(a)[1].replace("\\/","/")}},font:{regex:/font\:(.*)/,output:function(a){return this.regex.exec(a)[1]}},auto:{regex:/^auto$/},textmode:{regex:/textmode\:(.*)/,output:function(a){return this.regex.exec(a)[1]}},random:{regex:/^random$/},size:{regex:/size\:(\d+)/,output:function(a){return this.regex.exec(a)[1]}}}},K=function(){var a=null,b=null,c=null;return function(d){var e=d.root;if(J.setup.supportsSVG){var f=!1,g=function(a){return document.createTextNode(a)};(null==a||a.parentNode!==document.body)&&(f=!0),a=s(a,e.properties.width,e.properties.height),a.style.display="block",f&&(b=q("text",E),c=g(null),r(b,{x:0}),b.appendChild(c),a.appendChild(b),document.body.appendChild(a),a.style.visibility="hidden",a.style.position="absolute",a.style.top="-100%",a.style.left="-100%");var h=e.children.holderTextGroup,i=h.properties;r(b,{y:i.font.size,style:z.cssProps({"font-weight":i.font.weight,"font-size":i.font.size+i.font.units,"font-family":i.font.family})}),c.nodeValue=i.text;var j=b.getBBox(),k=Math.ceil(j.width/(e.properties.width*J.setup.lineWrapRatio)),l=i.text.split(" "),m=i.text.match(/\\n/g);k+=null==m?0:m.length,c.nodeValue=i.text.replace(/[ ]+/g,"");var n=b.getComputedTextLength(),o=j.width-n,p=Math.round(o/Math.max(1,l.length-1)),t=[];if(k>1){c.nodeValue="";for(var u=0;u<l.length;u++)if(0!==l[u].length){c.nodeValue=z.decodeHtmlEntity(l[u]);var v=b.getBBox();t.push({text:l[u],width:v.width})}}return a.style.display="none",{spaceWidth:p,lineCount:k,boundingBox:j,words:t}}return!1}}(),L=function(){var a=q("canvas"),b=null;return function(c){null==b&&(b=a.getContext("2d"));var d=c.root;a.width=J.dpr(d.properties.width),a.height=J.dpr(d.properties.height),b.textBaseline="middle",b.fillStyle=d.children.holderBg.properties.fill,b.fillRect(0,0,J.dpr(d.children.holderBg.width),J.dpr(d.children.holderBg.height));{var e=d.children.holderTextGroup;e.properties}b.font=e.properties.font.weight+" "+J.dpr(e.properties.font.size)+e.properties.font.units+" "+e.properties.font.family+", monospace",b.fillStyle=e.properties.fill;for(var f in e.children){var g=e.children[f];for(var h in g.children){var i=g.children[h],j=J.dpr(e.x+g.x+i.x),k=J.dpr(e.y+g.y+i.y+e.properties.leading/2);b.fillText(i.properties.text,j,k)}}return a.toDataURL("image/png")}}(),M=function(){if(b.XMLSerializer){var a=u(),c=s(null,0,0),d=q("rect",E);return c.appendChild(d),function(b,e){var f=b.root;s(c,f.properties.width,f.properties.height);for(var g=c.querySelectorAll("g"),h=0;h<g.length;h++)g[h].parentNode.removeChild(g[h]);var i=e.holderSettings.flags.holderURL,j="holder_"+(Number(new Date)+32768+(0|32768*Math.random())).toString(16),k=q("g",E),l=f.children.holderTextGroup,m=l.properties,n=q("g",E),o=l.textPositionData,p="#"+j+" text { "+z.cssProps({fill:m.fill,"font-weight":m.font.weight,"font-family":m.font.family+", monospace","font-size":m.font.size+m.font.units})+" } ",u=a.createComment("\nSource URL: "+i+H),v=a.createCDATASection(p),w=c.querySelector("style");r(k,{id:j}),c.insertBefore(u,c.firstChild),w.appendChild(v),k.appendChild(d),k.appendChild(n),c.appendChild(k),r(d,{width:f.children.holderBg.width,height:f.children.holderBg.height,fill:f.children.holderBg.properties.fill}),l.y+=.8*o.boundingBox.height;for(var x in l.children){var y=l.children[x];for(var A in y.children){var B=y.children[A],C=l.x+y.x+B.x,D=l.y+y.y+B.y,F=q("text",E),G=document.createTextNode(null);r(F,{x:C,y:D}),G.nodeValue=B.properties.text,F.appendChild(G),n.appendChild(F)}}var I=N(t(c,e.engineSettings),"background"===e.mode);return I}}}(),N=function(){var a="data:image/svg+xml;charset=UTF-8,",b="data:image/svg+xml;charset=UTF-8;base64,";return function(c,d){return d?b+btoa(unescape(encodeURIComponent(c))):a+encodeURIComponent(c)}}();for(var O in J.flags)J.flags.hasOwnProperty(O)&&(J.flags[O].match=function(a){return a.match(this.regex)});J.setup={renderer:"html",debounce:100,ratio:1,supportsCanvas:!1,supportsSVG:!1,lineWrapRatio:.9,renderers:["html","canvas","svg"]},J.dpr=function(a){return a*J.setup.ratio},J.vars={preempted:!1,resizableImages:[],invisibleImages:{},invisibleId:0,visibilityCheckStarted:!1,debounceTimer:null,cache:{},dataAttr:"data-src"},function(){var a=1,c=1,d=q("canvas"),e=null;d.getContext&&-1!=d.toDataURL("image/png").indexOf("data:image/png")&&(J.setup.renderer="canvas",e=d.getContext("2d"),J.setup.supportsCanvas=!0),J.setup.supportsCanvas&&(a=b.devicePixelRatio||1,c=e.webkitBackingStorePixelRatio||e.mozBackingStorePixelRatio||e.msBackingStorePixelRatio||e.oBackingStorePixelRatio||e.backingStorePixelRatio||1),J.setup.ratio=a/c,document.createElementNS&&document.createElementNS(E,"svg").createSVGRect&&(J.setup.renderer="svg",J.setup.supportsSVG=!0)}(),o(),x&&x(function(){J.vars.preempted||I.run(),b.addEventListener?(b.addEventListener("resize",w,!1),b.addEventListener("orientationchange",w,!1)):b.attachEvent("onresize",w),"object"==typeof b.Turbolinks&&b.document.addEventListener("page:change",function(){I.run()})}),a.exports=I}).call(b,function(){return this}())},function(a){function b(a){function b(a){if(!v){if(!g.body)return e(b);for(v=!0;a=w.shift();)e(a)}}function c(a){(t||a.type===i||g[m]===l)&&(d(),b())}function d(){t?(g[s](q,c,j),a[s](i,c,j)):(g[o](r,c),a[o](k,c))}function e(a,b){setTimeout(a,+b>=0?b:1)}function f(a){v?e(a):w.push(a)}null==document.readyState&&document.addEventListener&&(document.addEventListener("DOMContentLoaded",function y(){document.removeEventListener("DOMContentLoaded",y,!1),document.readyState="complete"},!1),document.readyState="loading");var g=a.document,h=g.documentElement,i="load",j=!1,k="on"+i,l="complete",m="readyState",n="attachEvent",o="detachEvent",p="addEventListener",q="DOMContentLoaded",r="onreadystatechange",s="removeEventListener",t=p in g,u=j,v=j,w=[];if(g[m]===l)e(b);else if(t)g[p](q,c,j),a[p](i,c,j);else{g[n](r,c),a[n](k,c);try{u=null==a.frameElement&&h}catch(x){}u&&u.doScroll&&!function z(){if(!v){try{u.doScroll("left")}catch(a){return e(z,50)}d(),b()}}()}return f.version="1.4.0",f.isReady=function(){return v},f}a.exports="undefined"!=typeof window&&b(window)},function(a,b,c){var d=c(5),e=function(a){function b(a,b){for(var c in b)a[c]=b[c];return a}var c=1,e=d.defclass({constructor:function(a){c++,this.parent=null,this.children={},this.id=c,this.name="n"+c,null!=a&&(this.name=a),this.x=0,this.y=0,this.z=0,this.width=0,this.height=0},resize:function(a,b){null!=a&&(this.width=a),null!=b&&(this.height=b)},moveTo:function(a,b,c){this.x=null!=a?a:this.x,this.y=null!=b?b:this.y,this.z=null!=c?c:this.z},add:function(a){var b=a.name;if(null!=this.children[b])throw"SceneGraph: child with that name already exists: "+b;this.children[b]=a,a.parent=this}}),f=d(e,function(b){this.constructor=function(){b.constructor.call(this,"root"),this.properties=a}}),g=d(e,function(a){function c(c,d){if(a.constructor.call(this,c),this.properties={fill:"#000"},null!=d)b(this.properties,d);else if(null!=c&&"string"!=typeof c)throw"SceneGraph: invalid node name"}this.Group=d.extend(this,{constructor:c,type:"group"}),this.Rect=d.extend(this,{constructor:c,type:"rect"}),this.Text=d.extend(this,{constructor:function(a){c.call(this),this.properties.text=a},type:"text"})}),h=new f;return this.Shape=g,this.root=h,this};a.exports=e},function(a,b){(function(a){b.extend=function(a,b){var c={};for(var d in a)a.hasOwnProperty(d)&&(c[d]=a[d]);if(null!=b)for(var e in b)b.hasOwnProperty(e)&&(c[e]=b[e]);return c},b.cssProps=function(a){var b=[];for(var c in a)a.hasOwnProperty(c)&&b.push(c+":"+a[c]);return b.join(";")},b.encodeHtmlEntity=function(a){for(var b=[],c=0,d=a.length-1;d>=0;d--)c=a.charCodeAt(d),b.unshift(c>128?["&#",c,";"].join(""):a[d]);return b.join("")},b.getNodeArray=function(b){var c=null;return"string"==typeof b?c=document.querySelectorAll(b):a.NodeList&&b instanceof a.NodeList?c=b:a.Node&&b instanceof a.Node?c=[b]:a.HTMLCollection&&b instanceof a.HTMLCollection?c=b:b instanceof Array?c=b:null===b&&(c=[]),c},b.imageExists=function(a,b){var c=new Image;c.onerror=function(){b.call(this,!1)},c.onload=function(){b.call(this,!0)},c.src=a},b.decodeHtmlEntity=function(a){return a.replace(/&#(\d+);/g,function(a,b){return String.fromCharCode(b)})},b.dimensionCheck=function(a){var b={height:a.clientHeight,width:a.clientWidth};return b.height&&b.width?b:!1},b.truthy=function(a){return"string"==typeof a?"true"===a||"yes"===a||"1"===a||"on"===a||"✓"===a:!!a}}).call(b,function(){return this}())},function(a,b,c){var d=encodeURIComponent,e=decodeURIComponent,f=c(6),g=c(7),h=/(\w+)\[(\d+)\]/,i=/\w+\.\w+/;b.parse=function(a){if("string"!=typeof a)return{};if(a=f(a),""===a)return{};"?"===a.charAt(0)&&(a=a.slice(1));for(var b={},c=a.split("&"),d=0;d<c.length;d++){var g,j,k,l=c[d].split("="),m=e(l[0]);if(g=h.exec(m))b[g[1]]=b[g[1]]||[],b[g[1]][g[2]]=e(l[1]);else if(g=i.test(m)){for(g=m.split("."),j=b;g.length;)if(k=g.shift(),k.length){if(j[k]){if(j[k]&&"object"!=typeof j[k])break}else j[k]={};g.length||(j[k]=e(l[1])),j=j[k]}}else b[l[0]]=null==l[1]?"":e(l[1])}return b},b.stringify=function(a){if(!a)return"";var b=[];for(var c in a){var e=a[c];if("array"!=g(e))b.push(d(c)+"="+d(a[c]));else for(var f=0;f<e.length;++f)b.push(d(c+"["+f+"]")+"="+d(e[f]))}return b.join("&")}},function(a){var b=function(){},c=Array.prototype.slice,d=function(a,d){var e=b.prototype="function"==typeof a?a.prototype:a,f=new b,g=d.apply(f,c.call(arguments,2).concat(e));if("object"==typeof g)for(var h in g)f[h]=g[h];if(!f.hasOwnProperty("constructor"))return f;var i=f.constructor;return i.prototype=f,i};d.defclass=function(a){var b=a.constructor;return b.prototype=a,b},d.extend=function(a,b){return d(a,function(a){return this.uber=a,b})},a.exports=d},function(a,b){function c(a){return a.replace(/^\s*|\s*$/g,"")}b=a.exports=c,b.left=function(a){return a.replace(/^\s*/,"")},b.right=function(a){return a.replace(/\s*$/,"")}},function(a){var b=Object.prototype.toString;a.exports=function(a){switch(b.call(a)){case"[object Date]":return"date";case"[object RegExp]":return"regexp";case"[object Arguments]":return"arguments";case"[object Array]":return"array";case"[object Error]":return"error"}return null===a?"null":void 0===a?"undefined":a!==a?"nan":a&&1===a.nodeType?"element":(a=a.valueOf?a.valueOf():Object.prototype.valueOf.apply(a),typeof a)}}])}),function(a,b){b&&(Holder=a.Holder)}(this,"undefined"!=typeof Meteor&&"undefined"!=typeof Package);
   13  

/home/genis/Proyectos/ProyectoXat/vendor/phpunit/php-code-coverage/src/Report/Html/Renderer/Template/js/html5shiv.min.js:
   67    function addStyleSheet(ownerDocument, cssText) {
   68      var p = ownerDocument.createElement('p'),
   69:         parent = ownerDocument.getElementsByTagName('head')[0] || ownerDocument.documentElement;
   70  
   71      p.innerHTML = 'x<style>' + cssText + '</style>';
   ..
  232        data.hasCSS = !!addStyleSheet(ownerDocument,
  233          // corrects block display not defined in IE6/7/8/9
  234:         'article,aside,dialog,figcaption,figure,footer,header,hgroup,main,nav,section{display:block}' +
  235          // adds styling not present in IE6/7/8/9
  236          'mark{background:#FF0;color:#000}' +
  ...
  263       * @type Array|String
  264       */
  265:     'elements': options.elements || 'abbr article aside audio bdi canvas data datalist details dialog figcaption figure footer header hgroup main mark meter nav output picture progress section summary template time video',
  266  
  267      /**

/home/genis/Proyectos/ProyectoXat/vendor/phpunit/php-code-coverage/src/Report/Html/Renderer/Template/js/jquery.min.js:
    1  /*! jQuery v3.1.1 | (c) jQuery Foundation | jquery.org/license */
    2: !function(a,b){"use strict";"object"==typeof module&&"object"==typeof module.exports?module.exports=a.document?b(a,!0):function(a){if(!a.document)throw new Error("jQuery requires a window with a document");return b(a)}:b(a)}("undefined"!=typeof window?window:this,function(a,b){"use strict";var c=[],d=a.document,e=Object.getPrototypeOf,f=c.slice,g=c.concat,h=c.push,i=c.indexOf,j={},k=j.toString,l=j.hasOwnProperty,m=l.toString,n=m.call(Object),o={};function p(a,b){b=b||d;var c=b.createElement("script");c.text=a,b.head.appendChild(c).parentNode.removeChild(c)}var q="3.1.1",r=function(a,b){return new r.fn.init(a,b)},s=/^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g,t=/^-ms-/,u=/-([a-z])/g,v=function(a,b){return b.toUpperCase()};r.fn=r.prototype={jquery:q,constructor:r,length:0,toArray:function(){return f.call(this)},get:function(a){return null==a?f.call(this):a<0?this[a+this.length]:this[a]},pushStack:function(a){var b=r.merge(this.constructor(),a);return b.prevObject=this,b},each:function(a){return r.each(this,a)},map:function(a){return this.pushStack(r.map(this,function(b,c){return a.call(b,c,b)}))},slice:function(){return this.pushStack(f.apply(this,arguments))},first:function(){return this.eq(0)},last:function(){return this.eq(-1)},eq:function(a){var b=this.length,c=+a+(a<0?b:0);return this.pushStack(c>=0&&c<b?[this[c]]:[])},end:function(){return this.prevObject||this.constructor()},push:h,sort:c.sort,splice:c.splice},r.extend=r.fn.extend=function(){var a,b,c,d,e,f,g=arguments[0]||{},h=1,i=arguments.length,j=!1;for("boolean"==typeof g&&(j=g,g=arguments[h]||{},h++),"object"==typeof g||r.isFunction(g)||(g={}),h===i&&(g=this,h--);h<i;h++)if(null!=(a=arguments[h]))for(b in a)c=g[b],d=a[b],g!==d&&(j&&d&&(r.isPlainObject(d)||(e=r.isArray(d)))?(e?(e=!1,f=c&&r.isArray(c)?c:[]):f=c&&r.isPlainObject(c)?c:{},g[b]=r.extend(j,f,d)):void 0!==d&&(g[b]=d));return g},r.extend({expando:"jQuery"+(q+Math.random()).replace(/\D/g,""),isReady:!0,error:function(a){throw new Error(a)},noop:function(){},isFunction:function(a){return"function"===r.type(a)},isArray:Array.isArray,isWindow:function(a){return null!=a&&a===a.window},isNumeric:function(a){var b=r.type(a);return("number"===b||"string"===b)&&!isNaN(a-parseFloat(a))},isPlainObject:function(a){var b,c;return!(!a||"[object Object]"!==k.call(a))&&(!(b=e(a))||(c=l.call(b,"constructor")&&b.constructor,"function"==typeof c&&m.call(c)===n))},isEmptyObject:function(a){var b;for(b in a)return!1;return!0},type:function(a){return null==a?a+"":"object"==typeof a||"function"==typeof a?j[k.call(a)]||"object":typeof a},globalEval:function(a){p(a)},camelCase:function(a){return a.replace(t,"ms-").replace(u,v)},nodeName:function(a,b){return a.nodeName&&a.nodeName.toLowerCase()===b.toLowerCase()},each:function(a,b){var c,d=0;if(w(a)){for(c=a.length;d<c;d++)if(b.call(a[d],d,a[d])===!1)break}else for(d in a)if(b.call(a[d],d,a[d])===!1)break;return a},trim:function(a){return null==a?"":(a+"").replace(s,"")},makeArray:function(a,b){var c=b||[];return null!=a&&(w(Object(a))?r.merge(c,"string"==typeof a?[a]:a):h.call(c,a)),c},inArray:function(a,b,c){return null==b?-1:i.call(b,a,c)},merge:function(a,b){for(var c=+b.length,d=0,e=a.length;d<c;d++)a[e++]=b[d];return a.length=e,a},grep:function(a,b,c){for(var d,e=[],f=0,g=a.length,h=!c;f<g;f++)d=!b(a[f],f),d!==h&&e.push(a[f]);return e},map:function(a,b,c){var d,e,f=0,h=[];if(w(a))for(d=a.length;f<d;f++)e=b(a[f],f,c),null!=e&&h.push(e);else for(f in a)e=b(a[f],f,c),null!=e&&h.push(e);return g.apply([],h)},guid:1,proxy:function(a,b){var c,d,e;if("string"==typeof b&&(c=a[b],b=a,a=c),r.isFunction(a))return d=f.call(arguments,2),e=function(){return a.apply(b||this,d.concat(f.call(arguments)))},e.guid=a.guid=a.guid||r.guid++,e},now:Date.now,support:o}),"function"==typeof Symbol&&(r.fn[Symbol.iterator]=c[Symbol.iterator]),r.each("Boolean Number String Function Array Date RegExp Object Error Symbol".split(" "),function(a,b){j["[object "+b+"]"]=b.toLowerCase()});function w(a){var b=!!a&&"length"in a&&a.length,c=r.type(a);return"function"!==c&&!r.isWindow(a)&&("array"===c||0===b||"number"==typeof b&&b>0&&b-1 in a)}var x=function(a){var b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u="sizzle"+1*new Date,v=a.document,w=0,x=0,y=ha(),z=ha(),A=ha(),B=function(a,b){return a===b&&(l=!0),0},C={}.hasOwnProperty,D=[],E=D.pop,F=D.push,G=D.push,H=D.slice,I=function(a,b){for(var c=0,d=a.length;c<d;c++)if(a[c]===b)return c;return-1},J="checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped",K="[\\x20\\t\\r\\n\\f]",L="(?:\\\\.|[\\w-]|[^\0-\\xa0])+",M="\\["+K+"*("+L+")(?:"+K+"*([*^$|!~]?=)"+K+"*(?:'((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\"|("+L+"))|)"+K+"*\\]",N=":("+L+")(?:\\((('((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\")|((?:\\\\.|[^\\\\()[\\]]|"+M+")*)|.*)\\)|)",O=new RegExp(K+"+","g"),P=new RegExp("^"+K+"+|((?:^|[^\\\\])(?:\\\\.)*)"+K+"+$","g"),Q=new RegExp("^"+K+"*,"+K+"*"),R=new RegExp("^"+K+"*([>+~]|"+K+")"+K+"*"),S=new RegExp("="+K+"*([^\\]'\"]*?)"+K+"*\\]","g"),T=new RegExp(N),U=new RegExp("^"+L+"$"),V={ID:new RegExp("^#("+L+")"),CLASS:new RegExp("^\\.("+L+")"),TAG:new RegExp("^("+L+"|[*])"),ATTR:new RegExp("^"+M),PSEUDO:new RegExp("^"+N),CHILD:new RegExp("^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\("+K+"*(even|odd|(([+-]|)(\\d*)n|)"+K+"*(?:([+-]|)"+K+"*(\\d+)|))"+K+"*\\)|)","i"),bool:new RegExp("^(?:"+J+")$","i"),needsContext:new RegExp("^"+K+"*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\("+K+"*((?:-\\d)?\\d*)"+K+"*\\)|)(?=[^-]|$)","i")},W=/^(?:input|select|textarea|button)$/i,X=/^h\d$/i,Y=/^[^{]+\{\s*\[native \w/,Z=/^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/,$=/[+~]/,_=new RegExp("\\\\([\\da-f]{1,6}"+K+"?|("+K+")|.)","ig"),aa=function(a,b,c){var d="0x"+b-65536;return d!==d||c?b:d<0?String.fromCharCode(d+65536):String.fromCharCode(d>>10|55296,1023&d|56320)},ba=/([\0-\x1f\x7f]|^-?\d)|^-$|[^\0-\x1f\x7f-\uFFFF\w-]/g,ca=function(a,b){return b?"\0"===a?"\ufffd":a.slice(0,-1)+"\\"+a.charCodeAt(a.length-1).toString(16)+" ":"\\"+a},da=function(){m()},ea=ta(function(a){return a.disabled===!0&&("form"in a||"label"in a)},{dir:"parentNode",next:"legend"});try{G.apply(D=H.call(v.childNodes),v.childNodes),D[v.childNodes.length].nodeType}catch(fa){G={apply:D.length?function(a,b){F.apply(a,H.call(b))}:function(a,b){var c=a.length,d=0;while(a[c++]=b[d++]);a.length=c-1}}}function ga(a,b,d,e){var f,h,j,k,l,o,r,s=b&&b.ownerDocument,w=b?b.nodeType:9;if(d=d||[],"string"!=typeof a||!a||1!==w&&9!==w&&11!==w)return d;if(!e&&((b?b.ownerDocument||b:v)!==n&&m(b),b=b||n,p)){if(11!==w&&(l=Z.exec(a)))if(f=l[1]){if(9===w){if(!(j=b.getElementById(f)))return d;if(j.id===f)return d.push(j),d}else if(s&&(j=s.getElementById(f))&&t(b,j)&&j.id===f)return d.push(j),d}else{if(l[2])return G.apply(d,b.getElementsByTagName(a)),d;if((f=l[3])&&c.getElementsByClassName&&b.getElementsByClassName)return G.apply(d,b.getElementsByClassName(f)),d}if(c.qsa&&!A[a+" "]&&(!q||!q.test(a))){if(1!==w)s=b,r=a;else if("object"!==b.nodeName.toLowerCase()){(k=b.getAttribute("id"))?k=k.replace(ba,ca):b.setAttribute("id",k=u),o=g(a),h=o.length;while(h--)o[h]="#"+k+" "+sa(o[h]);r=o.join(","),s=$.test(a)&&qa(b.parentNode)||b}if(r)try{return G.apply(d,s.querySelectorAll(r)),d}catch(x){}finally{k===u&&b.removeAttribute("id")}}}return i(a.replace(P,"$1"),b,d,e)}function ha(){var a=[];function b(c,e){return a.push(c+" ")>d.cacheLength&&delete b[a.shift()],b[c+" "]=e}return b}function ia(a){return a[u]=!0,a}function ja(a){var b=n.createElement("fieldset");try{return!!a(b)}catch(c){return!1}finally{b.parentNode&&b.parentNode.removeChild(b),b=null}}function ka(a,b){var c=a.split("|"),e=c.length;while(e--)d.attrHandle[c[e]]=b}function la(a,b){var c=b&&a,d=c&&1===a.nodeType&&1===b.nodeType&&a.sourceIndex-b.sourceIndex;if(d)return d;if(c)while(c=c.nextSibling)if(c===b)return-1;return a?1:-1}function ma(a){return function(b){var c=b.nodeName.toLowerCase();return"input"===c&&b.type===a}}function na(a){return function(b){var c=b.nodeName.toLowerCase();return("input"===c||"button"===c)&&b.type===a}}function oa(a){return function(b){return"form"in b?b.parentNode&&b.disabled===!1?"label"in b?"label"in b.parentNode?b.parentNode.disabled===a:b.disabled===a:b.isDisabled===a||b.isDisabled!==!a&&ea(b)===a:b.disabled===a:"label"in b&&b.disabled===a}}function pa(a){return ia(function(b){return b=+b,ia(function(c,d){var e,f=a([],c.length,b),g=f.length;while(g--)c[e=f[g]]&&(c[e]=!(d[e]=c[e]))})})}function qa(a){return a&&"undefined"!=typeof a.getElementsByTagName&&a}c=ga.support={},f=ga.isXML=function(a){var b=a&&(a.ownerDocument||a).documentElement;return!!b&&"HTML"!==b.nodeName},m=ga.setDocument=function(a){var b,e,g=a?a.ownerDocument||a:v;return g!==n&&9===g.nodeType&&g.documentElement?(n=g,o=n.documentElement,p=!f(n),v!==n&&(e=n.defaultView)&&e.top!==e&&(e.addEventListener?e.addEventListener("unload",da,!1):e.attachEvent&&e.attachEvent("onunload",da)),c.attributes=ja(function(a){return a.className="i",!a.getAttribute("className")}),c.getElementsByTagName=ja(function(a){return a.appendChild(n.createComment("")),!a.getElementsByTagName("*").length}),c.getElementsByClassName=Y.test(n.getElementsByClassName),c.getById=ja(function(a){return o.appendChild(a).id=u,!n.getElementsByName||!n.getElementsByName(u).length}),c.getById?(d.filter.ID=function(a){var b=a.replace(_,aa);return function(a){return a.getAttribute("id")===b}},d.find.ID=function(a,b){if("undefined"!=typeof b.getElementById&&p){var c=b.getElementById(a);return c?[c]:[]}}):(d.filter.ID=function(a){var b=a.replace(_,aa);return function(a){var c="undefined"!=typeof a.getAttributeNode&&a.getAttributeNode("id");return c&&c.value===b}},d.find.ID=function(a,b){if("undefined"!=typeof b.getElementById&&p){var c,d,e,f=b.getElementById(a);if(f){if(c=f.getAttributeNode("id"),c&&c.value===a)return[f];e=b.getElementsByName(a),d=0;while(f=e[d++])if(c=f.getAttributeNode("id"),c&&c.value===a)return[f]}return[]}}),d.find.TAG=c.getElementsByTagName?function(a,b){return"undefined"!=typeof b.getElementsByTagName?b.getElementsByTagName(a):c.qsa?b.querySelectorAll(a):void 0}:function(a,b){var c,d=[],e=0,f=b.getElementsByTagName(a);if("*"===a){while(c=f[e++])1===c.nodeType&&d.push(c);return d}return f},d.find.CLASS=c.getElementsByClassName&&function(a,b){if("undefined"!=typeof b.getElementsByClassName&&p)return b.getElementsByClassName(a)},r=[],q=[],(c.qsa=Y.test(n.querySelectorAll))&&(ja(function(a){o.appendChild(a).innerHTML="<a id='"+u+"'></a><select id='"+u+"-\r\\' msallowcapture=''><option selected=''></option></select>",a.querySelectorAll("[msallowcapture^='']").length&&q.push("[*^$]="+K+"*(?:''|\"\")"),a.querySelectorAll("[selected]").length||q.push("\\["+K+"*(?:value|"+J+")"),a.querySelectorAll("[id~="+u+"-]").length||q.push("~="),a.querySelectorAll(":checked").length||q.push(":checked"),a.querySelectorAll("a#"+u+"+*").length||q.push(".#.+[+~]")}),ja(function(a){a.innerHTML="<a href='' disabled='disabled'></a><select disabled='disabled'><option/></select>";var b=n.createElement("input");b.setAttribute("type","hidden"),a.appendChild(b).setAttribute("name","D"),a.querySelectorAll("[name=d]").length&&q.push("name"+K+"*[*^$|!~]?="),2!==a.querySelectorAll(":enabled").length&&q.push(":enabled",":disabled"),o.appendChild(a).disabled=!0,2!==a.querySelectorAll(":disabled").length&&q.push(":enabled",":disabled"),a.querySelectorAll("*,:x"),q.push(",.*:")})),(c.matchesSelector=Y.test(s=o.matches||o.webkitMatchesSelector||o.mozMatchesSelector||o.oMatchesSelector||o.msMatchesSelector))&&ja(function(a){c.disconnectedMatch=s.call(a,"*"),s.call(a,"[s!='']:x"),r.push("!=",N)}),q=q.length&&new RegExp(q.join("|")),r=r.length&&new RegExp(r.join("|")),b=Y.test(o.compareDocumentPosition),t=b||Y.test(o.contains)?function(a,b){var c=9===a.nodeType?a.documentElement:a,d=b&&b.parentNode;return a===d||!(!d||1!==d.nodeType||!(c.contains?c.contains(d):a.compareDocumentPosition&&16&a.compareDocumentPosition(d)))}:function(a,b){if(b)while(b=b.parentNode)if(b===a)return!0;return!1},B=b?function(a,b){if(a===b)return l=!0,0;var d=!a.compareDocumentPosition-!b.compareDocumentPosition;return d?d:(d=(a.ownerDocument||a)===(b.ownerDocument||b)?a.compareDocumentPosition(b):1,1&d||!c.sortDetached&&b.compareDocumentPosition(a)===d?a===n||a.ownerDocument===v&&t(v,a)?-1:b===n||b.ownerDocument===v&&t(v,b)?1:k?I(k,a)-I(k,b):0:4&d?-1:1)}:function(a,b){if(a===b)return l=!0,0;var c,d=0,e=a.parentNode,f=b.parentNode,g=[a],h=[b];if(!e||!f)return a===n?-1:b===n?1:e?-1:f?1:k?I(k,a)-I(k,b):0;if(e===f)return la(a,b);c=a;while(c=c.parentNode)g.unshift(c);c=b;while(c=c.parentNode)h.unshift(c);while(g[d]===h[d])d++;return d?la(g[d],h[d]):g[d]===v?-1:h[d]===v?1:0},n):n},ga.matches=function(a,b){return ga(a,null,null,b)},ga.matchesSelector=function(a,b){if((a.ownerDocument||a)!==n&&m(a),b=b.replace(S,"='$1']"),c.matchesSelector&&p&&!A[b+" "]&&(!r||!r.test(b))&&(!q||!q.test(b)))try{var d=s.call(a,b);if(d||c.disconnectedMatch||a.document&&11!==a.document.nodeType)return d}catch(e){}return ga(b,n,null,[a]).length>0},ga.contains=function(a,b){return(a.ownerDocument||a)!==n&&m(a),t(a,b)},ga.attr=function(a,b){(a.ownerDocument||a)!==n&&m(a);var e=d.attrHandle[b.toLowerCase()],f=e&&C.call(d.attrHandle,b.toLowerCase())?e(a,b,!p):void 0;return void 0!==f?f:c.attributes||!p?a.getAttribute(b):(f=a.getAttributeNode(b))&&f.specified?f.value:null},ga.escape=function(a){return(a+"").replace(ba,ca)},ga.error=function(a){throw new Error("Syntax error, unrecognized expression: "+a)},ga.uniqueSort=function(a){var b,d=[],e=0,f=0;if(l=!c.detectDuplicates,k=!c.sortStable&&a.slice(0),a.sort(B),l){while(b=a[f++])b===a[f]&&(e=d.push(f));while(e--)a.splice(d[e],1)}return k=null,a},e=ga.getText=function(a){var b,c="",d=0,f=a.nodeType;if(f){if(1===f||9===f||11===f){if("string"==typeof a.textContent)return a.textContent;for(a=a.firstChild;a;a=a.nextSibling)c+=e(a)}else if(3===f||4===f)return a.nodeValue}else while(b=a[d++])c+=e(b);return c},d=ga.selectors={cacheLength:50,createPseudo:ia,match:V,attrHandle:{},find:{},relative:{">":{dir:"parentNode",first:!0}," ":{dir:"parentNode"},"+":{dir:"previousSibling",first:!0},"~":{dir:"previousSibling"}},preFilter:{ATTR:function(a){return a[1]=a[1].replace(_,aa),a[3]=(a[3]||a[4]||a[5]||"").replace(_,aa),"~="===a[2]&&(a[3]=" "+a[3]+" "),a.slice(0,4)},CHILD:function(a){return a[1]=a[1].toLowerCase(),"nth"===a[1].slice(0,3)?(a[3]||ga.error(a[0]),a[4]=+(a[4]?a[5]+(a[6]||1):2*("even"===a[3]||"odd"===a[3])),a[5]=+(a[7]+a[8]||"odd"===a[3])):a[3]&&ga.error(a[0]),a},PSEUDO:function(a){var b,c=!a[6]&&a[2];return V.CHILD.test(a[0])?null:(a[3]?a[2]=a[4]||a[5]||"":c&&T.test(c)&&(b=g(c,!0))&&(b=c.indexOf(")",c.length-b)-c.length)&&(a[0]=a[0].slice(0,b),a[2]=c.slice(0,b)),a.slice(0,3))}},filter:{TAG:function(a){var b=a.replace(_,aa).toLowerCase();return"*"===a?function(){return!0}:function(a){return a.nodeName&&a.nodeName.toLowerCase()===b}},CLASS:function(a){var b=y[a+" "];return b||(b=new RegExp("(^|"+K+")"+a+"("+K+"|$)"))&&y(a,function(a){return b.test("string"==typeof a.className&&a.className||"undefined"!=typeof a.getAttribute&&a.getAttribute("class")||"")})},ATTR:function(a,b,c){return function(d){var e=ga.attr(d,a);return null==e?"!="===b:!b||(e+="","="===b?e===c:"!="===b?e!==c:"^="===b?c&&0===e.indexOf(c):"*="===b?c&&e.indexOf(c)>-1:"$="===b?c&&e.slice(-c.length)===c:"~="===b?(" "+e.replace(O," ")+" ").indexOf(c)>-1:"|="===b&&(e===c||e.slice(0,c.length+1)===c+"-"))}},CHILD:function(a,b,c,d,e){var f="nth"!==a.slice(0,3),g="last"!==a.slice(-4),h="of-type"===b;return 1===d&&0===e?function(a){return!!a.parentNode}:function(b,c,i){var j,k,l,m,n,o,p=f!==g?"nextSibling":"previousSibling",q=b.parentNode,r=h&&b.nodeName.toLowerCase(),s=!i&&!h,t=!1;if(q){if(f){while(p){m=b;while(m=m[p])if(h?m.nodeName.toLowerCase()===r:1===m.nodeType)return!1;o=p="only"===a&&!o&&"nextSibling"}return!0}if(o=[g?q.firstChild:q.lastChild],g&&s){m=q,l=m[u]||(m[u]={}),k=l[m.uniqueID]||(l[m.uniqueID]={}),j=k[a]||[],n=j[0]===w&&j[1],t=n&&j[2],m=n&&q.childNodes[n];while(m=++n&&m&&m[p]||(t=n=0)||o.pop())if(1===m.nodeType&&++t&&m===b){k[a]=[w,n,t];break}}else if(s&&(m=b,l=m[u]||(m[u]={}),k=l[m.uniqueID]||(l[m.uniqueID]={}),j=k[a]||[],n=j[0]===w&&j[1],t=n),t===!1)while(m=++n&&m&&m[p]||(t=n=0)||o.pop())if((h?m.nodeName.toLowerCase()===r:1===m.nodeType)&&++t&&(s&&(l=m[u]||(m[u]={}),k=l[m.uniqueID]||(l[m.uniqueID]={}),k[a]=[w,t]),m===b))break;return t-=e,t===d||t%d===0&&t/d>=0}}},PSEUDO:function(a,b){var c,e=d.pseudos[a]||d.setFilters[a.toLowerCase()]||ga.error("unsupported pseudo: "+a);return e[u]?e(b):e.length>1?(c=[a,a,"",b],d.setFilters.hasOwnProperty(a.toLowerCase())?ia(function(a,c){var d,f=e(a,b),g=f.length;while(g--)d=I(a,f[g]),a[d]=!(c[d]=f[g])}):function(a){return e(a,0,c)}):e}},pseudos:{not:ia(function(a){var b=[],c=[],d=h(a.replace(P,"$1"));return d[u]?ia(function(a,b,c,e){var f,g=d(a,null,e,[]),h=a.length;while(h--)(f=g[h])&&(a[h]=!(b[h]=f))}):function(a,e,f){return b[0]=a,d(b,null,f,c),b[0]=null,!c.pop()}}),has:ia(function(a){return function(b){return ga(a,b).length>0}}),contains:ia(function(a){return a=a.replace(_,aa),function(b){return(b.textContent||b.innerText||e(b)).indexOf(a)>-1}}),lang:ia(function(a){return U.test(a||"")||ga.error("unsupported lang: "+a),a=a.replace(_,aa).toLowerCase(),function(b){var c;do if(c=p?b.lang:b.getAttribute("xml:lang")||b.getAttribute("lang"))return c=c.toLowerCase(),c===a||0===c.indexOf(a+"-");while((b=b.parentNode)&&1===b.nodeType);return!1}}),target:function(b){var c=a.location&&a.location.hash;return c&&c.slice(1)===b.id},root:function(a){return a===o},focus:function(a){return a===n.activeElement&&(!n.hasFocus||n.hasFocus())&&!!(a.type||a.href||~a.tabIndex)},enabled:oa(!1),disabled:oa(!0),checked:function(a){var b=a.nodeName.toLowerCase();return"input"===b&&!!a.checked||"option"===b&&!!a.selected},selected:function(a){return a.parentNode&&a.parentNode.selectedIndex,a.selected===!0},empty:function(a){for(a=a.firstChild;a;a=a.nextSibling)if(a.nodeType<6)return!1;return!0},parent:function(a){return!d.pseudos.empty(a)},header:function(a){return X.test(a.nodeName)},input:function(a){return W.test(a.nodeName)},button:function(a){var b=a.nodeName.toLowerCase();return"input"===b&&"button"===a.type||"button"===b},text:function(a){var b;return"input"===a.nodeName.toLowerCase()&&"text"===a.type&&(null==(b=a.getAttribute("type"))||"text"===b.toLowerCase())},first:pa(function(){return[0]}),last:pa(function(a,b){return[b-1]}),eq:pa(function(a,b,c){return[c<0?c+b:c]}),even:pa(function(a,b){for(var c=0;c<b;c+=2)a.push(c);return a}),odd:pa(function(a,b){for(var c=1;c<b;c+=2)a.push(c);return a}),lt:pa(function(a,b,c){for(var d=c<0?c+b:c;--d>=0;)a.push(d);return a}),gt:pa(function(a,b,c){for(var d=c<0?c+b:c;++d<b;)a.push(d);return a})}},d.pseudos.nth=d.pseudos.eq;for(b in{radio:!0,checkbox:!0,file:!0,password:!0,image:!0})d.pseudos[b]=ma(b);for(b in{submit:!0,reset:!0})d.pseudos[b]=na(b);function ra(){}ra.prototype=d.filters=d.pseudos,d.setFilters=new ra,g=ga.tokenize=function(a,b){var c,e,f,g,h,i,j,k=z[a+" "];if(k)return b?0:k.slice(0);h=a,i=[],j=d.preFilter;while(h){c&&!(e=Q.exec(h))||(e&&(h=h.slice(e[0].length)||h),i.push(f=[])),c=!1,(e=R.exec(h))&&(c=e.shift(),f.push({value:c,type:e[0].replace(P," ")}),h=h.slice(c.length));for(g in d.filter)!(e=V[g].exec(h))||j[g]&&!(e=j[g](e))||(c=e.shift(),f.push({value:c,type:g,matches:e}),h=h.slice(c.length));if(!c)break}return b?h.length:h?ga.error(a):z(a,i).slice(0)};function sa(a){for(var b=0,c=a.length,d="";b<c;b++)d+=a[b].value;return d}function ta(a,b,c){var d=b.dir,e=b.next,f=e||d,g=c&&"parentNode"===f,h=x++;return b.first?function(b,c,e){while(b=b[d])if(1===b.nodeType||g)return a(b,c,e);return!1}:function(b,c,i){var j,k,l,m=[w,h];if(i){while(b=b[d])if((1===b.nodeType||g)&&a(b,c,i))return!0}else while(b=b[d])if(1===b.nodeType||g)if(l=b[u]||(b[u]={}),k=l[b.uniqueID]||(l[b.uniqueID]={}),e&&e===b.nodeName.toLowerCase())b=b[d]||b;else{if((j=k[f])&&j[0]===w&&j[1]===h)return m[2]=j[2];if(k[f]=m,m[2]=a(b,c,i))return!0}return!1}}function ua(a){return a.length>1?function(b,c,d){var e=a.length;while(e--)if(!a[e](b,c,d))return!1;return!0}:a[0]}function va(a,b,c){for(var d=0,e=b.length;d<e;d++)ga(a,b[d],c);return c}function wa(a,b,c,d,e){for(var f,g=[],h=0,i=a.length,j=null!=b;h<i;h++)(f=a[h])&&(c&&!c(f,d,e)||(g.push(f),j&&b.push(h)));return g}function xa(a,b,c,d,e,f){return d&&!d[u]&&(d=xa(d)),e&&!e[u]&&(e=xa(e,f)),ia(function(f,g,h,i){var j,k,l,m=[],n=[],o=g.length,p=f||va(b||"*",h.nodeType?[h]:h,[]),q=!a||!f&&b?p:wa(p,m,a,h,i),r=c?e||(f?a:o||d)?[]:g:q;if(c&&c(q,r,h,i),d){j=wa(r,n),d(j,[],h,i),k=j.length;while(k--)(l=j[k])&&(r[n[k]]=!(q[n[k]]=l))}if(f){if(e||a){if(e){j=[],k=r.length;while(k--)(l=r[k])&&j.push(q[k]=l);e(null,r=[],j,i)}k=r.length;while(k--)(l=r[k])&&(j=e?I(f,l):m[k])>-1&&(f[j]=!(g[j]=l))}}else r=wa(r===g?r.splice(o,r.length):r),e?e(null,g,r,i):G.apply(g,r)})}function ya(a){for(var b,c,e,f=a.length,g=d.relative[a[0].type],h=g||d.relative[" "],i=g?1:0,k=ta(function(a){return a===b},h,!0),l=ta(function(a){return I(b,a)>-1},h,!0),m=[function(a,c,d){var e=!g&&(d||c!==j)||((b=c).nodeType?k(a,c,d):l(a,c,d));return b=null,e}];i<f;i++)if(c=d.relative[a[i].type])m=[ta(ua(m),c)];else{if(c=d.filter[a[i].type].apply(null,a[i].matches),c[u]){for(e=++i;e<f;e++)if(d.relative[a[e].type])break;return xa(i>1&&ua(m),i>1&&sa(a.slice(0,i-1).concat({value:" "===a[i-2].type?"*":""})).replace(P,"$1"),c,i<e&&ya(a.slice(i,e)),e<f&&ya(a=a.slice(e)),e<f&&sa(a))}m.push(c)}return ua(m)}function za(a,b){var c=b.length>0,e=a.length>0,f=function(f,g,h,i,k){var l,o,q,r=0,s="0",t=f&&[],u=[],v=j,x=f||e&&d.find.TAG("*",k),y=w+=null==v?1:Math.random()||.1,z=x.length;for(k&&(j=g===n||g||k);s!==z&&null!=(l=x[s]);s++){if(e&&l){o=0,g||l.ownerDocument===n||(m(l),h=!p);while(q=a[o++])if(q(l,g||n,h)){i.push(l);break}k&&(w=y)}c&&((l=!q&&l)&&r--,f&&t.push(l))}if(r+=s,c&&s!==r){o=0;while(q=b[o++])q(t,u,g,h);if(f){if(r>0)while(s--)t[s]||u[s]||(u[s]=E.call(i));u=wa(u)}G.apply(i,u),k&&!f&&u.length>0&&r+b.length>1&&ga.uniqueSort(i)}return k&&(w=y,j=v),t};return c?ia(f):f}return h=ga.compile=function(a,b){var c,d=[],e=[],f=A[a+" "];if(!f){b||(b=g(a)),c=b.length;while(c--)f=ya(b[c]),f[u]?d.push(f):e.push(f);f=A(a,za(e,d)),f.selector=a}return f},i=ga.select=function(a,b,c,e){var f,i,j,k,l,m="function"==typeof a&&a,n=!e&&g(a=m.selector||a);if(c=c||[],1===n.length){if(i=n[0]=n[0].slice(0),i.length>2&&"ID"===(j=i[0]).type&&9===b.nodeType&&p&&d.relative[i[1].type]){if(b=(d.find.ID(j.matches[0].replace(_,aa),b)||[])[0],!b)return c;m&&(b=b.parentNode),a=a.slice(i.shift().value.length)}f=V.needsContext.test(a)?0:i.length;while(f--){if(j=i[f],d.relative[k=j.type])break;if((l=d.find[k])&&(e=l(j.matches[0].replace(_,aa),$.test(i[0].type)&&qa(b.parentNode)||b))){if(i.splice(f,1),a=e.length&&sa(i),!a)return G.apply(c,e),c;break}}}return(m||h(a,n))(e,b,!p,c,!b||$.test(a)&&qa(b.parentNode)||b),c},c.sortStable=u.split("").sort(B).join("")===u,c.detectDuplicates=!!l,m(),c.sortDetached=ja(function(a){return 1&a.compareDocumentPosition(n.createElement("fieldset"))}),ja(function(a){return a.innerHTML="<a href='#'></a>","#"===a.firstChild.getAttribute("href")})||ka("type|href|height|width",function(a,b,c){if(!c)return a.getAttribute(b,"type"===b.toLowerCase()?1:2)}),c.attributes&&ja(function(a){return a.innerHTML="<input/>",a.firstChild.setAttribute("value",""),""===a.firstChild.getAttribute("value")})||ka("value",function(a,b,c){if(!c&&"input"===a.nodeName.toLowerCase())return a.defaultValue}),ja(function(a){return null==a.getAttribute("disabled")})||ka(J,function(a,b,c){var d;if(!c)return a[b]===!0?b.toLowerCase():(d=a.getAttributeNode(b))&&d.specified?d.value:null}),ga}(a);r.find=x,r.expr=x.selectors,r.expr[":"]=r.expr.pseudos,r.uniqueSort=r.unique=x.uniqueSort,r.text=x.getText,r.isXMLDoc=x.isXML,r.contains=x.contains,r.escapeSelector=x.escape;var y=function(a,b,c){var d=[],e=void 0!==c;while((a=a[b])&&9!==a.nodeType)if(1===a.nodeType){if(e&&r(a).is(c))break;d.push(a)}return d},z=function(a,b){for(var c=[];a;a=a.nextSibling)1===a.nodeType&&a!==b&&c.push(a);return c},A=r.expr.match.needsContext,B=/^<([a-z][^\/\0>:\x20\t\r\n\f]*)[\x20\t\r\n\f]*\/?>(?:<\/\1>|)$/i,C=/^.[^:#\[\.,]*$/;function D(a,b,c){return r.isFunction(b)?r.grep(a,function(a,d){return!!b.call(a,d,a)!==c}):b.nodeType?r.grep(a,function(a){return a===b!==c}):"string"!=typeof b?r.grep(a,function(a){return i.call(b,a)>-1!==c}):C.test(b)?r.filter(b,a,c):(b=r.filter(b,a),r.grep(a,function(a){return i.call(b,a)>-1!==c&&1===a.nodeType}))}r.filter=function(a,b,c){var d=b[0];return c&&(a=":not("+a+")"),1===b.length&&1===d.nodeType?r.find.matchesSelector(d,a)?[d]:[]:r.find.matches(a,r.grep(b,function(a){return 1===a.nodeType}))},r.fn.extend({find:function(a){var b,c,d=this.length,e=this;if("string"!=typeof a)return this.pushStack(r(a).filter(function(){for(b=0;b<d;b++)if(r.contains(e[b],this))return!0}));for(c=this.pushStack([]),b=0;b<d;b++)r.find(a,e[b],c);return d>1?r.uniqueSort(c):c},filter:function(a){return this.pushStack(D(this,a||[],!1))},not:function(a){return this.pushStack(D(this,a||[],!0))},is:function(a){return!!D(this,"string"==typeof a&&A.test(a)?r(a):a||[],!1).length}});var E,F=/^(?:\s*(<[\w\W]+>)[^>]*|#([\w-]+))$/,G=r.fn.init=function(a,b,c){var e,f;if(!a)return this;if(c=c||E,"string"==typeof a){if(e="<"===a[0]&&">"===a[a.length-1]&&a.length>=3?[null,a,null]:F.exec(a),!e||!e[1]&&b)return!b||b.jquery?(b||c).find(a):this.constructor(b).find(a);if(e[1]){if(b=b instanceof r?b[0]:b,r.merge(this,r.parseHTML(e[1],b&&b.nodeType?b.ownerDocument||b:d,!0)),B.test(e[1])&&r.isPlainObject(b))for(e in b)r.isFunction(this[e])?this[e](b[e]):this.attr(e,b[e]);return this}return f=d.getElementById(e[2]),f&&(this[0]=f,this.length=1),this}return a.nodeType?(this[0]=a,this.length=1,this):r.isFunction(a)?void 0!==c.ready?c.ready(a):a(r):r.makeArray(a,this)};G.prototype=r.fn,E=r(d);var H=/^(?:parents|prev(?:Until|All))/,I={children:!0,contents:!0,next:!0,prev:!0};r.fn.extend({has:function(a){var b=r(a,this),c=b.length;return this.filter(function(){for(var a=0;a<c;a++)if(r.contains(this,b[a]))return!0})},closest:function(a,b){var c,d=0,e=this.length,f=[],g="string"!=typeof a&&r(a);if(!A.test(a))for(;d<e;d++)for(c=this[d];c&&c!==b;c=c.parentNode)if(c.nodeType<11&&(g?g.index(c)>-1:1===c.nodeType&&r.find.matchesSelector(c,a))){f.push(c);break}return this.pushStack(f.length>1?r.uniqueSort(f):f)},index:function(a){return a?"string"==typeof a?i.call(r(a),this[0]):i.call(this,a.jquery?a[0]:a):this[0]&&this[0].parentNode?this.first().prevAll().length:-1},add:function(a,b){return this.pushStack(r.uniqueSort(r.merge(this.get(),r(a,b))))},addBack:function(a){return this.add(null==a?this.prevObject:this.prevObject.filter(a))}});function J(a,b){while((a=a[b])&&1!==a.nodeType);return a}r.each({parent:function(a){var b=a.parentNode;return b&&11!==b.nodeType?b:null},parents:function(a){return y(a,"parentNode")},parentsUntil:function(a,b,c){return y(a,"parentNode",c)},next:function(a){return J(a,"nextSibling")},prev:function(a){return J(a,"previousSibling")},nextAll:function(a){return y(a,"nextSibling")},prevAll:function(a){return y(a,"previousSibling")},nextUntil:function(a,b,c){return y(a,"nextSibling",c)},prevUntil:function(a,b,c){return y(a,"previousSibling",c)},siblings:function(a){return z((a.parentNode||{}).firstChild,a)},children:function(a){return z(a.firstChild)},contents:function(a){return a.contentDocument||r.merge([],a.childNodes)}},function(a,b){r.fn[a]=function(c,d){var e=r.map(this,b,c);return"Until"!==a.slice(-5)&&(d=c),d&&"string"==typeof d&&(e=r.filter(d,e)),this.length>1&&(I[a]||r.uniqueSort(e),H.test(a)&&e.reverse()),this.pushStack(e)}});var K=/[^\x20\t\r\n\f]+/g;function L(a){var b={};return r.each(a.match(K)||[],function(a,c){b[c]=!0}),b}r.Callbacks=function(a){a="string"==typeof a?L(a):r.extend({},a);var b,c,d,e,f=[],g=[],h=-1,i=function(){for(e=a.once,d=b=!0;g.length;h=-1){c=g.shift();while(++h<f.length)f[h].apply(c[0],c[1])===!1&&a.stopOnFalse&&(h=f.length,c=!1)}a.memory||(c=!1),b=!1,e&&(f=c?[]:"")},j={add:function(){return f&&(c&&!b&&(h=f.length-1,g.push(c)),function d(b){r.each(b,function(b,c){r.isFunction(c)?a.unique&&j.has(c)||f.push(c):c&&c.length&&"string"!==r.type(c)&&d(c)})}(arguments),c&&!b&&i()),this},remove:function(){return r.each(arguments,function(a,b){var c;while((c=r.inArray(b,f,c))>-1)f.splice(c,1),c<=h&&h--}),this},has:function(a){return a?r.inArray(a,f)>-1:f.length>0},empty:function(){return f&&(f=[]),this},disable:function(){return e=g=[],f=c="",this},disabled:function(){return!f},lock:function(){return e=g=[],c||b||(f=c=""),this},locked:function(){return!!e},fireWith:function(a,c){return e||(c=c||[],c=[a,c.slice?c.slice():c],g.push(c),b||i()),this},fire:function(){return j.fireWith(this,arguments),this},fired:function(){return!!d}};return j};function M(a){return a}function N(a){throw a}function O(a,b,c){var d;try{a&&r.isFunction(d=a.promise)?d.call(a).done(b).fail(c):a&&r.isFunction(d=a.then)?d.call(a,b,c):b.call(void 0,a)}catch(a){c.call(void 0,a)}}r.extend({Deferred:function(b){var c=[["notify","progress",r.Callbacks("memory"),r.Callbacks("memory"),2],["resolve","done",r.Callbacks("once memory"),r.Callbacks("once memory"),0,"resolved"],["reject","fail",r.Callbacks("once memory"),r.Callbacks("once memory"),1,"rejected"]],d="pending",e={state:function(){return d},always:function(){return f.done(arguments).fail(arguments),this},"catch":function(a){return e.then(null,a)},pipe:function(){var a=arguments;return r.Deferred(function(b){r.each(c,function(c,d){var e=r.isFunction(a[d[4]])&&a[d[4]];f[d[1]](function(){var a=e&&e.apply(this,arguments);a&&r.isFunction(a.promise)?a.promise().progress(b.notify).done(b.resolve).fail(b.reject):b[d[0]+"With"](this,e?[a]:arguments)})}),a=null}).promise()},then:function(b,d,e){var f=0;function g(b,c,d,e){return function(){var h=this,i=arguments,j=function(){var a,j;if(!(b<f)){if(a=d.apply(h,i),a===c.promise())throw new TypeError("Thenable self-resolution");j=a&&("object"==typeof a||"function"==typeof a)&&a.then,r.isFunction(j)?e?j.call(a,g(f,c,M,e),g(f,c,N,e)):(f++,j.call(a,g(f,c,M,e),g(f,c,N,e),g(f,c,M,c.notifyWith))):(d!==M&&(h=void 0,i=[a]),(e||c.resolveWith)(h,i))}},k=e?j:function(){try{j()}catch(a){r.Deferred.exceptionHook&&r.Deferred.exceptionHook(a,k.stackTrace),b+1>=f&&(d!==N&&(h=void 0,i=[a]),c.rejectWith(h,i))}};b?k():(r.Deferred.getStackHook&&(k.stackTrace=r.Deferred.getStackHook()),a.setTimeout(k))}}return r.Deferred(function(a){c[0][3].add(g(0,a,r.isFunction(e)?e:M,a.notifyWith)),c[1][3].add(g(0,a,r.isFunction(b)?b:M)),c[2][3].add(g(0,a,r.isFunction(d)?d:N))}).promise()},promise:function(a){return null!=a?r.extend(a,e):e}},f={};return r.each(c,function(a,b){var g=b[2],h=b[5];e[b[1]]=g.add,h&&g.add(function(){d=h},c[3-a][2].disable,c[0][2].lock),g.add(b[3].fire),f[b[0]]=function(){return f[b[0]+"With"](this===f?void 0:this,arguments),this},f[b[0]+"With"]=g.fireWith}),e.promise(f),b&&b.call(f,f),f},when:function(a){var b=arguments.length,c=b,d=Array(c),e=f.call(arguments),g=r.Deferred(),h=function(a){return function(c){d[a]=this,e[a]=arguments.length>1?f.call(arguments):c,--b||g.resolveWith(d,e)}};if(b<=1&&(O(a,g.done(h(c)).resolve,g.reject),"pending"===g.state()||r.isFunction(e[c]&&e[c].then)))return g.then();while(c--)O(e[c],h(c),g.reject);return g.promise()}});var P=/^(Eval|Internal|Range|Reference|Syntax|Type|URI)Error$/;r.Deferred.exceptionHook=function(b,c){a.console&&a.console.warn&&b&&P.test(b.name)&&a.console.warn("jQuery.Deferred exception: "+b.message,b.stack,c)},r.readyException=function(b){a.setTimeout(function(){throw b})};var Q=r.Deferred();r.fn.ready=function(a){return Q.then(a)["catch"](function(a){r.readyException(a)}),this},r.extend({isReady:!1,readyWait:1,holdReady:function(a){a?r.readyWait++:r.ready(!0)},ready:function(a){(a===!0?--r.readyWait:r.isReady)||(r.isReady=!0,a!==!0&&--r.readyWait>0||Q.resolveWith(d,[r]))}}),r.ready.then=Q.then;function R(){d.removeEventListener("DOMContentLoaded",R),
    3: a.removeEventListener("load",R),r.ready()}"complete"===d.readyState||"loading"!==d.readyState&&!d.documentElement.doScroll?a.setTimeout(r.ready):(d.addEventListener("DOMContentLoaded",R),a.addEventListener("load",R));var S=function(a,b,c,d,e,f,g){var h=0,i=a.length,j=null==c;if("object"===r.type(c)){e=!0;for(h in c)S(a,b,h,c[h],!0,f,g)}else if(void 0!==d&&(e=!0,r.isFunction(d)||(g=!0),j&&(g?(b.call(a,d),b=null):(j=b,b=function(a,b,c){return j.call(r(a),c)})),b))for(;h<i;h++)b(a[h],c,g?d:d.call(a[h],h,b(a[h],c)));return e?a:j?b.call(a):i?b(a[0],c):f},T=function(a){return 1===a.nodeType||9===a.nodeType||!+a.nodeType};function U(){this.expando=r.expando+U.uid++}U.uid=1,U.prototype={cache:function(a){var b=a[this.expando];return b||(b={},T(a)&&(a.nodeType?a[this.expando]=b:Object.defineProperty(a,this.expando,{value:b,configurable:!0}))),b},set:function(a,b,c){var d,e=this.cache(a);if("string"==typeof b)e[r.camelCase(b)]=c;else for(d in b)e[r.camelCase(d)]=b[d];return e},get:function(a,b){return void 0===b?this.cache(a):a[this.expando]&&a[this.expando][r.camelCase(b)]},access:function(a,b,c){return void 0===b||b&&"string"==typeof b&&void 0===c?this.get(a,b):(this.set(a,b,c),void 0!==c?c:b)},remove:function(a,b){var c,d=a[this.expando];if(void 0!==d){if(void 0!==b){r.isArray(b)?b=b.map(r.camelCase):(b=r.camelCase(b),b=b in d?[b]:b.match(K)||[]),c=b.length;while(c--)delete d[b[c]]}(void 0===b||r.isEmptyObject(d))&&(a.nodeType?a[this.expando]=void 0:delete a[this.expando])}},hasData:function(a){var b=a[this.expando];return void 0!==b&&!r.isEmptyObject(b)}};var V=new U,W=new U,X=/^(?:\{[\w\W]*\}|\[[\w\W]*\])$/,Y=/[A-Z]/g;function Z(a){return"true"===a||"false"!==a&&("null"===a?null:a===+a+""?+a:X.test(a)?JSON.parse(a):a)}function $(a,b,c){var d;if(void 0===c&&1===a.nodeType)if(d="data-"+b.replace(Y,"-$&").toLowerCase(),c=a.getAttribute(d),"string"==typeof c){try{c=Z(c)}catch(e){}W.set(a,b,c)}else c=void 0;return c}r.extend({hasData:function(a){return W.hasData(a)||V.hasData(a)},data:function(a,b,c){return W.access(a,b,c)},removeData:function(a,b){W.remove(a,b)},_data:function(a,b,c){return V.access(a,b,c)},_removeData:function(a,b){V.remove(a,b)}}),r.fn.extend({data:function(a,b){var c,d,e,f=this[0],g=f&&f.attributes;if(void 0===a){if(this.length&&(e=W.get(f),1===f.nodeType&&!V.get(f,"hasDataAttrs"))){c=g.length;while(c--)g[c]&&(d=g[c].name,0===d.indexOf("data-")&&(d=r.camelCase(d.slice(5)),$(f,d,e[d])));V.set(f,"hasDataAttrs",!0)}return e}return"object"==typeof a?this.each(function(){W.set(this,a)}):S(this,function(b){var c;if(f&&void 0===b){if(c=W.get(f,a),void 0!==c)return c;if(c=$(f,a),void 0!==c)return c}else this.each(function(){W.set(this,a,b)})},null,b,arguments.length>1,null,!0)},removeData:function(a){return this.each(function(){W.remove(this,a)})}}),r.extend({queue:function(a,b,c){var d;if(a)return b=(b||"fx")+"queue",d=V.get(a,b),c&&(!d||r.isArray(c)?d=V.access(a,b,r.makeArray(c)):d.push(c)),d||[]},dequeue:function(a,b){b=b||"fx";var c=r.queue(a,b),d=c.length,e=c.shift(),f=r._queueHooks(a,b),g=function(){r.dequeue(a,b)};"inprogress"===e&&(e=c.shift(),d--),e&&("fx"===b&&c.unshift("inprogress"),delete f.stop,e.call(a,g,f)),!d&&f&&f.empty.fire()},_queueHooks:function(a,b){var c=b+"queueHooks";return V.get(a,c)||V.access(a,c,{empty:r.Callbacks("once memory").add(function(){V.remove(a,[b+"queue",c])})})}}),r.fn.extend({queue:function(a,b){var c=2;return"string"!=typeof a&&(b=a,a="fx",c--),arguments.length<c?r.queue(this[0],a):void 0===b?this:this.each(function(){var c=r.queue(this,a,b);r._queueHooks(this,a),"fx"===a&&"inprogress"!==c[0]&&r.dequeue(this,a)})},dequeue:function(a){return this.each(function(){r.dequeue(this,a)})},clearQueue:function(a){return this.queue(a||"fx",[])},promise:function(a,b){var c,d=1,e=r.Deferred(),f=this,g=this.length,h=function(){--d||e.resolveWith(f,[f])};"string"!=typeof a&&(b=a,a=void 0),a=a||"fx";while(g--)c=V.get(f[g],a+"queueHooks"),c&&c.empty&&(d++,c.empty.add(h));return h(),e.promise(b)}});var _=/[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/.source,aa=new RegExp("^(?:([+-])=|)("+_+")([a-z%]*)$","i"),ba=["Top","Right","Bottom","Left"],ca=function(a,b){return a=b||a,"none"===a.style.display||""===a.style.display&&r.contains(a.ownerDocument,a)&&"none"===r.css(a,"display")},da=function(a,b,c,d){var e,f,g={};for(f in b)g[f]=a.style[f],a.style[f]=b[f];e=c.apply(a,d||[]);for(f in b)a.style[f]=g[f];return e};function ea(a,b,c,d){var e,f=1,g=20,h=d?function(){return d.cur()}:function(){return r.css(a,b,"")},i=h(),j=c&&c[3]||(r.cssNumber[b]?"":"px"),k=(r.cssNumber[b]||"px"!==j&&+i)&&aa.exec(r.css(a,b));if(k&&k[3]!==j){j=j||k[3],c=c||[],k=+i||1;do f=f||".5",k/=f,r.style(a,b,k+j);while(f!==(f=h()/i)&&1!==f&&--g)}return c&&(k=+k||+i||0,e=c[1]?k+(c[1]+1)*c[2]:+c[2],d&&(d.unit=j,d.start=k,d.end=e)),e}var fa={};function ga(a){var b,c=a.ownerDocument,d=a.nodeName,e=fa[d];return e?e:(b=c.body.appendChild(c.createElement(d)),e=r.css(b,"display"),b.parentNode.removeChild(b),"none"===e&&(e="block"),fa[d]=e,e)}function ha(a,b){for(var c,d,e=[],f=0,g=a.length;f<g;f++)d=a[f],d.style&&(c=d.style.display,b?("none"===c&&(e[f]=V.get(d,"display")||null,e[f]||(d.style.display="")),""===d.style.display&&ca(d)&&(e[f]=ga(d))):"none"!==c&&(e[f]="none",V.set(d,"display",c)));for(f=0;f<g;f++)null!=e[f]&&(a[f].style.display=e[f]);return a}r.fn.extend({show:function(){return ha(this,!0)},hide:function(){return ha(this)},toggle:function(a){return"boolean"==typeof a?a?this.show():this.hide():this.each(function(){ca(this)?r(this).show():r(this).hide()})}});var ia=/^(?:checkbox|radio)$/i,ja=/<([a-z][^\/\0>\x20\t\r\n\f]+)/i,ka=/^$|\/(?:java|ecma)script/i,la={option:[1,"<select multiple='multiple'>","</select>"],thead:[1,"<table>","</table>"],col:[2,"<table><colgroup>","</colgroup></table>"],tr:[2,"<table><tbody>","</tbody></table>"],td:[3,"<table><tbody><tr>","</tr></tbody></table>"],_default:[0,"",""]};la.optgroup=la.option,la.tbody=la.tfoot=la.colgroup=la.caption=la.thead,la.th=la.td;function ma(a,b){var c;return c="undefined"!=typeof a.getElementsByTagName?a.getElementsByTagName(b||"*"):"undefined"!=typeof a.querySelectorAll?a.querySelectorAll(b||"*"):[],void 0===b||b&&r.nodeName(a,b)?r.merge([a],c):c}function na(a,b){for(var c=0,d=a.length;c<d;c++)V.set(a[c],"globalEval",!b||V.get(b[c],"globalEval"))}var oa=/<|&#?\w+;/;function pa(a,b,c,d,e){for(var f,g,h,i,j,k,l=b.createDocumentFragment(),m=[],n=0,o=a.length;n<o;n++)if(f=a[n],f||0===f)if("object"===r.type(f))r.merge(m,f.nodeType?[f]:f);else if(oa.test(f)){g=g||l.appendChild(b.createElement("div")),h=(ja.exec(f)||["",""])[1].toLowerCase(),i=la[h]||la._default,g.innerHTML=i[1]+r.htmlPrefilter(f)+i[2],k=i[0];while(k--)g=g.lastChild;r.merge(m,g.childNodes),g=l.firstChild,g.textContent=""}else m.push(b.createTextNode(f));l.textContent="",n=0;while(f=m[n++])if(d&&r.inArray(f,d)>-1)e&&e.push(f);else if(j=r.contains(f.ownerDocument,f),g=ma(l.appendChild(f),"script"),j&&na(g),c){k=0;while(f=g[k++])ka.test(f.type||"")&&c.push(f)}return l}!function(){var a=d.createDocumentFragment(),b=a.appendChild(d.createElement("div")),c=d.createElement("input");c.setAttribute("type","radio"),c.setAttribute("checked","checked"),c.setAttribute("name","t"),b.appendChild(c),o.checkClone=b.cloneNode(!0).cloneNode(!0).lastChild.checked,b.innerHTML="<textarea>x</textarea>",o.noCloneChecked=!!b.cloneNode(!0).lastChild.defaultValue}();var qa=d.documentElement,ra=/^key/,sa=/^(?:mouse|pointer|contextmenu|drag|drop)|click/,ta=/^([^.]*)(?:\.(.+)|)/;function ua(){return!0}function va(){return!1}function wa(){try{return d.activeElement}catch(a){}}function xa(a,b,c,d,e,f){var g,h;if("object"==typeof b){"string"!=typeof c&&(d=d||c,c=void 0);for(h in b)xa(a,h,c,d,b[h],f);return a}if(null==d&&null==e?(e=c,d=c=void 0):null==e&&("string"==typeof c?(e=d,d=void 0):(e=d,d=c,c=void 0)),e===!1)e=va;else if(!e)return a;return 1===f&&(g=e,e=function(a){return r().off(a),g.apply(this,arguments)},e.guid=g.guid||(g.guid=r.guid++)),a.each(function(){r.event.add(this,b,e,d,c)})}r.event={global:{},add:function(a,b,c,d,e){var f,g,h,i,j,k,l,m,n,o,p,q=V.get(a);if(q){c.handler&&(f=c,c=f.handler,e=f.selector),e&&r.find.matchesSelector(qa,e),c.guid||(c.guid=r.guid++),(i=q.events)||(i=q.events={}),(g=q.handle)||(g=q.handle=function(b){return"undefined"!=typeof r&&r.event.triggered!==b.type?r.event.dispatch.apply(a,arguments):void 0}),b=(b||"").match(K)||[""],j=b.length;while(j--)h=ta.exec(b[j])||[],n=p=h[1],o=(h[2]||"").split(".").sort(),n&&(l=r.event.special[n]||{},n=(e?l.delegateType:l.bindType)||n,l=r.event.special[n]||{},k=r.extend({type:n,origType:p,data:d,handler:c,guid:c.guid,selector:e,needsContext:e&&r.expr.match.needsContext.test(e),namespace:o.join(".")},f),(m=i[n])||(m=i[n]=[],m.delegateCount=0,l.setup&&l.setup.call(a,d,o,g)!==!1||a.addEventListener&&a.addEventListener(n,g)),l.add&&(l.add.call(a,k),k.handler.guid||(k.handler.guid=c.guid)),e?m.splice(m.delegateCount++,0,k):m.push(k),r.event.global[n]=!0)}},remove:function(a,b,c,d,e){var f,g,h,i,j,k,l,m,n,o,p,q=V.hasData(a)&&V.get(a);if(q&&(i=q.events)){b=(b||"").match(K)||[""],j=b.length;while(j--)if(h=ta.exec(b[j])||[],n=p=h[1],o=(h[2]||"").split(".").sort(),n){l=r.event.special[n]||{},n=(d?l.delegateType:l.bindType)||n,m=i[n]||[],h=h[2]&&new RegExp("(^|\\.)"+o.join("\\.(?:.*\\.|)")+"(\\.|$)"),g=f=m.length;while(f--)k=m[f],!e&&p!==k.origType||c&&c.guid!==k.guid||h&&!h.test(k.namespace)||d&&d!==k.selector&&("**"!==d||!k.selector)||(m.splice(f,1),k.selector&&m.delegateCount--,l.remove&&l.remove.call(a,k));g&&!m.length&&(l.teardown&&l.teardown.call(a,o,q.handle)!==!1||r.removeEvent(a,n,q.handle),delete i[n])}else for(n in i)r.event.remove(a,n+b[j],c,d,!0);r.isEmptyObject(i)&&V.remove(a,"handle events")}},dispatch:function(a){var b=r.event.fix(a),c,d,e,f,g,h,i=new Array(arguments.length),j=(V.get(this,"events")||{})[b.type]||[],k=r.event.special[b.type]||{};for(i[0]=b,c=1;c<arguments.length;c++)i[c]=arguments[c];if(b.delegateTarget=this,!k.preDispatch||k.preDispatch.call(this,b)!==!1){h=r.event.handlers.call(this,b,j),c=0;while((f=h[c++])&&!b.isPropagationStopped()){b.currentTarget=f.elem,d=0;while((g=f.handlers[d++])&&!b.isImmediatePropagationStopped())b.rnamespace&&!b.rnamespace.test(g.namespace)||(b.handleObj=g,b.data=g.data,e=((r.event.special[g.origType]||{}).handle||g.handler).apply(f.elem,i),void 0!==e&&(b.result=e)===!1&&(b.preventDefault(),b.stopPropagation()))}return k.postDispatch&&k.postDispatch.call(this,b),b.result}},handlers:function(a,b){var c,d,e,f,g,h=[],i=b.delegateCount,j=a.target;if(i&&j.nodeType&&!("click"===a.type&&a.button>=1))for(;j!==this;j=j.parentNode||this)if(1===j.nodeType&&("click"!==a.type||j.disabled!==!0)){for(f=[],g={},c=0;c<i;c++)d=b[c],e=d.selector+" ",void 0===g[e]&&(g[e]=d.needsContext?r(e,this).index(j)>-1:r.find(e,this,null,[j]).length),g[e]&&f.push(d);f.length&&h.push({elem:j,handlers:f})}return j=this,i<b.length&&h.push({elem:j,handlers:b.slice(i)}),h},addProp:function(a,b){Object.defineProperty(r.Event.prototype,a,{enumerable:!0,configurable:!0,get:r.isFunction(b)?function(){if(this.originalEvent)return b(this.originalEvent)}:function(){if(this.originalEvent)return this.originalEvent[a]},set:function(b){Object.defineProperty(this,a,{enumerable:!0,configurable:!0,writable:!0,value:b})}})},fix:function(a){return a[r.expando]?a:new r.Event(a)},special:{load:{noBubble:!0},focus:{trigger:function(){if(this!==wa()&&this.focus)return this.focus(),!1},delegateType:"focusin"},blur:{trigger:function(){if(this===wa()&&this.blur)return this.blur(),!1},delegateType:"focusout"},click:{trigger:function(){if("checkbox"===this.type&&this.click&&r.nodeName(this,"input"))return this.click(),!1},_default:function(a){return r.nodeName(a.target,"a")}},beforeunload:{postDispatch:function(a){void 0!==a.result&&a.originalEvent&&(a.originalEvent.returnValue=a.result)}}}},r.removeEvent=function(a,b,c){a.removeEventListener&&a.removeEventListener(b,c)},r.Event=function(a,b){return this instanceof r.Event?(a&&a.type?(this.originalEvent=a,this.type=a.type,this.isDefaultPrevented=a.defaultPrevented||void 0===a.defaultPrevented&&a.returnValue===!1?ua:va,this.target=a.target&&3===a.target.nodeType?a.target.parentNode:a.target,this.currentTarget=a.currentTarget,this.relatedTarget=a.relatedTarget):this.type=a,b&&r.extend(this,b),this.timeStamp=a&&a.timeStamp||r.now(),void(this[r.expando]=!0)):new r.Event(a,b)},r.Event.prototype={constructor:r.Event,isDefaultPrevented:va,isPropagationStopped:va,isImmediatePropagationStopped:va,isSimulated:!1,preventDefault:function(){var a=this.originalEvent;this.isDefaultPrevented=ua,a&&!this.isSimulated&&a.preventDefault()},stopPropagation:function(){var a=this.originalEvent;this.isPropagationStopped=ua,a&&!this.isSimulated&&a.stopPropagation()},stopImmediatePropagation:function(){var a=this.originalEvent;this.isImmediatePropagationStopped=ua,a&&!this.isSimulated&&a.stopImmediatePropagation(),this.stopPropagation()}},r.each({altKey:!0,bubbles:!0,cancelable:!0,changedTouches:!0,ctrlKey:!0,detail:!0,eventPhase:!0,metaKey:!0,pageX:!0,pageY:!0,shiftKey:!0,view:!0,"char":!0,charCode:!0,key:!0,keyCode:!0,button:!0,buttons:!0,clientX:!0,clientY:!0,offsetX:!0,offsetY:!0,pointerId:!0,pointerType:!0,screenX:!0,screenY:!0,targetTouches:!0,toElement:!0,touches:!0,which:function(a){var b=a.button;return null==a.which&&ra.test(a.type)?null!=a.charCode?a.charCode:a.keyCode:!a.which&&void 0!==b&&sa.test(a.type)?1&b?1:2&b?3:4&b?2:0:a.which}},r.event.addProp),r.each({mouseenter:"mouseover",mouseleave:"mouseout",pointerenter:"pointerover",pointerleave:"pointerout"},function(a,b){r.event.special[a]={delegateType:b,bindType:b,handle:function(a){var c,d=this,e=a.relatedTarget,f=a.handleObj;return e&&(e===d||r.contains(d,e))||(a.type=f.origType,c=f.handler.apply(this,arguments),a.type=b),c}}}),r.fn.extend({on:function(a,b,c,d){return xa(this,a,b,c,d)},one:function(a,b,c,d){return xa(this,a,b,c,d,1)},off:function(a,b,c){var d,e;if(a&&a.preventDefault&&a.handleObj)return d=a.handleObj,r(a.delegateTarget).off(d.namespace?d.origType+"."+d.namespace:d.origType,d.selector,d.handler),this;if("object"==typeof a){for(e in a)this.off(e,b,a[e]);return this}return b!==!1&&"function"!=typeof b||(c=b,b=void 0),c===!1&&(c=va),this.each(function(){r.event.remove(this,a,c,b)})}});var ya=/<(?!area|br|col|embed|hr|img|input|link|meta|param)(([a-z][^\/\0>\x20\t\r\n\f]*)[^>]*)\/>/gi,za=/<script|<style|<link/i,Aa=/checked\s*(?:[^=]|=\s*.checked.)/i,Ba=/^true\/(.*)/,Ca=/^\s*<!(?:\[CDATA\[|--)|(?:\]\]|--)>\s*$/g;function Da(a,b){return r.nodeName(a,"table")&&r.nodeName(11!==b.nodeType?b:b.firstChild,"tr")?a.getElementsByTagName("tbody")[0]||a:a}function Ea(a){return a.type=(null!==a.getAttribute("type"))+"/"+a.type,a}function Fa(a){var b=Ba.exec(a.type);return b?a.type=b[1]:a.removeAttribute("type"),a}function Ga(a,b){var c,d,e,f,g,h,i,j;if(1===b.nodeType){if(V.hasData(a)&&(f=V.access(a),g=V.set(b,f),j=f.events)){delete g.handle,g.events={};for(e in j)for(c=0,d=j[e].length;c<d;c++)r.event.add(b,e,j[e][c])}W.hasData(a)&&(h=W.access(a),i=r.extend({},h),W.set(b,i))}}function Ha(a,b){var c=b.nodeName.toLowerCase();"input"===c&&ia.test(a.type)?b.checked=a.checked:"input"!==c&&"textarea"!==c||(b.defaultValue=a.defaultValue)}function Ia(a,b,c,d){b=g.apply([],b);var e,f,h,i,j,k,l=0,m=a.length,n=m-1,q=b[0],s=r.isFunction(q);if(s||m>1&&"string"==typeof q&&!o.checkClone&&Aa.test(q))return a.each(function(e){var f=a.eq(e);s&&(b[0]=q.call(this,e,f.html())),Ia(f,b,c,d)});if(m&&(e=pa(b,a[0].ownerDocument,!1,a,d),f=e.firstChild,1===e.childNodes.length&&(e=f),f||d)){for(h=r.map(ma(e,"script"),Ea),i=h.length;l<m;l++)j=e,l!==n&&(j=r.clone(j,!0,!0),i&&r.merge(h,ma(j,"script"))),c.call(a[l],j,l);if(i)for(k=h[h.length-1].ownerDocument,r.map(h,Fa),l=0;l<i;l++)j=h[l],ka.test(j.type||"")&&!V.access(j,"globalEval")&&r.contains(k,j)&&(j.src?r._evalUrl&&r._evalUrl(j.src):p(j.textContent.replace(Ca,""),k))}return a}function Ja(a,b,c){for(var d,e=b?r.filter(b,a):a,f=0;null!=(d=e[f]);f++)c||1!==d.nodeType||r.cleanData(ma(d)),d.parentNode&&(c&&r.contains(d.ownerDocument,d)&&na(ma(d,"script")),d.parentNode.removeChild(d));return a}r.extend({htmlPrefilter:function(a){return a.replace(ya,"<$1></$2>")},clone:function(a,b,c){var d,e,f,g,h=a.cloneNode(!0),i=r.contains(a.ownerDocument,a);if(!(o.noCloneChecked||1!==a.nodeType&&11!==a.nodeType||r.isXMLDoc(a)))for(g=ma(h),f=ma(a),d=0,e=f.length;d<e;d++)Ha(f[d],g[d]);if(b)if(c)for(f=f||ma(a),g=g||ma(h),d=0,e=f.length;d<e;d++)Ga(f[d],g[d]);else Ga(a,h);return g=ma(h,"script"),g.length>0&&na(g,!i&&ma(a,"script")),h},cleanData:function(a){for(var b,c,d,e=r.event.special,f=0;void 0!==(c=a[f]);f++)if(T(c)){if(b=c[V.expando]){if(b.events)for(d in b.events)e[d]?r.event.remove(c,d):r.removeEvent(c,d,b.handle);c[V.expando]=void 0}c[W.expando]&&(c[W.expando]=void 0)}}}),r.fn.extend({detach:function(a){return Ja(this,a,!0)},remove:function(a){return Ja(this,a)},text:function(a){return S(this,function(a){return void 0===a?r.text(this):this.empty().each(function(){1!==this.nodeType&&11!==this.nodeType&&9!==this.nodeType||(this.textContent=a)})},null,a,arguments.length)},append:function(){return Ia(this,arguments,function(a){if(1===this.nodeType||11===this.nodeType||9===this.nodeType){var b=Da(this,a);b.appendChild(a)}})},prepend:function(){return Ia(this,arguments,function(a){if(1===this.nodeType||11===this.nodeType||9===this.nodeType){var b=Da(this,a);b.insertBefore(a,b.firstChild)}})},before:function(){return Ia(this,arguments,function(a){this.parentNode&&this.parentNode.insertBefore(a,this)})},after:function(){return Ia(this,arguments,function(a){this.parentNode&&this.parentNode.insertBefore(a,this.nextSibling)})},empty:function(){for(var a,b=0;null!=(a=this[b]);b++)1===a.nodeType&&(r.cleanData(ma(a,!1)),a.textContent="");return this},clone:function(a,b){return a=null!=a&&a,b=null==b?a:b,this.map(function(){return r.clone(this,a,b)})},html:function(a){return S(this,function(a){var b=this[0]||{},c=0,d=this.length;if(void 0===a&&1===b.nodeType)return b.innerHTML;if("string"==typeof a&&!za.test(a)&&!la[(ja.exec(a)||["",""])[1].toLowerCase()]){a=r.htmlPrefilter(a);try{for(;c<d;c++)b=this[c]||{},1===b.nodeType&&(r.cleanData(ma(b,!1)),b.innerHTML=a);b=0}catch(e){}}b&&this.empty().append(a)},null,a,arguments.length)},replaceWith:function(){var a=[];return Ia(this,arguments,function(b){var c=this.parentNode;r.inArray(this,a)<0&&(r.cleanData(ma(this)),c&&c.replaceChild(b,this))},a)}}),r.each({appendTo:"append",prependTo:"prepend",insertBefore:"before",insertAfter:"after",replaceAll:"replaceWith"},function(a,b){r.fn[a]=function(a){for(var c,d=[],e=r(a),f=e.length-1,g=0;g<=f;g++)c=g===f?this:this.clone(!0),r(e[g])[b](c),h.apply(d,c.get());return this.pushStack(d)}});var Ka=/^margin/,La=new RegExp("^("+_+")(?!px)[a-z%]+$","i"),Ma=function(b){var c=b.ownerDocument.defaultView;return c&&c.opener||(c=a),c.getComputedStyle(b)};!function(){function b(){if(i){i.style.cssText="box-sizing:border-box;position:relative;display:block;margin:auto;border:1px;padding:1px;top:1%;width:50%",i.innerHTML="",qa.appendChild(h);var b=a.getComputedStyle(i);c="1%"!==b.top,g="2px"===b.marginLeft,e="4px"===b.width,i.style.marginRight="50%",f="4px"===b.marginRight,qa.removeChild(h),i=null}}var c,e,f,g,h=d.createElement("div"),i=d.createElement("div");i.style&&(i.style.backgroundClip="content-box",i.cloneNode(!0).style.backgroundClip="",o.clearCloneStyle="content-box"===i.style.backgroundClip,h.style.cssText="border:0;width:8px;height:0;top:0;left:-9999px;padding:0;margin-top:1px;position:absolute",h.appendChild(i),r.extend(o,{pixelPosition:function(){return b(),c},boxSizingReliable:function(){return b(),e},pixelMarginRight:function(){return b(),f},reliableMarginLeft:function(){return b(),g}}))}();function Na(a,b,c){var d,e,f,g,h=a.style;return c=c||Ma(a),c&&(g=c.getPropertyValue(b)||c[b],""!==g||r.contains(a.ownerDocument,a)||(g=r.style(a,b)),!o.pixelMarginRight()&&La.test(g)&&Ka.test(b)&&(d=h.width,e=h.minWidth,f=h.maxWidth,h.minWidth=h.maxWidth=h.width=g,g=c.width,h.width=d,h.minWidth=e,h.maxWidth=f)),void 0!==g?g+"":g}function Oa(a,b){return{get:function(){return a()?void delete this.get:(this.get=b).apply(this,arguments)}}}var Pa=/^(none|table(?!-c[ea]).+)/,Qa={position:"absolute",visibility:"hidden",display:"block"},Ra={letterSpacing:"0",fontWeight:"400"},Sa=["Webkit","Moz","ms"],Ta=d.createElement("div").style;function Ua(a){if(a in Ta)return a;var b=a[0].toUpperCase()+a.slice(1),c=Sa.length;while(c--)if(a=Sa[c]+b,a in Ta)return a}function Va(a,b,c){var d=aa.exec(b);return d?Math.max(0,d[2]-(c||0))+(d[3]||"px"):b}function Wa(a,b,c,d,e){var f,g=0;for(f=c===(d?"border":"content")?4:"width"===b?1:0;f<4;f+=2)"margin"===c&&(g+=r.css(a,c+ba[f],!0,e)),d?("content"===c&&(g-=r.css(a,"padding"+ba[f],!0,e)),"margin"!==c&&(g-=r.css(a,"border"+ba[f]+"Width",!0,e))):(g+=r.css(a,"padding"+ba[f],!0,e),"padding"!==c&&(g+=r.css(a,"border"+ba[f]+"Width",!0,e)));return g}function Xa(a,b,c){var d,e=!0,f=Ma(a),g="border-box"===r.css(a,"boxSizing",!1,f);if(a.getClientRects().length&&(d=a.getBoundingClientRect()[b]),d<=0||null==d){if(d=Na(a,b,f),(d<0||null==d)&&(d=a.style[b]),La.test(d))return d;e=g&&(o.boxSizingReliable()||d===a.style[b]),d=parseFloat(d)||0}return d+Wa(a,b,c||(g?"border":"content"),e,f)+"px"}r.extend({cssHooks:{opacity:{get:function(a,b){if(b){var c=Na(a,"opacity");return""===c?"1":c}}}},cssNumber:{animationIterationCount:!0,columnCount:!0,fillOpacity:!0,flexGrow:!0,flexShrink:!0,fontWeight:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,widows:!0,zIndex:!0,zoom:!0},cssProps:{"float":"cssFloat"},style:function(a,b,c,d){if(a&&3!==a.nodeType&&8!==a.nodeType&&a.style){var e,f,g,h=r.camelCase(b),i=a.style;return b=r.cssProps[h]||(r.cssProps[h]=Ua(h)||h),g=r.cssHooks[b]||r.cssHooks[h],void 0===c?g&&"get"in g&&void 0!==(e=g.get(a,!1,d))?e:i[b]:(f=typeof c,"string"===f&&(e=aa.exec(c))&&e[1]&&(c=ea(a,b,e),f="number"),null!=c&&c===c&&("number"===f&&(c+=e&&e[3]||(r.cssNumber[h]?"":"px")),o.clearCloneStyle||""!==c||0!==b.indexOf("background")||(i[b]="inherit"),g&&"set"in g&&void 0===(c=g.set(a,c,d))||(i[b]=c)),void 0)}},css:function(a,b,c,d){var e,f,g,h=r.camelCase(b);return b=r.cssProps[h]||(r.cssProps[h]=Ua(h)||h),g=r.cssHooks[b]||r.cssHooks[h],g&&"get"in g&&(e=g.get(a,!0,c)),void 0===e&&(e=Na(a,b,d)),"normal"===e&&b in Ra&&(e=Ra[b]),""===c||c?(f=parseFloat(e),c===!0||isFinite(f)?f||0:e):e}}),r.each(["height","width"],function(a,b){r.cssHooks[b]={get:function(a,c,d){if(c)return!Pa.test(r.css(a,"display"))||a.getClientRects().length&&a.getBoundingClientRect().width?Xa(a,b,d):da(a,Qa,function(){return Xa(a,b,d)})},set:function(a,c,d){var e,f=d&&Ma(a),g=d&&Wa(a,b,d,"border-box"===r.css(a,"boxSizing",!1,f),f);return g&&(e=aa.exec(c))&&"px"!==(e[3]||"px")&&(a.style[b]=c,c=r.css(a,b)),Va(a,c,g)}}}),r.cssHooks.marginLeft=Oa(o.reliableMarginLeft,function(a,b){if(b)return(parseFloat(Na(a,"marginLeft"))||a.getBoundingClientRect().left-da(a,{marginLeft:0},function(){return a.getBoundingClientRect().left}))+"px"}),r.each({margin:"",padding:"",border:"Width"},function(a,b){r.cssHooks[a+b]={expand:function(c){for(var d=0,e={},f="string"==typeof c?c.split(" "):[c];d<4;d++)e[a+ba[d]+b]=f[d]||f[d-2]||f[0];return e}},Ka.test(a)||(r.cssHooks[a+b].set=Va)}),r.fn.extend({css:function(a,b){return S(this,function(a,b,c){var d,e,f={},g=0;if(r.isArray(b)){for(d=Ma(a),e=b.length;g<e;g++)f[b[g]]=r.css(a,b[g],!1,d);return f}return void 0!==c?r.style(a,b,c):r.css(a,b)},a,b,arguments.length>1)}});function Ya(a,b,c,d,e){return new Ya.prototype.init(a,b,c,d,e)}r.Tween=Ya,Ya.prototype={constructor:Ya,init:function(a,b,c,d,e,f){this.elem=a,this.prop=c,this.easing=e||r.easing._default,this.options=b,this.start=this.now=this.cur(),this.end=d,this.unit=f||(r.cssNumber[c]?"":"px")},cur:function(){var a=Ya.propHooks[this.prop];return a&&a.get?a.get(this):Ya.propHooks._default.get(this)},run:function(a){var b,c=Ya.propHooks[this.prop];return this.options.duration?this.pos=b=r.easing[this.easing](a,this.options.duration*a,0,1,this.options.duration):this.pos=b=a,this.now=(this.end-this.start)*b+this.start,this.options.step&&this.options.step.call(this.elem,this.now,this),c&&c.set?c.set(this):Ya.propHooks._default.set(this),this}},Ya.prototype.init.prototype=Ya.prototype,Ya.propHooks={_default:{get:function(a){var b;return 1!==a.elem.nodeType||null!=a.elem[a.prop]&&null==a.elem.style[a.prop]?a.elem[a.prop]:(b=r.css(a.elem,a.prop,""),b&&"auto"!==b?b:0)},set:function(a){r.fx.step[a.prop]?r.fx.step[a.prop](a):1!==a.elem.nodeType||null==a.elem.style[r.cssProps[a.prop]]&&!r.cssHooks[a.prop]?a.elem[a.prop]=a.now:r.style(a.elem,a.prop,a.now+a.unit)}}},Ya.propHooks.scrollTop=Ya.propHooks.scrollLeft={set:function(a){a.elem.nodeType&&a.elem.parentNode&&(a.elem[a.prop]=a.now)}},r.easing={linear:function(a){return a},swing:function(a){return.5-Math.cos(a*Math.PI)/2},_default:"swing"},r.fx=Ya.prototype.init,r.fx.step={};var Za,$a,_a=/^(?:toggle|show|hide)$/,ab=/queueHooks$/;function bb(){$a&&(a.requestAnimationFrame(bb),r.fx.tick())}function cb(){return a.setTimeout(function(){Za=void 0}),Za=r.now()}function db(a,b){var c,d=0,e={height:a};for(b=b?1:0;d<4;d+=2-b)c=ba[d],e["margin"+c]=e["padding"+c]=a;return b&&(e.opacity=e.width=a),e}function eb(a,b,c){for(var d,e=(hb.tweeners[b]||[]).concat(hb.tweeners["*"]),f=0,g=e.length;f<g;f++)if(d=e[f].call(c,b,a))return d}function fb(a,b,c){var d,e,f,g,h,i,j,k,l="width"in b||"height"in b,m=this,n={},o=a.style,p=a.nodeType&&ca(a),q=V.get(a,"fxshow");c.queue||(g=r._queueHooks(a,"fx"),null==g.unqueued&&(g.unqueued=0,h=g.empty.fire,g.empty.fire=function(){g.unqueued||h()}),g.unqueued++,m.always(function(){m.always(function(){g.unqueued--,r.queue(a,"fx").length||g.empty.fire()})}));for(d in b)if(e=b[d],_a.test(e)){if(delete b[d],f=f||"toggle"===e,e===(p?"hide":"show")){if("show"!==e||!q||void 0===q[d])continue;p=!0}n[d]=q&&q[d]||r.style(a,d)}if(i=!r.isEmptyObject(b),i||!r.isEmptyObject(n)){l&&1===a.nodeType&&(c.overflow=[o.overflow,o.overflowX,o.overflowY],j=q&&q.display,null==j&&(j=V.get(a,"display")),k=r.css(a,"display"),"none"===k&&(j?k=j:(ha([a],!0),j=a.style.display||j,k=r.css(a,"display"),ha([a]))),("inline"===k||"inline-block"===k&&null!=j)&&"none"===r.css(a,"float")&&(i||(m.done(function(){o.display=j}),null==j&&(k=o.display,j="none"===k?"":k)),o.display="inline-block")),c.overflow&&(o.overflow="hidden",m.always(function(){o.overflow=c.overflow[0],o.overflowX=c.overflow[1],o.overflowY=c.overflow[2]})),i=!1;for(d in n)i||(q?"hidden"in q&&(p=q.hidden):q=V.access(a,"fxshow",{display:j}),f&&(q.hidden=!p),p&&ha([a],!0),m.done(function(){p||ha([a]),V.remove(a,"fxshow");for(d in n)r.style(a,d,n[d])})),i=eb(p?q[d]:0,d,m),d in q||(q[d]=i.start,p&&(i.end=i.start,i.start=0))}}function gb(a,b){var c,d,e,f,g;for(c in a)if(d=r.camelCase(c),e=b[d],f=a[c],r.isArray(f)&&(e=f[1],f=a[c]=f[0]),c!==d&&(a[d]=f,delete a[c]),g=r.cssHooks[d],g&&"expand"in g){f=g.expand(f),delete a[d];for(c in f)c in a||(a[c]=f[c],b[c]=e)}else b[d]=e}function hb(a,b,c){var d,e,f=0,g=hb.prefilters.length,h=r.Deferred().always(function(){delete i.elem}),i=function(){if(e)return!1;for(var b=Za||cb(),c=Math.max(0,j.startTime+j.duration-b),d=c/j.duration||0,f=1-d,g=0,i=j.tweens.length;g<i;g++)j.tweens[g].run(f);return h.notifyWith(a,[j,f,c]),f<1&&i?c:(h.resolveWith(a,[j]),!1)},j=h.promise({elem:a,props:r.extend({},b),opts:r.extend(!0,{specialEasing:{},easing:r.easing._default},c),originalProperties:b,originalOptions:c,startTime:Za||cb(),duration:c.duration,tweens:[],createTween:function(b,c){var d=r.Tween(a,j.opts,b,c,j.opts.specialEasing[b]||j.opts.easing);return j.tweens.push(d),d},stop:function(b){var c=0,d=b?j.tweens.length:0;if(e)return this;for(e=!0;c<d;c++)j.tweens[c].run(1);return b?(h.notifyWith(a,[j,1,0]),h.resolveWith(a,[j,b])):h.rejectWith(a,[j,b]),this}}),k=j.props;for(gb(k,j.opts.specialEasing);f<g;f++)if(d=hb.prefilters[f].call(j,a,k,j.opts))return r.isFunction(d.stop)&&(r._queueHooks(j.elem,j.opts.queue).stop=r.proxy(d.stop,d)),d;return r.map(k,eb,j),r.isFunction(j.opts.start)&&j.opts.start.call(a,j),r.fx.timer(r.extend(i,{elem:a,anim:j,queue:j.opts.queue})),j.progress(j.opts.progress).done(j.opts.done,j.opts.complete).fail(j.opts.fail).always(j.opts.always)}r.Animation=r.extend(hb,{tweeners:{"*":[function(a,b){var c=this.createTween(a,b);return ea(c.elem,a,aa.exec(b),c),c}]},tweener:function(a,b){r.isFunction(a)?(b=a,a=["*"]):a=a.match(K);for(var c,d=0,e=a.length;d<e;d++)c=a[d],hb.tweeners[c]=hb.tweeners[c]||[],hb.tweeners[c].unshift(b)},prefilters:[fb],prefilter:function(a,b){b?hb.prefilters.unshift(a):hb.prefilters.push(a)}}),r.speed=function(a,b,c){var e=a&&"object"==typeof a?r.extend({},a):{complete:c||!c&&b||r.isFunction(a)&&a,duration:a,easing:c&&b||b&&!r.isFunction(b)&&b};return r.fx.off||d.hidden?e.duration=0:"number"!=typeof e.duration&&(e.duration in r.fx.speeds?e.duration=r.fx.speeds[e.duration]:e.duration=r.fx.speeds._default),null!=e.queue&&e.queue!==!0||(e.queue="fx"),e.old=e.complete,e.complete=function(){r.isFunction(e.old)&&e.old.call(this),e.queue&&r.dequeue(this,e.queue)},e},r.fn.extend({fadeTo:function(a,b,c,d){return this.filter(ca).css("opacity",0).show().end().animate({opacity:b},a,c,d)},animate:function(a,b,c,d){var e=r.isEmptyObject(a),f=r.speed(b,c,d),g=function(){var b=hb(this,r.extend({},a),f);(e||V.get(this,"finish"))&&b.stop(!0)};return g.finish=g,e||f.queue===!1?this.each(g):this.queue(f.queue,g)},stop:function(a,b,c){var d=function(a){var b=a.stop;delete a.stop,b(c)};return"string"!=typeof a&&(c=b,b=a,a=void 0),b&&a!==!1&&this.queue(a||"fx",[]),this.each(function(){var b=!0,e=null!=a&&a+"queueHooks",f=r.timers,g=V.get(this);if(e)g[e]&&g[e].stop&&d(g[e]);else for(e in g)g[e]&&g[e].stop&&ab.test(e)&&d(g[e]);for(e=f.length;e--;)f[e].elem!==this||null!=a&&f[e].queue!==a||(f[e].anim.stop(c),b=!1,f.splice(e,1));!b&&c||r.dequeue(this,a)})},finish:function(a){return a!==!1&&(a=a||"fx"),this.each(function(){var b,c=V.get(this),d=c[a+"queue"],e=c[a+"queueHooks"],f=r.timers,g=d?d.length:0;for(c.finish=!0,r.queue(this,a,[]),e&&e.stop&&e.stop.call(this,!0),b=f.length;b--;)f[b].elem===this&&f[b].queue===a&&(f[b].anim.stop(!0),f.splice(b,1));for(b=0;b<g;b++)d[b]&&d[b].finish&&d[b].finish.call(this);delete c.finish})}}),r.each(["toggle","show","hide"],function(a,b){var c=r.fn[b];r.fn[b]=function(a,d,e){return null==a||"boolean"==typeof a?c.apply(this,arguments):this.animate(db(b,!0),a,d,e)}}),r.each({slideDown:db("show"),slideUp:db("hide"),slideToggle:db("toggle"),fadeIn:{opacity:"show"},fadeOut:{opacity:"hide"},fadeToggle:{opacity:"toggle"}},function(a,b){r.fn[a]=function(a,c,d){return this.animate(b,a,c,d)}}),r.timers=[],r.fx.tick=function(){var a,b=0,c=r.timers;for(Za=r.now();b<c.length;b++)a=c[b],a()||c[b]!==a||c.splice(b--,1);c.length||r.fx.stop(),Za=void 0},r.fx.timer=function(a){r.timers.push(a),a()?r.fx.start():r.timers.pop()},r.fx.interval=13,r.fx.start=function(){$a||($a=a.requestAnimationFrame?a.requestAnimationFrame(bb):a.setInterval(r.fx.tick,r.fx.interval))},r.fx.stop=function(){a.cancelAnimationFrame?a.cancelAnimationFrame($a):a.clearInterval($a),$a=null},r.fx.speeds={slow:600,fast:200,_default:400},r.fn.delay=function(b,c){return b=r.fx?r.fx.speeds[b]||b:b,c=c||"fx",this.queue(c,function(c,d){var e=a.setTimeout(c,b);d.stop=function(){a.clearTimeout(e)}})},function(){var a=d.createElement("input"),b=d.createElement("select"),c=b.appendChild(d.createElement("option"));a.type="checkbox",o.checkOn=""!==a.value,o.optSelected=c.selected,a=d.createElement("input"),a.value="t",a.type="radio",o.radioValue="t"===a.value}();var ib,jb=r.expr.attrHandle;r.fn.extend({attr:function(a,b){return S(this,r.attr,a,b,arguments.length>1)},removeAttr:function(a){return this.each(function(){r.removeAttr(this,a)})}}),r.extend({attr:function(a,b,c){var d,e,f=a.nodeType;if(3!==f&&8!==f&&2!==f)return"undefined"==typeof a.getAttribute?r.prop(a,b,c):(1===f&&r.isXMLDoc(a)||(e=r.attrHooks[b.toLowerCase()]||(r.expr.match.bool.test(b)?ib:void 0)),
    4: void 0!==c?null===c?void r.removeAttr(a,b):e&&"set"in e&&void 0!==(d=e.set(a,c,b))?d:(a.setAttribute(b,c+""),c):e&&"get"in e&&null!==(d=e.get(a,b))?d:(d=r.find.attr(a,b),null==d?void 0:d))},attrHooks:{type:{set:function(a,b){if(!o.radioValue&&"radio"===b&&r.nodeName(a,"input")){var c=a.value;return a.setAttribute("type",b),c&&(a.value=c),b}}}},removeAttr:function(a,b){var c,d=0,e=b&&b.match(K);if(e&&1===a.nodeType)while(c=e[d++])a.removeAttribute(c)}}),ib={set:function(a,b,c){return b===!1?r.removeAttr(a,c):a.setAttribute(c,c),c}},r.each(r.expr.match.bool.source.match(/\w+/g),function(a,b){var c=jb[b]||r.find.attr;jb[b]=function(a,b,d){var e,f,g=b.toLowerCase();return d||(f=jb[g],jb[g]=e,e=null!=c(a,b,d)?g:null,jb[g]=f),e}});var kb=/^(?:input|select|textarea|button)$/i,lb=/^(?:a|area)$/i;r.fn.extend({prop:function(a,b){return S(this,r.prop,a,b,arguments.length>1)},removeProp:function(a){return this.each(function(){delete this[r.propFix[a]||a]})}}),r.extend({prop:function(a,b,c){var d,e,f=a.nodeType;if(3!==f&&8!==f&&2!==f)return 1===f&&r.isXMLDoc(a)||(b=r.propFix[b]||b,e=r.propHooks[b]),void 0!==c?e&&"set"in e&&void 0!==(d=e.set(a,c,b))?d:a[b]=c:e&&"get"in e&&null!==(d=e.get(a,b))?d:a[b]},propHooks:{tabIndex:{get:function(a){var b=r.find.attr(a,"tabindex");return b?parseInt(b,10):kb.test(a.nodeName)||lb.test(a.nodeName)&&a.href?0:-1}}},propFix:{"for":"htmlFor","class":"className"}}),o.optSelected||(r.propHooks.selected={get:function(a){var b=a.parentNode;return b&&b.parentNode&&b.parentNode.selectedIndex,null},set:function(a){var b=a.parentNode;b&&(b.selectedIndex,b.parentNode&&b.parentNode.selectedIndex)}}),r.each(["tabIndex","readOnly","maxLength","cellSpacing","cellPadding","rowSpan","colSpan","useMap","frameBorder","contentEditable"],function(){r.propFix[this.toLowerCase()]=this});function mb(a){var b=a.match(K)||[];return b.join(" ")}function nb(a){return a.getAttribute&&a.getAttribute("class")||""}r.fn.extend({addClass:function(a){var b,c,d,e,f,g,h,i=0;if(r.isFunction(a))return this.each(function(b){r(this).addClass(a.call(this,b,nb(this)))});if("string"==typeof a&&a){b=a.match(K)||[];while(c=this[i++])if(e=nb(c),d=1===c.nodeType&&" "+mb(e)+" "){g=0;while(f=b[g++])d.indexOf(" "+f+" ")<0&&(d+=f+" ");h=mb(d),e!==h&&c.setAttribute("class",h)}}return this},removeClass:function(a){var b,c,d,e,f,g,h,i=0;if(r.isFunction(a))return this.each(function(b){r(this).removeClass(a.call(this,b,nb(this)))});if(!arguments.length)return this.attr("class","");if("string"==typeof a&&a){b=a.match(K)||[];while(c=this[i++])if(e=nb(c),d=1===c.nodeType&&" "+mb(e)+" "){g=0;while(f=b[g++])while(d.indexOf(" "+f+" ")>-1)d=d.replace(" "+f+" "," ");h=mb(d),e!==h&&c.setAttribute("class",h)}}return this},toggleClass:function(a,b){var c=typeof a;return"boolean"==typeof b&&"string"===c?b?this.addClass(a):this.removeClass(a):r.isFunction(a)?this.each(function(c){r(this).toggleClass(a.call(this,c,nb(this),b),b)}):this.each(function(){var b,d,e,f;if("string"===c){d=0,e=r(this),f=a.match(K)||[];while(b=f[d++])e.hasClass(b)?e.removeClass(b):e.addClass(b)}else void 0!==a&&"boolean"!==c||(b=nb(this),b&&V.set(this,"__className__",b),this.setAttribute&&this.setAttribute("class",b||a===!1?"":V.get(this,"__className__")||""))})},hasClass:function(a){var b,c,d=0;b=" "+a+" ";while(c=this[d++])if(1===c.nodeType&&(" "+mb(nb(c))+" ").indexOf(b)>-1)return!0;return!1}});var ob=/\r/g;r.fn.extend({val:function(a){var b,c,d,e=this[0];{if(arguments.length)return d=r.isFunction(a),this.each(function(c){var e;1===this.nodeType&&(e=d?a.call(this,c,r(this).val()):a,null==e?e="":"number"==typeof e?e+="":r.isArray(e)&&(e=r.map(e,function(a){return null==a?"":a+""})),b=r.valHooks[this.type]||r.valHooks[this.nodeName.toLowerCase()],b&&"set"in b&&void 0!==b.set(this,e,"value")||(this.value=e))});if(e)return b=r.valHooks[e.type]||r.valHooks[e.nodeName.toLowerCase()],b&&"get"in b&&void 0!==(c=b.get(e,"value"))?c:(c=e.value,"string"==typeof c?c.replace(ob,""):null==c?"":c)}}}),r.extend({valHooks:{option:{get:function(a){var b=r.find.attr(a,"value");return null!=b?b:mb(r.text(a))}},select:{get:function(a){var b,c,d,e=a.options,f=a.selectedIndex,g="select-one"===a.type,h=g?null:[],i=g?f+1:e.length;for(d=f<0?i:g?f:0;d<i;d++)if(c=e[d],(c.selected||d===f)&&!c.disabled&&(!c.parentNode.disabled||!r.nodeName(c.parentNode,"optgroup"))){if(b=r(c).val(),g)return b;h.push(b)}return h},set:function(a,b){var c,d,e=a.options,f=r.makeArray(b),g=e.length;while(g--)d=e[g],(d.selected=r.inArray(r.valHooks.option.get(d),f)>-1)&&(c=!0);return c||(a.selectedIndex=-1),f}}}}),r.each(["radio","checkbox"],function(){r.valHooks[this]={set:function(a,b){if(r.isArray(b))return a.checked=r.inArray(r(a).val(),b)>-1}},o.checkOn||(r.valHooks[this].get=function(a){return null===a.getAttribute("value")?"on":a.value})});var pb=/^(?:focusinfocus|focusoutblur)$/;r.extend(r.event,{trigger:function(b,c,e,f){var g,h,i,j,k,m,n,o=[e||d],p=l.call(b,"type")?b.type:b,q=l.call(b,"namespace")?b.namespace.split("."):[];if(h=i=e=e||d,3!==e.nodeType&&8!==e.nodeType&&!pb.test(p+r.event.triggered)&&(p.indexOf(".")>-1&&(q=p.split("."),p=q.shift(),q.sort()),k=p.indexOf(":")<0&&"on"+p,b=b[r.expando]?b:new r.Event(p,"object"==typeof b&&b),b.isTrigger=f?2:3,b.namespace=q.join("."),b.rnamespace=b.namespace?new RegExp("(^|\\.)"+q.join("\\.(?:.*\\.|)")+"(\\.|$)"):null,b.result=void 0,b.target||(b.target=e),c=null==c?[b]:r.makeArray(c,[b]),n=r.event.special[p]||{},f||!n.trigger||n.trigger.apply(e,c)!==!1)){if(!f&&!n.noBubble&&!r.isWindow(e)){for(j=n.delegateType||p,pb.test(j+p)||(h=h.parentNode);h;h=h.parentNode)o.push(h),i=h;i===(e.ownerDocument||d)&&o.push(i.defaultView||i.parentWindow||a)}g=0;while((h=o[g++])&&!b.isPropagationStopped())b.type=g>1?j:n.bindType||p,m=(V.get(h,"events")||{})[b.type]&&V.get(h,"handle"),m&&m.apply(h,c),m=k&&h[k],m&&m.apply&&T(h)&&(b.result=m.apply(h,c),b.result===!1&&b.preventDefault());return b.type=p,f||b.isDefaultPrevented()||n._default&&n._default.apply(o.pop(),c)!==!1||!T(e)||k&&r.isFunction(e[p])&&!r.isWindow(e)&&(i=e[k],i&&(e[k]=null),r.event.triggered=p,e[p](),r.event.triggered=void 0,i&&(e[k]=i)),b.result}},simulate:function(a,b,c){var d=r.extend(new r.Event,c,{type:a,isSimulated:!0});r.event.trigger(d,null,b)}}),r.fn.extend({trigger:function(a,b){return this.each(function(){r.event.trigger(a,b,this)})},triggerHandler:function(a,b){var c=this[0];if(c)return r.event.trigger(a,b,c,!0)}}),r.each("blur focus focusin focusout resize scroll click dblclick mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave change select submit keydown keypress keyup contextmenu".split(" "),function(a,b){r.fn[b]=function(a,c){return arguments.length>0?this.on(b,null,a,c):this.trigger(b)}}),r.fn.extend({hover:function(a,b){return this.mouseenter(a).mouseleave(b||a)}}),o.focusin="onfocusin"in a,o.focusin||r.each({focus:"focusin",blur:"focusout"},function(a,b){var c=function(a){r.event.simulate(b,a.target,r.event.fix(a))};r.event.special[b]={setup:function(){var d=this.ownerDocument||this,e=V.access(d,b);e||d.addEventListener(a,c,!0),V.access(d,b,(e||0)+1)},teardown:function(){var d=this.ownerDocument||this,e=V.access(d,b)-1;e?V.access(d,b,e):(d.removeEventListener(a,c,!0),V.remove(d,b))}}});var qb=a.location,rb=r.now(),sb=/\?/;r.parseXML=function(b){var c;if(!b||"string"!=typeof b)return null;try{c=(new a.DOMParser).parseFromString(b,"text/xml")}catch(d){c=void 0}return c&&!c.getElementsByTagName("parsererror").length||r.error("Invalid XML: "+b),c};var tb=/\[\]$/,ub=/\r?\n/g,vb=/^(?:submit|button|image|reset|file)$/i,wb=/^(?:input|select|textarea|keygen)/i;function xb(a,b,c,d){var e;if(r.isArray(b))r.each(b,function(b,e){c||tb.test(a)?d(a,e):xb(a+"["+("object"==typeof e&&null!=e?b:"")+"]",e,c,d)});else if(c||"object"!==r.type(b))d(a,b);else for(e in b)xb(a+"["+e+"]",b[e],c,d)}r.param=function(a,b){var c,d=[],e=function(a,b){var c=r.isFunction(b)?b():b;d[d.length]=encodeURIComponent(a)+"="+encodeURIComponent(null==c?"":c)};if(r.isArray(a)||a.jquery&&!r.isPlainObject(a))r.each(a,function(){e(this.name,this.value)});else for(c in a)xb(c,a[c],b,e);return d.join("&")},r.fn.extend({serialize:function(){return r.param(this.serializeArray())},serializeArray:function(){return this.map(function(){var a=r.prop(this,"elements");return a?r.makeArray(a):this}).filter(function(){var a=this.type;return this.name&&!r(this).is(":disabled")&&wb.test(this.nodeName)&&!vb.test(a)&&(this.checked||!ia.test(a))}).map(function(a,b){var c=r(this).val();return null==c?null:r.isArray(c)?r.map(c,function(a){return{name:b.name,value:a.replace(ub,"\r\n")}}):{name:b.name,value:c.replace(ub,"\r\n")}}).get()}});var yb=/%20/g,zb=/#.*$/,Ab=/([?&])_=[^&]*/,Bb=/^(.*?):[ \t]*([^\r\n]*)$/gm,Cb=/^(?:about|app|app-storage|.+-extension|file|res|widget):$/,Db=/^(?:GET|HEAD)$/,Eb=/^\/\//,Fb={},Gb={},Hb="*/".concat("*"),Ib=d.createElement("a");Ib.href=qb.href;function Jb(a){return function(b,c){"string"!=typeof b&&(c=b,b="*");var d,e=0,f=b.toLowerCase().match(K)||[];if(r.isFunction(c))while(d=f[e++])"+"===d[0]?(d=d.slice(1)||"*",(a[d]=a[d]||[]).unshift(c)):(a[d]=a[d]||[]).push(c)}}function Kb(a,b,c,d){var e={},f=a===Gb;function g(h){var i;return e[h]=!0,r.each(a[h]||[],function(a,h){var j=h(b,c,d);return"string"!=typeof j||f||e[j]?f?!(i=j):void 0:(b.dataTypes.unshift(j),g(j),!1)}),i}return g(b.dataTypes[0])||!e["*"]&&g("*")}function Lb(a,b){var c,d,e=r.ajaxSettings.flatOptions||{};for(c in b)void 0!==b[c]&&((e[c]?a:d||(d={}))[c]=b[c]);return d&&r.extend(!0,a,d),a}function Mb(a,b,c){var d,e,f,g,h=a.contents,i=a.dataTypes;while("*"===i[0])i.shift(),void 0===d&&(d=a.mimeType||b.getResponseHeader("Content-Type"));if(d)for(e in h)if(h[e]&&h[e].test(d)){i.unshift(e);break}if(i[0]in c)f=i[0];else{for(e in c){if(!i[0]||a.converters[e+" "+i[0]]){f=e;break}g||(g=e)}f=f||g}if(f)return f!==i[0]&&i.unshift(f),c[f]}function Nb(a,b,c,d){var e,f,g,h,i,j={},k=a.dataTypes.slice();if(k[1])for(g in a.converters)j[g.toLowerCase()]=a.converters[g];f=k.shift();while(f)if(a.responseFields[f]&&(c[a.responseFields[f]]=b),!i&&d&&a.dataFilter&&(b=a.dataFilter(b,a.dataType)),i=f,f=k.shift())if("*"===f)f=i;else if("*"!==i&&i!==f){if(g=j[i+" "+f]||j["* "+f],!g)for(e in j)if(h=e.split(" "),h[1]===f&&(g=j[i+" "+h[0]]||j["* "+h[0]])){g===!0?g=j[e]:j[e]!==!0&&(f=h[0],k.unshift(h[1]));break}if(g!==!0)if(g&&a["throws"])b=g(b);else try{b=g(b)}catch(l){return{state:"parsererror",error:g?l:"No conversion from "+i+" to "+f}}}return{state:"success",data:b}}r.extend({active:0,lastModified:{},etag:{},ajaxSettings:{url:qb.href,type:"GET",isLocal:Cb.test(qb.protocol),global:!0,processData:!0,async:!0,contentType:"application/x-www-form-urlencoded; charset=UTF-8",accepts:{"*":Hb,text:"text/plain",html:"text/html",xml:"application/xml, text/xml",json:"application/json, text/javascript"},contents:{xml:/\bxml\b/,html:/\bhtml/,json:/\bjson\b/},responseFields:{xml:"responseXML",text:"responseText",json:"responseJSON"},converters:{"* text":String,"text html":!0,"text json":JSON.parse,"text xml":r.parseXML},flatOptions:{url:!0,context:!0}},ajaxSetup:function(a,b){return b?Lb(Lb(a,r.ajaxSettings),b):Lb(r.ajaxSettings,a)},ajaxPrefilter:Jb(Fb),ajaxTransport:Jb(Gb),ajax:function(b,c){"object"==typeof b&&(c=b,b=void 0),c=c||{};var e,f,g,h,i,j,k,l,m,n,o=r.ajaxSetup({},c),p=o.context||o,q=o.context&&(p.nodeType||p.jquery)?r(p):r.event,s=r.Deferred(),t=r.Callbacks("once memory"),u=o.statusCode||{},v={},w={},x="canceled",y={readyState:0,getResponseHeader:function(a){var b;if(k){if(!h){h={};while(b=Bb.exec(g))h[b[1].toLowerCase()]=b[2]}b=h[a.toLowerCase()]}return null==b?null:b},getAllResponseHeaders:function(){return k?g:null},setRequestHeader:function(a,b){return null==k&&(a=w[a.toLowerCase()]=w[a.toLowerCase()]||a,v[a]=b),this},overrideMimeType:function(a){return null==k&&(o.mimeType=a),this},statusCode:function(a){var b;if(a)if(k)y.always(a[y.status]);else for(b in a)u[b]=[u[b],a[b]];return this},abort:function(a){var b=a||x;return e&&e.abort(b),A(0,b),this}};if(s.promise(y),o.url=((b||o.url||qb.href)+"").replace(Eb,qb.protocol+"//"),o.type=c.method||c.type||o.method||o.type,o.dataTypes=(o.dataType||"*").toLowerCase().match(K)||[""],null==o.crossDomain){j=d.createElement("a");try{j.href=o.url,j.href=j.href,o.crossDomain=Ib.protocol+"//"+Ib.host!=j.protocol+"//"+j.host}catch(z){o.crossDomain=!0}}if(o.data&&o.processData&&"string"!=typeof o.data&&(o.data=r.param(o.data,o.traditional)),Kb(Fb,o,c,y),k)return y;l=r.event&&o.global,l&&0===r.active++&&r.event.trigger("ajaxStart"),o.type=o.type.toUpperCase(),o.hasContent=!Db.test(o.type),f=o.url.replace(zb,""),o.hasContent?o.data&&o.processData&&0===(o.contentType||"").indexOf("application/x-www-form-urlencoded")&&(o.data=o.data.replace(yb,"+")):(n=o.url.slice(f.length),o.data&&(f+=(sb.test(f)?"&":"?")+o.data,delete o.data),o.cache===!1&&(f=f.replace(Ab,"$1"),n=(sb.test(f)?"&":"?")+"_="+rb++ +n),o.url=f+n),o.ifModified&&(r.lastModified[f]&&y.setRequestHeader("If-Modified-Since",r.lastModified[f]),r.etag[f]&&y.setRequestHeader("If-None-Match",r.etag[f])),(o.data&&o.hasContent&&o.contentType!==!1||c.contentType)&&y.setRequestHeader("Content-Type",o.contentType),y.setRequestHeader("Accept",o.dataTypes[0]&&o.accepts[o.dataTypes[0]]?o.accepts[o.dataTypes[0]]+("*"!==o.dataTypes[0]?", "+Hb+"; q=0.01":""):o.accepts["*"]);for(m in o.headers)y.setRequestHeader(m,o.headers[m]);if(o.beforeSend&&(o.beforeSend.call(p,y,o)===!1||k))return y.abort();if(x="abort",t.add(o.complete),y.done(o.success),y.fail(o.error),e=Kb(Gb,o,c,y)){if(y.readyState=1,l&&q.trigger("ajaxSend",[y,o]),k)return y;o.async&&o.timeout>0&&(i=a.setTimeout(function(){y.abort("timeout")},o.timeout));try{k=!1,e.send(v,A)}catch(z){if(k)throw z;A(-1,z)}}else A(-1,"No Transport");function A(b,c,d,h){var j,m,n,v,w,x=c;k||(k=!0,i&&a.clearTimeout(i),e=void 0,g=h||"",y.readyState=b>0?4:0,j=b>=200&&b<300||304===b,d&&(v=Mb(o,y,d)),v=Nb(o,v,y,j),j?(o.ifModified&&(w=y.getResponseHeader("Last-Modified"),w&&(r.lastModified[f]=w),w=y.getResponseHeader("etag"),w&&(r.etag[f]=w)),204===b||"HEAD"===o.type?x="nocontent":304===b?x="notmodified":(x=v.state,m=v.data,n=v.error,j=!n)):(n=x,!b&&x||(x="error",b<0&&(b=0))),y.status=b,y.statusText=(c||x)+"",j?s.resolveWith(p,[m,x,y]):s.rejectWith(p,[y,x,n]),y.statusCode(u),u=void 0,l&&q.trigger(j?"ajaxSuccess":"ajaxError",[y,o,j?m:n]),t.fireWith(p,[y,x]),l&&(q.trigger("ajaxComplete",[y,o]),--r.active||r.event.trigger("ajaxStop")))}return y},getJSON:function(a,b,c){return r.get(a,b,c,"json")},getScript:function(a,b){return r.get(a,void 0,b,"script")}}),r.each(["get","post"],function(a,b){r[b]=function(a,c,d,e){return r.isFunction(c)&&(e=e||d,d=c,c=void 0),r.ajax(r.extend({url:a,type:b,dataType:e,data:c,success:d},r.isPlainObject(a)&&a))}}),r._evalUrl=function(a){return r.ajax({url:a,type:"GET",dataType:"script",cache:!0,async:!1,global:!1,"throws":!0})},r.fn.extend({wrapAll:function(a){var b;return this[0]&&(r.isFunction(a)&&(a=a.call(this[0])),b=r(a,this[0].ownerDocument).eq(0).clone(!0),this[0].parentNode&&b.insertBefore(this[0]),b.map(function(){var a=this;while(a.firstElementChild)a=a.firstElementChild;return a}).append(this)),this},wrapInner:function(a){return r.isFunction(a)?this.each(function(b){r(this).wrapInner(a.call(this,b))}):this.each(function(){var b=r(this),c=b.contents();c.length?c.wrapAll(a):b.append(a)})},wrap:function(a){var b=r.isFunction(a);return this.each(function(c){r(this).wrapAll(b?a.call(this,c):a)})},unwrap:function(a){return this.parent(a).not("body").each(function(){r(this).replaceWith(this.childNodes)}),this}}),r.expr.pseudos.hidden=function(a){return!r.expr.pseudos.visible(a)},r.expr.pseudos.visible=function(a){return!!(a.offsetWidth||a.offsetHeight||a.getClientRects().length)},r.ajaxSettings.xhr=function(){try{return new a.XMLHttpRequest}catch(b){}};var Ob={0:200,1223:204},Pb=r.ajaxSettings.xhr();o.cors=!!Pb&&"withCredentials"in Pb,o.ajax=Pb=!!Pb,r.ajaxTransport(function(b){var c,d;if(o.cors||Pb&&!b.crossDomain)return{send:function(e,f){var g,h=b.xhr();if(h.open(b.type,b.url,b.async,b.username,b.password),b.xhrFields)for(g in b.xhrFields)h[g]=b.xhrFields[g];b.mimeType&&h.overrideMimeType&&h.overrideMimeType(b.mimeType),b.crossDomain||e["X-Requested-With"]||(e["X-Requested-With"]="XMLHttpRequest");for(g in e)h.setRequestHeader(g,e[g]);c=function(a){return function(){c&&(c=d=h.onload=h.onerror=h.onabort=h.onreadystatechange=null,"abort"===a?h.abort():"error"===a?"number"!=typeof h.status?f(0,"error"):f(h.status,h.statusText):f(Ob[h.status]||h.status,h.statusText,"text"!==(h.responseType||"text")||"string"!=typeof h.responseText?{binary:h.response}:{text:h.responseText},h.getAllResponseHeaders()))}},h.onload=c(),d=h.onerror=c("error"),void 0!==h.onabort?h.onabort=d:h.onreadystatechange=function(){4===h.readyState&&a.setTimeout(function(){c&&d()})},c=c("abort");try{h.send(b.hasContent&&b.data||null)}catch(i){if(c)throw i}},abort:function(){c&&c()}}}),r.ajaxPrefilter(function(a){a.crossDomain&&(a.contents.script=!1)}),r.ajaxSetup({accepts:{script:"text/javascript, application/javascript, application/ecmascript, application/x-ecmascript"},contents:{script:/\b(?:java|ecma)script\b/},converters:{"text script":function(a){return r.globalEval(a),a}}}),r.ajaxPrefilter("script",function(a){void 0===a.cache&&(a.cache=!1),a.crossDomain&&(a.type="GET")}),r.ajaxTransport("script",function(a){if(a.crossDomain){var b,c;return{send:function(e,f){b=r("<script>").prop({charset:a.scriptCharset,src:a.url}).on("load error",c=function(a){b.remove(),c=null,a&&f("error"===a.type?404:200,a.type)}),d.head.appendChild(b[0])},abort:function(){c&&c()}}}});var Qb=[],Rb=/(=)\?(?=&|$)|\?\?/;r.ajaxSetup({jsonp:"callback",jsonpCallback:function(){var a=Qb.pop()||r.expando+"_"+rb++;return this[a]=!0,a}}),r.ajaxPrefilter("json jsonp",function(b,c,d){var e,f,g,h=b.jsonp!==!1&&(Rb.test(b.url)?"url":"string"==typeof b.data&&0===(b.contentType||"").indexOf("application/x-www-form-urlencoded")&&Rb.test(b.data)&&"data");if(h||"jsonp"===b.dataTypes[0])return e=b.jsonpCallback=r.isFunction(b.jsonpCallback)?b.jsonpCallback():b.jsonpCallback,h?b[h]=b[h].replace(Rb,"$1"+e):b.jsonp!==!1&&(b.url+=(sb.test(b.url)?"&":"?")+b.jsonp+"="+e),b.converters["script json"]=function(){return g||r.error(e+" was not called"),g[0]},b.dataTypes[0]="json",f=a[e],a[e]=function(){g=arguments},d.always(function(){void 0===f?r(a).removeProp(e):a[e]=f,b[e]&&(b.jsonpCallback=c.jsonpCallback,Qb.push(e)),g&&r.isFunction(f)&&f(g[0]),g=f=void 0}),"script"}),o.createHTMLDocument=function(){var a=d.implementation.createHTMLDocument("").body;return a.innerHTML="<form></form><form></form>",2===a.childNodes.length}(),r.parseHTML=function(a,b,c){if("string"!=typeof a)return[];"boolean"==typeof b&&(c=b,b=!1);var e,f,g;return b||(o.createHTMLDocument?(b=d.implementation.createHTMLDocument(""),e=b.createElement("base"),e.href=d.location.href,b.head.appendChild(e)):b=d),f=B.exec(a),g=!c&&[],f?[b.createElement(f[1])]:(f=pa([a],b,g),g&&g.length&&r(g).remove(),r.merge([],f.childNodes))},r.fn.load=function(a,b,c){var d,e,f,g=this,h=a.indexOf(" ");return h>-1&&(d=mb(a.slice(h)),a=a.slice(0,h)),r.isFunction(b)?(c=b,b=void 0):b&&"object"==typeof b&&(e="POST"),g.length>0&&r.ajax({url:a,type:e||"GET",dataType:"html",data:b}).done(function(a){f=arguments,g.html(d?r("<div>").append(r.parseHTML(a)).find(d):a)}).always(c&&function(a,b){g.each(function(){c.apply(this,f||[a.responseText,b,a])})}),this},r.each(["ajaxStart","ajaxStop","ajaxComplete","ajaxError","ajaxSuccess","ajaxSend"],function(a,b){r.fn[b]=function(a){return this.on(b,a)}}),r.expr.pseudos.animated=function(a){return r.grep(r.timers,function(b){return a===b.elem}).length};function Sb(a){return r.isWindow(a)?a:9===a.nodeType&&a.defaultView}r.offset={setOffset:function(a,b,c){var d,e,f,g,h,i,j,k=r.css(a,"position"),l=r(a),m={};"static"===k&&(a.style.position="relative"),h=l.offset(),f=r.css(a,"top"),i=r.css(a,"left"),j=("absolute"===k||"fixed"===k)&&(f+i).indexOf("auto")>-1,j?(d=l.position(),g=d.top,e=d.left):(g=parseFloat(f)||0,e=parseFloat(i)||0),r.isFunction(b)&&(b=b.call(a,c,r.extend({},h))),null!=b.top&&(m.top=b.top-h.top+g),null!=b.left&&(m.left=b.left-h.left+e),"using"in b?b.using.call(a,m):l.css(m)}},r.fn.extend({offset:function(a){if(arguments.length)return void 0===a?this:this.each(function(b){r.offset.setOffset(this,a,b)});var b,c,d,e,f=this[0];if(f)return f.getClientRects().length?(d=f.getBoundingClientRect(),d.width||d.height?(e=f.ownerDocument,c=Sb(e),b=e.documentElement,{top:d.top+c.pageYOffset-b.clientTop,left:d.left+c.pageXOffset-b.clientLeft}):d):{top:0,left:0}},position:function(){if(this[0]){var a,b,c=this[0],d={top:0,left:0};return"fixed"===r.css(c,"position")?b=c.getBoundingClientRect():(a=this.offsetParent(),b=this.offset(),r.nodeName(a[0],"html")||(d=a.offset()),d={top:d.top+r.css(a[0],"borderTopWidth",!0),left:d.left+r.css(a[0],"borderLeftWidth",!0)}),{top:b.top-d.top-r.css(c,"marginTop",!0),left:b.left-d.left-r.css(c,"marginLeft",!0)}}},offsetParent:function(){return this.map(function(){var a=this.offsetParent;while(a&&"static"===r.css(a,"position"))a=a.offsetParent;return a||qa})}}),r.each({scrollLeft:"pageXOffset",scrollTop:"pageYOffset"},function(a,b){var c="pageYOffset"===b;r.fn[a]=function(d){return S(this,function(a,d,e){var f=Sb(a);return void 0===e?f?f[b]:a[d]:void(f?f.scrollTo(c?f.pageXOffset:e,c?e:f.pageYOffset):a[d]=e)},a,d,arguments.length)}}),r.each(["top","left"],function(a,b){r.cssHooks[b]=Oa(o.pixelPosition,function(a,c){if(c)return c=Na(a,b),La.test(c)?r(a).position()[b]+"px":c})}),r.each({Height:"height",Width:"width"},function(a,b){r.each({padding:"inner"+a,content:b,"":"outer"+a},function(c,d){r.fn[d]=function(e,f){var g=arguments.length&&(c||"boolean"!=typeof e),h=c||(e===!0||f===!0?"margin":"border");return S(this,function(b,c,e){var f;return r.isWindow(b)?0===d.indexOf("outer")?b["inner"+a]:b.document.documentElement["client"+a]:9===b.nodeType?(f=b.documentElement,Math.max(b.body["scroll"+a],f["scroll"+a],b.body["offset"+a],f["offset"+a],f["client"+a])):void 0===e?r.css(b,c,h):r.style(b,c,e,h)},b,g?e:void 0,g)}})}),r.fn.extend({bind:function(a,b,c){return this.on(a,null,b,c)},unbind:function(a,b){return this.off(a,null,b)},delegate:function(a,b,c,d){return this.on(b,a,c,d)},undelegate:function(a,b,c){return 1===arguments.length?this.off(a,"**"):this.off(b,a||"**",c)}}),r.parseJSON=JSON.parse,"function"==typeof define&&define.amd&&define("jquery",[],function(){return r});var Tb=a.jQuery,Ub=a.$;return r.noConflict=function(b){return a.$===r&&(a.$=Ub),b&&a.jQuery===r&&(a.jQuery=Tb),r},b||(a.jQuery=a.$=r),r});
    5  

/home/genis/Proyectos/ProyectoXat/vendor/phpunit/php-code-coverage/src/Report/Html/Renderer/Template/js/nv.d3.min.js:
    1  /* nvd3 version 1.8.1 (https://github.com/novus/nvd3) 2015-06-15 */
    2: !function(){var a={};a.dev=!1,a.tooltip=a.tooltip||{},a.utils=a.utils||{},a.models=a.models||{},a.charts={},a.logs={},a.dom={},a.dispatch=d3.dispatch("render_start","render_end"),Function.prototype.bind||(Function.prototype.bind=function(a){if("function"!=typeof this)throw new TypeError("Function.prototype.bind - what is trying to be bound is not callable");var b=Array.prototype.slice.call(arguments,1),c=this,d=function(){},e=function(){return c.apply(this instanceof d&&a?this:a,b.concat(Array.prototype.slice.call(arguments)))};return d.prototype=this.prototype,e.prototype=new d,e}),a.dev&&(a.dispatch.on("render_start",function(){a.logs.startTime=+new Date}),a.dispatch.on("render_end",function(){a.logs.endTime=+new Date,a.logs.totalTime=a.logs.endTime-a.logs.startTime,a.log("total",a.logs.totalTime)})),a.log=function(){if(a.dev&&window.console&&console.log&&console.log.apply)console.log.apply(console,arguments);else if(a.dev&&window.console&&"function"==typeof console.log&&Function.prototype.bind){var b=Function.prototype.bind.call(console.log,console);b.apply(console,arguments)}return arguments[arguments.length-1]},a.deprecated=function(a,b){console&&console.warn&&console.warn("nvd3 warning: `"+a+"` has been deprecated. ",b||"")},a.render=function(b){b=b||1,a.render.active=!0,a.dispatch.render_start();var c=function(){for(var d,e,f=0;b>f&&(e=a.render.queue[f]);f++)d=e.generate(),typeof e.callback==typeof Function&&e.callback(d);a.render.queue.splice(0,f),a.render.queue.length?setTimeout(c):(a.dispatch.render_end(),a.render.active=!1)};setTimeout(c)},a.render.active=!1,a.render.queue=[],a.addGraph=function(b){typeof arguments[0]==typeof Function&&(b={generate:arguments[0],callback:arguments[1]}),a.render.queue.push(b),a.render.active||a.render()},"undefined"!=typeof module&&"undefined"!=typeof exports&&(module.exports=a),"undefined"!=typeof window&&(window.nv=a),a.dom.write=function(a){return void 0!==window.fastdom?fastdom.write(a):a()},a.dom.read=function(a){return void 0!==window.fastdom?fastdom.read(a):a()},a.interactiveGuideline=function(){"use strict";function b(l){l.each(function(l){function m(){var a=d3.mouse(this),d=a[0],e=a[1],i=!0,j=!1;if(k&&(d=d3.event.offsetX,e=d3.event.offsetY,"svg"!==d3.event.target.tagName&&(i=!1),d3.event.target.className.baseVal.match("nv-legend")&&(j=!0)),i&&(d-=f.left,e-=f.top),0>d||0>e||d>o||e>p||d3.event.relatedTarget&&void 0===d3.event.relatedTarget.ownerSVGElement||j){if(k&&d3.event.relatedTarget&&void 0===d3.event.relatedTarget.ownerSVGElement&&(void 0===d3.event.relatedTarget.className||d3.event.relatedTarget.className.match(c.nvPointerEventsClass)))return;return h.elementMouseout({mouseX:d,mouseY:e}),b.renderGuideLine(null),void c.hidden(!0)}c.hidden(!1);var l=g.invert(d);h.elementMousemove({mouseX:d,mouseY:e,pointXValue:l}),"dblclick"===d3.event.type&&h.elementDblclick({mouseX:d,mouseY:e,pointXValue:l}),"click"===d3.event.type&&h.elementClick({mouseX:d,mouseY:e,pointXValue:l})}var n=d3.select(this),o=d||960,p=e||400,q=n.selectAll("g.nv-wrap.nv-interactiveLineLayer").data([l]),r=q.enter().append("g").attr("class"," nv-wrap nv-interactiveLineLayer");r.append("g").attr("class","nv-interactiveGuideLine"),j&&(j.on("touchmove",m).on("mousemove",m,!0).on("mouseout",m,!0).on("dblclick",m).on("click",m),b.guideLine=null,b.renderGuideLine=function(c){i&&(b.guideLine&&b.guideLine.attr("x1")===c||a.dom.write(function(){var b=q.select(".nv-interactiveGuideLine").selectAll("line").data(null!=c?[a.utils.NaNtoZero(c)]:[],String);b.enter().append("line").attr("class","nv-guideline").attr("x1",function(a){return a}).attr("x2",function(a){return a}).attr("y1",p).attr("y2",0),b.exit().remove()}))})})}var c=a.models.tooltip();c.duration(0).hideDelay(0)._isInteractiveLayer(!0).hidden(!1);var d=null,e=null,f={left:0,top:0},g=d3.scale.linear(),h=d3.dispatch("elementMousemove","elementMouseout","elementClick","elementDblclick"),i=!0,j=null,k="ActiveXObject"in window;return b.dispatch=h,b.tooltip=c,b.margin=function(a){return arguments.length?(f.top="undefined"!=typeof a.top?a.top:f.top,f.left="undefined"!=typeof a.left?a.left:f.left,b):f},b.width=function(a){return arguments.length?(d=a,b):d},b.height=function(a){return arguments.length?(e=a,b):e},b.xScale=function(a){return arguments.length?(g=a,b):g},b.showGuideLine=function(a){return arguments.length?(i=a,b):i},b.svgContainer=function(a){return arguments.length?(j=a,b):j},b},a.interactiveBisect=function(a,b,c){"use strict";if(!(a instanceof Array))return null;var d;d="function"!=typeof c?function(a){return a.x}:c;var e=function(a,b){return d(a)-b},f=d3.bisector(e).left,g=d3.max([0,f(a,b)-1]),h=d(a[g]);if("undefined"==typeof h&&(h=g),h===b)return g;var i=d3.min([g+1,a.length-1]),j=d(a[i]);return"undefined"==typeof j&&(j=i),Math.abs(j-b)>=Math.abs(h-b)?g:i},a.nearestValueIndex=function(a,b,c){"use strict";var d=1/0,e=null;return a.forEach(function(a,f){var g=Math.abs(b-a);null!=a&&d>=g&&c>g&&(d=g,e=f)}),e},function(){"use strict";a.models.tooltip=function(){function b(){if(k){var a=d3.select(k);"svg"!==a.node().tagName&&(a=a.select("svg"));var b=a.node()?a.attr("viewBox"):null;if(b){b=b.split(" ");var c=parseInt(a.style("width"),10)/b[2];p.left=p.left*c,p.top=p.top*c}}}function c(){if(!n){var a;a=k?k:document.body,n=d3.select(a).append("div").attr("class","nvtooltip "+(j?j:"xy-tooltip")).attr("id",v),n.style("top",0).style("left",0),n.style("opacity",0),n.selectAll("div, table, td, tr").classed(w,!0),n.classed(w,!0),o=n.node()}}function d(){if(r&&B(e)){b();var f=p.left,g=null!==i?i:p.top;return a.dom.write(function(){c();var b=A(e);b&&(o.innerHTML=b),k&&u?a.dom.read(function(){var a=k.getElementsByTagName("svg")[0],b={left:0,top:0};if(a){var c=a.getBoundingClientRect(),d=k.getBoundingClientRect(),e=c.top;if(0>e){var i=k.getBoundingClientRect();e=Math.abs(e)>i.height?0:e}b.top=Math.abs(e-d.top),b.left=Math.abs(c.left-d.left)}f+=k.offsetLeft+b.left-2*k.scrollLeft,g+=k.offsetTop+b.top-2*k.scrollTop,h&&h>0&&(g=Math.floor(g/h)*h),C([f,g])}):C([f,g])}),d}}var e=null,f="w",g=25,h=0,i=null,j=null,k=null,l=!0,m=400,n=null,o=null,p={left:null,top:null},q={left:0,top:0},r=!0,s=100,t=!0,u=!1,v="nvtooltip-"+Math.floor(1e5*Math.random()),w="nv-pointer-events-none",x=function(a){return a},y=function(a){return a},z=function(a){return a},A=function(a){if(null===a)return"";var b=d3.select(document.createElement("table"));if(t){var c=b.selectAll("thead").data([a]).enter().append("thead");c.append("tr").append("td").attr("colspan",3).append("strong").classed("x-value",!0).html(y(a.value))}var d=b.selectAll("tbody").data([a]).enter().append("tbody"),e=d.selectAll("tr").data(function(a){return a.series}).enter().append("tr").classed("highlight",function(a){return a.highlight});e.append("td").classed("legend-color-guide",!0).append("div").style("background-color",function(a){return a.color}),e.append("td").classed("key",!0).html(function(a,b){return z(a.key,b)}),e.append("td").classed("value",!0).html(function(a,b){return x(a.value,b)}),e.selectAll("td").each(function(a){if(a.highlight){var b=d3.scale.linear().domain([0,1]).range(["#fff",a.color]),c=.6;d3.select(this).style("border-bottom-color",b(c)).style("border-top-color",b(c))}});var f=b.node().outerHTML;return void 0!==a.footer&&(f+="<div class='footer'>"+a.footer+"</div>"),f},B=function(a){if(a&&a.series){if(a.series instanceof Array)return!!a.series.length;if(a.series instanceof Object)return a.series=[a.series],!0}return!1},C=function(b){o&&a.dom.read(function(){var c,d,e=parseInt(o.offsetHeight,10),h=parseInt(o.offsetWidth,10),i=a.utils.windowSize().width,j=a.utils.windowSize().height,k=window.pageYOffset,p=window.pageXOffset;j=window.innerWidth>=document.body.scrollWidth?j:j-16,i=window.innerHeight>=document.body.scrollHeight?i:i-16;var r,t,u=function(a){var b=d;do isNaN(a.offsetTop)||(b+=a.offsetTop),a=a.offsetParent;while(a);return b},v=function(a){var b=c;do isNaN(a.offsetLeft)||(b+=a.offsetLeft),a=a.offsetParent;while(a);return b};switch(f){case"e":c=b[0]-h-g,d=b[1]-e/2,r=v(o),t=u(o),p>r&&(c=b[0]+g>p?b[0]+g:p-r+c),k>t&&(d=k-t+d),t+e>k+j&&(d=k+j-t+d-e);break;case"w":c=b[0]+g,d=b[1]-e/2,r=v(o),t=u(o),r+h>i&&(c=b[0]-h-g),k>t&&(d=k+5),t+e>k+j&&(d=k+j-t+d-e);break;case"n":c=b[0]-h/2-5,d=b[1]+g,r=v(o),t=u(o),p>r&&(c=p+5),r+h>i&&(c=c-h/2+5),t+e>k+j&&(d=k+j-t+d-e);break;case"s":c=b[0]-h/2,d=b[1]-e-g,r=v(o),t=u(o),p>r&&(c=p+5),r+h>i&&(c=c-h/2+5),k>t&&(d=k);break;case"none":c=b[0],d=b[1]-g,r=v(o),t=u(o)}c-=q.left,d-=q.top;var w=o.getBoundingClientRect(),k=window.pageYOffset||document.documentElement.scrollTop,p=window.pageXOffset||document.documentElement.scrollLeft,x="translate("+(w.left+p)+"px, "+(w.top+k)+"px)",y="translate("+c+"px, "+d+"px)",z=d3.interpolateString(x,y),A=n.style("opacity")<.1;l?n.transition().delay(m).duration(0).style("opacity",0):n.interrupt().transition().duration(A?0:s).styleTween("transform",function(){return z},"important").style("-webkit-transform",y).style("opacity",1)})};return d.nvPointerEventsClass=w,d.options=a.utils.optionsFunc.bind(d),d._options=Object.create({},{duration:{get:function(){return s},set:function(a){s=a}},gravity:{get:function(){return f},set:function(a){f=a}},distance:{get:function(){return g},set:function(a){g=a}},snapDistance:{get:function(){return h},set:function(a){h=a}},classes:{get:function(){return j},set:function(a){j=a}},chartContainer:{get:function(){return k},set:function(a){k=a}},fixedTop:{get:function(){return i},set:function(a){i=a}},enabled:{get:function(){return r},set:function(a){r=a}},hideDelay:{get:function(){return m},set:function(a){m=a}},contentGenerator:{get:function(){return A},set:function(a){A=a}},valueFormatter:{get:function(){return x},set:function(a){x=a}},headerFormatter:{get:function(){return y},set:function(a){y=a}},keyFormatter:{get:function(){return z},set:function(a){z=a}},headerEnabled:{get:function(){return t},set:function(a){t=a}},_isInteractiveLayer:{get:function(){return u},set:function(a){u=!!a}},position:{get:function(){return p},set:function(a){p.left=void 0!==a.left?a.left:p.left,p.top=void 0!==a.top?a.top:p.top}},offset:{get:function(){return q},set:function(a){q.left=void 0!==a.left?a.left:q.left,q.top=void 0!==a.top?a.top:q.top}},hidden:{get:function(){return l},set:function(a){l!=a&&(l=!!a,d())}},data:{get:function(){return e},set:function(a){a.point&&(a.value=a.point.x,a.series=a.series||{},a.series.value=a.point.y,a.series.color=a.point.color||a.series.color),e=a}},tooltipElem:{get:function(){return o},set:function(){}},id:{get:function(){return v},set:function(){}}}),a.utils.initOptions(d),d}}(),a.utils.windowSize=function(){var a={width:640,height:480};return window.innerWidth&&window.innerHeight?(a.width=window.innerWidth,a.height=window.innerHeight,a):"CSS1Compat"==document.compatMode&&document.documentElement&&document.documentElement.offsetWidth?(a.width=document.documentElement.offsetWidth,a.height=document.documentElement.offsetHeight,a):document.body&&document.body.offsetWidth?(a.width=document.body.offsetWidth,a.height=document.body.offsetHeight,a):a},a.utils.windowResize=function(b){return window.addEventListener?window.addEventListener("resize",b):a.log("ERROR: Failed to bind to window.resize with: ",b),{callback:b,clear:function(){window.removeEventListener("resize",b)}}},a.utils.getColor=function(b){if(void 0===b)return a.utils.defaultColor();if(Array.isArray(b)){var c=d3.scale.ordinal().range(b);return function(a,b){var d=void 0===b?a:b;return a.color||c(d)}}return b},a.utils.defaultColor=function(){return a.utils.getColor(d3.scale.category20().range())},a.utils.customTheme=function(a,b,c){b=b||function(a){return a.key},c=c||d3.scale.category20().range();var d=c.length;return function(e){var f=b(e);return"function"==typeof a[f]?a[f]():void 0!==a[f]?a[f]:(d||(d=c.length),d-=1,c[d])}},a.utils.pjax=function(b,c){var d=function(d){d3.html(d,function(d){var e=d3.select(c).node();e.parentNode.replaceChild(d3.select(d).select(c).node(),e),a.utils.pjax(b,c)})};d3.selectAll(b).on("click",function(){history.pushState(this.href,this.textContent,this.href),d(this.href),d3.event.preventDefault()}),d3.select(window).on("popstate",function(){d3.event.state&&d(d3.event.state)})},a.utils.calcApproxTextWidth=function(a){if("function"==typeof a.style&&"function"==typeof a.text){var b=parseInt(a.style("font-size").replace("px",""),10),c=a.text().length;return c*b*.5}return 0},a.utils.NaNtoZero=function(a){return"number"!=typeof a||isNaN(a)||null===a||1/0===a||a===-1/0?0:a},d3.selection.prototype.watchTransition=function(a){var b=[this].concat([].slice.call(arguments,1));return a.transition.apply(a,b)},a.utils.renderWatch=function(b,c){if(!(this instanceof a.utils.renderWatch))return new a.utils.renderWatch(b,c);var d=void 0!==c?c:250,e=[],f=this;this.models=function(a){return a=[].slice.call(arguments,0),a.forEach(function(a){a.__rendered=!1,function(a){a.dispatch.on("renderEnd",function(){a.__rendered=!0,f.renderEnd("model")})}(a),e.indexOf(a)<0&&e.push(a)}),this},this.reset=function(a){void 0!==a&&(d=a),e=[]},this.transition=function(a,b,c){if(b=arguments.length>1?[].slice.call(arguments,1):[],c=b.length>1?b.pop():void 0!==d?d:250,a.__rendered=!1,e.indexOf(a)<0&&e.push(a),0===c)return a.__rendered=!0,a.delay=function(){return this},a.duration=function(){return this},a;a.__rendered=0===a.length?!0:a.every(function(a){return!a.length})?!0:!1;var g=0;return a.transition().duration(c).each(function(){++g}).each("end",function(){0===--g&&(a.__rendered=!0,f.renderEnd.apply(this,b))})},this.renderEnd=function(){e.every(function(a){return a.__rendered})&&(e.forEach(function(a){a.__rendered=!1}),b.renderEnd.apply(this,arguments))}},a.utils.deepExtend=function(b){var c=arguments.length>1?[].slice.call(arguments,1):[];c.forEach(function(c){for(var d in c){var e=b[d]instanceof Array,f="object"==typeof b[d],g="object"==typeof c[d];f&&!e&&g?a.utils.deepExtend(b[d],c[d]):b[d]=c[d]}})},a.utils.state=function(){if(!(this instanceof a.utils.state))return new a.utils.state;var b={},c=function(){},d=function(){return{}},e=null,f=null;this.dispatch=d3.dispatch("change","set"),this.dispatch.on("set",function(a){c(a,!0)}),this.getter=function(a){return d=a,this},this.setter=function(a,b){return b||(b=function(){}),c=function(c,d){a(c),d&&b()},this},this.init=function(b){e=e||{},a.utils.deepExtend(e,b)};var g=function(){var a=d();if(JSON.stringify(a)===JSON.stringify(b))return!1;for(var c in a)void 0===b[c]&&(b[c]={}),b[c]=a[c],f=!0;return!0};this.update=function(){e&&(c(e,!1),e=null),g.call(this)&&this.dispatch.change(b)}},a.utils.optionsFunc=function(a){return a&&d3.map(a).forEach(function(a,b){"function"==typeof this[a]&&this[a](b)}.bind(this)),this},a.utils.calcTicksX=function(b,c){var d=1,e=0;for(e;e<c.length;e+=1){var f=c[e]&&c[e].values?c[e].values.length:0;d=f>d?f:d}return a.log("Requested number of ticks: ",b),a.log("Calculated max values to be: ",d),b=b>d?b=d-1:b,b=1>b?1:b,b=Math.floor(b),a.log("Calculating tick count as: ",b),b},a.utils.calcTicksY=function(b,c){return a.utils.calcTicksX(b,c)},a.utils.initOption=function(a,b){a._calls&&a._calls[b]?a[b]=a._calls[b]:(a[b]=function(c){return arguments.length?(a._overrides[b]=!0,a._options[b]=c,a):a._options[b]},a["_"+b]=function(c){return arguments.length?(a._overrides[b]||(a._options[b]=c),a):a._options[b]})},a.utils.initOptions=function(b){b._overrides=b._overrides||{};var c=Object.getOwnPropertyNames(b._options||{}),d=Object.getOwnPropertyNames(b._calls||{});c=c.concat(d);for(var e in c)a.utils.initOption(b,c[e])},a.utils.inheritOptionsD3=function(a,b,c){a._d3options=c.concat(a._d3options||[]),c.unshift(b),c.unshift(a),d3.rebind.apply(this,c)},a.utils.arrayUnique=function(a){return a.sort().filter(function(b,c){return!c||b!=a[c-1]})},a.utils.symbolMap=d3.map(),a.utils.symbol=function(){function b(b,e){var f=c.call(this,b,e),g=d.call(this,b,e);return-1!==d3.svg.symbolTypes.indexOf(f)?d3.svg.symbol().type(f).size(g)():a.utils.symbolMap.get(f)(g)}var c,d=64;return b.type=function(a){return arguments.length?(c=d3.functor(a),b):c},b.size=function(a){return arguments.length?(d=d3.functor(a),b):d},b},a.utils.inheritOptions=function(b,c){var d=Object.getOwnPropertyNames(c._options||{}),e=Object.getOwnPropertyNames(c._calls||{}),f=c._inherited||[],g=c._d3options||[],h=d.concat(e).concat(f).concat(g);h.unshift(c),h.unshift(b),d3.rebind.apply(this,h),b._inherited=a.utils.arrayUnique(d.concat(e).concat(f).concat(d).concat(b._inherited||[])),b._d3options=a.utils.arrayUnique(g.concat(b._d3options||[]))},a.utils.initSVG=function(a){a.classed({"nvd3-svg":!0})},a.utils.sanitizeHeight=function(a,b){return a||parseInt(b.style("height"),10)||400},a.utils.sanitizeWidth=function(a,b){return a||parseInt(b.style("width"),10)||960},a.utils.availableHeight=function(b,c,d){return a.utils.sanitizeHeight(b,c)-d.top-d.bottom},a.utils.availableWidth=function(b,c,d){return a.utils.sanitizeWidth(b,c)-d.left-d.right},a.utils.noData=function(b,c){var d=b.options(),e=d.margin(),f=d.noData(),g=null==f?["No Data Available."]:[f],h=a.utils.availableHeight(d.height(),c,e),i=a.utils.availableWidth(d.width(),c,e),j=e.left+i/2,k=e.top+h/2;c.selectAll("g").remove();var l=c.selectAll(".nv-noData").data(g);l.enter().append("text").attr("class","nvd3 nv-noData").attr("dy","-.7em").style("text-anchor","middle"),l.attr("x",j).attr("y",k).text(function(a){return a})},a.models.axis=function(){"use strict";function b(g){return s.reset(),g.each(function(b){var g=d3.select(this);a.utils.initSVG(g);var p=g.selectAll("g.nv-wrap.nv-axis").data([b]),q=p.enter().append("g").attr("class","nvd3 nv-wrap nv-axis"),t=(q.append("g"),p.select("g"));null!==n?c.ticks(n):("top"==c.orient()||"bottom"==c.orient())&&c.ticks(Math.abs(d.range()[1]-d.range()[0])/100),t.watchTransition(s,"axis").call(c),r=r||c.scale();var u=c.tickFormat();null==u&&(u=r.tickFormat());var v=t.selectAll("text.nv-axislabel").data([h||null]);v.exit().remove();var w,x,y;switch(c.orient()){case"top":v.enter().append("text").attr("class","nv-axislabel"),y=d.range().length<2?0:2===d.range().length?d.range()[1]:d.range()[d.range().length-1]+(d.range()[1]-d.range()[0]),v.attr("text-anchor","middle").attr("y",0).attr("x",y/2),i&&(x=p.selectAll("g.nv-axisMaxMin").data(d.domain()),x.enter().append("g").attr("class",function(a,b){return["nv-axisMaxMin","nv-axisMaxMin-x",0==b?"nv-axisMin-x":"nv-axisMax-x"].join(" ")}).append("text"),x.exit().remove(),x.attr("transform",function(b){return"translate("+a.utils.NaNtoZero(d(b))+",0)"}).select("text").attr("dy","-0.5em").attr("y",-c.tickPadding()).attr("text-anchor","middle").text(function(a){var b=u(a);return(""+b).match("NaN")?"":b}),x.watchTransition(s,"min-max top").attr("transform",function(b,c){return"translate("+a.utils.NaNtoZero(d.range()[c])+",0)"}));break;case"bottom":w=o+36;var z=30,A=0,B=t.selectAll("g").select("text"),C="";if(j%360){B.each(function(){var a=this.getBoundingClientRect(),b=a.width;A=a.height,b>z&&(z=b)}),C="rotate("+j+" 0,"+(A/2+c.tickPadding())+")";var D=Math.abs(Math.sin(j*Math.PI/180));w=(D?D*z:z)+30,B.attr("transform",C).style("text-anchor",j%360>0?"start":"end")}v.enter().append("text").attr("class","nv-axislabel"),y=d.range().length<2?0:2===d.range().length?d.range()[1]:d.range()[d.range().length-1]+(d.range()[1]-d.range()[0]),v.attr("text-anchor","middle").attr("y",w).attr("x",y/2),i&&(x=p.selectAll("g.nv-axisMaxMin").data([d.domain()[0],d.domain()[d.domain().length-1]]),x.enter().append("g").attr("class",function(a,b){return["nv-axisMaxMin","nv-axisMaxMin-x",0==b?"nv-axisMin-x":"nv-axisMax-x"].join(" ")}).append("text"),x.exit().remove(),x.attr("transform",function(b){return"translate("+a.utils.NaNtoZero(d(b)+(m?d.rangeBand()/2:0))+",0)"}).select("text").attr("dy",".71em").attr("y",c.tickPadding()).attr("transform",C).style("text-anchor",j?j%360>0?"start":"end":"middle").text(function(a){var b=u(a);return(""+b).match("NaN")?"":b}),x.watchTransition(s,"min-max bottom").attr("transform",function(b){return"translate("+a.utils.NaNtoZero(d(b)+(m?d.rangeBand()/2:0))+",0)"})),l&&B.attr("transform",function(a,b){return"translate(0,"+(b%2==0?"0":"12")+")"});break;case"right":v.enter().append("text").attr("class","nv-axislabel"),v.style("text-anchor",k?"middle":"begin").attr("transform",k?"rotate(90)":"").attr("y",k?-Math.max(e.right,f)+12:-10).attr("x",k?d3.max(d.range())/2:c.tickPadding()),i&&(x=p.selectAll("g.nv-axisMaxMin").data(d.domain()),x.enter().append("g").attr("class",function(a,b){return["nv-axisMaxMin","nv-axisMaxMin-y",0==b?"nv-axisMin-y":"nv-axisMax-y"].join(" ")}).append("text").style("opacity",0),x.exit().remove(),x.attr("transform",function(b){return"translate(0,"+a.utils.NaNtoZero(d(b))+")"}).select("text").attr("dy",".32em").attr("y",0).attr("x",c.tickPadding()).style("text-anchor","start").text(function(a){var b=u(a);return(""+b).match("NaN")?"":b}),x.watchTransition(s,"min-max right").attr("transform",function(b,c){return"translate(0,"+a.utils.NaNtoZero(d.range()[c])+")"}).select("text").style("opacity",1));break;case"left":v.enter().append("text").attr("class","nv-axislabel"),v.style("text-anchor",k?"middle":"end").attr("transform",k?"rotate(-90)":"").attr("y",k?-Math.max(e.left,f)+25-(o||0):-10).attr("x",k?-d3.max(d.range())/2:-c.tickPadding()),i&&(x=p.selectAll("g.nv-axisMaxMin").data(d.domain()),x.enter().append("g").attr("class",function(a,b){return["nv-axisMaxMin","nv-axisMaxMin-y",0==b?"nv-axisMin-y":"nv-axisMax-y"].join(" ")}).append("text").style("opacity",0),x.exit().remove(),x.attr("transform",function(b){return"translate(0,"+a.utils.NaNtoZero(r(b))+")"}).select("text").attr("dy",".32em").attr("y",0).attr("x",-c.tickPadding()).attr("text-anchor","end").text(function(a){var b=u(a);return(""+b).match("NaN")?"":b}),x.watchTransition(s,"min-max right").attr("transform",function(b,c){return"translate(0,"+a.utils.NaNtoZero(d.range()[c])+")"}).select("text").style("opacity",1))}if(v.text(function(a){return a}),!i||"left"!==c.orient()&&"right"!==c.orient()||(t.selectAll("g").each(function(a){d3.select(this).select("text").attr("opacity",1),(d(a)<d.range()[1]+10||d(a)>d.range()[0]-10)&&((a>1e-10||-1e-10>a)&&d3.select(this).attr("opacity",0),d3.select(this).select("text").attr("opacity",0))}),d.domain()[0]==d.domain()[1]&&0==d.domain()[0]&&p.selectAll("g.nv-axisMaxMin").style("opacity",function(a,b){return b?0:1})),i&&("top"===c.orient()||"bottom"===c.orient())){var E=[];p.selectAll("g.nv-axisMaxMin").each(function(a,b){try{E.push(b?d(a)-this.getBoundingClientRect().width-4:d(a)+this.getBoundingClientRect().width+4)}catch(c){E.push(b?d(a)-4:d(a)+4)}}),t.selectAll("g").each(function(a){(d(a)<E[0]||d(a)>E[1])&&(a>1e-10||-1e-10>a?d3.select(this).remove():d3.select(this).select("text").remove())})}t.selectAll(".tick").filter(function(a){return!parseFloat(Math.round(1e5*a)/1e6)&&void 0!==a}).classed("zero",!0),r=d.copy()}),s.renderEnd("axis immediate"),b}var c=d3.svg.axis(),d=d3.scale.linear(),e={top:0,right:0,bottom:0,left:0},f=75,g=60,h=null,i=!0,j=0,k=!0,l=!1,m=!1,n=null,o=0,p=250,q=d3.dispatch("renderEnd");c.scale(d).orient("bottom").tickFormat(function(a){return a});var r,s=a.utils.renderWatch(q,p);return b.axis=c,b.dispatch=q,b.options=a.utils.optionsFunc.bind(b),b._options=Object.create({},{axisLabelDistance:{get:function(){return o},set:function(a){o=a}},staggerLabels:{get:function(){return l},set:function(a){l=a}},rotateLabels:{get:function(){return j},set:function(a){j=a}},rotateYLabel:{get:function(){return k},set:function(a){k=a}},showMaxMin:{get:function(){return i},set:function(a){i=a}},axisLabel:{get:function(){return h},set:function(a){h=a}},height:{get:function(){return g},set:function(a){g=a}},ticks:{get:function(){return n},set:function(a){n=a}},width:{get:function(){return f},set:function(a){f=a}},margin:{get:function(){return e},set:function(a){e.top=void 0!==a.top?a.top:e.top,e.right=void 0!==a.right?a.right:e.right,e.bottom=void 0!==a.bottom?a.bottom:e.bottom,e.left=void 0!==a.left?a.left:e.left}},duration:{get:function(){return p},set:function(a){p=a,s.reset(p)}},scale:{get:function(){return d},set:function(e){d=e,c.scale(d),m="function"==typeof d.rangeBands,a.utils.inheritOptionsD3(b,d,["domain","range","rangeBand","rangeBands"])}}}),a.utils.initOptions(b),a.utils.inheritOptionsD3(b,c,["orient","tickValues","tickSubdivide","tickSize","tickPadding","tickFormat"]),a.utils.inheritOptionsD3(b,d,["domain","range","rangeBand","rangeBands"]),b},a.models.boxPlot=function(){"use strict";function b(l){return v.reset(),l.each(function(b){var l=j-i.left-i.right,p=k-i.top-i.bottom;r=d3.select(this),a.utils.initSVG(r),m.domain(c||b.map(function(a,b){return o(a,b)})).rangeBands(e||[0,l],.1);var w=[];if(!d){var x=d3.min(b.map(function(a){var b=[];return b.push(a.values.Q1),a.values.hasOwnProperty("whisker_low")&&null!==a.values.whisker_low&&b.push(a.values.whisker_low),a.values.hasOwnProperty("outliers")&&null!==a.values.outliers&&(b=b.concat(a.values.outliers)),d3.min(b)})),y=d3.max(b.map(function(a){var b=[];return b.push(a.values.Q3),a.values.hasOwnProperty("whisker_high")&&null!==a.values.whisker_high&&b.push(a.values.whisker_high),a.values.hasOwnProperty("outliers")&&null!==a.values.outliers&&(b=b.concat(a.values.outliers)),d3.max(b)}));w=[x,y]}n.domain(d||w),n.range(f||[p,0]),g=g||m,h=h||n.copy().range([n(0),n(0)]);{var z=r.selectAll("g.nv-wrap").data([b]);z.enter().append("g").attr("class","nvd3 nv-wrap")}z.attr("transform","translate("+i.left+","+i.top+")");var A=z.selectAll(".nv-boxplot").data(function(a){return a}),B=A.enter().append("g").style("stroke-opacity",1e-6).style("fill-opacity",1e-6);A.attr("class","nv-boxplot").attr("transform",function(a,b){return"translate("+(m(o(a,b))+.05*m.rangeBand())+", 0)"}).classed("hover",function(a){return a.hover}),A.watchTransition(v,"nv-boxplot: boxplots").style("stroke-opacity",1).style("fill-opacity",.75).delay(function(a,c){return c*t/b.length}).attr("transform",function(a,b){return"translate("+(m(o(a,b))+.05*m.rangeBand())+", 0)"}),A.exit().remove(),B.each(function(a,b){var c=d3.select(this);["low","high"].forEach(function(d){a.values.hasOwnProperty("whisker_"+d)&&null!==a.values["whisker_"+d]&&(c.append("line").style("stroke",a.color?a.color:q(a,b)).attr("class","nv-boxplot-whisker nv-boxplot-"+d),c.append("line").style("stroke",a.color?a.color:q(a,b)).attr("class","nv-boxplot-tick nv-boxplot-"+d))})});var C=A.selectAll(".nv-boxplot-outlier").data(function(a){return a.values.hasOwnProperty("outliers")&&null!==a.values.outliers?a.values.outliers:[]});C.enter().append("circle").style("fill",function(a,b,c){return q(a,c)}).style("stroke",function(a,b,c){return q(a,c)}).on("mouseover",function(a,b,c){d3.select(this).classed("hover",!0),s.elementMouseover({series:{key:a,color:q(a,c)},e:d3.event})}).on("mouseout",function(a,b,c){d3.select(this).classed("hover",!1),s.elementMouseout({series:{key:a,color:q(a,c)},e:d3.event})}).on("mousemove",function(){s.elementMousemove({e:d3.event})}),C.attr("class","nv-boxplot-outlier"),C.watchTransition(v,"nv-boxplot: nv-boxplot-outlier").attr("cx",.45*m.rangeBand()).attr("cy",function(a){return n(a)}).attr("r","3"),C.exit().remove();var D=function(){return null===u?.9*m.rangeBand():Math.min(75,.9*m.rangeBand())},E=function(){return.45*m.rangeBand()-D()/2},F=function(){return.45*m.rangeBand()+D()/2};["low","high"].forEach(function(a){var b="low"===a?"Q1":"Q3";A.select("line.nv-boxplot-whisker.nv-boxplot-"+a).watchTransition(v,"nv-boxplot: boxplots").attr("x1",.45*m.rangeBand()).attr("y1",function(b){return n(b.values["whisker_"+a])}).attr("x2",.45*m.rangeBand()).attr("y2",function(a){return n(a.values[b])}),A.select("line.nv-boxplot-tick.nv-boxplot-"+a).watchTransition(v,"nv-boxplot: boxplots").attr("x1",E).attr("y1",function(b){return n(b.values["whisker_"+a])}).attr("x2",F).attr("y2",function(b){return n(b.values["whisker_"+a])})}),["low","high"].forEach(function(a){B.selectAll(".nv-boxplot-"+a).on("mouseover",function(b,c,d){d3.select(this).classed("hover",!0),s.elementMouseover({series:{key:b.values["whisker_"+a],color:q(b,d)},e:d3.event})}).on("mouseout",function(b,c,d){d3.select(this).classed("hover",!1),s.elementMouseout({series:{key:b.values["whisker_"+a],color:q(b,d)},e:d3.event})}).on("mousemove",function(){s.elementMousemove({e:d3.event})})}),B.append("rect").attr("class","nv-boxplot-box").on("mouseover",function(a,b){d3.select(this).classed("hover",!0),s.elementMouseover({key:a.label,value:a.label,series:[{key:"Q3",value:a.values.Q3,color:a.color||q(a,b)},{key:"Q2",value:a.values.Q2,color:a.color||q(a,b)},{key:"Q1",value:a.values.Q1,color:a.color||q(a,b)}],data:a,index:b,e:d3.event})}).on("mouseout",function(a,b){d3.select(this).classed("hover",!1),s.elementMouseout({key:a.label,value:a.label,series:[{key:"Q3",value:a.values.Q3,color:a.color||q(a,b)},{key:"Q2",value:a.values.Q2,color:a.color||q(a,b)},{key:"Q1",value:a.values.Q1,color:a.color||q(a,b)}],data:a,index:b,e:d3.event})}).on("mousemove",function(){s.elementMousemove({e:d3.event})}),A.select("rect.nv-boxplot-box").watchTransition(v,"nv-boxplot: boxes").attr("y",function(a){return n(a.values.Q3)}).attr("width",D).attr("x",E).attr("height",function(a){return Math.abs(n(a.values.Q3)-n(a.values.Q1))||1}).style("fill",function(a,b){return a.color||q(a,b)}).style("stroke",function(a,b){return a.color||q(a,b)}),B.append("line").attr("class","nv-boxplot-median"),A.select("line.nv-boxplot-median").watchTransition(v,"nv-boxplot: boxplots line").attr("x1",E).attr("y1",function(a){return n(a.values.Q2)}).attr("x2",F).attr("y2",function(a){return n(a.values.Q2)}),g=m.copy(),h=n.copy()}),v.renderEnd("nv-boxplot immediate"),b}var c,d,e,f,g,h,i={top:0,right:0,bottom:0,left:0},j=960,k=500,l=Math.floor(1e4*Math.random()),m=d3.scale.ordinal(),n=d3.scale.linear(),o=function(a){return a.x},p=function(a){return a.y},q=a.utils.defaultColor(),r=null,s=d3.dispatch("elementMouseover","elementMouseout","elementMousemove","renderEnd"),t=250,u=null,v=a.utils.renderWatch(s,t);return b.dispatch=s,b.options=a.utils.optionsFunc.bind(b),b._options=Object.create({},{width:{get:function(){return j},set:function(a){j=a}},height:{get:function(){return k},set:function(a){k=a}},maxBoxWidth:{get:function(){return u},set:function(a){u=a}},x:{get:function(){return o},set:function(a){o=a}},y:{get:function(){return p},set:function(a){p=a}},xScale:{get:function(){return m},set:function(a){m=a}},yScale:{get:function(){return n},set:function(a){n=a}},xDomain:{get:function(){return c},set:function(a){c=a}},yDomain:{get:function(){return d},set:function(a){d=a}},xRange:{get:function(){return e},set:function(a){e=a}},yRange:{get:function(){return f},set:function(a){f=a}},id:{get:function(){return l},set:function(a){l=a}},margin:{get:function(){return i},set:function(a){i.top=void 0!==a.top?a.top:i.top,i.right=void 0!==a.right?a.right:i.right,i.bottom=void 0!==a.bottom?a.bottom:i.bottom,i.left=void 0!==a.left?a.left:i.left}},color:{get:function(){return q},set:function(b){q=a.utils.getColor(b)}},duration:{get:function(){return t},set:function(a){t=a,v.reset(t)}}}),a.utils.initOptions(b),b},a.models.boxPlotChart=function(){"use strict";function b(k){return t.reset(),t.models(e),l&&t.models(f),m&&t.models(g),k.each(function(k){var p=d3.select(this);a.utils.initSVG(p);var t=(i||parseInt(p.style("width"))||960)-h.left-h.right,u=(j||parseInt(p.style("height"))||400)-h.top-h.bottom;if(b.update=function(){r.beforeUpdate(),p.transition().duration(s).call(b)},b.container=this,!(k&&k.length&&k.filter(function(a){return a.values.hasOwnProperty("Q1")&&a.values.hasOwnProperty("Q2")&&a.values.hasOwnProperty("Q3")}).length)){var v=p.selectAll(".nv-noData").data([q]);return v.enter().append("text").attr("class","nvd3 nv-noData").attr("dy","-.7em").style("text-anchor","middle"),v.attr("x",h.left+t/2).attr("y",h.top+u/2).text(function(a){return a}),b}p.selectAll(".nv-noData").remove(),c=e.xScale(),d=e.yScale().clamp(!0);var w=p.selectAll("g.nv-wrap.nv-boxPlotWithAxes").data([k]),x=w.enter().append("g").attr("class","nvd3 nv-wrap nv-boxPlotWithAxes").append("g"),y=x.append("defs"),z=w.select("g");
    3: x.append("g").attr("class","nv-x nv-axis"),x.append("g").attr("class","nv-y nv-axis").append("g").attr("class","nv-zeroLine").append("line"),x.append("g").attr("class","nv-barsWrap"),z.attr("transform","translate("+h.left+","+h.top+")"),n&&z.select(".nv-y.nv-axis").attr("transform","translate("+t+",0)"),e.width(t).height(u);var A=z.select(".nv-barsWrap").datum(k.filter(function(a){return!a.disabled}));if(A.transition().call(e),y.append("clipPath").attr("id","nv-x-label-clip-"+e.id()).append("rect"),z.select("#nv-x-label-clip-"+e.id()+" rect").attr("width",c.rangeBand()*(o?2:1)).attr("height",16).attr("x",-c.rangeBand()/(o?1:2)),l){f.scale(c).ticks(a.utils.calcTicksX(t/100,k)).tickSize(-u,0),z.select(".nv-x.nv-axis").attr("transform","translate(0,"+d.range()[0]+")"),z.select(".nv-x.nv-axis").call(f);var B=z.select(".nv-x.nv-axis").selectAll("g");o&&B.selectAll("text").attr("transform",function(a,b,c){return"translate(0,"+(c%2==0?"5":"17")+")"})}m&&(g.scale(d).ticks(Math.floor(u/36)).tickSize(-t,0),z.select(".nv-y.nv-axis").call(g)),z.select(".nv-zeroLine line").attr("x1",0).attr("x2",t).attr("y1",d(0)).attr("y2",d(0))}),t.renderEnd("nv-boxplot chart immediate"),b}var c,d,e=a.models.boxPlot(),f=a.models.axis(),g=a.models.axis(),h={top:15,right:10,bottom:50,left:60},i=null,j=null,k=a.utils.getColor(),l=!0,m=!0,n=!1,o=!1,p=a.models.tooltip(),q="No Data Available.",r=d3.dispatch("tooltipShow","tooltipHide","beforeUpdate","renderEnd"),s=250;f.orient("bottom").showMaxMin(!1).tickFormat(function(a){return a}),g.orient(n?"right":"left").tickFormat(d3.format(",.1f")),p.duration(0);var t=a.utils.renderWatch(r,s);return e.dispatch.on("elementMouseover.tooltip",function(a){p.data(a).hidden(!1)}),e.dispatch.on("elementMouseout.tooltip",function(a){p.data(a).hidden(!0)}),e.dispatch.on("elementMousemove.tooltip",function(){p.position({top:d3.event.pageY,left:d3.event.pageX})()}),b.dispatch=r,b.boxplot=e,b.xAxis=f,b.yAxis=g,b.tooltip=p,b.options=a.utils.optionsFunc.bind(b),b._options=Object.create({},{width:{get:function(){return i},set:function(a){i=a}},height:{get:function(){return j},set:function(a){j=a}},staggerLabels:{get:function(){return o},set:function(a){o=a}},showXAxis:{get:function(){return l},set:function(a){l=a}},showYAxis:{get:function(){return m},set:function(a){m=a}},tooltips:{get:function(){return tooltips},set:function(a){tooltips=a}},tooltipContent:{get:function(){return p},set:function(a){p=a}},noData:{get:function(){return q},set:function(a){q=a}},margin:{get:function(){return h},set:function(a){h.top=void 0!==a.top?a.top:h.top,h.right=void 0!==a.right?a.right:h.right,h.bottom=void 0!==a.bottom?a.bottom:h.bottom,h.left=void 0!==a.left?a.left:h.left}},duration:{get:function(){return s},set:function(a){s=a,t.reset(s),e.duration(s),f.duration(s),g.duration(s)}},color:{get:function(){return k},set:function(b){k=a.utils.getColor(b),e.color(k)}},rightAlignYAxis:{get:function(){return n},set:function(a){n=a,g.orient(a?"right":"left")}}}),a.utils.inheritOptions(b,e),a.utils.initOptions(b),b},a.models.bullet=function(){"use strict";function b(d){return d.each(function(b,d){var p=m-c.left-c.right,s=n-c.top-c.bottom;o=d3.select(this),a.utils.initSVG(o);{var t=f.call(this,b,d).slice().sort(d3.descending),u=g.call(this,b,d).slice().sort(d3.descending),v=h.call(this,b,d).slice().sort(d3.descending),w=i.call(this,b,d).slice(),x=j.call(this,b,d).slice(),y=k.call(this,b,d).slice(),z=d3.scale.linear().domain(d3.extent(d3.merge([l,t]))).range(e?[p,0]:[0,p]);this.__chart__||d3.scale.linear().domain([0,1/0]).range(z.range())}this.__chart__=z;var A=d3.min(t),B=d3.max(t),C=t[1],D=o.selectAll("g.nv-wrap.nv-bullet").data([b]),E=D.enter().append("g").attr("class","nvd3 nv-wrap nv-bullet"),F=E.append("g"),G=D.select("g");F.append("rect").attr("class","nv-range nv-rangeMax"),F.append("rect").attr("class","nv-range nv-rangeAvg"),F.append("rect").attr("class","nv-range nv-rangeMin"),F.append("rect").attr("class","nv-measure"),D.attr("transform","translate("+c.left+","+c.top+")");var H=function(a){return Math.abs(z(a)-z(0))},I=function(a){return z(0>a?a:0)};G.select("rect.nv-rangeMax").attr("height",s).attr("width",H(B>0?B:A)).attr("x",I(B>0?B:A)).datum(B>0?B:A),G.select("rect.nv-rangeAvg").attr("height",s).attr("width",H(C)).attr("x",I(C)).datum(C),G.select("rect.nv-rangeMin").attr("height",s).attr("width",H(B)).attr("x",I(B)).attr("width",H(B>0?A:B)).attr("x",I(B>0?A:B)).datum(B>0?A:B),G.select("rect.nv-measure").style("fill",q).attr("height",s/3).attr("y",s/3).attr("width",0>v?z(0)-z(v[0]):z(v[0])-z(0)).attr("x",I(v)).on("mouseover",function(){r.elementMouseover({value:v[0],label:y[0]||"Current",color:d3.select(this).style("fill")})}).on("mousemove",function(){r.elementMousemove({value:v[0],label:y[0]||"Current",color:d3.select(this).style("fill")})}).on("mouseout",function(){r.elementMouseout({value:v[0],label:y[0]||"Current",color:d3.select(this).style("fill")})});var J=s/6,K=u.map(function(a,b){return{value:a,label:x[b]}});F.selectAll("path.nv-markerTriangle").data(K).enter().append("path").attr("class","nv-markerTriangle").attr("transform",function(a){return"translate("+z(a.value)+","+s/2+")"}).attr("d","M0,"+J+"L"+J+","+-J+" "+-J+","+-J+"Z").on("mouseover",function(a){r.elementMouseover({value:a.value,label:a.label||"Previous",color:d3.select(this).style("fill"),pos:[z(a.value),s/2]})}).on("mousemove",function(a){r.elementMousemove({value:a.value,label:a.label||"Previous",color:d3.select(this).style("fill")})}).on("mouseout",function(a){r.elementMouseout({value:a.value,label:a.label||"Previous",color:d3.select(this).style("fill")})}),D.selectAll(".nv-range").on("mouseover",function(a,b){var c=w[b]||(b?1==b?"Mean":"Minimum":"Maximum");r.elementMouseover({value:a,label:c,color:d3.select(this).style("fill")})}).on("mousemove",function(){r.elementMousemove({value:v[0],label:y[0]||"Previous",color:d3.select(this).style("fill")})}).on("mouseout",function(a,b){var c=w[b]||(b?1==b?"Mean":"Minimum":"Maximum");r.elementMouseout({value:a,label:c,color:d3.select(this).style("fill")})})}),b}var c={top:0,right:0,bottom:0,left:0},d="left",e=!1,f=function(a){return a.ranges},g=function(a){return a.markers?a.markers:[0]},h=function(a){return a.measures},i=function(a){return a.rangeLabels?a.rangeLabels:[]},j=function(a){return a.markerLabels?a.markerLabels:[]},k=function(a){return a.measureLabels?a.measureLabels:[]},l=[0],m=380,n=30,o=null,p=null,q=a.utils.getColor(["#1f77b4"]),r=d3.dispatch("elementMouseover","elementMouseout","elementMousemove");return b.dispatch=r,b.options=a.utils.optionsFunc.bind(b),b._options=Object.create({},{ranges:{get:function(){return f},set:function(a){f=a}},markers:{get:function(){return g},set:function(a){g=a}},measures:{get:function(){return h},set:function(a){h=a}},forceX:{get:function(){return l},set:function(a){l=a}},width:{get:function(){return m},set:function(a){m=a}},height:{get:function(){return n},set:function(a){n=a}},tickFormat:{get:function(){return p},set:function(a){p=a}},margin:{get:function(){return c},set:function(a){c.top=void 0!==a.top?a.top:c.top,c.right=void 0!==a.right?a.right:c.right,c.bottom=void 0!==a.bottom?a.bottom:c.bottom,c.left=void 0!==a.left?a.left:c.left}},orient:{get:function(){return d},set:function(a){d=a,e="right"==d||"bottom"==d}},color:{get:function(){return q},set:function(b){q=a.utils.getColor(b)}}}),a.utils.initOptions(b),b},a.models.bulletChart=function(){"use strict";function b(d){return d.each(function(e,o){var p=d3.select(this);a.utils.initSVG(p);var q=a.utils.availableWidth(k,p,g),r=l-g.top-g.bottom;if(b.update=function(){b(d)},b.container=this,!e||!h.call(this,e,o))return a.utils.noData(b,p),b;p.selectAll(".nv-noData").remove();var s=h.call(this,e,o).slice().sort(d3.descending),t=i.call(this,e,o).slice().sort(d3.descending),u=j.call(this,e,o).slice().sort(d3.descending),v=p.selectAll("g.nv-wrap.nv-bulletChart").data([e]),w=v.enter().append("g").attr("class","nvd3 nv-wrap nv-bulletChart"),x=w.append("g"),y=v.select("g");x.append("g").attr("class","nv-bulletWrap"),x.append("g").attr("class","nv-titles"),v.attr("transform","translate("+g.left+","+g.top+")");var z=d3.scale.linear().domain([0,Math.max(s[0],t[0],u[0])]).range(f?[q,0]:[0,q]),A=this.__chart__||d3.scale.linear().domain([0,1/0]).range(z.range());this.__chart__=z;var B=x.select(".nv-titles").append("g").attr("text-anchor","end").attr("transform","translate(-6,"+(l-g.top-g.bottom)/2+")");B.append("text").attr("class","nv-title").text(function(a){return a.title}),B.append("text").attr("class","nv-subtitle").attr("dy","1em").text(function(a){return a.subtitle}),c.width(q).height(r);var C=y.select(".nv-bulletWrap");d3.transition(C).call(c);var D=m||z.tickFormat(q/100),E=y.selectAll("g.nv-tick").data(z.ticks(n?n:q/50),function(a){return this.textContent||D(a)}),F=E.enter().append("g").attr("class","nv-tick").attr("transform",function(a){return"translate("+A(a)+",0)"}).style("opacity",1e-6);F.append("line").attr("y1",r).attr("y2",7*r/6),F.append("text").attr("text-anchor","middle").attr("dy","1em").attr("y",7*r/6).text(D);var G=d3.transition(E).attr("transform",function(a){return"translate("+z(a)+",0)"}).style("opacity",1);G.select("line").attr("y1",r).attr("y2",7*r/6),G.select("text").attr("y",7*r/6),d3.transition(E.exit()).attr("transform",function(a){return"translate("+z(a)+",0)"}).style("opacity",1e-6).remove()}),d3.timer.flush(),b}var c=a.models.bullet(),d=a.models.tooltip(),e="left",f=!1,g={top:5,right:40,bottom:20,left:120},h=function(a){return a.ranges},i=function(a){return a.markers?a.markers:[0]},j=function(a){return a.measures},k=null,l=55,m=null,n=null,o=null,p=d3.dispatch("tooltipShow","tooltipHide");return d.duration(0).headerEnabled(!1),c.dispatch.on("elementMouseover.tooltip",function(a){a.series={key:a.label,value:a.value,color:a.color},d.data(a).hidden(!1)}),c.dispatch.on("elementMouseout.tooltip",function(){d.hidden(!0)}),c.dispatch.on("elementMousemove.tooltip",function(){d.position({top:d3.event.pageY,left:d3.event.pageX})()}),b.bullet=c,b.dispatch=p,b.tooltip=d,b.options=a.utils.optionsFunc.bind(b),b._options=Object.create({},{ranges:{get:function(){return h},set:function(a){h=a}},markers:{get:function(){return i},set:function(a){i=a}},measures:{get:function(){return j},set:function(a){j=a}},width:{get:function(){return k},set:function(a){k=a}},height:{get:function(){return l},set:function(a){l=a}},tickFormat:{get:function(){return m},set:function(a){m=a}},ticks:{get:function(){return n},set:function(a){n=a}},noData:{get:function(){return o},set:function(a){o=a}},tooltips:{get:function(){return d.enabled()},set:function(b){a.deprecated("tooltips","use chart.tooltip.enabled() instead"),d.enabled(!!b)}},tooltipContent:{get:function(){return d.contentGenerator()},set:function(b){a.deprecated("tooltipContent","use chart.tooltip.contentGenerator() instead"),d.contentGenerator(b)}},margin:{get:function(){return g},set:function(a){g.top=void 0!==a.top?a.top:g.top,g.right=void 0!==a.right?a.right:g.right,g.bottom=void 0!==a.bottom?a.bottom:g.bottom,g.left=void 0!==a.left?a.left:g.left}},orient:{get:function(){return e},set:function(a){e=a,f="right"==e||"bottom"==e}}}),a.utils.inheritOptions(b,c),a.utils.initOptions(b),b},a.models.candlestickBar=function(){"use strict";function b(x){return x.each(function(b){c=d3.select(this);var x=a.utils.availableWidth(i,c,h),y=a.utils.availableHeight(j,c,h);a.utils.initSVG(c);var A=x/b[0].values.length*.45;l.domain(d||d3.extent(b[0].values.map(n).concat(t))),l.range(v?f||[.5*x/b[0].values.length,x*(b[0].values.length-.5)/b[0].values.length]:f||[5+A/2,x-A/2-5]),m.domain(e||[d3.min(b[0].values.map(s).concat(u)),d3.max(b[0].values.map(r).concat(u))]).range(g||[y,0]),l.domain()[0]===l.domain()[1]&&l.domain(l.domain()[0]?[l.domain()[0]-.01*l.domain()[0],l.domain()[1]+.01*l.domain()[1]]:[-1,1]),m.domain()[0]===m.domain()[1]&&m.domain(m.domain()[0]?[m.domain()[0]+.01*m.domain()[0],m.domain()[1]-.01*m.domain()[1]]:[-1,1]);var B=d3.select(this).selectAll("g.nv-wrap.nv-candlestickBar").data([b[0].values]),C=B.enter().append("g").attr("class","nvd3 nv-wrap nv-candlestickBar"),D=C.append("defs"),E=C.append("g"),F=B.select("g");E.append("g").attr("class","nv-ticks"),B.attr("transform","translate("+h.left+","+h.top+")"),c.on("click",function(a,b){z.chartClick({data:a,index:b,pos:d3.event,id:k})}),D.append("clipPath").attr("id","nv-chart-clip-path-"+k).append("rect"),B.select("#nv-chart-clip-path-"+k+" rect").attr("width",x).attr("height",y),F.attr("clip-path",w?"url(#nv-chart-clip-path-"+k+")":"");var G=B.select(".nv-ticks").selectAll(".nv-tick").data(function(a){return a});G.exit().remove();{var H=G.enter().append("g").attr("class",function(a,b,c){return(p(a,b)>q(a,b)?"nv-tick negative":"nv-tick positive")+" nv-tick-"+c+"-"+b});H.append("line").attr("class","nv-candlestick-lines").attr("transform",function(a,b){return"translate("+l(n(a,b))+",0)"}).attr("x1",0).attr("y1",function(a,b){return m(r(a,b))}).attr("x2",0).attr("y2",function(a,b){return m(s(a,b))}),H.append("rect").attr("class","nv-candlestick-rects nv-bars").attr("transform",function(a,b){return"translate("+(l(n(a,b))-A/2)+","+(m(o(a,b))-(p(a,b)>q(a,b)?m(q(a,b))-m(p(a,b)):0))+")"}).attr("x",0).attr("y",0).attr("width",A).attr("height",function(a,b){var c=p(a,b),d=q(a,b);return c>d?m(d)-m(c):m(c)-m(d)})}c.selectAll(".nv-candlestick-lines").transition().attr("transform",function(a,b){return"translate("+l(n(a,b))+",0)"}).attr("x1",0).attr("y1",function(a,b){return m(r(a,b))}).attr("x2",0).attr("y2",function(a,b){return m(s(a,b))}),c.selectAll(".nv-candlestick-rects").transition().attr("transform",function(a,b){return"translate("+(l(n(a,b))-A/2)+","+(m(o(a,b))-(p(a,b)>q(a,b)?m(q(a,b))-m(p(a,b)):0))+")"}).attr("x",0).attr("y",0).attr("width",A).attr("height",function(a,b){var c=p(a,b),d=q(a,b);return c>d?m(d)-m(c):m(c)-m(d)})}),b}var c,d,e,f,g,h={top:0,right:0,bottom:0,left:0},i=null,j=null,k=Math.floor(1e4*Math.random()),l=d3.scale.linear(),m=d3.scale.linear(),n=function(a){return a.x},o=function(a){return a.y},p=function(a){return a.open},q=function(a){return a.close},r=function(a){return a.high},s=function(a){return a.low},t=[],u=[],v=!1,w=!0,x=a.utils.defaultColor(),y=!1,z=d3.dispatch("tooltipShow","tooltipHide","stateChange","changeState","renderEnd","chartClick","elementClick","elementDblClick","elementMouseover","elementMouseout","elementMousemove");return b.highlightPoint=function(a,d){b.clearHighlights(),c.select(".nv-candlestickBar .nv-tick-0-"+a).classed("hover",d)},b.clearHighlights=function(){c.select(".nv-candlestickBar .nv-tick.hover").classed("hover",!1)},b.dispatch=z,b.options=a.utils.optionsFunc.bind(b),b._options=Object.create({},{width:{get:function(){return i},set:function(a){i=a}},height:{get:function(){return j},set:function(a){j=a}},xScale:{get:function(){return l},set:function(a){l=a}},yScale:{get:function(){return m},set:function(a){m=a}},xDomain:{get:function(){return d},set:function(a){d=a}},yDomain:{get:function(){return e},set:function(a){e=a}},xRange:{get:function(){return f},set:function(a){f=a}},yRange:{get:function(){return g},set:function(a){g=a}},forceX:{get:function(){return t},set:function(a){t=a}},forceY:{get:function(){return u},set:function(a){u=a}},padData:{get:function(){return v},set:function(a){v=a}},clipEdge:{get:function(){return w},set:function(a){w=a}},id:{get:function(){return k},set:function(a){k=a}},interactive:{get:function(){return y},set:function(a){y=a}},x:{get:function(){return n},set:function(a){n=a}},y:{get:function(){return o},set:function(a){o=a}},open:{get:function(){return p()},set:function(a){p=a}},close:{get:function(){return q()},set:function(a){q=a}},high:{get:function(){return r},set:function(a){r=a}},low:{get:function(){return s},set:function(a){s=a}},margin:{get:function(){return h},set:function(a){h.top=void 0!=a.top?a.top:h.top,h.right=void 0!=a.right?a.right:h.right,h.bottom=void 0!=a.bottom?a.bottom:h.bottom,h.left=void 0!=a.left?a.left:h.left}},color:{get:function(){return x},set:function(b){x=a.utils.getColor(b)}}}),a.utils.initOptions(b),b},a.models.cumulativeLineChart=function(){"use strict";function b(l){return H.reset(),H.models(f),r&&H.models(g),s&&H.models(h),l.each(function(l){function A(){d3.select(b.container).style("cursor","ew-resize")}function E(){G.x=d3.event.x,G.i=Math.round(F.invert(G.x)),K()}function H(){d3.select(b.container).style("cursor","auto"),y.index=G.i,C.stateChange(y)}function K(){bb.data([G]);var a=b.duration();b.duration(0),b.update(),b.duration(a)}var L=d3.select(this);a.utils.initSVG(L),L.classed("nv-chart-"+x,!0);var M=this,N=a.utils.availableWidth(o,L,m),O=a.utils.availableHeight(p,L,m);if(b.update=function(){0===D?L.call(b):L.transition().duration(D).call(b)},b.container=this,y.setter(J(l),b.update).getter(I(l)).update(),y.disabled=l.map(function(a){return!!a.disabled}),!z){var P;z={};for(P in y)z[P]=y[P]instanceof Array?y[P].slice(0):y[P]}var Q=d3.behavior.drag().on("dragstart",A).on("drag",E).on("dragend",H);if(!(l&&l.length&&l.filter(function(a){return a.values.length}).length))return a.utils.noData(b,L),b;if(L.selectAll(".nv-noData").remove(),d=f.xScale(),e=f.yScale(),w)f.yDomain(null);else{var R=l.filter(function(a){return!a.disabled}).map(function(a){var b=d3.extent(a.values,f.y());return b[0]<-.95&&(b[0]=-.95),[(b[0]-b[1])/(1+b[1]),(b[1]-b[0])/(1+b[0])]}),S=[d3.min(R,function(a){return a[0]}),d3.max(R,function(a){return a[1]})];f.yDomain(S)}F.domain([0,l[0].values.length-1]).range([0,N]).clamp(!0);var l=c(G.i,l),T=v?"none":"all",U=L.selectAll("g.nv-wrap.nv-cumulativeLine").data([l]),V=U.enter().append("g").attr("class","nvd3 nv-wrap nv-cumulativeLine").append("g"),W=U.select("g");if(V.append("g").attr("class","nv-interactive"),V.append("g").attr("class","nv-x nv-axis").style("pointer-events","none"),V.append("g").attr("class","nv-y nv-axis"),V.append("g").attr("class","nv-background"),V.append("g").attr("class","nv-linesWrap").style("pointer-events",T),V.append("g").attr("class","nv-avgLinesWrap").style("pointer-events","none"),V.append("g").attr("class","nv-legendWrap"),V.append("g").attr("class","nv-controlsWrap"),q&&(i.width(N),W.select(".nv-legendWrap").datum(l).call(i),m.top!=i.height()&&(m.top=i.height(),O=a.utils.availableHeight(p,L,m)),W.select(".nv-legendWrap").attr("transform","translate(0,"+-m.top+")")),u){var X=[{key:"Re-scale y-axis",disabled:!w}];j.width(140).color(["#444","#444","#444"]).rightAlign(!1).margin({top:5,right:0,bottom:5,left:20}),W.select(".nv-controlsWrap").datum(X).attr("transform","translate(0,"+-m.top+")").call(j)}U.attr("transform","translate("+m.left+","+m.top+")"),t&&W.select(".nv-y.nv-axis").attr("transform","translate("+N+",0)");var Y=l.filter(function(a){return a.tempDisabled});U.select(".tempDisabled").remove(),Y.length&&U.append("text").attr("class","tempDisabled").attr("x",N/2).attr("y","-.71em").style("text-anchor","end").text(Y.map(function(a){return a.key}).join(", ")+" values cannot be calculated for this time period."),v&&(k.width(N).height(O).margin({left:m.left,top:m.top}).svgContainer(L).xScale(d),U.select(".nv-interactive").call(k)),V.select(".nv-background").append("rect"),W.select(".nv-background rect").attr("width",N).attr("height",O),f.y(function(a){return a.display.y}).width(N).height(O).color(l.map(function(a,b){return a.color||n(a,b)}).filter(function(a,b){return!l[b].disabled&&!l[b].tempDisabled}));var Z=W.select(".nv-linesWrap").datum(l.filter(function(a){return!a.disabled&&!a.tempDisabled}));Z.call(f),l.forEach(function(a,b){a.seriesIndex=b});var $=l.filter(function(a){return!a.disabled&&!!B(a)}),_=W.select(".nv-avgLinesWrap").selectAll("line").data($,function(a){return a.key}),ab=function(a){var b=e(B(a));return 0>b?0:b>O?O:b};_.enter().append("line").style("stroke-width",2).style("stroke-dasharray","10,10").style("stroke",function(a){return f.color()(a,a.seriesIndex)}).attr("x1",0).attr("x2",N).attr("y1",ab).attr("y2",ab),_.style("stroke-opacity",function(a){var b=e(B(a));return 0>b||b>O?0:1}).attr("x1",0).attr("x2",N).attr("y1",ab).attr("y2",ab),_.exit().remove();var bb=Z.selectAll(".nv-indexLine").data([G]);bb.enter().append("rect").attr("class","nv-indexLine").attr("width",3).attr("x",-2).attr("fill","red").attr("fill-opacity",.5).style("pointer-events","all").call(Q),bb.attr("transform",function(a){return"translate("+F(a.i)+",0)"}).attr("height",O),r&&(g.scale(d)._ticks(a.utils.calcTicksX(N/70,l)).tickSize(-O,0),W.select(".nv-x.nv-axis").attr("transform","translate(0,"+e.range()[0]+")"),W.select(".nv-x.nv-axis").call(g)),s&&(h.scale(e)._ticks(a.utils.calcTicksY(O/36,l)).tickSize(-N,0),W.select(".nv-y.nv-axis").call(h)),W.select(".nv-background rect").on("click",function(){G.x=d3.mouse(this)[0],G.i=Math.round(F.invert(G.x)),y.index=G.i,C.stateChange(y),K()}),f.dispatch.on("elementClick",function(a){G.i=a.pointIndex,G.x=F(G.i),y.index=G.i,C.stateChange(y),K()}),j.dispatch.on("legendClick",function(a){a.disabled=!a.disabled,w=!a.disabled,y.rescaleY=w,C.stateChange(y),b.update()}),i.dispatch.on("stateChange",function(a){for(var c in a)y[c]=a[c];C.stateChange(y),b.update()}),k.dispatch.on("elementMousemove",function(c){f.clearHighlights();var d,e,i,j=[];if(l.filter(function(a,b){return a.seriesIndex=b,!a.disabled}).forEach(function(g,h){e=a.interactiveBisect(g.values,c.pointXValue,b.x()),f.highlightPoint(h,e,!0);var k=g.values[e];"undefined"!=typeof k&&("undefined"==typeof d&&(d=k),"undefined"==typeof i&&(i=b.xScale()(b.x()(k,e))),j.push({key:g.key,value:b.y()(k,e),color:n(g,g.seriesIndex)}))}),j.length>2){var o=b.yScale().invert(c.mouseY),p=Math.abs(b.yScale().domain()[0]-b.yScale().domain()[1]),q=.03*p,r=a.nearestValueIndex(j.map(function(a){return a.value}),o,q);null!==r&&(j[r].highlight=!0)}var s=g.tickFormat()(b.x()(d,e),e);k.tooltip.position({left:i+m.left,top:c.mouseY+m.top}).chartContainer(M.parentNode).valueFormatter(function(a){return h.tickFormat()(a)}).data({value:s,series:j})(),k.renderGuideLine(i)}),k.dispatch.on("elementMouseout",function(){f.clearHighlights()}),C.on("changeState",function(a){"undefined"!=typeof a.disabled&&(l.forEach(function(b,c){b.disabled=a.disabled[c]}),y.disabled=a.disabled),"undefined"!=typeof a.index&&(G.i=a.index,G.x=F(G.i),y.index=a.index,bb.data([G])),"undefined"!=typeof a.rescaleY&&(w=a.rescaleY),b.update()})}),H.renderEnd("cumulativeLineChart immediate"),b}function c(a,b){return K||(K=f.y()),b.map(function(b){if(!b.values)return b;var c=b.values[a];if(null==c)return b;var d=K(c,a);return-.95>d&&!E?(b.tempDisabled=!0,b):(b.tempDisabled=!1,b.values=b.values.map(function(a,b){return a.display={y:(K(a,b)-d)/(1+d)},a}),b)})}var d,e,f=a.models.line(),g=a.models.axis(),h=a.models.axis(),i=a.models.legend(),j=a.models.legend(),k=a.interactiveGuideline(),l=a.models.tooltip(),m={top:30,right:30,bottom:50,left:60},n=a.utils.defaultColor(),o=null,p=null,q=!0,r=!0,s=!0,t=!1,u=!0,v=!1,w=!0,x=f.id(),y=a.utils.state(),z=null,A=null,B=function(a){return a.average},C=d3.dispatch("stateChange","changeState","renderEnd"),D=250,E=!1;y.index=0,y.rescaleY=w,g.orient("bottom").tickPadding(7),h.orient(t?"right":"left"),l.valueFormatter(function(a,b){return h.tickFormat()(a,b)}).headerFormatter(function(a,b){return g.tickFormat()(a,b)}),j.updateState(!1);var F=d3.scale.linear(),G={i:0,x:0},H=a.utils.renderWatch(C,D),I=function(a){return function(){return{active:a.map(function(a){return!a.disabled}),index:G.i,rescaleY:w}}},J=function(a){return function(b){void 0!==b.index&&(G.i=b.index),void 0!==b.rescaleY&&(w=b.rescaleY),void 0!==b.active&&a.forEach(function(a,c){a.disabled=!b.active[c]})}};f.dispatch.on("elementMouseover.tooltip",function(a){var c={x:b.x()(a.point),y:b.y()(a.point),color:a.point.color};a.point=c,l.data(a).position(a.pos).hidden(!1)}),f.dispatch.on("elementMouseout.tooltip",function(){l.hidden(!0)});var K=null;return b.dispatch=C,b.lines=f,b.legend=i,b.controls=j,b.xAxis=g,b.yAxis=h,b.interactiveLayer=k,b.state=y,b.tooltip=l,b.options=a.utils.optionsFunc.bind(b),b._options=Object.create({},{width:{get:function(){return o},set:function(a){o=a}},height:{get:function(){return p},set:function(a){p=a}},rescaleY:{get:function(){return w},set:function(a){w=a}},showControls:{get:function(){return u},set:function(a){u=a}},showLegend:{get:function(){return q},set:function(a){q=a}},average:{get:function(){return B},set:function(a){B=a}},defaultState:{get:function(){return z},set:function(a){z=a}},noData:{get:function(){return A},set:function(a){A=a}},showXAxis:{get:function(){return r},set:function(a){r=a}},showYAxis:{get:function(){return s},set:function(a){s=a}},noErrorCheck:{get:function(){return E},set:function(a){E=a}},tooltips:{get:function(){return l.enabled()},set:function(b){a.deprecated("tooltips","use chart.tooltip.enabled() instead"),l.enabled(!!b)}},tooltipContent:{get:function(){return l.contentGenerator()},set:function(b){a.deprecated("tooltipContent","use chart.tooltip.contentGenerator() instead"),l.contentGenerator(b)}},margin:{get:function(){return m},set:function(a){m.top=void 0!==a.top?a.top:m.top,m.right=void 0!==a.right?a.right:m.right,m.bottom=void 0!==a.bottom?a.bottom:m.bottom,m.left=void 0!==a.left?a.left:m.left}},color:{get:function(){return n},set:function(b){n=a.utils.getColor(b),i.color(n)}},useInteractiveGuideline:{get:function(){return v},set:function(a){v=a,a===!0&&(b.interactive(!1),b.useVoronoi(!1))}},rightAlignYAxis:{get:function(){return t},set:function(a){t=a,h.orient(a?"right":"left")}},duration:{get:function(){return D},set:function(a){D=a,f.duration(D),g.duration(D),h.duration(D),H.reset(D)}}}),a.utils.inheritOptions(b,f),a.utils.initOptions(b),b},a.models.discreteBar=function(){"use strict";function b(m){return y.reset(),m.each(function(b){var m=k-j.left-j.right,x=l-j.top-j.bottom;c=d3.select(this),a.utils.initSVG(c),b.forEach(function(a,b){a.values.forEach(function(a){a.series=b})});var z=d&&e?[]:b.map(function(a){return a.values.map(function(a,b){return{x:p(a,b),y:q(a,b),y0:a.y0}})});n.domain(d||d3.merge(z).map(function(a){return a.x})).rangeBands(f||[0,m],.1),o.domain(e||d3.extent(d3.merge(z).map(function(a){return a.y}).concat(r))),o.range(t?g||[x-(o.domain()[0]<0?12:0),o.domain()[1]>0?12:0]:g||[x,0]),h=h||n,i=i||o.copy().range([o(0),o(0)]);{var A=c.selectAll("g.nv-wrap.nv-discretebar").data([b]),B=A.enter().append("g").attr("class","nvd3 nv-wrap nv-discretebar"),C=B.append("g");A.select("g")}C.append("g").attr("class","nv-groups"),A.attr("transform","translate("+j.left+","+j.top+")");var D=A.select(".nv-groups").selectAll(".nv-group").data(function(a){return a},function(a){return a.key});D.enter().append("g").style("stroke-opacity",1e-6).style("fill-opacity",1e-6),D.exit().watchTransition(y,"discreteBar: exit groups").style("stroke-opacity",1e-6).style("fill-opacity",1e-6).remove(),D.attr("class",function(a,b){return"nv-group nv-series-"+b}).classed("hover",function(a){return a.hover}),D.watchTransition(y,"discreteBar: groups").style("stroke-opacity",1).style("fill-opacity",.75);var E=D.selectAll("g.nv-bar").data(function(a){return a.values});E.exit().remove();var F=E.enter().append("g").attr("transform",function(a,b){return"translate("+(n(p(a,b))+.05*n.rangeBand())+", "+o(0)+")"}).on("mouseover",function(a,b){d3.select(this).classed("hover",!0),v.elementMouseover({data:a,index:b,color:d3.select(this).style("fill")})}).on("mouseout",function(a,b){d3.select(this).classed("hover",!1),v.elementMouseout({data:a,index:b,color:d3.select(this).style("fill")})}).on("mousemove",function(a,b){v.elementMousemove({data:a,index:b,color:d3.select(this).style("fill")})}).on("click",function(a,b){v.elementClick({data:a,index:b,color:d3.select(this).style("fill")}),d3.event.stopPropagation()}).on("dblclick",function(a,b){v.elementDblClick({data:a,index:b,color:d3.select(this).style("fill")}),d3.event.stopPropagation()});F.append("rect").attr("height",0).attr("width",.9*n.rangeBand()/b.length),t?(F.append("text").attr("text-anchor","middle"),E.select("text").text(function(a,b){return u(q(a,b))}).watchTransition(y,"discreteBar: bars text").attr("x",.9*n.rangeBand()/2).attr("y",function(a,b){return q(a,b)<0?o(q(a,b))-o(0)+12:-4})):E.selectAll("text").remove(),E.attr("class",function(a,b){return q(a,b)<0?"nv-bar negative":"nv-bar positive"}).style("fill",function(a,b){return a.color||s(a,b)}).style("stroke",function(a,b){return a.color||s(a,b)}).select("rect").attr("class",w).watchTransition(y,"discreteBar: bars rect").attr("width",.9*n.rangeBand()/b.length),E.watchTransition(y,"discreteBar: bars").attr("transform",function(a,b){var c=n(p(a,b))+.05*n.rangeBand(),d=q(a,b)<0?o(0):o(0)-o(q(a,b))<1?o(0)-1:o(q(a,b));return"translate("+c+", "+d+")"}).select("rect").attr("height",function(a,b){return Math.max(Math.abs(o(q(a,b))-o(e&&e[0]||0))||1)}),h=n.copy(),i=o.copy()}),y.renderEnd("discreteBar immediate"),b}var c,d,e,f,g,h,i,j={top:0,right:0,bottom:0,left:0},k=960,l=500,m=Math.floor(1e4*Math.random()),n=d3.scale.ordinal(),o=d3.scale.linear(),p=function(a){return a.x},q=function(a){return a.y},r=[0],s=a.utils.defaultColor(),t=!1,u=d3.format(",.2f"),v=d3.dispatch("chartClick","elementClick","elementDblClick","elementMouseover","elementMouseout","elementMousemove","renderEnd"),w="discreteBar",x=250,y=a.utils.renderWatch(v,x);return b.dispatch=v,b.options=a.utils.optionsFunc.bind(b),b._options=Object.create({},{width:{get:function(){return k},set:function(a){k=a}},height:{get:function(){return l},set:function(a){l=a}},forceY:{get:function(){return r},set:function(a){r=a}},showValues:{get:function(){return t},set:function(a){t=a}},x:{get:function(){return p},set:function(a){p=a}},y:{get:function(){return q},set:function(a){q=a}},xScale:{get:function(){return n},set:function(a){n=a}},yScale:{get:function(){return o},set:function(a){o=a}},xDomain:{get:function(){return d},set:function(a){d=a}},yDomain:{get:function(){return e},set:function(a){e=a}},xRange:{get:function(){return f},set:function(a){f=a}},yRange:{get:function(){return g},set:function(a){g=a}},valueFormat:{get:function(){return u},set:function(a){u=a}},id:{get:function(){return m},set:function(a){m=a}},rectClass:{get:function(){return w},set:function(a){w=a}},margin:{get:function(){return j},set:function(a){j.top=void 0!==a.top?a.top:j.top,j.right=void 0!==a.right?a.right:j.right,j.bottom=void 0!==a.bottom?a.bottom:j.bottom,j.left=void 0!==a.left?a.left:j.left}},color:{get:function(){return s},set:function(b){s=a.utils.getColor(b)}},duration:{get:function(){return x},set:function(a){x=a,y.reset(x)}}}),a.utils.initOptions(b),b},a.models.discreteBarChart=function(){"use strict";function b(h){return t.reset(),t.models(e),m&&t.models(f),n&&t.models(g),h.each(function(h){var l=d3.select(this);a.utils.initSVG(l);var q=a.utils.availableWidth(j,l,i),t=a.utils.availableHeight(k,l,i);if(b.update=function(){r.beforeUpdate(),l.transition().duration(s).call(b)},b.container=this,!(h&&h.length&&h.filter(function(a){return a.values.length}).length))return a.utils.noData(b,l),b;l.selectAll(".nv-noData").remove(),c=e.xScale(),d=e.yScale().clamp(!0);var u=l.selectAll("g.nv-wrap.nv-discreteBarWithAxes").data([h]),v=u.enter().append("g").attr("class","nvd3 nv-wrap nv-discreteBarWithAxes").append("g"),w=v.append("defs"),x=u.select("g");v.append("g").attr("class","nv-x nv-axis"),v.append("g").attr("class","nv-y nv-axis").append("g").attr("class","nv-zeroLine").append("line"),v.append("g").attr("class","nv-barsWrap"),x.attr("transform","translate("+i.left+","+i.top+")"),o&&x.select(".nv-y.nv-axis").attr("transform","translate("+q+",0)"),e.width(q).height(t);var y=x.select(".nv-barsWrap").datum(h.filter(function(a){return!a.disabled}));if(y.transition().call(e),w.append("clipPath").attr("id","nv-x-label-clip-"+e.id()).append("rect"),x.select("#nv-x-label-clip-"+e.id()+" rect").attr("width",c.rangeBand()*(p?2:1)).attr("height",16).attr("x",-c.rangeBand()/(p?1:2)),m){f.scale(c)._ticks(a.utils.calcTicksX(q/100,h)).tickSize(-t,0),x.select(".nv-x.nv-axis").attr("transform","translate(0,"+(d.range()[0]+(e.showValues()&&d.domain()[0]<0?16:0))+")"),x.select(".nv-x.nv-axis").call(f);
    4: var z=x.select(".nv-x.nv-axis").selectAll("g");p&&z.selectAll("text").attr("transform",function(a,b,c){return"translate(0,"+(c%2==0?"5":"17")+")"})}n&&(g.scale(d)._ticks(a.utils.calcTicksY(t/36,h)).tickSize(-q,0),x.select(".nv-y.nv-axis").call(g)),x.select(".nv-zeroLine line").attr("x1",0).attr("x2",q).attr("y1",d(0)).attr("y2",d(0))}),t.renderEnd("discreteBar chart immediate"),b}var c,d,e=a.models.discreteBar(),f=a.models.axis(),g=a.models.axis(),h=a.models.tooltip(),i={top:15,right:10,bottom:50,left:60},j=null,k=null,l=a.utils.getColor(),m=!0,n=!0,o=!1,p=!1,q=null,r=d3.dispatch("beforeUpdate","renderEnd"),s=250;f.orient("bottom").showMaxMin(!1).tickFormat(function(a){return a}),g.orient(o?"right":"left").tickFormat(d3.format(",.1f")),h.duration(0).headerEnabled(!1).valueFormatter(function(a,b){return g.tickFormat()(a,b)}).keyFormatter(function(a,b){return f.tickFormat()(a,b)});var t=a.utils.renderWatch(r,s);return e.dispatch.on("elementMouseover.tooltip",function(a){a.series={key:b.x()(a.data),value:b.y()(a.data),color:a.color},h.data(a).hidden(!1)}),e.dispatch.on("elementMouseout.tooltip",function(){h.hidden(!0)}),e.dispatch.on("elementMousemove.tooltip",function(){h.position({top:d3.event.pageY,left:d3.event.pageX})()}),b.dispatch=r,b.discretebar=e,b.xAxis=f,b.yAxis=g,b.tooltip=h,b.options=a.utils.optionsFunc.bind(b),b._options=Object.create({},{width:{get:function(){return j},set:function(a){j=a}},height:{get:function(){return k},set:function(a){k=a}},staggerLabels:{get:function(){return p},set:function(a){p=a}},showXAxis:{get:function(){return m},set:function(a){m=a}},showYAxis:{get:function(){return n},set:function(a){n=a}},noData:{get:function(){return q},set:function(a){q=a}},tooltips:{get:function(){return h.enabled()},set:function(b){a.deprecated("tooltips","use chart.tooltip.enabled() instead"),h.enabled(!!b)}},tooltipContent:{get:function(){return h.contentGenerator()},set:function(b){a.deprecated("tooltipContent","use chart.tooltip.contentGenerator() instead"),h.contentGenerator(b)}},margin:{get:function(){return i},set:function(a){i.top=void 0!==a.top?a.top:i.top,i.right=void 0!==a.right?a.right:i.right,i.bottom=void 0!==a.bottom?a.bottom:i.bottom,i.left=void 0!==a.left?a.left:i.left}},duration:{get:function(){return s},set:function(a){s=a,t.reset(s),e.duration(s),f.duration(s),g.duration(s)}},color:{get:function(){return l},set:function(b){l=a.utils.getColor(b),e.color(l)}},rightAlignYAxis:{get:function(){return o},set:function(a){o=a,g.orient(a?"right":"left")}}}),a.utils.inheritOptions(b,e),a.utils.initOptions(b),b},a.models.distribution=function(){"use strict";function b(k){return m.reset(),k.each(function(b){var k=(e-("x"===g?d.left+d.right:d.top+d.bottom),"x"==g?"y":"x"),l=d3.select(this);a.utils.initSVG(l),c=c||j;var n=l.selectAll("g.nv-distribution").data([b]),o=n.enter().append("g").attr("class","nvd3 nv-distribution"),p=(o.append("g"),n.select("g"));n.attr("transform","translate("+d.left+","+d.top+")");var q=p.selectAll("g.nv-dist").data(function(a){return a},function(a){return a.key});q.enter().append("g"),q.attr("class",function(a,b){return"nv-dist nv-series-"+b}).style("stroke",function(a,b){return i(a,b)});var r=q.selectAll("line.nv-dist"+g).data(function(a){return a.values});r.enter().append("line").attr(g+"1",function(a,b){return c(h(a,b))}).attr(g+"2",function(a,b){return c(h(a,b))}),m.transition(q.exit().selectAll("line.nv-dist"+g),"dist exit").attr(g+"1",function(a,b){return j(h(a,b))}).attr(g+"2",function(a,b){return j(h(a,b))}).style("stroke-opacity",0).remove(),r.attr("class",function(a,b){return"nv-dist"+g+" nv-dist"+g+"-"+b}).attr(k+"1",0).attr(k+"2",f),m.transition(r,"dist").attr(g+"1",function(a,b){return j(h(a,b))}).attr(g+"2",function(a,b){return j(h(a,b))}),c=j.copy()}),m.renderEnd("distribution immediate"),b}var c,d={top:0,right:0,bottom:0,left:0},e=400,f=8,g="x",h=function(a){return a[g]},i=a.utils.defaultColor(),j=d3.scale.linear(),k=250,l=d3.dispatch("renderEnd"),m=a.utils.renderWatch(l,k);return b.options=a.utils.optionsFunc.bind(b),b.dispatch=l,b.margin=function(a){return arguments.length?(d.top="undefined"!=typeof a.top?a.top:d.top,d.right="undefined"!=typeof a.right?a.right:d.right,d.bottom="undefined"!=typeof a.bottom?a.bottom:d.bottom,d.left="undefined"!=typeof a.left?a.left:d.left,b):d},b.width=function(a){return arguments.length?(e=a,b):e},b.axis=function(a){return arguments.length?(g=a,b):g},b.size=function(a){return arguments.length?(f=a,b):f},b.getData=function(a){return arguments.length?(h=d3.functor(a),b):h},b.scale=function(a){return arguments.length?(j=a,b):j},b.color=function(c){return arguments.length?(i=a.utils.getColor(c),b):i},b.duration=function(a){return arguments.length?(k=a,m.reset(k),b):k},b},a.models.furiousLegend=function(){"use strict";function b(p){function q(a,b){return"furious"!=o?"#000":m?a.disengaged?g(a,b):"#fff":m?void 0:a.disabled?g(a,b):"#fff"}function r(a,b){return m&&"furious"==o?a.disengaged?"#fff":g(a,b):a.disabled?"#fff":g(a,b)}return p.each(function(b){var p=d-c.left-c.right,s=d3.select(this);a.utils.initSVG(s);var t=s.selectAll("g.nv-legend").data([b]),u=(t.enter().append("g").attr("class","nvd3 nv-legend").append("g"),t.select("g"));t.attr("transform","translate("+c.left+","+c.top+")");var v,w=u.selectAll(".nv-series").data(function(a){return"furious"!=o?a:a.filter(function(a){return m?!0:!a.disengaged})}),x=w.enter().append("g").attr("class","nv-series");if("classic"==o)x.append("circle").style("stroke-width",2).attr("class","nv-legend-symbol").attr("r",5),v=w.select("circle");else if("furious"==o){x.append("rect").style("stroke-width",2).attr("class","nv-legend-symbol").attr("rx",3).attr("ry",3),v=w.select("rect"),x.append("g").attr("class","nv-check-box").property("innerHTML",'<path d="M0.5,5 L22.5,5 L22.5,26.5 L0.5,26.5 L0.5,5 Z" class="nv-box"></path><path d="M5.5,12.8618467 L11.9185089,19.2803556 L31,0.198864511" class="nv-check"></path>').attr("transform","translate(-10,-8)scale(0.5)");var y=w.select(".nv-check-box");y.each(function(a,b){d3.select(this).selectAll("path").attr("stroke",q(a,b))})}x.append("text").attr("text-anchor","start").attr("class","nv-legend-text").attr("dy",".32em").attr("dx","8");var z=w.select("text.nv-legend-text");w.on("mouseover",function(a,b){n.legendMouseover(a,b)}).on("mouseout",function(a,b){n.legendMouseout(a,b)}).on("click",function(a,b){n.legendClick(a,b);var c=w.data();if(k){if("classic"==o)l?(c.forEach(function(a){a.disabled=!0}),a.disabled=!1):(a.disabled=!a.disabled,c.every(function(a){return a.disabled})&&c.forEach(function(a){a.disabled=!1}));else if("furious"==o)if(m)a.disengaged=!a.disengaged,a.userDisabled=void 0==a.userDisabled?!!a.disabled:a.userDisabled,a.disabled=a.disengaged||a.userDisabled;else if(!m){a.disabled=!a.disabled,a.userDisabled=a.disabled;var d=c.filter(function(a){return!a.disengaged});d.every(function(a){return a.userDisabled})&&c.forEach(function(a){a.disabled=a.userDisabled=!1})}n.stateChange({disabled:c.map(function(a){return!!a.disabled}),disengaged:c.map(function(a){return!!a.disengaged})})}}).on("dblclick",function(a,b){if(("furious"!=o||!m)&&(n.legendDblclick(a,b),k)){var c=w.data();c.forEach(function(a){a.disabled=!0,"furious"==o&&(a.userDisabled=a.disabled)}),a.disabled=!1,"furious"==o&&(a.userDisabled=a.disabled),n.stateChange({disabled:c.map(function(a){return!!a.disabled})})}}),w.classed("nv-disabled",function(a){return a.userDisabled}),w.exit().remove(),z.attr("fill",q).text(f);var A;switch(o){case"furious":A=23;break;case"classic":A=20}if(h){var B=[];w.each(function(){var b,c=d3.select(this).select("text");try{if(b=c.node().getComputedTextLength(),0>=b)throw Error()}catch(d){b=a.utils.calcApproxTextWidth(c)}B.push(b+i)});for(var C=0,D=0,E=[];p>D&&C<B.length;)E[C]=B[C],D+=B[C++];for(0===C&&(C=1);D>p&&C>1;){E=[],C--;for(var F=0;F<B.length;F++)B[F]>(E[F%C]||0)&&(E[F%C]=B[F]);D=E.reduce(function(a,b){return a+b})}for(var G=[],H=0,I=0;C>H;H++)G[H]=I,I+=E[H];w.attr("transform",function(a,b){return"translate("+G[b%C]+","+(5+Math.floor(b/C)*A)+")"}),j?u.attr("transform","translate("+(d-c.right-D)+","+c.top+")"):u.attr("transform","translate(0,"+c.top+")"),e=c.top+c.bottom+Math.ceil(B.length/C)*A}else{var J,K=5,L=5,M=0;w.attr("transform",function(){var a=d3.select(this).select("text").node().getComputedTextLength()+i;return J=L,d<c.left+c.right+J+a&&(L=J=5,K+=A),L+=a,L>M&&(M=L),"translate("+J+","+K+")"}),u.attr("transform","translate("+(d-c.right-M)+","+c.top+")"),e=c.top+c.bottom+K+15}"furious"==o&&v.attr("width",function(a,b){return z[0][b].getComputedTextLength()+27}).attr("height",18).attr("y",-9).attr("x",-15),v.style("fill",r).style("stroke",function(a,b){return a.color||g(a,b)})}),b}var c={top:5,right:0,bottom:5,left:0},d=400,e=20,f=function(a){return a.key},g=a.utils.getColor(),h=!0,i=28,j=!0,k=!0,l=!1,m=!1,n=d3.dispatch("legendClick","legendDblclick","legendMouseover","legendMouseout","stateChange"),o="classic";return b.dispatch=n,b.options=a.utils.optionsFunc.bind(b),b._options=Object.create({},{width:{get:function(){return d},set:function(a){d=a}},height:{get:function(){return e},set:function(a){e=a}},key:{get:function(){return f},set:function(a){f=a}},align:{get:function(){return h},set:function(a){h=a}},rightAlign:{get:function(){return j},set:function(a){j=a}},padding:{get:function(){return i},set:function(a){i=a}},updateState:{get:function(){return k},set:function(a){k=a}},radioButtonMode:{get:function(){return l},set:function(a){l=a}},expanded:{get:function(){return m},set:function(a){m=a}},vers:{get:function(){return o},set:function(a){o=a}},margin:{get:function(){return c},set:function(a){c.top=void 0!==a.top?a.top:c.top,c.right=void 0!==a.right?a.right:c.right,c.bottom=void 0!==a.bottom?a.bottom:c.bottom,c.left=void 0!==a.left?a.left:c.left}},color:{get:function(){return g},set:function(b){g=a.utils.getColor(b)}}}),a.utils.initOptions(b),b},a.models.historicalBar=function(){"use strict";function b(x){return x.each(function(b){w.reset(),k=d3.select(this);var x=a.utils.availableWidth(h,k,g),y=a.utils.availableHeight(i,k,g);a.utils.initSVG(k),l.domain(c||d3.extent(b[0].values.map(n).concat(p))),l.range(r?e||[.5*x/b[0].values.length,x*(b[0].values.length-.5)/b[0].values.length]:e||[0,x]),m.domain(d||d3.extent(b[0].values.map(o).concat(q))).range(f||[y,0]),l.domain()[0]===l.domain()[1]&&l.domain(l.domain()[0]?[l.domain()[0]-.01*l.domain()[0],l.domain()[1]+.01*l.domain()[1]]:[-1,1]),m.domain()[0]===m.domain()[1]&&m.domain(m.domain()[0]?[m.domain()[0]+.01*m.domain()[0],m.domain()[1]-.01*m.domain()[1]]:[-1,1]);var z=k.selectAll("g.nv-wrap.nv-historicalBar-"+j).data([b[0].values]),A=z.enter().append("g").attr("class","nvd3 nv-wrap nv-historicalBar-"+j),B=A.append("defs"),C=A.append("g"),D=z.select("g");C.append("g").attr("class","nv-bars"),z.attr("transform","translate("+g.left+","+g.top+")"),k.on("click",function(a,b){u.chartClick({data:a,index:b,pos:d3.event,id:j})}),B.append("clipPath").attr("id","nv-chart-clip-path-"+j).append("rect"),z.select("#nv-chart-clip-path-"+j+" rect").attr("width",x).attr("height",y),D.attr("clip-path",s?"url(#nv-chart-clip-path-"+j+")":"");var E=z.select(".nv-bars").selectAll(".nv-bar").data(function(a){return a},function(a,b){return n(a,b)});E.exit().remove(),E.enter().append("rect").attr("x",0).attr("y",function(b,c){return a.utils.NaNtoZero(m(Math.max(0,o(b,c))))}).attr("height",function(b,c){return a.utils.NaNtoZero(Math.abs(m(o(b,c))-m(0)))}).attr("transform",function(a,c){return"translate("+(l(n(a,c))-x/b[0].values.length*.45)+",0)"}).on("mouseover",function(a,b){v&&(d3.select(this).classed("hover",!0),u.elementMouseover({data:a,index:b,color:d3.select(this).style("fill")}))}).on("mouseout",function(a,b){v&&(d3.select(this).classed("hover",!1),u.elementMouseout({data:a,index:b,color:d3.select(this).style("fill")}))}).on("mousemove",function(a,b){v&&u.elementMousemove({data:a,index:b,color:d3.select(this).style("fill")})}).on("click",function(a,b){v&&(u.elementClick({data:a,index:b,color:d3.select(this).style("fill")}),d3.event.stopPropagation())}).on("dblclick",function(a,b){v&&(u.elementDblClick({data:a,index:b,color:d3.select(this).style("fill")}),d3.event.stopPropagation())}),E.attr("fill",function(a,b){return t(a,b)}).attr("class",function(a,b,c){return(o(a,b)<0?"nv-bar negative":"nv-bar positive")+" nv-bar-"+c+"-"+b}).watchTransition(w,"bars").attr("transform",function(a,c){return"translate("+(l(n(a,c))-x/b[0].values.length*.45)+",0)"}).attr("width",x/b[0].values.length*.9),E.watchTransition(w,"bars").attr("y",function(b,c){var d=o(b,c)<0?m(0):m(0)-m(o(b,c))<1?m(0)-1:m(o(b,c));return a.utils.NaNtoZero(d)}).attr("height",function(b,c){return a.utils.NaNtoZero(Math.max(Math.abs(m(o(b,c))-m(0)),1))})}),w.renderEnd("historicalBar immediate"),b}var c,d,e,f,g={top:0,right:0,bottom:0,left:0},h=null,i=null,j=Math.floor(1e4*Math.random()),k=null,l=d3.scale.linear(),m=d3.scale.linear(),n=function(a){return a.x},o=function(a){return a.y},p=[],q=[0],r=!1,s=!0,t=a.utils.defaultColor(),u=d3.dispatch("chartClick","elementClick","elementDblClick","elementMouseover","elementMouseout","elementMousemove","renderEnd"),v=!0,w=a.utils.renderWatch(u,0);return b.highlightPoint=function(a,b){k.select(".nv-bars .nv-bar-0-"+a).classed("hover",b)},b.clearHighlights=function(){k.select(".nv-bars .nv-bar.hover").classed("hover",!1)},b.dispatch=u,b.options=a.utils.optionsFunc.bind(b),b._options=Object.create({},{width:{get:function(){return h},set:function(a){h=a}},height:{get:function(){return i},set:function(a){i=a}},forceX:{get:function(){return p},set:function(a){p=a}},forceY:{get:function(){return q},set:function(a){q=a}},padData:{get:function(){return r},set:function(a){r=a}},x:{get:function(){return n},set:function(a){n=a}},y:{get:function(){return o},set:function(a){o=a}},xScale:{get:function(){return l},set:function(a){l=a}},yScale:{get:function(){return m},set:function(a){m=a}},xDomain:{get:function(){return c},set:function(a){c=a}},yDomain:{get:function(){return d},set:function(a){d=a}},xRange:{get:function(){return e},set:function(a){e=a}},yRange:{get:function(){return f},set:function(a){f=a}},clipEdge:{get:function(){return s},set:function(a){s=a}},id:{get:function(){return j},set:function(a){j=a}},interactive:{get:function(){return v},set:function(a){v=a}},margin:{get:function(){return g},set:function(a){g.top=void 0!==a.top?a.top:g.top,g.right=void 0!==a.right?a.right:g.right,g.bottom=void 0!==a.bottom?a.bottom:g.bottom,g.left=void 0!==a.left?a.left:g.left}},color:{get:function(){return t},set:function(b){t=a.utils.getColor(b)}}}),a.utils.initOptions(b),b},a.models.historicalBarChart=function(b){"use strict";function c(b){return b.each(function(k){z.reset(),z.models(f),q&&z.models(g),r&&z.models(h);var w=d3.select(this),A=this;a.utils.initSVG(w);var B=a.utils.availableWidth(n,w,l),C=a.utils.availableHeight(o,w,l);if(c.update=function(){w.transition().duration(y).call(c)},c.container=this,u.disabled=k.map(function(a){return!!a.disabled}),!v){var D;v={};for(D in u)v[D]=u[D]instanceof Array?u[D].slice(0):u[D]}if(!(k&&k.length&&k.filter(function(a){return a.values.length}).length))return a.utils.noData(c,w),c;w.selectAll(".nv-noData").remove(),d=f.xScale(),e=f.yScale();var E=w.selectAll("g.nv-wrap.nv-historicalBarChart").data([k]),F=E.enter().append("g").attr("class","nvd3 nv-wrap nv-historicalBarChart").append("g"),G=E.select("g");F.append("g").attr("class","nv-x nv-axis"),F.append("g").attr("class","nv-y nv-axis"),F.append("g").attr("class","nv-barsWrap"),F.append("g").attr("class","nv-legendWrap"),F.append("g").attr("class","nv-interactive"),p&&(i.width(B),G.select(".nv-legendWrap").datum(k).call(i),l.top!=i.height()&&(l.top=i.height(),C=a.utils.availableHeight(o,w,l)),E.select(".nv-legendWrap").attr("transform","translate(0,"+-l.top+")")),E.attr("transform","translate("+l.left+","+l.top+")"),s&&G.select(".nv-y.nv-axis").attr("transform","translate("+B+",0)"),t&&(j.width(B).height(C).margin({left:l.left,top:l.top}).svgContainer(w).xScale(d),E.select(".nv-interactive").call(j)),f.width(B).height(C).color(k.map(function(a,b){return a.color||m(a,b)}).filter(function(a,b){return!k[b].disabled}));var H=G.select(".nv-barsWrap").datum(k.filter(function(a){return!a.disabled}));H.transition().call(f),q&&(g.scale(d)._ticks(a.utils.calcTicksX(B/100,k)).tickSize(-C,0),G.select(".nv-x.nv-axis").attr("transform","translate(0,"+e.range()[0]+")"),G.select(".nv-x.nv-axis").transition().call(g)),r&&(h.scale(e)._ticks(a.utils.calcTicksY(C/36,k)).tickSize(-B,0),G.select(".nv-y.nv-axis").transition().call(h)),j.dispatch.on("elementMousemove",function(b){f.clearHighlights();var d,e,i,n=[];k.filter(function(a,b){return a.seriesIndex=b,!a.disabled}).forEach(function(g){e=a.interactiveBisect(g.values,b.pointXValue,c.x()),f.highlightPoint(e,!0);var h=g.values[e];void 0!==h&&(void 0===d&&(d=h),void 0===i&&(i=c.xScale()(c.x()(h,e))),n.push({key:g.key,value:c.y()(h,e),color:m(g,g.seriesIndex),data:g.values[e]}))});var o=g.tickFormat()(c.x()(d,e));j.tooltip.position({left:i+l.left,top:b.mouseY+l.top}).chartContainer(A.parentNode).valueFormatter(function(a){return h.tickFormat()(a)}).data({value:o,index:e,series:n})(),j.renderGuideLine(i)}),j.dispatch.on("elementMouseout",function(){x.tooltipHide(),f.clearHighlights()}),i.dispatch.on("legendClick",function(a){a.disabled=!a.disabled,k.filter(function(a){return!a.disabled}).length||k.map(function(a){return a.disabled=!1,E.selectAll(".nv-series").classed("disabled",!1),a}),u.disabled=k.map(function(a){return!!a.disabled}),x.stateChange(u),b.transition().call(c)}),i.dispatch.on("legendDblclick",function(a){k.forEach(function(a){a.disabled=!0}),a.disabled=!1,u.disabled=k.map(function(a){return!!a.disabled}),x.stateChange(u),c.update()}),x.on("changeState",function(a){"undefined"!=typeof a.disabled&&(k.forEach(function(b,c){b.disabled=a.disabled[c]}),u.disabled=a.disabled),c.update()})}),z.renderEnd("historicalBarChart immediate"),c}var d,e,f=b||a.models.historicalBar(),g=a.models.axis(),h=a.models.axis(),i=a.models.legend(),j=a.interactiveGuideline(),k=a.models.tooltip(),l={top:30,right:90,bottom:50,left:90},m=a.utils.defaultColor(),n=null,o=null,p=!1,q=!0,r=!0,s=!1,t=!1,u={},v=null,w=null,x=d3.dispatch("tooltipHide","stateChange","changeState","renderEnd"),y=250;g.orient("bottom").tickPadding(7),h.orient(s?"right":"left"),k.duration(0).headerEnabled(!1).valueFormatter(function(a,b){return h.tickFormat()(a,b)}).headerFormatter(function(a,b){return g.tickFormat()(a,b)});var z=a.utils.renderWatch(x,0);return f.dispatch.on("elementMouseover.tooltip",function(a){a.series={key:c.x()(a.data),value:c.y()(a.data),color:a.color},k.data(a).hidden(!1)}),f.dispatch.on("elementMouseout.tooltip",function(){k.hidden(!0)}),f.dispatch.on("elementMousemove.tooltip",function(){k.position({top:d3.event.pageY,left:d3.event.pageX})()}),c.dispatch=x,c.bars=f,c.legend=i,c.xAxis=g,c.yAxis=h,c.interactiveLayer=j,c.tooltip=k,c.options=a.utils.optionsFunc.bind(c),c._options=Object.create({},{width:{get:function(){return n},set:function(a){n=a}},height:{get:function(){return o},set:function(a){o=a}},showLegend:{get:function(){return p},set:function(a){p=a}},showXAxis:{get:function(){return q},set:function(a){q=a}},showYAxis:{get:function(){return r},set:function(a){r=a}},defaultState:{get:function(){return v},set:function(a){v=a}},noData:{get:function(){return w},set:function(a){w=a}},tooltips:{get:function(){return k.enabled()},set:function(b){a.deprecated("tooltips","use chart.tooltip.enabled() instead"),k.enabled(!!b)}},tooltipContent:{get:function(){return k.contentGenerator()},set:function(b){a.deprecated("tooltipContent","use chart.tooltip.contentGenerator() instead"),k.contentGenerator(b)}},margin:{get:function(){return l},set:function(a){l.top=void 0!==a.top?a.top:l.top,l.right=void 0!==a.right?a.right:l.right,l.bottom=void 0!==a.bottom?a.bottom:l.bottom,l.left=void 0!==a.left?a.left:l.left}},color:{get:function(){return m},set:function(b){m=a.utils.getColor(b),i.color(m),f.color(m)}},duration:{get:function(){return y},set:function(a){y=a,z.reset(y),h.duration(y),g.duration(y)}},rightAlignYAxis:{get:function(){return s},set:function(a){s=a,h.orient(a?"right":"left")}},useInteractiveGuideline:{get:function(){return t},set:function(a){t=a,a===!0&&c.interactive(!1)}}}),a.utils.inheritOptions(c,f),a.utils.initOptions(c),c},a.models.ohlcBarChart=function(){var b=a.models.historicalBarChart(a.models.ohlcBar());return b.useInteractiveGuideline(!0),b.interactiveLayer.tooltip.contentGenerator(function(a){var c=a.series[0].data,d=c.open<c.close?"2ca02c":"d62728";return'<h3 style="color: #'+d+'">'+a.value+"</h3><table><tr><td>open:</td><td>"+b.yAxis.tickFormat()(c.open)+"</td></tr><tr><td>close:</td><td>"+b.yAxis.tickFormat()(c.close)+"</td></tr><tr><td>high</td><td>"+b.yAxis.tickFormat()(c.high)+"</td></tr><tr><td>low:</td><td>"+b.yAxis.tickFormat()(c.low)+"</td></tr></table>"}),b},a.models.candlestickBarChart=function(){var b=a.models.historicalBarChart(a.models.candlestickBar());return b.useInteractiveGuideline(!0),b.interactiveLayer.tooltip.contentGenerator(function(a){var c=a.series[0].data,d=c.open<c.close?"2ca02c":"d62728";return'<h3 style="color: #'+d+'">'+a.value+"</h3><table><tr><td>open:</td><td>"+b.yAxis.tickFormat()(c.open)+"</td></tr><tr><td>close:</td><td>"+b.yAxis.tickFormat()(c.close)+"</td></tr><tr><td>high</td><td>"+b.yAxis.tickFormat()(c.high)+"</td></tr><tr><td>low:</td><td>"+b.yAxis.tickFormat()(c.low)+"</td></tr></table>"}),b},a.models.legend=function(){"use strict";function b(p){function q(a,b){return"furious"!=o?"#000":m?a.disengaged?"#000":"#fff":m?void 0:(a.color||(a.color=g(a,b)),a.disabled?a.color:"#fff")}function r(a,b){return m&&"furious"==o&&a.disengaged?"#eee":a.color||g(a,b)}function s(a){return m&&"furious"==o?1:a.disabled?0:1}return p.each(function(b){var g=d-c.left-c.right,p=d3.select(this);a.utils.initSVG(p);var t=p.selectAll("g.nv-legend").data([b]),u=t.enter().append("g").attr("class","nvd3 nv-legend").append("g"),v=t.select("g");t.attr("transform","translate("+c.left+","+c.top+")");var w,x,y=v.selectAll(".nv-series").data(function(a){return"furious"!=o?a:a.filter(function(a){return m?!0:!a.disengaged})}),z=y.enter().append("g").attr("class","nv-series");switch(o){case"furious":x=23;break;case"classic":x=20}if("classic"==o)z.append("circle").style("stroke-width",2).attr("class","nv-legend-symbol").attr("r",5),w=y.select("circle");else if("furious"==o){z.append("rect").style("stroke-width",2).attr("class","nv-legend-symbol").attr("rx",3).attr("ry",3),w=y.select(".nv-legend-symbol"),z.append("g").attr("class","nv-check-box").property("innerHTML",'<path d="M0.5,5 L22.5,5 L22.5,26.5 L0.5,26.5 L0.5,5 Z" class="nv-box"></path><path d="M5.5,12.8618467 L11.9185089,19.2803556 L31,0.198864511" class="nv-check"></path>').attr("transform","translate(-10,-8)scale(0.5)");var A=y.select(".nv-check-box");A.each(function(a,b){d3.select(this).selectAll("path").attr("stroke",q(a,b))})}z.append("text").attr("text-anchor","start").attr("class","nv-legend-text").attr("dy",".32em").attr("dx","8");var B=y.select("text.nv-legend-text");y.on("mouseover",function(a,b){n.legendMouseover(a,b)}).on("mouseout",function(a,b){n.legendMouseout(a,b)}).on("click",function(a,b){n.legendClick(a,b);var c=y.data();if(k){if("classic"==o)l?(c.forEach(function(a){a.disabled=!0}),a.disabled=!1):(a.disabled=!a.disabled,c.every(function(a){return a.disabled})&&c.forEach(function(a){a.disabled=!1}));else if("furious"==o)if(m)a.disengaged=!a.disengaged,a.userDisabled=void 0==a.userDisabled?!!a.disabled:a.userDisabled,a.disabled=a.disengaged||a.userDisabled;else if(!m){a.disabled=!a.disabled,a.userDisabled=a.disabled;var d=c.filter(function(a){return!a.disengaged});d.every(function(a){return a.userDisabled})&&c.forEach(function(a){a.disabled=a.userDisabled=!1})}n.stateChange({disabled:c.map(function(a){return!!a.disabled}),disengaged:c.map(function(a){return!!a.disengaged})})}}).on("dblclick",function(a,b){if(("furious"!=o||!m)&&(n.legendDblclick(a,b),k)){var c=y.data();c.forEach(function(a){a.disabled=!0,"furious"==o&&(a.userDisabled=a.disabled)}),a.disabled=!1,"furious"==o&&(a.userDisabled=a.disabled),n.stateChange({disabled:c.map(function(a){return!!a.disabled})})}}),y.classed("nv-disabled",function(a){return a.userDisabled}),y.exit().remove(),B.attr("fill",q).text(f);var C=0;if(h){var D=[];y.each(function(){var b,c=d3.select(this).select("text");try{if(b=c.node().getComputedTextLength(),0>=b)throw Error()}catch(d){b=a.utils.calcApproxTextWidth(c)}D.push(b+i)});var E=0,F=[];for(C=0;g>C&&E<D.length;)F[E]=D[E],C+=D[E++];for(0===E&&(E=1);C>g&&E>1;){F=[],E--;for(var G=0;G<D.length;G++)D[G]>(F[G%E]||0)&&(F[G%E]=D[G]);C=F.reduce(function(a,b){return a+b})}for(var H=[],I=0,J=0;E>I;I++)H[I]=J,J+=F[I];y.attr("transform",function(a,b){return"translate("+H[b%E]+","+(5+Math.floor(b/E)*x)+")"}),j?v.attr("transform","translate("+(d-c.right-C)+","+c.top+")"):v.attr("transform","translate(0,"+c.top+")"),e=c.top+c.bottom+Math.ceil(D.length/E)*x}else{var K,L=5,M=5,N=0;y.attr("transform",function(){var a=d3.select(this).select("text").node().getComputedTextLength()+i;return K=M,d<c.left+c.right+K+a&&(M=K=5,L+=x),M+=a,M>N&&(N=M),K+N>C&&(C=K+N),"translate("+K+","+L+")"}),v.attr("transform","translate("+(d-c.right-N)+","+c.top+")"),e=c.top+c.bottom+L+15}if("furious"==o){w.attr("width",function(a,b){return B[0][b].getComputedTextLength()+27}).attr("height",18).attr("y",-9).attr("x",-15),u.insert("rect",":first-child").attr("class","nv-legend-bg").attr("fill","#eee").attr("opacity",0);var O=v.select(".nv-legend-bg");O.transition().duration(300).attr("x",-x).attr("width",C+x-12).attr("height",e+10).attr("y",-c.top-10).attr("opacity",m?1:0)}w.style("fill",r).style("fill-opacity",s).style("stroke",r)}),b}var c={top:5,right:0,bottom:5,left:0},d=400,e=20,f=function(a){return a.key},g=a.utils.getColor(),h=!0,i=32,j=!0,k=!0,l=!1,m=!1,n=d3.dispatch("legendClick","legendDblclick","legendMouseover","legendMouseout","stateChange"),o="classic";return b.dispatch=n,b.options=a.utils.optionsFunc.bind(b),b._options=Object.create({},{width:{get:function(){return d},set:function(a){d=a}},height:{get:function(){return e},set:function(a){e=a}},key:{get:function(){return f},set:function(a){f=a}},align:{get:function(){return h},set:function(a){h=a}},rightAlign:{get:function(){return j},set:function(a){j=a}},padding:{get:function(){return i},set:function(a){i=a}},updateState:{get:function(){return k},set:function(a){k=a}},radioButtonMode:{get:function(){return l},set:function(a){l=a}},expanded:{get:function(){return m},set:function(a){m=a}},vers:{get:function(){return o},set:function(a){o=a}},margin:{get:function(){return c},set:function(a){c.top=void 0!==a.top?a.top:c.top,c.right=void 0!==a.right?a.right:c.right,c.bottom=void 0!==a.bottom?a.bottom:c.bottom,c.left=void 0!==a.left?a.left:c.left}},color:{get:function(){return g},set:function(b){g=a.utils.getColor(b)}}}),a.utils.initOptions(b),b},a.models.line=function(){"use strict";function b(r){return v.reset(),v.models(e),r.each(function(b){i=d3.select(this);var r=a.utils.availableWidth(g,i,f),s=a.utils.availableHeight(h,i,f);a.utils.initSVG(i),c=e.xScale(),d=e.yScale(),t=t||c,u=u||d;var w=i.selectAll("g.nv-wrap.nv-line").data([b]),x=w.enter().append("g").attr("class","nvd3 nv-wrap nv-line"),y=x.append("defs"),z=x.append("g"),A=w.select("g");z.append("g").attr("class","nv-groups"),z.append("g").attr("class","nv-scatterWrap"),w.attr("transform","translate("+f.left+","+f.top+")"),e.width(r).height(s);var B=w.select(".nv-scatterWrap");B.call(e),y.append("clipPath").attr("id","nv-edge-clip-"+e.id()).append("rect"),w.select("#nv-edge-clip-"+e.id()+" rect").attr("width",r).attr("height",s>0?s:0),A.attr("clip-path",p?"url(#nv-edge-clip-"+e.id()+")":""),B.attr("clip-path",p?"url(#nv-edge-clip-"+e.id()+")":"");var C=w.select(".nv-groups").selectAll(".nv-group").data(function(a){return a},function(a){return a.key});C.enter().append("g").style("stroke-opacity",1e-6).style("stroke-width",function(a){return a.strokeWidth||j}).style("fill-opacity",1e-6),C.exit().remove(),C.attr("class",function(a,b){return(a.classed||"")+" nv-group nv-series-"+b}).classed("hover",function(a){return a.hover}).style("fill",function(a,b){return k(a,b)}).style("stroke",function(a,b){return k(a,b)}),C.watchTransition(v,"line: groups").style("stroke-opacity",1).style("fill-opacity",function(a){return a.fillOpacity||.5});var D=C.selectAll("path.nv-area").data(function(a){return o(a)?[a]:[]});D.enter().append("path").attr("class","nv-area").attr("d",function(b){return d3.svg.area().interpolate(q).defined(n).x(function(b,c){return a.utils.NaNtoZero(t(l(b,c)))}).y0(function(b,c){return a.utils.NaNtoZero(u(m(b,c)))}).y1(function(){return u(d.domain()[0]<=0?d.domain()[1]>=0?0:d.domain()[1]:d.domain()[0])}).apply(this,[b.values])}),C.exit().selectAll("path.nv-area").remove(),D.watchTransition(v,"line: areaPaths").attr("d",function(b){return d3.svg.area().interpolate(q).defined(n).x(function(b,d){return a.utils.NaNtoZero(c(l(b,d)))}).y0(function(b,c){return a.utils.NaNtoZero(d(m(b,c)))}).y1(function(){return d(d.domain()[0]<=0?d.domain()[1]>=0?0:d.domain()[1]:d.domain()[0])}).apply(this,[b.values])});var E=C.selectAll("path.nv-line").data(function(a){return[a.values]});E.enter().append("path").attr("class","nv-line").attr("d",d3.svg.line().interpolate(q).defined(n).x(function(b,c){return a.utils.NaNtoZero(t(l(b,c)))}).y(function(b,c){return a.utils.NaNtoZero(u(m(b,c)))})),E.watchTransition(v,"line: linePaths").attr("d",d3.svg.line().interpolate(q).defined(n).x(function(b,d){return a.utils.NaNtoZero(c(l(b,d)))}).y(function(b,c){return a.utils.NaNtoZero(d(m(b,c)))})),t=c.copy(),u=d.copy()}),v.renderEnd("line immediate"),b}var c,d,e=a.models.scatter(),f={top:0,right:0,bottom:0,left:0},g=960,h=500,i=null,j=1.5,k=a.utils.defaultColor(),l=function(a){return a.x},m=function(a){return a.y},n=function(a,b){return!isNaN(m(a,b))&&null!==m(a,b)},o=function(a){return a.area},p=!1,q="linear",r=250,s=d3.dispatch("elementClick","elementMouseover","elementMouseout","renderEnd");e.pointSize(16).pointDomain([16,256]);var t,u,v=a.utils.renderWatch(s,r);return b.dispatch=s,b.scatter=e,e.dispatch.on("elementClick",function(){s.elementClick.apply(this,arguments)}),e.dispatch.on("elementMouseover",function(){s.elementMouseover.apply(this,arguments)}),e.dispatch.on("elementMouseout",function(){s.elementMouseout.apply(this,arguments)}),b.options=a.utils.optionsFunc.bind(b),b._options=Object.create({},{width:{get:function(){return g},set:function(a){g=a}},height:{get:function(){return h},set:function(a){h=a}},defined:{get:function(){return n},set:function(a){n=a}},interpolate:{get:function(){return q},set:function(a){q=a}},clipEdge:{get:function(){return p},set:function(a){p=a}},margin:{get:function(){return f},set:function(a){f.top=void 0!==a.top?a.top:f.top,f.right=void 0!==a.right?a.right:f.right,f.bottom=void 0!==a.bottom?a.bottom:f.bottom,f.left=void 0!==a.left?a.left:f.left}},duration:{get:function(){return r},set:function(a){r=a,v.reset(r),e.duration(r)}},isArea:{get:function(){return o},set:function(a){o=d3.functor(a)}},x:{get:function(){return l},set:function(a){l=a,e.x(a)}},y:{get:function(){return m},set:function(a){m=a,e.y(a)}},color:{get:function(){return k},set:function(b){k=a.utils.getColor(b),e.color(k)}}}),a.utils.inheritOptions(b,e),a.utils.initOptions(b),b},a.models.lineChart=function(){"use strict";function b(j){return y.reset(),y.models(e),p&&y.models(f),q&&y.models(g),j.each(function(j){var v=d3.select(this),y=this;a.utils.initSVG(v);var B=a.utils.availableWidth(m,v,k),C=a.utils.availableHeight(n,v,k);if(b.update=function(){0===x?v.call(b):v.transition().duration(x).call(b)},b.container=this,t.setter(A(j),b.update).getter(z(j)).update(),t.disabled=j.map(function(a){return!!a.disabled}),!u){var D;u={};for(D in t)u[D]=t[D]instanceof Array?t[D].slice(0):t[D]
    5: }if(!(j&&j.length&&j.filter(function(a){return a.values.length}).length))return a.utils.noData(b,v),b;v.selectAll(".nv-noData").remove(),c=e.xScale(),d=e.yScale();var E=v.selectAll("g.nv-wrap.nv-lineChart").data([j]),F=E.enter().append("g").attr("class","nvd3 nv-wrap nv-lineChart").append("g"),G=E.select("g");F.append("rect").style("opacity",0),F.append("g").attr("class","nv-x nv-axis"),F.append("g").attr("class","nv-y nv-axis"),F.append("g").attr("class","nv-linesWrap"),F.append("g").attr("class","nv-legendWrap"),F.append("g").attr("class","nv-interactive"),G.select("rect").attr("width",B).attr("height",C>0?C:0),o&&(h.width(B),G.select(".nv-legendWrap").datum(j).call(h),k.top!=h.height()&&(k.top=h.height(),C=a.utils.availableHeight(n,v,k)),E.select(".nv-legendWrap").attr("transform","translate(0,"+-k.top+")")),E.attr("transform","translate("+k.left+","+k.top+")"),r&&G.select(".nv-y.nv-axis").attr("transform","translate("+B+",0)"),s&&(i.width(B).height(C).margin({left:k.left,top:k.top}).svgContainer(v).xScale(c),E.select(".nv-interactive").call(i)),e.width(B).height(C).color(j.map(function(a,b){return a.color||l(a,b)}).filter(function(a,b){return!j[b].disabled}));var H=G.select(".nv-linesWrap").datum(j.filter(function(a){return!a.disabled}));H.call(e),p&&(f.scale(c)._ticks(a.utils.calcTicksX(B/100,j)).tickSize(-C,0),G.select(".nv-x.nv-axis").attr("transform","translate(0,"+d.range()[0]+")"),G.select(".nv-x.nv-axis").call(f)),q&&(g.scale(d)._ticks(a.utils.calcTicksY(C/36,j)).tickSize(-B,0),G.select(".nv-y.nv-axis").call(g)),h.dispatch.on("stateChange",function(a){for(var c in a)t[c]=a[c];w.stateChange(t),b.update()}),i.dispatch.on("elementMousemove",function(c){e.clearHighlights();var d,h,m,n=[];if(j.filter(function(a,b){return a.seriesIndex=b,!a.disabled}).forEach(function(f,g){h=a.interactiveBisect(f.values,c.pointXValue,b.x());var i=f.values[h],j=b.y()(i,h);null!=j&&e.highlightPoint(g,h,!0),void 0!==i&&(void 0===d&&(d=i),void 0===m&&(m=b.xScale()(b.x()(i,h))),n.push({key:f.key,value:j,color:l(f,f.seriesIndex)}))}),n.length>2){var o=b.yScale().invert(c.mouseY),p=Math.abs(b.yScale().domain()[0]-b.yScale().domain()[1]),q=.03*p,r=a.nearestValueIndex(n.map(function(a){return a.value}),o,q);null!==r&&(n[r].highlight=!0)}var s=f.tickFormat()(b.x()(d,h));i.tooltip.position({left:c.mouseX+k.left,top:c.mouseY+k.top}).chartContainer(y.parentNode).valueFormatter(function(a){return null==a?"N/A":g.tickFormat()(a)}).data({value:s,index:h,series:n})(),i.renderGuideLine(m)}),i.dispatch.on("elementClick",function(c){var d,f=[];j.filter(function(a,b){return a.seriesIndex=b,!a.disabled}).forEach(function(e){var g=a.interactiveBisect(e.values,c.pointXValue,b.x()),h=e.values[g];if("undefined"!=typeof h){"undefined"==typeof d&&(d=b.xScale()(b.x()(h,g)));var i=b.yScale()(b.y()(h,g));f.push({point:h,pointIndex:g,pos:[d,i],seriesIndex:e.seriesIndex,series:e})}}),e.dispatch.elementClick(f)}),i.dispatch.on("elementMouseout",function(){e.clearHighlights()}),w.on("changeState",function(a){"undefined"!=typeof a.disabled&&j.length===a.disabled.length&&(j.forEach(function(b,c){b.disabled=a.disabled[c]}),t.disabled=a.disabled),b.update()})}),y.renderEnd("lineChart immediate"),b}var c,d,e=a.models.line(),f=a.models.axis(),g=a.models.axis(),h=a.models.legend(),i=a.interactiveGuideline(),j=a.models.tooltip(),k={top:30,right:20,bottom:50,left:60},l=a.utils.defaultColor(),m=null,n=null,o=!0,p=!0,q=!0,r=!1,s=!1,t=a.utils.state(),u=null,v=null,w=d3.dispatch("tooltipShow","tooltipHide","stateChange","changeState","renderEnd"),x=250;f.orient("bottom").tickPadding(7),g.orient(r?"right":"left"),j.valueFormatter(function(a,b){return g.tickFormat()(a,b)}).headerFormatter(function(a,b){return f.tickFormat()(a,b)});var y=a.utils.renderWatch(w,x),z=function(a){return function(){return{active:a.map(function(a){return!a.disabled})}}},A=function(a){return function(b){void 0!==b.active&&a.forEach(function(a,c){a.disabled=!b.active[c]})}};return e.dispatch.on("elementMouseover.tooltip",function(a){j.data(a).position(a.pos).hidden(!1)}),e.dispatch.on("elementMouseout.tooltip",function(){j.hidden(!0)}),b.dispatch=w,b.lines=e,b.legend=h,b.xAxis=f,b.yAxis=g,b.interactiveLayer=i,b.tooltip=j,b.dispatch=w,b.options=a.utils.optionsFunc.bind(b),b._options=Object.create({},{width:{get:function(){return m},set:function(a){m=a}},height:{get:function(){return n},set:function(a){n=a}},showLegend:{get:function(){return o},set:function(a){o=a}},showXAxis:{get:function(){return p},set:function(a){p=a}},showYAxis:{get:function(){return q},set:function(a){q=a}},defaultState:{get:function(){return u},set:function(a){u=a}},noData:{get:function(){return v},set:function(a){v=a}},tooltips:{get:function(){return j.enabled()},set:function(b){a.deprecated("tooltips","use chart.tooltip.enabled() instead"),j.enabled(!!b)}},tooltipContent:{get:function(){return j.contentGenerator()},set:function(b){a.deprecated("tooltipContent","use chart.tooltip.contentGenerator() instead"),j.contentGenerator(b)}},margin:{get:function(){return k},set:function(a){k.top=void 0!==a.top?a.top:k.top,k.right=void 0!==a.right?a.right:k.right,k.bottom=void 0!==a.bottom?a.bottom:k.bottom,k.left=void 0!==a.left?a.left:k.left}},duration:{get:function(){return x},set:function(a){x=a,y.reset(x),e.duration(x),f.duration(x),g.duration(x)}},color:{get:function(){return l},set:function(b){l=a.utils.getColor(b),h.color(l),e.color(l)}},rightAlignYAxis:{get:function(){return r},set:function(a){r=a,g.orient(r?"right":"left")}},useInteractiveGuideline:{get:function(){return s},set:function(a){s=a,s&&(e.interactive(!1),e.useVoronoi(!1))}}}),a.utils.inheritOptions(b,e),a.utils.initOptions(b),b},a.models.linePlusBarChart=function(){"use strict";function b(v){return v.each(function(v){function J(a){var b=+("e"==a),c=b?1:-1,d=X/3;return"M"+.5*c+","+d+"A6,6 0 0 "+b+" "+6.5*c+","+(d+6)+"V"+(2*d-6)+"A6,6 0 0 "+b+" "+.5*c+","+2*d+"ZM"+2.5*c+","+(d+8)+"V"+(2*d-8)+"M"+4.5*c+","+(d+8)+"V"+(2*d-8)}function S(){u.empty()||u.extent(I),kb.data([u.empty()?e.domain():I]).each(function(a){var b=e(a[0])-e.range()[0],c=e.range()[1]-e(a[1]);d3.select(this).select(".left").attr("width",0>b?0:b),d3.select(this).select(".right").attr("x",e(a[1])).attr("width",0>c?0:c)})}function T(){I=u.empty()?null:u.extent(),c=u.empty()?e.domain():u.extent(),K.brush({extent:c,brush:u}),S(),l.width(V).height(W).color(v.map(function(a,b){return a.color||C(a,b)}).filter(function(a,b){return!v[b].disabled&&v[b].bar})),j.width(V).height(W).color(v.map(function(a,b){return a.color||C(a,b)}).filter(function(a,b){return!v[b].disabled&&!v[b].bar}));var b=db.select(".nv-focus .nv-barsWrap").datum(Z.length?Z.map(function(a){return{key:a.key,values:a.values.filter(function(a,b){return l.x()(a,b)>=c[0]&&l.x()(a,b)<=c[1]})}}):[{values:[]}]),h=db.select(".nv-focus .nv-linesWrap").datum($[0].disabled?[{values:[]}]:$.map(function(a){return{area:a.area,fillOpacity:a.fillOpacity,key:a.key,values:a.values.filter(function(a,b){return j.x()(a,b)>=c[0]&&j.x()(a,b)<=c[1]})}}));d=Z.length?l.xScale():j.xScale(),n.scale(d)._ticks(a.utils.calcTicksX(V/100,v)).tickSize(-W,0),n.domain([Math.ceil(c[0]),Math.floor(c[1])]),db.select(".nv-x.nv-axis").transition().duration(L).call(n),b.transition().duration(L).call(l),h.transition().duration(L).call(j),db.select(".nv-focus .nv-x.nv-axis").attr("transform","translate(0,"+f.range()[0]+")"),p.scale(f)._ticks(a.utils.calcTicksY(W/36,v)).tickSize(-V,0),q.scale(g)._ticks(a.utils.calcTicksY(W/36,v)).tickSize(Z.length?0:-V,0),db.select(".nv-focus .nv-y1.nv-axis").style("opacity",Z.length?1:0),db.select(".nv-focus .nv-y2.nv-axis").style("opacity",$.length&&!$[0].disabled?1:0).attr("transform","translate("+d.range()[1]+",0)"),db.select(".nv-focus .nv-y1.nv-axis").transition().duration(L).call(p),db.select(".nv-focus .nv-y2.nv-axis").transition().duration(L).call(q)}var U=d3.select(this);a.utils.initSVG(U);var V=a.utils.availableWidth(y,U,w),W=a.utils.availableHeight(z,U,w)-(E?H:0),X=H-x.top-x.bottom;if(b.update=function(){U.transition().duration(L).call(b)},b.container=this,M.setter(R(v),b.update).getter(Q(v)).update(),M.disabled=v.map(function(a){return!!a.disabled}),!N){var Y;N={};for(Y in M)N[Y]=M[Y]instanceof Array?M[Y].slice(0):M[Y]}if(!(v&&v.length&&v.filter(function(a){return a.values.length}).length))return a.utils.noData(b,U),b;U.selectAll(".nv-noData").remove();var Z=v.filter(function(a){return!a.disabled&&a.bar}),$=v.filter(function(a){return!a.bar});d=l.xScale(),e=o.scale(),f=l.yScale(),g=j.yScale(),h=m.yScale(),i=k.yScale();var _=v.filter(function(a){return!a.disabled&&a.bar}).map(function(a){return a.values.map(function(a,b){return{x:A(a,b),y:B(a,b)}})}),ab=v.filter(function(a){return!a.disabled&&!a.bar}).map(function(a){return a.values.map(function(a,b){return{x:A(a,b),y:B(a,b)}})});d.range([0,V]),e.domain(d3.extent(d3.merge(_.concat(ab)),function(a){return a.x})).range([0,V]);var bb=U.selectAll("g.nv-wrap.nv-linePlusBar").data([v]),cb=bb.enter().append("g").attr("class","nvd3 nv-wrap nv-linePlusBar").append("g"),db=bb.select("g");cb.append("g").attr("class","nv-legendWrap");var eb=cb.append("g").attr("class","nv-focus");eb.append("g").attr("class","nv-x nv-axis"),eb.append("g").attr("class","nv-y1 nv-axis"),eb.append("g").attr("class","nv-y2 nv-axis"),eb.append("g").attr("class","nv-barsWrap"),eb.append("g").attr("class","nv-linesWrap");var fb=cb.append("g").attr("class","nv-context");if(fb.append("g").attr("class","nv-x nv-axis"),fb.append("g").attr("class","nv-y1 nv-axis"),fb.append("g").attr("class","nv-y2 nv-axis"),fb.append("g").attr("class","nv-barsWrap"),fb.append("g").attr("class","nv-linesWrap"),fb.append("g").attr("class","nv-brushBackground"),fb.append("g").attr("class","nv-x nv-brush"),D){var gb=t.align()?V/2:V,hb=t.align()?gb:0;t.width(gb),db.select(".nv-legendWrap").datum(v.map(function(a){return a.originalKey=void 0===a.originalKey?a.key:a.originalKey,a.key=a.originalKey+(a.bar?O:P),a})).call(t),w.top!=t.height()&&(w.top=t.height(),W=a.utils.availableHeight(z,U,w)-H),db.select(".nv-legendWrap").attr("transform","translate("+hb+","+-w.top+")")}bb.attr("transform","translate("+w.left+","+w.top+")"),db.select(".nv-context").style("display",E?"initial":"none"),m.width(V).height(X).color(v.map(function(a,b){return a.color||C(a,b)}).filter(function(a,b){return!v[b].disabled&&v[b].bar})),k.width(V).height(X).color(v.map(function(a,b){return a.color||C(a,b)}).filter(function(a,b){return!v[b].disabled&&!v[b].bar}));var ib=db.select(".nv-context .nv-barsWrap").datum(Z.length?Z:[{values:[]}]),jb=db.select(".nv-context .nv-linesWrap").datum($[0].disabled?[{values:[]}]:$);db.select(".nv-context").attr("transform","translate(0,"+(W+w.bottom+x.top)+")"),ib.transition().call(m),jb.transition().call(k),G&&(o._ticks(a.utils.calcTicksX(V/100,v)).tickSize(-X,0),db.select(".nv-context .nv-x.nv-axis").attr("transform","translate(0,"+h.range()[0]+")"),db.select(".nv-context .nv-x.nv-axis").transition().call(o)),F&&(r.scale(h)._ticks(X/36).tickSize(-V,0),s.scale(i)._ticks(X/36).tickSize(Z.length?0:-V,0),db.select(".nv-context .nv-y3.nv-axis").style("opacity",Z.length?1:0).attr("transform","translate(0,"+e.range()[0]+")"),db.select(".nv-context .nv-y2.nv-axis").style("opacity",$.length?1:0).attr("transform","translate("+e.range()[1]+",0)"),db.select(".nv-context .nv-y1.nv-axis").transition().call(r),db.select(".nv-context .nv-y2.nv-axis").transition().call(s)),u.x(e).on("brush",T),I&&u.extent(I);var kb=db.select(".nv-brushBackground").selectAll("g").data([I||u.extent()]),lb=kb.enter().append("g");lb.append("rect").attr("class","left").attr("x",0).attr("y",0).attr("height",X),lb.append("rect").attr("class","right").attr("x",0).attr("y",0).attr("height",X);var mb=db.select(".nv-x.nv-brush").call(u);mb.selectAll("rect").attr("height",X),mb.selectAll(".resize").append("path").attr("d",J),t.dispatch.on("stateChange",function(a){for(var c in a)M[c]=a[c];K.stateChange(M),b.update()}),K.on("changeState",function(a){"undefined"!=typeof a.disabled&&(v.forEach(function(b,c){b.disabled=a.disabled[c]}),M.disabled=a.disabled),b.update()}),T()}),b}var c,d,e,f,g,h,i,j=a.models.line(),k=a.models.line(),l=a.models.historicalBar(),m=a.models.historicalBar(),n=a.models.axis(),o=a.models.axis(),p=a.models.axis(),q=a.models.axis(),r=a.models.axis(),s=a.models.axis(),t=a.models.legend(),u=d3.svg.brush(),v=a.models.tooltip(),w={top:30,right:30,bottom:30,left:60},x={top:0,right:30,bottom:20,left:60},y=null,z=null,A=function(a){return a.x},B=function(a){return a.y},C=a.utils.defaultColor(),D=!0,E=!0,F=!1,G=!0,H=50,I=null,J=null,K=d3.dispatch("brush","stateChange","changeState"),L=0,M=a.utils.state(),N=null,O=" (left axis)",P=" (right axis)";j.clipEdge(!0),k.interactive(!1),n.orient("bottom").tickPadding(5),p.orient("left"),q.orient("right"),o.orient("bottom").tickPadding(5),r.orient("left"),s.orient("right"),v.headerEnabled(!0).headerFormatter(function(a,b){return n.tickFormat()(a,b)});var Q=function(a){return function(){return{active:a.map(function(a){return!a.disabled})}}},R=function(a){return function(b){void 0!==b.active&&a.forEach(function(a,c){a.disabled=!b.active[c]})}};return j.dispatch.on("elementMouseover.tooltip",function(a){v.duration(100).valueFormatter(function(a,b){return q.tickFormat()(a,b)}).data(a).position(a.pos).hidden(!1)}),j.dispatch.on("elementMouseout.tooltip",function(){v.hidden(!0)}),l.dispatch.on("elementMouseover.tooltip",function(a){a.value=b.x()(a.data),a.series={value:b.y()(a.data),color:a.color},v.duration(0).valueFormatter(function(a,b){return p.tickFormat()(a,b)}).data(a).hidden(!1)}),l.dispatch.on("elementMouseout.tooltip",function(){v.hidden(!0)}),l.dispatch.on("elementMousemove.tooltip",function(){v.position({top:d3.event.pageY,left:d3.event.pageX})()}),b.dispatch=K,b.legend=t,b.lines=j,b.lines2=k,b.bars=l,b.bars2=m,b.xAxis=n,b.x2Axis=o,b.y1Axis=p,b.y2Axis=q,b.y3Axis=r,b.y4Axis=s,b.tooltip=v,b.options=a.utils.optionsFunc.bind(b),b._options=Object.create({},{width:{get:function(){return y},set:function(a){y=a}},height:{get:function(){return z},set:function(a){z=a}},showLegend:{get:function(){return D},set:function(a){D=a}},brushExtent:{get:function(){return I},set:function(a){I=a}},noData:{get:function(){return J},set:function(a){J=a}},focusEnable:{get:function(){return E},set:function(a){E=a}},focusHeight:{get:function(){return H},set:function(a){H=a}},focusShowAxisX:{get:function(){return G},set:function(a){G=a}},focusShowAxisY:{get:function(){return F},set:function(a){F=a}},legendLeftAxisHint:{get:function(){return O},set:function(a){O=a}},legendRightAxisHint:{get:function(){return P},set:function(a){P=a}},tooltips:{get:function(){return v.enabled()},set:function(b){a.deprecated("tooltips","use chart.tooltip.enabled() instead"),v.enabled(!!b)}},tooltipContent:{get:function(){return v.contentGenerator()},set:function(b){a.deprecated("tooltipContent","use chart.tooltip.contentGenerator() instead"),v.contentGenerator(b)}},margin:{get:function(){return w},set:function(a){w.top=void 0!==a.top?a.top:w.top,w.right=void 0!==a.right?a.right:w.right,w.bottom=void 0!==a.bottom?a.bottom:w.bottom,w.left=void 0!==a.left?a.left:w.left}},duration:{get:function(){return L},set:function(a){L=a}},color:{get:function(){return C},set:function(b){C=a.utils.getColor(b),t.color(C)}},x:{get:function(){return A},set:function(a){A=a,j.x(a),k.x(a),l.x(a),m.x(a)}},y:{get:function(){return B},set:function(a){B=a,j.y(a),k.y(a),l.y(a),m.y(a)}}}),a.utils.inheritOptions(b,j),a.utils.initOptions(b),b},a.models.lineWithFocusChart=function(){"use strict";function b(o){return o.each(function(o){function z(a){var b=+("e"==a),c=b?1:-1,d=M/3;return"M"+.5*c+","+d+"A6,6 0 0 "+b+" "+6.5*c+","+(d+6)+"V"+(2*d-6)+"A6,6 0 0 "+b+" "+.5*c+","+2*d+"ZM"+2.5*c+","+(d+8)+"V"+(2*d-8)+"M"+4.5*c+","+(d+8)+"V"+(2*d-8)}function G(){n.empty()||n.extent(y),U.data([n.empty()?e.domain():y]).each(function(a){var b=e(a[0])-c.range()[0],d=K-e(a[1]);d3.select(this).select(".left").attr("width",0>b?0:b),d3.select(this).select(".right").attr("x",e(a[1])).attr("width",0>d?0:d)})}function H(){y=n.empty()?null:n.extent();var a=n.empty()?e.domain():n.extent();if(!(Math.abs(a[0]-a[1])<=1)){A.brush({extent:a,brush:n}),G();var b=Q.select(".nv-focus .nv-linesWrap").datum(o.filter(function(a){return!a.disabled}).map(function(b){return{key:b.key,area:b.area,values:b.values.filter(function(b,c){return g.x()(b,c)>=a[0]&&g.x()(b,c)<=a[1]})}}));b.transition().duration(B).call(g),Q.select(".nv-focus .nv-x.nv-axis").transition().duration(B).call(i),Q.select(".nv-focus .nv-y.nv-axis").transition().duration(B).call(j)}}var I=d3.select(this),J=this;a.utils.initSVG(I);var K=a.utils.availableWidth(t,I,q),L=a.utils.availableHeight(u,I,q)-v,M=v-r.top-r.bottom;if(b.update=function(){I.transition().duration(B).call(b)},b.container=this,C.setter(F(o),b.update).getter(E(o)).update(),C.disabled=o.map(function(a){return!!a.disabled}),!D){var N;D={};for(N in C)D[N]=C[N]instanceof Array?C[N].slice(0):C[N]}if(!(o&&o.length&&o.filter(function(a){return a.values.length}).length))return a.utils.noData(b,I),b;I.selectAll(".nv-noData").remove(),c=g.xScale(),d=g.yScale(),e=h.xScale(),f=h.yScale();var O=I.selectAll("g.nv-wrap.nv-lineWithFocusChart").data([o]),P=O.enter().append("g").attr("class","nvd3 nv-wrap nv-lineWithFocusChart").append("g"),Q=O.select("g");P.append("g").attr("class","nv-legendWrap");var R=P.append("g").attr("class","nv-focus");R.append("g").attr("class","nv-x nv-axis"),R.append("g").attr("class","nv-y nv-axis"),R.append("g").attr("class","nv-linesWrap"),R.append("g").attr("class","nv-interactive");var S=P.append("g").attr("class","nv-context");S.append("g").attr("class","nv-x nv-axis"),S.append("g").attr("class","nv-y nv-axis"),S.append("g").attr("class","nv-linesWrap"),S.append("g").attr("class","nv-brushBackground"),S.append("g").attr("class","nv-x nv-brush"),x&&(m.width(K),Q.select(".nv-legendWrap").datum(o).call(m),q.top!=m.height()&&(q.top=m.height(),L=a.utils.availableHeight(u,I,q)-v),Q.select(".nv-legendWrap").attr("transform","translate(0,"+-q.top+")")),O.attr("transform","translate("+q.left+","+q.top+")"),w&&(p.width(K).height(L).margin({left:q.left,top:q.top}).svgContainer(I).xScale(c),O.select(".nv-interactive").call(p)),g.width(K).height(L).color(o.map(function(a,b){return a.color||s(a,b)}).filter(function(a,b){return!o[b].disabled})),h.defined(g.defined()).width(K).height(M).color(o.map(function(a,b){return a.color||s(a,b)}).filter(function(a,b){return!o[b].disabled})),Q.select(".nv-context").attr("transform","translate(0,"+(L+q.bottom+r.top)+")");var T=Q.select(".nv-context .nv-linesWrap").datum(o.filter(function(a){return!a.disabled}));d3.transition(T).call(h),i.scale(c)._ticks(a.utils.calcTicksX(K/100,o)).tickSize(-L,0),j.scale(d)._ticks(a.utils.calcTicksY(L/36,o)).tickSize(-K,0),Q.select(".nv-focus .nv-x.nv-axis").attr("transform","translate(0,"+L+")"),n.x(e).on("brush",function(){H()}),y&&n.extent(y);var U=Q.select(".nv-brushBackground").selectAll("g").data([y||n.extent()]),V=U.enter().append("g");V.append("rect").attr("class","left").attr("x",0).attr("y",0).attr("height",M),V.append("rect").attr("class","right").attr("x",0).attr("y",0).attr("height",M);var W=Q.select(".nv-x.nv-brush").call(n);W.selectAll("rect").attr("height",M),W.selectAll(".resize").append("path").attr("d",z),H(),k.scale(e)._ticks(a.utils.calcTicksX(K/100,o)).tickSize(-M,0),Q.select(".nv-context .nv-x.nv-axis").attr("transform","translate(0,"+f.range()[0]+")"),d3.transition(Q.select(".nv-context .nv-x.nv-axis")).call(k),l.scale(f)._ticks(a.utils.calcTicksY(M/36,o)).tickSize(-K,0),d3.transition(Q.select(".nv-context .nv-y.nv-axis")).call(l),Q.select(".nv-context .nv-x.nv-axis").attr("transform","translate(0,"+f.range()[0]+")"),m.dispatch.on("stateChange",function(a){for(var c in a)C[c]=a[c];A.stateChange(C),b.update()}),p.dispatch.on("elementMousemove",function(c){g.clearHighlights();var d,f,h,k=[];if(o.filter(function(a,b){return a.seriesIndex=b,!a.disabled}).forEach(function(i,j){var l=n.empty()?e.domain():n.extent(),m=i.values.filter(function(a,b){return g.x()(a,b)>=l[0]&&g.x()(a,b)<=l[1]});f=a.interactiveBisect(m,c.pointXValue,g.x());var o=m[f],p=b.y()(o,f);null!=p&&g.highlightPoint(j,f,!0),void 0!==o&&(void 0===d&&(d=o),void 0===h&&(h=b.xScale()(b.x()(o,f))),k.push({key:i.key,value:b.y()(o,f),color:s(i,i.seriesIndex)}))}),k.length>2){var l=b.yScale().invert(c.mouseY),m=Math.abs(b.yScale().domain()[0]-b.yScale().domain()[1]),r=.03*m,t=a.nearestValueIndex(k.map(function(a){return a.value}),l,r);null!==t&&(k[t].highlight=!0)}var u=i.tickFormat()(b.x()(d,f));p.tooltip.position({left:c.mouseX+q.left,top:c.mouseY+q.top}).chartContainer(J.parentNode).valueFormatter(function(a){return null==a?"N/A":j.tickFormat()(a)}).data({value:u,index:f,series:k})(),p.renderGuideLine(h)}),p.dispatch.on("elementMouseout",function(){g.clearHighlights()}),A.on("changeState",function(a){"undefined"!=typeof a.disabled&&o.forEach(function(b,c){b.disabled=a.disabled[c]}),b.update()})}),b}var c,d,e,f,g=a.models.line(),h=a.models.line(),i=a.models.axis(),j=a.models.axis(),k=a.models.axis(),l=a.models.axis(),m=a.models.legend(),n=d3.svg.brush(),o=a.models.tooltip(),p=a.interactiveGuideline(),q={top:30,right:30,bottom:30,left:60},r={top:0,right:30,bottom:20,left:60},s=a.utils.defaultColor(),t=null,u=null,v=50,w=!1,x=!0,y=null,z=null,A=d3.dispatch("brush","stateChange","changeState"),B=250,C=a.utils.state(),D=null;g.clipEdge(!0).duration(0),h.interactive(!1),i.orient("bottom").tickPadding(5),j.orient("left"),k.orient("bottom").tickPadding(5),l.orient("left"),o.valueFormatter(function(a,b){return j.tickFormat()(a,b)}).headerFormatter(function(a,b){return i.tickFormat()(a,b)});var E=function(a){return function(){return{active:a.map(function(a){return!a.disabled})}}},F=function(a){return function(b){void 0!==b.active&&a.forEach(function(a,c){a.disabled=!b.active[c]})}};return g.dispatch.on("elementMouseover.tooltip",function(a){o.data(a).position(a.pos).hidden(!1)}),g.dispatch.on("elementMouseout.tooltip",function(){o.hidden(!0)}),b.dispatch=A,b.legend=m,b.lines=g,b.lines2=h,b.xAxis=i,b.yAxis=j,b.x2Axis=k,b.y2Axis=l,b.interactiveLayer=p,b.tooltip=o,b.options=a.utils.optionsFunc.bind(b),b._options=Object.create({},{width:{get:function(){return t},set:function(a){t=a}},height:{get:function(){return u},set:function(a){u=a}},focusHeight:{get:function(){return v},set:function(a){v=a}},showLegend:{get:function(){return x},set:function(a){x=a}},brushExtent:{get:function(){return y},set:function(a){y=a}},defaultState:{get:function(){return D},set:function(a){D=a}},noData:{get:function(){return z},set:function(a){z=a}},tooltips:{get:function(){return o.enabled()},set:function(b){a.deprecated("tooltips","use chart.tooltip.enabled() instead"),o.enabled(!!b)}},tooltipContent:{get:function(){return o.contentGenerator()},set:function(b){a.deprecated("tooltipContent","use chart.tooltip.contentGenerator() instead"),o.contentGenerator(b)}},margin:{get:function(){return q},set:function(a){q.top=void 0!==a.top?a.top:q.top,q.right=void 0!==a.right?a.right:q.right,q.bottom=void 0!==a.bottom?a.bottom:q.bottom,q.left=void 0!==a.left?a.left:q.left}},color:{get:function(){return s},set:function(b){s=a.utils.getColor(b),m.color(s)}},interpolate:{get:function(){return g.interpolate()},set:function(a){g.interpolate(a),h.interpolate(a)}},xTickFormat:{get:function(){return i.tickFormat()},set:function(a){i.tickFormat(a),k.tickFormat(a)}},yTickFormat:{get:function(){return j.tickFormat()},set:function(a){j.tickFormat(a),l.tickFormat(a)}},duration:{get:function(){return B},set:function(a){B=a,j.duration(B),l.duration(B),i.duration(B),k.duration(B)}},x:{get:function(){return g.x()},set:function(a){g.x(a),h.x(a)}},y:{get:function(){return g.y()},set:function(a){g.y(a),h.y(a)}},useInteractiveGuideline:{get:function(){return w},set:function(a){w=a,w&&(g.interactive(!1),g.useVoronoi(!1))}}}),a.utils.inheritOptions(b,g),a.utils.initOptions(b),b},a.models.multiBar=function(){"use strict";function b(E){return C.reset(),E.each(function(b){var E=k-j.left-j.right,F=l-j.top-j.bottom;p=d3.select(this),a.utils.initSVG(p);var G=0;if(x&&b.length&&(x=[{values:b[0].values.map(function(a){return{x:a.x,y:0,series:a.series,size:.01}})}]),u){var H=d3.layout.stack().offset(v).values(function(a){return a.values}).y(r)(!b.length&&x?x:b);H.forEach(function(a,c){a.nonStackable?(b[c].nonStackableSeries=G++,H[c]=b[c]):c>0&&H[c-1].nonStackable&&H[c].values.map(function(a,b){a.y0-=H[c-1].values[b].y,a.y1=a.y0+a.y})}),b=H}b.forEach(function(a,b){a.values.forEach(function(c){c.series=b,c.key=a.key})}),u&&b[0].values.map(function(a,c){var d=0,e=0;b.map(function(a,f){if(!b[f].nonStackable){var g=a.values[c];g.size=Math.abs(g.y),g.y<0?(g.y1=e,e-=g.size):(g.y1=g.size+d,d+=g.size)}})});var I=d&&e?[]:b.map(function(a,b){return a.values.map(function(a,c){return{x:q(a,c),y:r(a,c),y0:a.y0,y1:a.y1,idx:b}})});m.domain(d||d3.merge(I).map(function(a){return a.x})).rangeBands(f||[0,E],A),n.domain(e||d3.extent(d3.merge(I).map(function(a){var c=a.y;return u&&!b[a.idx].nonStackable&&(c=a.y>0?a.y1:a.y1+a.y),c}).concat(s))).range(g||[F,0]),m.domain()[0]===m.domain()[1]&&m.domain(m.domain()[0]?[m.domain()[0]-.01*m.domain()[0],m.domain()[1]+.01*m.domain()[1]]:[-1,1]),n.domain()[0]===n.domain()[1]&&n.domain(n.domain()[0]?[n.domain()[0]+.01*n.domain()[0],n.domain()[1]-.01*n.domain()[1]]:[-1,1]),h=h||m,i=i||n;var J=p.selectAll("g.nv-wrap.nv-multibar").data([b]),K=J.enter().append("g").attr("class","nvd3 nv-wrap nv-multibar"),L=K.append("defs"),M=K.append("g"),N=J.select("g");M.append("g").attr("class","nv-groups"),J.attr("transform","translate("+j.left+","+j.top+")"),L.append("clipPath").attr("id","nv-edge-clip-"+o).append("rect"),J.select("#nv-edge-clip-"+o+" rect").attr("width",E).attr("height",F),N.attr("clip-path",t?"url(#nv-edge-clip-"+o+")":"");var O=J.select(".nv-groups").selectAll(".nv-group").data(function(a){return a},function(a,b){return b});O.enter().append("g").style("stroke-opacity",1e-6).style("fill-opacity",1e-6);var P=C.transition(O.exit().selectAll("rect.nv-bar"),"multibarExit",Math.min(100,z)).attr("y",function(a){var c=i(0)||0;return u&&b[a.series]&&!b[a.series].nonStackable&&(c=i(a.y0)),c}).attr("height",0).remove();P.delay&&P.delay(function(a,b){var c=b*(z/(D+1))-b;return c}),O.attr("class",function(a,b){return"nv-group nv-series-"+b}).classed("hover",function(a){return a.hover}).style("fill",function(a,b){return w(a,b)}).style("stroke",function(a,b){return w(a,b)}),O.style("stroke-opacity",1).style("fill-opacity",.75);var Q=O.selectAll("rect.nv-bar").data(function(a){return x&&!b.length?x.values:a.values});Q.exit().remove();Q.enter().append("rect").attr("class",function(a,b){return r(a,b)<0?"nv-bar negative":"nv-bar positive"}).attr("x",function(a,c,d){return u&&!b[d].nonStackable?0:d*m.rangeBand()/b.length}).attr("y",function(a,c,d){return i(u&&!b[d].nonStackable?a.y0:0)||0}).attr("height",0).attr("width",function(a,c,d){return m.rangeBand()/(u&&!b[d].nonStackable?1:b.length)}).attr("transform",function(a,b){return"translate("+m(q(a,b))+",0)"});Q.style("fill",function(a,b,c){return w(a,c,b)}).style("stroke",function(a,b,c){return w(a,c,b)}).on("mouseover",function(a,b){d3.select(this).classed("hover",!0),B.elementMouseover({data:a,index:b,color:d3.select(this).style("fill")})}).on("mouseout",function(a,b){d3.select(this).classed("hover",!1),B.elementMouseout({data:a,index:b,color:d3.select(this).style("fill")})}).on("mousemove",function(a,b){B.elementMousemove({data:a,index:b,color:d3.select(this).style("fill")})}).on("click",function(a,b){B.elementClick({data:a,index:b,color:d3.select(this).style("fill")}),d3.event.stopPropagation()}).on("dblclick",function(a,b){B.elementDblClick({data:a,index:b,color:d3.select(this).style("fill")}),d3.event.stopPropagation()}),Q.attr("class",function(a,b){return r(a,b)<0?"nv-bar negative":"nv-bar positive"}).attr("transform",function(a,b){return"translate("+m(q(a,b))+",0)"}),y&&(c||(c=b.map(function(){return!0})),Q.style("fill",function(a,b,d){return d3.rgb(y(a,b)).darker(c.map(function(a,b){return b}).filter(function(a,b){return!c[b]})[d]).toString()}).style("stroke",function(a,b,d){return d3.rgb(y(a,b)).darker(c.map(function(a,b){return b}).filter(function(a,b){return!c[b]})[d]).toString()}));var R=Q.watchTransition(C,"multibar",Math.min(250,z)).delay(function(a,c){return c*z/b[0].values.length});u?R.attr("y",function(a,c,d){var e=0;return e=b[d].nonStackable?r(a,c)<0?n(0):n(0)-n(r(a,c))<-1?n(0)-1:n(r(a,c))||0:n(a.y1)}).attr("height",function(a,c,d){return b[d].nonStackable?Math.max(Math.abs(n(r(a,c))-n(0)),1)||0:Math.max(Math.abs(n(a.y+a.y0)-n(a.y0)),1)}).attr("x",function(a,c,d){var e=0;return b[d].nonStackable&&(e=a.series*m.rangeBand()/b.length,b.length!==G&&(e=b[d].nonStackableSeries*m.rangeBand()/(2*G))),e}).attr("width",function(a,c,d){if(b[d].nonStackable){var e=m.rangeBand()/G;return b.length!==G&&(e=m.rangeBand()/(2*G)),e}return m.rangeBand()}):R.attr("x",function(a){return a.series*m.rangeBand()/b.length}).attr("width",m.rangeBand()/b.length).attr("y",function(a,b){return r(a,b)<0?n(0):n(0)-n(r(a,b))<1?n(0)-1:n(r(a,b))||0}).attr("height",function(a,b){return Math.max(Math.abs(n(r(a,b))-n(0)),1)||0}),h=m.copy(),i=n.copy(),b[0]&&b[0].values&&(D=b[0].values.length)}),C.renderEnd("multibar immediate"),b}var c,d,e,f,g,h,i,j={top:0,right:0,bottom:0,left:0},k=960,l=500,m=d3.scale.ordinal(),n=d3.scale.linear(),o=Math.floor(1e4*Math.random()),p=null,q=function(a){return a.x},r=function(a){return a.y},s=[0],t=!0,u=!1,v="zero",w=a.utils.defaultColor(),x=!1,y=null,z=500,A=.1,B=d3.dispatch("chartClick","elementClick","elementDblClick","elementMouseover","elementMouseout","elementMousemove","renderEnd"),C=a.utils.renderWatch(B,z),D=0;return b.dispatch=B,b.options=a.utils.optionsFunc.bind(b),b._options=Object.create({},{width:{get:function(){return k},set:function(a){k=a}},height:{get:function(){return l},set:function(a){l=a}},x:{get:function(){return q},set:function(a){q=a}},y:{get:function(){return r},set:function(a){r=a}},xScale:{get:function(){return m},set:function(a){m=a}},yScale:{get:function(){return n},set:function(a){n=a}},xDomain:{get:function(){return d},set:function(a){d=a}},yDomain:{get:function(){return e},set:function(a){e=a}},xRange:{get:function(){return f},set:function(a){f=a}},yRange:{get:function(){return g},set:function(a){g=a}},forceY:{get:function(){return s},set:function(a){s=a}},stacked:{get:function(){return u},set:function(a){u=a}},stackOffset:{get:function(){return v},set:function(a){v=a}},clipEdge:{get:function(){return t},set:function(a){t=a}},disabled:{get:function(){return c},set:function(a){c=a}},id:{get:function(){return o},set:function(a){o=a}},hideable:{get:function(){return x},set:function(a){x=a}},groupSpacing:{get:function(){return A},set:function(a){A=a}},margin:{get:function(){return j},set:function(a){j.top=void 0!==a.top?a.top:j.top,j.right=void 0!==a.right?a.right:j.right,j.bottom=void 0!==a.bottom?a.bottom:j.bottom,j.left=void 0!==a.left?a.left:j.left}},duration:{get:function(){return z},set:function(a){z=a,C.reset(z)}},color:{get:function(){return w},set:function(b){w=a.utils.getColor(b)}},barColor:{get:function(){return y},set:function(b){y=b?a.utils.getColor(b):null}}}),a.utils.initOptions(b),b},a.models.multiBarChart=function(){"use strict";function b(j){return D.reset(),D.models(e),r&&D.models(f),s&&D.models(g),j.each(function(j){var z=d3.select(this);a.utils.initSVG(z);var D=a.utils.availableWidth(l,z,k),H=a.utils.availableHeight(m,z,k);if(b.update=function(){0===C?z.call(b):z.transition().duration(C).call(b)},b.container=this,x.setter(G(j),b.update).getter(F(j)).update(),x.disabled=j.map(function(a){return!!a.disabled}),!y){var I;y={};for(I in x)y[I]=x[I]instanceof Array?x[I].slice(0):x[I]}if(!(j&&j.length&&j.filter(function(a){return a.values.length}).length))return a.utils.noData(b,z),b;z.selectAll(".nv-noData").remove(),c=e.xScale(),d=e.yScale();
    6: var J=z.selectAll("g.nv-wrap.nv-multiBarWithLegend").data([j]),K=J.enter().append("g").attr("class","nvd3 nv-wrap nv-multiBarWithLegend").append("g"),L=J.select("g");if(K.append("g").attr("class","nv-x nv-axis"),K.append("g").attr("class","nv-y nv-axis"),K.append("g").attr("class","nv-barsWrap"),K.append("g").attr("class","nv-legendWrap"),K.append("g").attr("class","nv-controlsWrap"),q&&(h.width(D-B()),L.select(".nv-legendWrap").datum(j).call(h),k.top!=h.height()&&(k.top=h.height(),H=a.utils.availableHeight(m,z,k)),L.select(".nv-legendWrap").attr("transform","translate("+B()+","+-k.top+")")),o){var M=[{key:p.grouped||"Grouped",disabled:e.stacked()},{key:p.stacked||"Stacked",disabled:!e.stacked()}];i.width(B()).color(["#444","#444","#444"]),L.select(".nv-controlsWrap").datum(M).attr("transform","translate(0,"+-k.top+")").call(i)}J.attr("transform","translate("+k.left+","+k.top+")"),t&&L.select(".nv-y.nv-axis").attr("transform","translate("+D+",0)"),e.disabled(j.map(function(a){return a.disabled})).width(D).height(H).color(j.map(function(a,b){return a.color||n(a,b)}).filter(function(a,b){return!j[b].disabled}));var N=L.select(".nv-barsWrap").datum(j.filter(function(a){return!a.disabled}));if(N.call(e),r){f.scale(c)._ticks(a.utils.calcTicksX(D/100,j)).tickSize(-H,0),L.select(".nv-x.nv-axis").attr("transform","translate(0,"+d.range()[0]+")"),L.select(".nv-x.nv-axis").call(f);var O=L.select(".nv-x.nv-axis > g").selectAll("g");if(O.selectAll("line, text").style("opacity",1),v){var P=function(a,b){return"translate("+a+","+b+")"},Q=5,R=17;O.selectAll("text").attr("transform",function(a,b,c){return P(0,c%2==0?Q:R)});var S=d3.selectAll(".nv-x.nv-axis .nv-wrap g g text")[0].length;L.selectAll(".nv-x.nv-axis .nv-axisMaxMin text").attr("transform",function(a,b){return P(0,0===b||S%2!==0?R:Q)})}u&&O.filter(function(a,b){return b%Math.ceil(j[0].values.length/(D/100))!==0}).selectAll("text, line").style("opacity",0),w&&O.selectAll(".tick text").attr("transform","rotate("+w+" 0,0)").style("text-anchor",w>0?"start":"end"),L.select(".nv-x.nv-axis").selectAll("g.nv-axisMaxMin text").style("opacity",1)}s&&(g.scale(d)._ticks(a.utils.calcTicksY(H/36,j)).tickSize(-D,0),L.select(".nv-y.nv-axis").call(g)),h.dispatch.on("stateChange",function(a){for(var c in a)x[c]=a[c];A.stateChange(x),b.update()}),i.dispatch.on("legendClick",function(a){if(a.disabled){switch(M=M.map(function(a){return a.disabled=!0,a}),a.disabled=!1,a.key){case"Grouped":case p.grouped:e.stacked(!1);break;case"Stacked":case p.stacked:e.stacked(!0)}x.stacked=e.stacked(),A.stateChange(x),b.update()}}),A.on("changeState",function(a){"undefined"!=typeof a.disabled&&(j.forEach(function(b,c){b.disabled=a.disabled[c]}),x.disabled=a.disabled),"undefined"!=typeof a.stacked&&(e.stacked(a.stacked),x.stacked=a.stacked,E=a.stacked),b.update()})}),D.renderEnd("multibarchart immediate"),b}var c,d,e=a.models.multiBar(),f=a.models.axis(),g=a.models.axis(),h=a.models.legend(),i=a.models.legend(),j=a.models.tooltip(),k={top:30,right:20,bottom:50,left:60},l=null,m=null,n=a.utils.defaultColor(),o=!0,p={},q=!0,r=!0,s=!0,t=!1,u=!0,v=!1,w=0,x=a.utils.state(),y=null,z=null,A=d3.dispatch("stateChange","changeState","renderEnd"),B=function(){return o?180:0},C=250;x.stacked=!1,e.stacked(!1),f.orient("bottom").tickPadding(7).showMaxMin(!1).tickFormat(function(a){return a}),g.orient(t?"right":"left").tickFormat(d3.format(",.1f")),j.duration(0).valueFormatter(function(a,b){return g.tickFormat()(a,b)}).headerFormatter(function(a,b){return f.tickFormat()(a,b)}),i.updateState(!1);var D=a.utils.renderWatch(A),E=!1,F=function(a){return function(){return{active:a.map(function(a){return!a.disabled}),stacked:E}}},G=function(a){return function(b){void 0!==b.stacked&&(E=b.stacked),void 0!==b.active&&a.forEach(function(a,c){a.disabled=!b.active[c]})}};return e.dispatch.on("elementMouseover.tooltip",function(a){a.value=b.x()(a.data),a.series={key:a.data.key,value:b.y()(a.data),color:a.color},j.data(a).hidden(!1)}),e.dispatch.on("elementMouseout.tooltip",function(){j.hidden(!0)}),e.dispatch.on("elementMousemove.tooltip",function(){j.position({top:d3.event.pageY,left:d3.event.pageX})()}),b.dispatch=A,b.multibar=e,b.legend=h,b.controls=i,b.xAxis=f,b.yAxis=g,b.state=x,b.tooltip=j,b.options=a.utils.optionsFunc.bind(b),b._options=Object.create({},{width:{get:function(){return l},set:function(a){l=a}},height:{get:function(){return m},set:function(a){m=a}},showLegend:{get:function(){return q},set:function(a){q=a}},showControls:{get:function(){return o},set:function(a){o=a}},controlLabels:{get:function(){return p},set:function(a){p=a}},showXAxis:{get:function(){return r},set:function(a){r=a}},showYAxis:{get:function(){return s},set:function(a){s=a}},defaultState:{get:function(){return y},set:function(a){y=a}},noData:{get:function(){return z},set:function(a){z=a}},reduceXTicks:{get:function(){return u},set:function(a){u=a}},rotateLabels:{get:function(){return w},set:function(a){w=a}},staggerLabels:{get:function(){return v},set:function(a){v=a}},tooltips:{get:function(){return j.enabled()},set:function(b){a.deprecated("tooltips","use chart.tooltip.enabled() instead"),j.enabled(!!b)}},tooltipContent:{get:function(){return j.contentGenerator()},set:function(b){a.deprecated("tooltipContent","use chart.tooltip.contentGenerator() instead"),j.contentGenerator(b)}},margin:{get:function(){return k},set:function(a){k.top=void 0!==a.top?a.top:k.top,k.right=void 0!==a.right?a.right:k.right,k.bottom=void 0!==a.bottom?a.bottom:k.bottom,k.left=void 0!==a.left?a.left:k.left}},duration:{get:function(){return C},set:function(a){C=a,e.duration(C),f.duration(C),g.duration(C),D.reset(C)}},color:{get:function(){return n},set:function(b){n=a.utils.getColor(b),h.color(n)}},rightAlignYAxis:{get:function(){return t},set:function(a){t=a,g.orient(t?"right":"left")}},barColor:{get:function(){return e.barColor},set:function(a){e.barColor(a),h.color(function(a,b){return d3.rgb("#ccc").darker(1.5*b).toString()})}}}),a.utils.inheritOptions(b,e),a.utils.initOptions(b),b},a.models.multiBarHorizontal=function(){"use strict";function b(m){return E.reset(),m.each(function(b){var m=k-j.left-j.right,C=l-j.top-j.bottom;n=d3.select(this),a.utils.initSVG(n),w&&(b=d3.layout.stack().offset("zero").values(function(a){return a.values}).y(r)(b)),b.forEach(function(a,b){a.values.forEach(function(c){c.series=b,c.key=a.key})}),w&&b[0].values.map(function(a,c){var d=0,e=0;b.map(function(a){var b=a.values[c];b.size=Math.abs(b.y),b.y<0?(b.y1=e-b.size,e-=b.size):(b.y1=d,d+=b.size)})});var F=d&&e?[]:b.map(function(a){return a.values.map(function(a,b){return{x:q(a,b),y:r(a,b),y0:a.y0,y1:a.y1}})});o.domain(d||d3.merge(F).map(function(a){return a.x})).rangeBands(f||[0,C],A),p.domain(e||d3.extent(d3.merge(F).map(function(a){return w?a.y>0?a.y1+a.y:a.y1:a.y}).concat(t))),p.range(x&&!w?g||[p.domain()[0]<0?z:0,m-(p.domain()[1]>0?z:0)]:g||[0,m]),h=h||o,i=i||d3.scale.linear().domain(p.domain()).range([p(0),p(0)]);{var G=d3.select(this).selectAll("g.nv-wrap.nv-multibarHorizontal").data([b]),H=G.enter().append("g").attr("class","nvd3 nv-wrap nv-multibarHorizontal"),I=(H.append("defs"),H.append("g"));G.select("g")}I.append("g").attr("class","nv-groups"),G.attr("transform","translate("+j.left+","+j.top+")");var J=G.select(".nv-groups").selectAll(".nv-group").data(function(a){return a},function(a,b){return b});J.enter().append("g").style("stroke-opacity",1e-6).style("fill-opacity",1e-6),J.exit().watchTransition(E,"multibarhorizontal: exit groups").style("stroke-opacity",1e-6).style("fill-opacity",1e-6).remove(),J.attr("class",function(a,b){return"nv-group nv-series-"+b}).classed("hover",function(a){return a.hover}).style("fill",function(a,b){return u(a,b)}).style("stroke",function(a,b){return u(a,b)}),J.watchTransition(E,"multibarhorizontal: groups").style("stroke-opacity",1).style("fill-opacity",.75);var K=J.selectAll("g.nv-bar").data(function(a){return a.values});K.exit().remove();var L=K.enter().append("g").attr("transform",function(a,c,d){return"translate("+i(w?a.y0:0)+","+(w?0:d*o.rangeBand()/b.length+o(q(a,c)))+")"});L.append("rect").attr("width",0).attr("height",o.rangeBand()/(w?1:b.length)),K.on("mouseover",function(a,b){d3.select(this).classed("hover",!0),D.elementMouseover({data:a,index:b,color:d3.select(this).style("fill")})}).on("mouseout",function(a,b){d3.select(this).classed("hover",!1),D.elementMouseout({data:a,index:b,color:d3.select(this).style("fill")})}).on("mouseout",function(a,b){D.elementMouseout({data:a,index:b,color:d3.select(this).style("fill")})}).on("mousemove",function(a,b){D.elementMousemove({data:a,index:b,color:d3.select(this).style("fill")})}).on("click",function(a,b){D.elementClick({data:a,index:b,color:d3.select(this).style("fill")}),d3.event.stopPropagation()}).on("dblclick",function(a,b){D.elementDblClick({data:a,index:b,color:d3.select(this).style("fill")}),d3.event.stopPropagation()}),s(b[0],0)&&(L.append("polyline"),K.select("polyline").attr("fill","none").attr("points",function(a,c){var d=s(a,c),e=.8*o.rangeBand()/(2*(w?1:b.length));d=d.length?d:[-Math.abs(d),Math.abs(d)],d=d.map(function(a){return p(a)-p(0)});var f=[[d[0],-e],[d[0],e],[d[0],0],[d[1],0],[d[1],-e],[d[1],e]];return f.map(function(a){return a.join(",")}).join(" ")}).attr("transform",function(a,c){var d=o.rangeBand()/(2*(w?1:b.length));return"translate("+(r(a,c)<0?0:p(r(a,c))-p(0))+", "+d+")"})),L.append("text"),x&&!w?(K.select("text").attr("text-anchor",function(a,b){return r(a,b)<0?"end":"start"}).attr("y",o.rangeBand()/(2*b.length)).attr("dy",".32em").text(function(a,b){var c=B(r(a,b)),d=s(a,b);return void 0===d?c:d.length?c+"+"+B(Math.abs(d[1]))+"-"+B(Math.abs(d[0])):c+"±"+B(Math.abs(d))}),K.watchTransition(E,"multibarhorizontal: bars").select("text").attr("x",function(a,b){return r(a,b)<0?-4:p(r(a,b))-p(0)+4})):K.selectAll("text").text(""),y&&!w?(L.append("text").classed("nv-bar-label",!0),K.select("text.nv-bar-label").attr("text-anchor",function(a,b){return r(a,b)<0?"start":"end"}).attr("y",o.rangeBand()/(2*b.length)).attr("dy",".32em").text(function(a,b){return q(a,b)}),K.watchTransition(E,"multibarhorizontal: bars").select("text.nv-bar-label").attr("x",function(a,b){return r(a,b)<0?p(0)-p(r(a,b))+4:-4})):K.selectAll("text.nv-bar-label").text(""),K.attr("class",function(a,b){return r(a,b)<0?"nv-bar negative":"nv-bar positive"}),v&&(c||(c=b.map(function(){return!0})),K.style("fill",function(a,b,d){return d3.rgb(v(a,b)).darker(c.map(function(a,b){return b}).filter(function(a,b){return!c[b]})[d]).toString()}).style("stroke",function(a,b,d){return d3.rgb(v(a,b)).darker(c.map(function(a,b){return b}).filter(function(a,b){return!c[b]})[d]).toString()})),w?K.watchTransition(E,"multibarhorizontal: bars").attr("transform",function(a,b){return"translate("+p(a.y1)+","+o(q(a,b))+")"}).select("rect").attr("width",function(a,b){return Math.abs(p(r(a,b)+a.y0)-p(a.y0))}).attr("height",o.rangeBand()):K.watchTransition(E,"multibarhorizontal: bars").attr("transform",function(a,c){return"translate("+p(r(a,c)<0?r(a,c):0)+","+(a.series*o.rangeBand()/b.length+o(q(a,c)))+")"}).select("rect").attr("height",o.rangeBand()/b.length).attr("width",function(a,b){return Math.max(Math.abs(p(r(a,b))-p(0)),1)}),h=o.copy(),i=p.copy()}),E.renderEnd("multibarHorizontal immediate"),b}var c,d,e,f,g,h,i,j={top:0,right:0,bottom:0,left:0},k=960,l=500,m=Math.floor(1e4*Math.random()),n=null,o=d3.scale.ordinal(),p=d3.scale.linear(),q=function(a){return a.x},r=function(a){return a.y},s=function(a){return a.yErr},t=[0],u=a.utils.defaultColor(),v=null,w=!1,x=!1,y=!1,z=60,A=.1,B=d3.format(",.2f"),C=250,D=d3.dispatch("chartClick","elementClick","elementDblClick","elementMouseover","elementMouseout","elementMousemove","renderEnd"),E=a.utils.renderWatch(D,C);return b.dispatch=D,b.options=a.utils.optionsFunc.bind(b),b._options=Object.create({},{width:{get:function(){return k},set:function(a){k=a}},height:{get:function(){return l},set:function(a){l=a}},x:{get:function(){return q},set:function(a){q=a}},y:{get:function(){return r},set:function(a){r=a}},yErr:{get:function(){return s},set:function(a){s=a}},xScale:{get:function(){return o},set:function(a){o=a}},yScale:{get:function(){return p},set:function(a){p=a}},xDomain:{get:function(){return d},set:function(a){d=a}},yDomain:{get:function(){return e},set:function(a){e=a}},xRange:{get:function(){return f},set:function(a){f=a}},yRange:{get:function(){return g},set:function(a){g=a}},forceY:{get:function(){return t},set:function(a){t=a}},stacked:{get:function(){return w},set:function(a){w=a}},showValues:{get:function(){return x},set:function(a){x=a}},disabled:{get:function(){return c},set:function(a){c=a}},id:{get:function(){return m},set:function(a){m=a}},valueFormat:{get:function(){return B},set:function(a){B=a}},valuePadding:{get:function(){return z},set:function(a){z=a}},groupSpacing:{get:function(){return A},set:function(a){A=a}},margin:{get:function(){return j},set:function(a){j.top=void 0!==a.top?a.top:j.top,j.right=void 0!==a.right?a.right:j.right,j.bottom=void 0!==a.bottom?a.bottom:j.bottom,j.left=void 0!==a.left?a.left:j.left}},duration:{get:function(){return C},set:function(a){C=a,E.reset(C)}},color:{get:function(){return u},set:function(b){u=a.utils.getColor(b)}},barColor:{get:function(){return v},set:function(b){v=b?a.utils.getColor(b):null}}}),a.utils.initOptions(b),b},a.models.multiBarHorizontalChart=function(){"use strict";function b(j){return C.reset(),C.models(e),r&&C.models(f),s&&C.models(g),j.each(function(j){var w=d3.select(this);a.utils.initSVG(w);var C=a.utils.availableWidth(l,w,k),D=a.utils.availableHeight(m,w,k);if(b.update=function(){w.transition().duration(z).call(b)},b.container=this,t=e.stacked(),u.setter(B(j),b.update).getter(A(j)).update(),u.disabled=j.map(function(a){return!!a.disabled}),!v){var E;v={};for(E in u)v[E]=u[E]instanceof Array?u[E].slice(0):u[E]}if(!(j&&j.length&&j.filter(function(a){return a.values.length}).length))return a.utils.noData(b,w),b;w.selectAll(".nv-noData").remove(),c=e.xScale(),d=e.yScale();var F=w.selectAll("g.nv-wrap.nv-multiBarHorizontalChart").data([j]),G=F.enter().append("g").attr("class","nvd3 nv-wrap nv-multiBarHorizontalChart").append("g"),H=F.select("g");if(G.append("g").attr("class","nv-x nv-axis"),G.append("g").attr("class","nv-y nv-axis").append("g").attr("class","nv-zeroLine").append("line"),G.append("g").attr("class","nv-barsWrap"),G.append("g").attr("class","nv-legendWrap"),G.append("g").attr("class","nv-controlsWrap"),q&&(h.width(C-y()),H.select(".nv-legendWrap").datum(j).call(h),k.top!=h.height()&&(k.top=h.height(),D=a.utils.availableHeight(m,w,k)),H.select(".nv-legendWrap").attr("transform","translate("+y()+","+-k.top+")")),o){var I=[{key:p.grouped||"Grouped",disabled:e.stacked()},{key:p.stacked||"Stacked",disabled:!e.stacked()}];i.width(y()).color(["#444","#444","#444"]),H.select(".nv-controlsWrap").datum(I).attr("transform","translate(0,"+-k.top+")").call(i)}F.attr("transform","translate("+k.left+","+k.top+")"),e.disabled(j.map(function(a){return a.disabled})).width(C).height(D).color(j.map(function(a,b){return a.color||n(a,b)}).filter(function(a,b){return!j[b].disabled}));var J=H.select(".nv-barsWrap").datum(j.filter(function(a){return!a.disabled}));if(J.transition().call(e),r){f.scale(c)._ticks(a.utils.calcTicksY(D/24,j)).tickSize(-C,0),H.select(".nv-x.nv-axis").call(f);var K=H.select(".nv-x.nv-axis").selectAll("g");K.selectAll("line, text")}s&&(g.scale(d)._ticks(a.utils.calcTicksX(C/100,j)).tickSize(-D,0),H.select(".nv-y.nv-axis").attr("transform","translate(0,"+D+")"),H.select(".nv-y.nv-axis").call(g)),H.select(".nv-zeroLine line").attr("x1",d(0)).attr("x2",d(0)).attr("y1",0).attr("y2",-D),h.dispatch.on("stateChange",function(a){for(var c in a)u[c]=a[c];x.stateChange(u),b.update()}),i.dispatch.on("legendClick",function(a){if(a.disabled){switch(I=I.map(function(a){return a.disabled=!0,a}),a.disabled=!1,a.key){case"Grouped":e.stacked(!1);break;case"Stacked":e.stacked(!0)}u.stacked=e.stacked(),x.stateChange(u),t=e.stacked(),b.update()}}),x.on("changeState",function(a){"undefined"!=typeof a.disabled&&(j.forEach(function(b,c){b.disabled=a.disabled[c]}),u.disabled=a.disabled),"undefined"!=typeof a.stacked&&(e.stacked(a.stacked),u.stacked=a.stacked,t=a.stacked),b.update()})}),C.renderEnd("multibar horizontal chart immediate"),b}var c,d,e=a.models.multiBarHorizontal(),f=a.models.axis(),g=a.models.axis(),h=a.models.legend().height(30),i=a.models.legend().height(30),j=a.models.tooltip(),k={top:30,right:20,bottom:50,left:60},l=null,m=null,n=a.utils.defaultColor(),o=!0,p={},q=!0,r=!0,s=!0,t=!1,u=a.utils.state(),v=null,w=null,x=d3.dispatch("stateChange","changeState","renderEnd"),y=function(){return o?180:0},z=250;u.stacked=!1,e.stacked(t),f.orient("left").tickPadding(5).showMaxMin(!1).tickFormat(function(a){return a}),g.orient("bottom").tickFormat(d3.format(",.1f")),j.duration(0).valueFormatter(function(a,b){return g.tickFormat()(a,b)}).headerFormatter(function(a,b){return f.tickFormat()(a,b)}),i.updateState(!1);var A=function(a){return function(){return{active:a.map(function(a){return!a.disabled}),stacked:t}}},B=function(a){return function(b){void 0!==b.stacked&&(t=b.stacked),void 0!==b.active&&a.forEach(function(a,c){a.disabled=!b.active[c]})}},C=a.utils.renderWatch(x,z);return e.dispatch.on("elementMouseover.tooltip",function(a){a.value=b.x()(a.data),a.series={key:a.data.key,value:b.y()(a.data),color:a.color},j.data(a).hidden(!1)}),e.dispatch.on("elementMouseout.tooltip",function(){j.hidden(!0)}),e.dispatch.on("elementMousemove.tooltip",function(){j.position({top:d3.event.pageY,left:d3.event.pageX})()}),b.dispatch=x,b.multibar=e,b.legend=h,b.controls=i,b.xAxis=f,b.yAxis=g,b.state=u,b.tooltip=j,b.options=a.utils.optionsFunc.bind(b),b._options=Object.create({},{width:{get:function(){return l},set:function(a){l=a}},height:{get:function(){return m},set:function(a){m=a}},showLegend:{get:function(){return q},set:function(a){q=a}},showControls:{get:function(){return o},set:function(a){o=a}},controlLabels:{get:function(){return p},set:function(a){p=a}},showXAxis:{get:function(){return r},set:function(a){r=a}},showYAxis:{get:function(){return s},set:function(a){s=a}},defaultState:{get:function(){return v},set:function(a){v=a}},noData:{get:function(){return w},set:function(a){w=a}},tooltips:{get:function(){return j.enabled()},set:function(b){a.deprecated("tooltips","use chart.tooltip.enabled() instead"),j.enabled(!!b)}},tooltipContent:{get:function(){return j.contentGenerator()},set:function(b){a.deprecated("tooltipContent","use chart.tooltip.contentGenerator() instead"),j.contentGenerator(b)}},margin:{get:function(){return k},set:function(a){k.top=void 0!==a.top?a.top:k.top,k.right=void 0!==a.right?a.right:k.right,k.bottom=void 0!==a.bottom?a.bottom:k.bottom,k.left=void 0!==a.left?a.left:k.left}},duration:{get:function(){return z},set:function(a){z=a,C.reset(z),e.duration(z),f.duration(z),g.duration(z)}},color:{get:function(){return n},set:function(b){n=a.utils.getColor(b),h.color(n)}},barColor:{get:function(){return e.barColor},set:function(a){e.barColor(a),h.color(function(a,b){return d3.rgb("#ccc").darker(1.5*b).toString()})}}}),a.utils.inheritOptions(b,e),a.utils.initOptions(b),b},a.models.multiChart=function(){"use strict";function b(j){return j.each(function(j){function k(a){var b=2===j[a.seriesIndex].yAxis?z:y;a.value=a.point.x,a.series={value:a.point.y,color:a.point.color},B.duration(100).valueFormatter(function(a,c){return b.tickFormat()(a,c)}).data(a).position(a.pos).hidden(!1)}function l(a){var b=2===j[a.seriesIndex].yAxis?z:y;a.point.x=v.x()(a.point),a.point.y=v.y()(a.point),B.duration(100).valueFormatter(function(a,c){return b.tickFormat()(a,c)}).data(a).position(a.pos).hidden(!1)}function n(a){var b=2===j[a.data.series].yAxis?z:y;a.value=t.x()(a.data),a.series={value:t.y()(a.data),color:a.color},B.duration(0).valueFormatter(function(a,c){return b.tickFormat()(a,c)}).data(a).hidden(!1)}var C=d3.select(this);a.utils.initSVG(C),b.update=function(){C.transition().call(b)},b.container=this;var D=a.utils.availableWidth(g,C,e),E=a.utils.availableHeight(h,C,e),F=j.filter(function(a){return"line"==a.type&&1==a.yAxis}),G=j.filter(function(a){return"line"==a.type&&2==a.yAxis}),H=j.filter(function(a){return"bar"==a.type&&1==a.yAxis}),I=j.filter(function(a){return"bar"==a.type&&2==a.yAxis}),J=j.filter(function(a){return"area"==a.type&&1==a.yAxis}),K=j.filter(function(a){return"area"==a.type&&2==a.yAxis});if(!(j&&j.length&&j.filter(function(a){return a.values.length}).length))return a.utils.noData(b,C),b;C.selectAll(".nv-noData").remove();var L=j.filter(function(a){return!a.disabled&&1==a.yAxis}).map(function(a){return a.values.map(function(a){return{x:a.x,y:a.y}})}),M=j.filter(function(a){return!a.disabled&&2==a.yAxis}).map(function(a){return a.values.map(function(a){return{x:a.x,y:a.y}})});o.domain(d3.extent(d3.merge(L.concat(M)),function(a){return a.x})).range([0,D]);var N=C.selectAll("g.wrap.multiChart").data([j]),O=N.enter().append("g").attr("class","wrap nvd3 multiChart").append("g");O.append("g").attr("class","nv-x nv-axis"),O.append("g").attr("class","nv-y1 nv-axis"),O.append("g").attr("class","nv-y2 nv-axis"),O.append("g").attr("class","lines1Wrap"),O.append("g").attr("class","lines2Wrap"),O.append("g").attr("class","bars1Wrap"),O.append("g").attr("class","bars2Wrap"),O.append("g").attr("class","stack1Wrap"),O.append("g").attr("class","stack2Wrap"),O.append("g").attr("class","legendWrap");var P=N.select("g"),Q=j.map(function(a,b){return j[b].color||f(a,b)});if(i){var R=A.align()?D/2:D,S=A.align()?R:0;A.width(R),A.color(Q),P.select(".legendWrap").datum(j.map(function(a){return a.originalKey=void 0===a.originalKey?a.key:a.originalKey,a.key=a.originalKey+(1==a.yAxis?"":" (right axis)"),a})).call(A),e.top!=A.height()&&(e.top=A.height(),E=a.utils.availableHeight(h,C,e)),P.select(".legendWrap").attr("transform","translate("+S+","+-e.top+")")}r.width(D).height(E).interpolate(m).color(Q.filter(function(a,b){return!j[b].disabled&&1==j[b].yAxis&&"line"==j[b].type})),s.width(D).height(E).interpolate(m).color(Q.filter(function(a,b){return!j[b].disabled&&2==j[b].yAxis&&"line"==j[b].type})),t.width(D).height(E).color(Q.filter(function(a,b){return!j[b].disabled&&1==j[b].yAxis&&"bar"==j[b].type})),u.width(D).height(E).color(Q.filter(function(a,b){return!j[b].disabled&&2==j[b].yAxis&&"bar"==j[b].type})),v.width(D).height(E).color(Q.filter(function(a,b){return!j[b].disabled&&1==j[b].yAxis&&"area"==j[b].type})),w.width(D).height(E).color(Q.filter(function(a,b){return!j[b].disabled&&2==j[b].yAxis&&"area"==j[b].type})),P.attr("transform","translate("+e.left+","+e.top+")");var T=P.select(".lines1Wrap").datum(F.filter(function(a){return!a.disabled})),U=P.select(".bars1Wrap").datum(H.filter(function(a){return!a.disabled})),V=P.select(".stack1Wrap").datum(J.filter(function(a){return!a.disabled})),W=P.select(".lines2Wrap").datum(G.filter(function(a){return!a.disabled})),X=P.select(".bars2Wrap").datum(I.filter(function(a){return!a.disabled})),Y=P.select(".stack2Wrap").datum(K.filter(function(a){return!a.disabled})),Z=J.length?J.map(function(a){return a.values}).reduce(function(a,b){return a.map(function(a,c){return{x:a.x,y:a.y+b[c].y}})}).concat([{x:0,y:0}]):[],$=K.length?K.map(function(a){return a.values}).reduce(function(a,b){return a.map(function(a,c){return{x:a.x,y:a.y+b[c].y}})}).concat([{x:0,y:0}]):[];p.domain(c||d3.extent(d3.merge(L).concat(Z),function(a){return a.y})).range([0,E]),q.domain(d||d3.extent(d3.merge(M).concat($),function(a){return a.y})).range([0,E]),r.yDomain(p.domain()),t.yDomain(p.domain()),v.yDomain(p.domain()),s.yDomain(q.domain()),u.yDomain(q.domain()),w.yDomain(q.domain()),J.length&&d3.transition(V).call(v),K.length&&d3.transition(Y).call(w),H.length&&d3.transition(U).call(t),I.length&&d3.transition(X).call(u),F.length&&d3.transition(T).call(r),G.length&&d3.transition(W).call(s),x._ticks(a.utils.calcTicksX(D/100,j)).tickSize(-E,0),P.select(".nv-x.nv-axis").attr("transform","translate(0,"+E+")"),d3.transition(P.select(".nv-x.nv-axis")).call(x),y._ticks(a.utils.calcTicksY(E/36,j)).tickSize(-D,0),d3.transition(P.select(".nv-y1.nv-axis")).call(y),z._ticks(a.utils.calcTicksY(E/36,j)).tickSize(-D,0),d3.transition(P.select(".nv-y2.nv-axis")).call(z),P.select(".nv-y1.nv-axis").classed("nv-disabled",L.length?!1:!0).attr("transform","translate("+o.range()[0]+",0)"),P.select(".nv-y2.nv-axis").classed("nv-disabled",M.length?!1:!0).attr("transform","translate("+o.range()[1]+",0)"),A.dispatch.on("stateChange",function(){b.update()}),r.dispatch.on("elementMouseover.tooltip",k),s.dispatch.on("elementMouseover.tooltip",k),r.dispatch.on("elementMouseout.tooltip",function(){B.hidden(!0)}),s.dispatch.on("elementMouseout.tooltip",function(){B.hidden(!0)}),v.dispatch.on("elementMouseover.tooltip",l),w.dispatch.on("elementMouseover.tooltip",l),v.dispatch.on("elementMouseout.tooltip",function(){B.hidden(!0)}),w.dispatch.on("elementMouseout.tooltip",function(){B.hidden(!0)}),t.dispatch.on("elementMouseover.tooltip",n),u.dispatch.on("elementMouseover.tooltip",n),t.dispatch.on("elementMouseout.tooltip",function(){B.hidden(!0)}),u.dispatch.on("elementMouseout.tooltip",function(){B.hidden(!0)}),t.dispatch.on("elementMousemove.tooltip",function(){B.position({top:d3.event.pageY,left:d3.event.pageX})()}),u.dispatch.on("elementMousemove.tooltip",function(){B.position({top:d3.event.pageY,left:d3.event.pageX})()})}),b}var c,d,e={top:30,right:20,bottom:50,left:60},f=a.utils.defaultColor(),g=null,h=null,i=!0,j=null,k=function(a){return a.x},l=function(a){return a.y},m="monotone",n=!0,o=d3.scale.linear(),p=d3.scale.linear(),q=d3.scale.linear(),r=a.models.line().yScale(p),s=a.models.line().yScale(q),t=a.models.multiBar().stacked(!1).yScale(p),u=a.models.multiBar().stacked(!1).yScale(q),v=a.models.stackedArea().yScale(p),w=a.models.stackedArea().yScale(q),x=a.models.axis().scale(o).orient("bottom").tickPadding(5),y=a.models.axis().scale(p).orient("left"),z=a.models.axis().scale(q).orient("right"),A=a.models.legend().height(30),B=a.models.tooltip(),C=d3.dispatch();return b.dispatch=C,b.lines1=r,b.lines2=s,b.bars1=t,b.bars2=u,b.stack1=v,b.stack2=w,b.xAxis=x,b.yAxis1=y,b.yAxis2=z,b.tooltip=B,b.options=a.utils.optionsFunc.bind(b),b._options=Object.create({},{width:{get:function(){return g},set:function(a){g=a}},height:{get:function(){return h},set:function(a){h=a}},showLegend:{get:function(){return i},set:function(a){i=a}},yDomain1:{get:function(){return c},set:function(a){c=a}},yDomain2:{get:function(){return d},set:function(a){d=a}},noData:{get:function(){return j},set:function(a){j=a}},interpolate:{get:function(){return m},set:function(a){m=a}},tooltips:{get:function(){return B.enabled()},set:function(b){a.deprecated("tooltips","use chart.tooltip.enabled() instead"),B.enabled(!!b)}},tooltipContent:{get:function(){return B.contentGenerator()},set:function(b){a.deprecated("tooltipContent","use chart.tooltip.contentGenerator() instead"),B.contentGenerator(b)}},margin:{get:function(){return e},set:function(a){e.top=void 0!==a.top?a.top:e.top,e.right=void 0!==a.right?a.right:e.right,e.bottom=void 0!==a.bottom?a.bottom:e.bottom,e.left=void 0!==a.left?a.left:e.left}},color:{get:function(){return f},set:function(b){f=a.utils.getColor(b)}},x:{get:function(){return k},set:function(a){k=a,r.x(a),s.x(a),t.x(a),u.x(a),v.x(a),w.x(a)}},y:{get:function(){return l},set:function(a){l=a,r.y(a),s.y(a),v.y(a),w.y(a),t.y(a),u.y(a)}},useVoronoi:{get:function(){return n},set:function(a){n=a,r.useVoronoi(a),s.useVoronoi(a),v.useVoronoi(a),w.useVoronoi(a)}}}),a.utils.initOptions(b),b},a.models.ohlcBar=function(){"use strict";function b(y){return y.each(function(b){k=d3.select(this);var y=a.utils.availableWidth(h,k,g),A=a.utils.availableHeight(i,k,g);a.utils.initSVG(k);var B=y/b[0].values.length*.9;l.domain(c||d3.extent(b[0].values.map(n).concat(t))),l.range(v?e||[.5*y/b[0].values.length,y*(b[0].values.length-.5)/b[0].values.length]:e||[5+B/2,y-B/2-5]),m.domain(d||[d3.min(b[0].values.map(s).concat(u)),d3.max(b[0].values.map(r).concat(u))]).range(f||[A,0]),l.domain()[0]===l.domain()[1]&&l.domain(l.domain()[0]?[l.domain()[0]-.01*l.domain()[0],l.domain()[1]+.01*l.domain()[1]]:[-1,1]),m.domain()[0]===m.domain()[1]&&m.domain(m.domain()[0]?[m.domain()[0]+.01*m.domain()[0],m.domain()[1]-.01*m.domain()[1]]:[-1,1]);var C=d3.select(this).selectAll("g.nv-wrap.nv-ohlcBar").data([b[0].values]),D=C.enter().append("g").attr("class","nvd3 nv-wrap nv-ohlcBar"),E=D.append("defs"),F=D.append("g"),G=C.select("g");F.append("g").attr("class","nv-ticks"),C.attr("transform","translate("+g.left+","+g.top+")"),k.on("click",function(a,b){z.chartClick({data:a,index:b,pos:d3.event,id:j})}),E.append("clipPath").attr("id","nv-chart-clip-path-"+j).append("rect"),C.select("#nv-chart-clip-path-"+j+" rect").attr("width",y).attr("height",A),G.attr("clip-path",w?"url(#nv-chart-clip-path-"+j+")":"");var H=C.select(".nv-ticks").selectAll(".nv-tick").data(function(a){return a});H.exit().remove(),H.enter().append("path").attr("class",function(a,b,c){return(p(a,b)>q(a,b)?"nv-tick negative":"nv-tick positive")+" nv-tick-"+c+"-"+b}).attr("d",function(a,b){return"m0,0l0,"+(m(p(a,b))-m(r(a,b)))+"l"+-B/2+",0l"+B/2+",0l0,"+(m(s(a,b))-m(p(a,b)))+"l0,"+(m(q(a,b))-m(s(a,b)))+"l"+B/2+",0l"+-B/2+",0z"}).attr("transform",function(a,b){return"translate("+l(n(a,b))+","+m(r(a,b))+")"}).attr("fill",function(){return x[0]}).attr("stroke",function(){return x[0]}).attr("x",0).attr("y",function(a,b){return m(Math.max(0,o(a,b)))}).attr("height",function(a,b){return Math.abs(m(o(a,b))-m(0))}),H.attr("class",function(a,b,c){return(p(a,b)>q(a,b)?"nv-tick negative":"nv-tick positive")+" nv-tick-"+c+"-"+b}),d3.transition(H).attr("transform",function(a,b){return"translate("+l(n(a,b))+","+m(r(a,b))+")"}).attr("d",function(a,c){var d=y/b[0].values.length*.9;return"m0,0l0,"+(m(p(a,c))-m(r(a,c)))+"l"+-d/2+",0l"+d/2+",0l0,"+(m(s(a,c))-m(p(a,c)))+"l0,"+(m(q(a,c))-m(s(a,c)))+"l"+d/2+",0l"+-d/2+",0z"})}),b}var c,d,e,f,g={top:0,right:0,bottom:0,left:0},h=null,i=null,j=Math.floor(1e4*Math.random()),k=null,l=d3.scale.linear(),m=d3.scale.linear(),n=function(a){return a.x},o=function(a){return a.y},p=function(a){return a.open},q=function(a){return a.close},r=function(a){return a.high},s=function(a){return a.low},t=[],u=[],v=!1,w=!0,x=a.utils.defaultColor(),y=!1,z=d3.dispatch("tooltipShow","tooltipHide","stateChange","changeState","renderEnd","chartClick","elementClick","elementDblClick","elementMouseover","elementMouseout","elementMousemove");return b.highlightPoint=function(a,c){b.clearHighlights(),k.select(".nv-ohlcBar .nv-tick-0-"+a).classed("hover",c)},b.clearHighlights=function(){k.select(".nv-ohlcBar .nv-tick.hover").classed("hover",!1)},b.dispatch=z,b.options=a.utils.optionsFunc.bind(b),b._options=Object.create({},{width:{get:function(){return h},set:function(a){h=a}},height:{get:function(){return i},set:function(a){i=a}},xScale:{get:function(){return l},set:function(a){l=a}},yScale:{get:function(){return m},set:function(a){m=a}},xDomain:{get:function(){return c},set:function(a){c=a}},yDomain:{get:function(){return d},set:function(a){d=a}},xRange:{get:function(){return e},set:function(a){e=a}},yRange:{get:function(){return f},set:function(a){f=a}},forceX:{get:function(){return t},set:function(a){t=a}},forceY:{get:function(){return u},set:function(a){u=a}},padData:{get:function(){return v},set:function(a){v=a}},clipEdge:{get:function(){return w},set:function(a){w=a}},id:{get:function(){return j},set:function(a){j=a}},interactive:{get:function(){return y},set:function(a){y=a}},x:{get:function(){return n},set:function(a){n=a}},y:{get:function(){return o},set:function(a){o=a}},open:{get:function(){return p()},set:function(a){p=a}},close:{get:function(){return q()},set:function(a){q=a}},high:{get:function(){return r},set:function(a){r=a}},low:{get:function(){return s},set:function(a){s=a}},margin:{get:function(){return g},set:function(a){g.top=void 0!=a.top?a.top:g.top,g.right=void 0!=a.right?a.right:g.right,g.bottom=void 0!=a.bottom?a.bottom:g.bottom,g.left=void 0!=a.left?a.left:g.left
    7: }},color:{get:function(){return x},set:function(b){x=a.utils.getColor(b)}}}),a.utils.initOptions(b),b},a.models.parallelCoordinates=function(){"use strict";function b(p){return p.each(function(b){function p(a){return F(h.map(function(b){if(isNaN(a[b])||isNaN(parseFloat(a[b]))){var c=g[b].domain(),d=g[b].range(),e=c[0]-(c[1]-c[0])/9;if(J.indexOf(b)<0){var h=d3.scale.linear().domain([e,c[1]]).range([x-12,d[1]]);g[b].brush.y(h),J.push(b)}return[f(b),g[b](e)]}return J.length>0?(D.style("display","inline"),E.style("display","inline")):(D.style("display","none"),E.style("display","none")),[f(b),g[b](a[b])]}))}function q(){var a=h.filter(function(a){return!g[a].brush.empty()}),b=a.map(function(a){return g[a].brush.extent()});k=[],a.forEach(function(a,c){k[c]={dimension:a,extent:b[c]}}),l=[],M.style("display",function(c){var d=a.every(function(a,d){return isNaN(c[a])&&b[d][0]==g[a].brush.y().domain()[0]?!0:b[d][0]<=c[a]&&c[a]<=b[d][1]});return d&&l.push(c),d?null:"none"}),o.brush({filters:k,active:l})}function r(a){m[a]=this.parentNode.__origin__=f(a),L.attr("visibility","hidden")}function s(a){m[a]=Math.min(w,Math.max(0,this.parentNode.__origin__+=d3.event.x)),M.attr("d",p),h.sort(function(a,b){return u(a)-u(b)}),f.domain(h),N.attr("transform",function(a){return"translate("+u(a)+")"})}function t(a){delete this.parentNode.__origin__,delete m[a],d3.select(this.parentNode).attr("transform","translate("+f(a)+")"),M.attr("d",p),L.attr("d",p).attr("visibility",null)}function u(a){var b=m[a];return null==b?f(a):b}var v=d3.select(this),w=a.utils.availableWidth(d,v,c),x=a.utils.availableHeight(e,v,c);a.utils.initSVG(v),l=b,f.rangePoints([0,w],1).domain(h);var y={};h.forEach(function(a){var c=d3.extent(b,function(b){return+b[a]});return y[a]=!1,void 0===c[0]&&(y[a]=!0,c[0]=0,c[1]=0),c[0]===c[1]&&(c[0]=c[0]-1,c[1]=c[1]+1),g[a]=d3.scale.linear().domain(c).range([.9*(x-12),0]),g[a].brush=d3.svg.brush().y(g[a]).on("brush",q),"name"!=a});var z=v.selectAll("g.nv-wrap.nv-parallelCoordinates").data([b]),A=z.enter().append("g").attr("class","nvd3 nv-wrap nv-parallelCoordinates"),B=A.append("g"),C=z.select("g");B.append("g").attr("class","nv-parallelCoordinates background"),B.append("g").attr("class","nv-parallelCoordinates foreground"),B.append("g").attr("class","nv-parallelCoordinates missingValuesline"),z.attr("transform","translate("+c.left+","+c.top+")");var D,E,F=d3.svg.line().interpolate("cardinal").tension(n),G=d3.svg.axis().orient("left"),H=d3.behavior.drag().on("dragstart",r).on("drag",s).on("dragend",t),I=f.range()[1]-f.range()[0],J=[],K=[0+I/2,x-12,w-I/2,x-12];D=z.select(".missingValuesline").selectAll("line").data([K]),D.enter().append("line"),D.exit().remove(),D.attr("x1",function(a){return a[0]}).attr("y1",function(a){return a[1]}).attr("x2",function(a){return a[2]}).attr("y2",function(a){return a[3]}),E=z.select(".missingValuesline").selectAll("text").data(["undefined values"]),E.append("text").data(["undefined values"]),E.enter().append("text"),E.exit().remove(),E.attr("y",x).attr("x",w-92-I/2).text(function(a){return a});var L=z.select(".background").selectAll("path").data(b);L.enter().append("path"),L.exit().remove(),L.attr("d",p);var M=z.select(".foreground").selectAll("path").data(b);M.enter().append("path"),M.exit().remove(),M.attr("d",p).attr("stroke",j),M.on("mouseover",function(a,b){d3.select(this).classed("hover",!0),o.elementMouseover({label:a.name,data:a.data,index:b,pos:[d3.mouse(this.parentNode)[0],d3.mouse(this.parentNode)[1]]})}),M.on("mouseout",function(a,b){d3.select(this).classed("hover",!1),o.elementMouseout({label:a.name,data:a.data,index:b})});var N=C.selectAll(".dimension").data(h),O=N.enter().append("g").attr("class","nv-parallelCoordinates dimension");O.append("g").attr("class","nv-parallelCoordinates nv-axis"),O.append("g").attr("class","nv-parallelCoordinates-brush"),O.append("text").attr("class","nv-parallelCoordinates nv-label"),N.attr("transform",function(a){return"translate("+f(a)+",0)"}),N.exit().remove(),N.select(".nv-label").style("cursor","move").attr("dy","-1em").attr("text-anchor","middle").text(String).on("mouseover",function(a){o.elementMouseover({dim:a,pos:[d3.mouse(this.parentNode.parentNode)[0],d3.mouse(this.parentNode.parentNode)[1]]})}).on("mouseout",function(a){o.elementMouseout({dim:a})}).call(H),N.select(".nv-axis").each(function(a,b){d3.select(this).call(G.scale(g[a]).tickFormat(d3.format(i[b])))}),N.select(".nv-parallelCoordinates-brush").each(function(a){d3.select(this).call(g[a].brush)}).selectAll("rect").attr("x",-8).attr("width",16)}),b}var c={top:30,right:0,bottom:10,left:0},d=null,e=null,f=d3.scale.ordinal(),g={},h=[],i=[],j=a.utils.defaultColor(),k=[],l=[],m=[],n=1,o=d3.dispatch("brush","elementMouseover","elementMouseout");return b.dispatch=o,b.options=a.utils.optionsFunc.bind(b),b._options=Object.create({},{width:{get:function(){return d},set:function(a){d=a}},height:{get:function(){return e},set:function(a){e=a}},dimensionNames:{get:function(){return h},set:function(a){h=a}},dimensionFormats:{get:function(){return i},set:function(a){i=a}},lineTension:{get:function(){return n},set:function(a){n=a}},dimensions:{get:function(){return h},set:function(b){a.deprecated("dimensions","use dimensionNames instead"),h=b}},margin:{get:function(){return c},set:function(a){c.top=void 0!==a.top?a.top:c.top,c.right=void 0!==a.right?a.right:c.right,c.bottom=void 0!==a.bottom?a.bottom:c.bottom,c.left=void 0!==a.left?a.left:c.left}},color:{get:function(){return j},set:function(b){j=a.utils.getColor(b)}}}),a.utils.initOptions(b),b},a.models.pie=function(){"use strict";function b(E){return D.reset(),E.each(function(b){function E(a,b){a.endAngle=isNaN(a.endAngle)?0:a.endAngle,a.startAngle=isNaN(a.startAngle)?0:a.startAngle,p||(a.innerRadius=0);var c=d3.interpolate(this._current,a);return this._current=c(0),function(a){return B[b](c(a))}}var F=d-c.left-c.right,G=e-c.top-c.bottom,H=Math.min(F,G)/2,I=[],J=[];if(i=d3.select(this),0===z.length)for(var K=H-H/5,L=y*H,M=0;M<b[0].length;M++)I.push(K),J.push(L);else I=z.map(function(a){return(a.outer-a.outer/5)*H}),J=z.map(function(a){return(a.inner-a.inner/5)*H}),y=d3.min(z.map(function(a){return a.inner-a.inner/5}));a.utils.initSVG(i);var N=i.selectAll(".nv-wrap.nv-pie").data(b),O=N.enter().append("g").attr("class","nvd3 nv-wrap nv-pie nv-chart-"+h),P=O.append("g"),Q=N.select("g"),R=P.append("g").attr("class","nv-pie");P.append("g").attr("class","nv-pieLabels"),N.attr("transform","translate("+c.left+","+c.top+")"),Q.select(".nv-pie").attr("transform","translate("+F/2+","+G/2+")"),Q.select(".nv-pieLabels").attr("transform","translate("+F/2+","+G/2+")"),i.on("click",function(a,b){A.chartClick({data:a,index:b,pos:d3.event,id:h})}),B=[],C=[];for(var M=0;M<b[0].length;M++){var S=d3.svg.arc().outerRadius(I[M]),T=d3.svg.arc().outerRadius(I[M]+5);u!==!1&&(S.startAngle(u),T.startAngle(u)),w!==!1&&(S.endAngle(w),T.endAngle(w)),p&&(S.innerRadius(J[M]),T.innerRadius(J[M])),S.cornerRadius&&x&&(S.cornerRadius(x),T.cornerRadius(x)),B.push(S),C.push(T)}var U=d3.layout.pie().sort(null).value(function(a){return a.disabled?0:g(a)});U.padAngle&&v&&U.padAngle(v),p&&q&&(R.append("text").attr("class","nv-pie-title"),N.select(".nv-pie-title").style("text-anchor","middle").text(function(){return q}).style("font-size",Math.min(F,G)*y*2/(q.length+2)+"px").attr("dy","0.35em").attr("transform",function(){return"translate(0, "+s+")"}));var V=N.select(".nv-pie").selectAll(".nv-slice").data(U),W=N.select(".nv-pieLabels").selectAll(".nv-label").data(U);V.exit().remove(),W.exit().remove();var X=V.enter().append("g");X.attr("class","nv-slice"),X.on("mouseover",function(a,b){d3.select(this).classed("hover",!0),r&&d3.select(this).select("path").transition().duration(70).attr("d",C[b]),A.elementMouseover({data:a.data,index:b,color:d3.select(this).style("fill")})}),X.on("mouseout",function(a,b){d3.select(this).classed("hover",!1),r&&d3.select(this).select("path").transition().duration(50).attr("d",B[b]),A.elementMouseout({data:a.data,index:b})}),X.on("mousemove",function(a,b){A.elementMousemove({data:a.data,index:b})}),X.on("click",function(a,b){A.elementClick({data:a.data,index:b,color:d3.select(this).style("fill")})}),X.on("dblclick",function(a,b){A.elementDblClick({data:a.data,index:b,color:d3.select(this).style("fill")})}),V.attr("fill",function(a,b){return j(a.data,b)}),V.attr("stroke",function(a,b){return j(a.data,b)});X.append("path").each(function(a){this._current=a});if(V.select("path").transition().attr("d",function(a,b){return B[b](a)}).attrTween("d",E),l){for(var Y=[],M=0;M<b[0].length;M++)Y.push(B[M]),m?p&&(Y[M]=d3.svg.arc().outerRadius(B[M].outerRadius()),u!==!1&&Y[M].startAngle(u),w!==!1&&Y[M].endAngle(w)):p||Y[M].innerRadius(0);W.enter().append("g").classed("nv-label",!0).each(function(a){var b=d3.select(this);b.attr("transform",function(a,b){if(t){a.outerRadius=I[b]+10,a.innerRadius=I[b]+15;var c=(a.startAngle+a.endAngle)/2*(180/Math.PI);return(a.startAngle+a.endAngle)/2<Math.PI?c-=90:c+=90,"translate("+Y[b].centroid(a)+") rotate("+c+")"}return a.outerRadius=H+10,a.innerRadius=H+15,"translate("+Y[b].centroid(a)+")"}),b.append("rect").style("stroke","#fff").style("fill","#fff").attr("rx",3).attr("ry",3),b.append("text").style("text-anchor",t?(a.startAngle+a.endAngle)/2<Math.PI?"start":"end":"middle").style("fill","#000")});var Z={},$=14,_=140,ab=function(a){return Math.floor(a[0]/_)*_+","+Math.floor(a[1]/$)*$};W.watchTransition(D,"pie labels").attr("transform",function(a,b){if(t){a.outerRadius=I[b]+10,a.innerRadius=I[b]+15;var c=(a.startAngle+a.endAngle)/2*(180/Math.PI);return(a.startAngle+a.endAngle)/2<Math.PI?c-=90:c+=90,"translate("+Y[b].centroid(a)+") rotate("+c+")"}a.outerRadius=H+10,a.innerRadius=H+15;var d=Y[b].centroid(a);if(a.value){var e=ab(d);Z[e]&&(d[1]-=$),Z[ab(d)]=!0}return"translate("+d+")"}),W.select(".nv-label text").style("text-anchor",function(a){return t?(a.startAngle+a.endAngle)/2<Math.PI?"start":"end":"middle"}).text(function(a,b){var c=(a.endAngle-a.startAngle)/(2*Math.PI),d="";if(!a.value||o>c)return"";if("function"==typeof n)d=n(a,b,{key:f(a.data),value:g(a.data),percent:k(c)});else switch(n){case"key":d=f(a.data);break;case"value":d=k(g(a.data));break;case"percent":d=d3.format("%")(c)}return d})}}),D.renderEnd("pie immediate"),b}var c={top:0,right:0,bottom:0,left:0},d=500,e=500,f=function(a){return a.x},g=function(a){return a.y},h=Math.floor(1e4*Math.random()),i=null,j=a.utils.defaultColor(),k=d3.format(",.2f"),l=!0,m=!1,n="key",o=.02,p=!1,q=!1,r=!0,s=0,t=!1,u=!1,v=!1,w=!1,x=0,y=.5,z=[],A=d3.dispatch("chartClick","elementClick","elementDblClick","elementMouseover","elementMouseout","elementMousemove","renderEnd"),B=[],C=[],D=a.utils.renderWatch(A);return b.dispatch=A,b.options=a.utils.optionsFunc.bind(b),b._options=Object.create({},{arcsRadius:{get:function(){return z},set:function(a){z=a}},width:{get:function(){return d},set:function(a){d=a}},height:{get:function(){return e},set:function(a){e=a}},showLabels:{get:function(){return l},set:function(a){l=a}},title:{get:function(){return q},set:function(a){q=a}},titleOffset:{get:function(){return s},set:function(a){s=a}},labelThreshold:{get:function(){return o},set:function(a){o=a}},valueFormat:{get:function(){return k},set:function(a){k=a}},x:{get:function(){return f},set:function(a){f=a}},id:{get:function(){return h},set:function(a){h=a}},endAngle:{get:function(){return w},set:function(a){w=a}},startAngle:{get:function(){return u},set:function(a){u=a}},padAngle:{get:function(){return v},set:function(a){v=a}},cornerRadius:{get:function(){return x},set:function(a){x=a}},donutRatio:{get:function(){return y},set:function(a){y=a}},labelsOutside:{get:function(){return m},set:function(a){m=a}},labelSunbeamLayout:{get:function(){return t},set:function(a){t=a}},donut:{get:function(){return p},set:function(a){p=a}},growOnHover:{get:function(){return r},set:function(a){r=a}},pieLabelsOutside:{get:function(){return m},set:function(b){m=b,a.deprecated("pieLabelsOutside","use labelsOutside instead")}},donutLabelsOutside:{get:function(){return m},set:function(b){m=b,a.deprecated("donutLabelsOutside","use labelsOutside instead")}},labelFormat:{get:function(){return k},set:function(b){k=b,a.deprecated("labelFormat","use valueFormat instead")}},margin:{get:function(){return c},set:function(a){c.top="undefined"!=typeof a.top?a.top:c.top,c.right="undefined"!=typeof a.right?a.right:c.right,c.bottom="undefined"!=typeof a.bottom?a.bottom:c.bottom,c.left="undefined"!=typeof a.left?a.left:c.left}},y:{get:function(){return g},set:function(a){g=d3.functor(a)}},color:{get:function(){return j},set:function(b){j=a.utils.getColor(b)}},labelType:{get:function(){return n},set:function(a){n=a||"key"}}}),a.utils.initOptions(b),b},a.models.pieChart=function(){"use strict";function b(e){return q.reset(),q.models(c),e.each(function(e){var k=d3.select(this);a.utils.initSVG(k);var n=a.utils.availableWidth(g,k,f),o=a.utils.availableHeight(h,k,f);if(b.update=function(){k.transition().call(b)},b.container=this,l.setter(s(e),b.update).getter(r(e)).update(),l.disabled=e.map(function(a){return!!a.disabled}),!m){var q;m={};for(q in l)m[q]=l[q]instanceof Array?l[q].slice(0):l[q]}if(!e||!e.length)return a.utils.noData(b,k),b;k.selectAll(".nv-noData").remove();var t=k.selectAll("g.nv-wrap.nv-pieChart").data([e]),u=t.enter().append("g").attr("class","nvd3 nv-wrap nv-pieChart").append("g"),v=t.select("g");if(u.append("g").attr("class","nv-pieWrap"),u.append("g").attr("class","nv-legendWrap"),i)if("top"===j)d.width(n).key(c.x()),t.select(".nv-legendWrap").datum(e).call(d),f.top!=d.height()&&(f.top=d.height(),o=a.utils.availableHeight(h,k,f)),t.select(".nv-legendWrap").attr("transform","translate(0,"+-f.top+")");else if("right"===j){var w=a.models.legend().width();w>n/2&&(w=n/2),d.height(o).key(c.x()),d.width(w),n-=d.width(),t.select(".nv-legendWrap").datum(e).call(d).attr("transform","translate("+n+",0)")}t.attr("transform","translate("+f.left+","+f.top+")"),c.width(n).height(o);var x=v.select(".nv-pieWrap").datum([e]);d3.transition(x).call(c),d.dispatch.on("stateChange",function(a){for(var c in a)l[c]=a[c];p.stateChange(l),b.update()}),p.on("changeState",function(a){"undefined"!=typeof a.disabled&&(e.forEach(function(b,c){b.disabled=a.disabled[c]}),l.disabled=a.disabled),b.update()})}),q.renderEnd("pieChart immediate"),b}var c=a.models.pie(),d=a.models.legend(),e=a.models.tooltip(),f={top:30,right:20,bottom:20,left:20},g=null,h=null,i=!0,j="top",k=a.utils.defaultColor(),l=a.utils.state(),m=null,n=null,o=250,p=d3.dispatch("tooltipShow","tooltipHide","stateChange","changeState","renderEnd");e.headerEnabled(!1).duration(0).valueFormatter(function(a,b){return c.valueFormat()(a,b)});var q=a.utils.renderWatch(p),r=function(a){return function(){return{active:a.map(function(a){return!a.disabled})}}},s=function(a){return function(b){void 0!==b.active&&a.forEach(function(a,c){a.disabled=!b.active[c]})}};return c.dispatch.on("elementMouseover.tooltip",function(a){a.series={key:b.x()(a.data),value:b.y()(a.data),color:a.color},e.data(a).hidden(!1)}),c.dispatch.on("elementMouseout.tooltip",function(){e.hidden(!0)}),c.dispatch.on("elementMousemove.tooltip",function(){e.position({top:d3.event.pageY,left:d3.event.pageX})()}),b.legend=d,b.dispatch=p,b.pie=c,b.tooltip=e,b.options=a.utils.optionsFunc.bind(b),b._options=Object.create({},{noData:{get:function(){return n},set:function(a){n=a}},showLegend:{get:function(){return i},set:function(a){i=a}},legendPosition:{get:function(){return j},set:function(a){j=a}},defaultState:{get:function(){return m},set:function(a){m=a}},tooltips:{get:function(){return e.enabled()},set:function(b){a.deprecated("tooltips","use chart.tooltip.enabled() instead"),e.enabled(!!b)}},tooltipContent:{get:function(){return e.contentGenerator()},set:function(b){a.deprecated("tooltipContent","use chart.tooltip.contentGenerator() instead"),e.contentGenerator(b)}},color:{get:function(){return k},set:function(a){k=a,d.color(k),c.color(k)}},duration:{get:function(){return o},set:function(a){o=a,q.reset(o)}},margin:{get:function(){return f},set:function(a){f.top=void 0!==a.top?a.top:f.top,f.right=void 0!==a.right?a.right:f.right,f.bottom=void 0!==a.bottom?a.bottom:f.bottom,f.left=void 0!==a.left?a.left:f.left}}}),a.utils.inheritOptions(b,c),a.utils.initOptions(b),b},a.models.scatter=function(){"use strict";function b(N){return P.reset(),N.each(function(b){function N(){if(O=!1,!w)return!1;if(M===!0){var a=d3.merge(b.map(function(a,b){return a.values.map(function(a,c){var d=p(a,c),e=q(a,c);return[m(d)+1e-4*Math.random(),n(e)+1e-4*Math.random(),b,c,a]}).filter(function(a,b){return x(a[4],b)})}));if(0==a.length)return!1;a.length<3&&(a.push([m.range()[0]-20,n.range()[0]-20,null,null]),a.push([m.range()[1]+20,n.range()[1]+20,null,null]),a.push([m.range()[0]-20,n.range()[0]+20,null,null]),a.push([m.range()[1]+20,n.range()[1]-20,null,null]));var c=d3.geom.polygon([[-10,-10],[-10,i+10],[h+10,i+10],[h+10,-10]]),d=d3.geom.voronoi(a).map(function(b,d){return{data:c.clip(b),series:a[d][2],point:a[d][3]}});U.select(".nv-point-paths").selectAll("path").remove();var e=U.select(".nv-point-paths").selectAll("path").data(d),f=e.enter().append("svg:path").attr("d",function(a){return a&&a.data&&0!==a.data.length?"M"+a.data.join(",")+"Z":"M 0 0"}).attr("id",function(a,b){return"nv-path-"+b}).attr("clip-path",function(a,b){return"url(#nv-clip-"+b+")"});C&&f.style("fill",d3.rgb(230,230,230)).style("fill-opacity",.4).style("stroke-opacity",1).style("stroke",d3.rgb(200,200,200)),B&&(U.select(".nv-point-clips").selectAll("clipPath").remove(),U.select(".nv-point-clips").selectAll("clipPath").data(a).enter().append("svg:clipPath").attr("id",function(a,b){return"nv-clip-"+b}).append("svg:circle").attr("cx",function(a){return a[0]}).attr("cy",function(a){return a[1]}).attr("r",D));var k=function(a,c){if(O)return 0;var d=b[a.series];if(void 0!==d){var e=d.values[a.point];e.color=j(d,a.series),e.x=p(e),e.y=q(e);var f=l.node().getBoundingClientRect(),h=window.pageYOffset||document.documentElement.scrollTop,i=window.pageXOffset||document.documentElement.scrollLeft,k={left:m(p(e,a.point))+f.left+i+g.left+10,top:n(q(e,a.point))+f.top+h+g.top+10};c({point:e,series:d,pos:k,seriesIndex:a.series,pointIndex:a.point})}};e.on("click",function(a){k(a,L.elementClick)}).on("dblclick",function(a){k(a,L.elementDblClick)}).on("mouseover",function(a){k(a,L.elementMouseover)}).on("mouseout",function(a){k(a,L.elementMouseout)})}else U.select(".nv-groups").selectAll(".nv-group").selectAll(".nv-point").on("click",function(a,c){if(O||!b[a.series])return 0;var d=b[a.series],e=d.values[c];L.elementClick({point:e,series:d,pos:[m(p(e,c))+g.left,n(q(e,c))+g.top],seriesIndex:a.series,pointIndex:c})}).on("dblclick",function(a,c){if(O||!b[a.series])return 0;var d=b[a.series],e=d.values[c];L.elementDblClick({point:e,series:d,pos:[m(p(e,c))+g.left,n(q(e,c))+g.top],seriesIndex:a.series,pointIndex:c})}).on("mouseover",function(a,c){if(O||!b[a.series])return 0;var d=b[a.series],e=d.values[c];L.elementMouseover({point:e,series:d,pos:[m(p(e,c))+g.left,n(q(e,c))+g.top],seriesIndex:a.series,pointIndex:c,color:j(a,c)})}).on("mouseout",function(a,c){if(O||!b[a.series])return 0;var d=b[a.series],e=d.values[c];L.elementMouseout({point:e,series:d,seriesIndex:a.series,pointIndex:c,color:j(a,c)})})}l=d3.select(this);var R=a.utils.availableWidth(h,l,g),S=a.utils.availableHeight(i,l,g);a.utils.initSVG(l),b.forEach(function(a,b){a.values.forEach(function(a){a.series=b})});var T=E&&F&&I?[]:d3.merge(b.map(function(a){return a.values.map(function(a,b){return{x:p(a,b),y:q(a,b),size:r(a,b)}})}));m.domain(E||d3.extent(T.map(function(a){return a.x}).concat(t))),m.range(y&&b[0]?G||[(R*z+R)/(2*b[0].values.length),R-R*(1+z)/(2*b[0].values.length)]:G||[0,R]),n.domain(F||d3.extent(T.map(function(a){return a.y}).concat(u))).range(H||[S,0]),o.domain(I||d3.extent(T.map(function(a){return a.size}).concat(v))).range(J||Q),K=m.domain()[0]===m.domain()[1]||n.domain()[0]===n.domain()[1],m.domain()[0]===m.domain()[1]&&m.domain(m.domain()[0]?[m.domain()[0]-.01*m.domain()[0],m.domain()[1]+.01*m.domain()[1]]:[-1,1]),n.domain()[0]===n.domain()[1]&&n.domain(n.domain()[0]?[n.domain()[0]-.01*n.domain()[0],n.domain()[1]+.01*n.domain()[1]]:[-1,1]),isNaN(m.domain()[0])&&m.domain([-1,1]),isNaN(n.domain()[0])&&n.domain([-1,1]),c=c||m,d=d||n,e=e||o;var U=l.selectAll("g.nv-wrap.nv-scatter").data([b]),V=U.enter().append("g").attr("class","nvd3 nv-wrap nv-scatter nv-chart-"+k),W=V.append("defs"),X=V.append("g"),Y=U.select("g");U.classed("nv-single-point",K),X.append("g").attr("class","nv-groups"),X.append("g").attr("class","nv-point-paths"),V.append("g").attr("class","nv-point-clips"),U.attr("transform","translate("+g.left+","+g.top+")"),W.append("clipPath").attr("id","nv-edge-clip-"+k).append("rect"),U.select("#nv-edge-clip-"+k+" rect").attr("width",R).attr("height",S>0?S:0),Y.attr("clip-path",A?"url(#nv-edge-clip-"+k+")":""),O=!0;var Z=U.select(".nv-groups").selectAll(".nv-group").data(function(a){return a},function(a){return a.key});Z.enter().append("g").style("stroke-opacity",1e-6).style("fill-opacity",1e-6),Z.exit().remove(),Z.attr("class",function(a,b){return"nv-group nv-series-"+b}).classed("hover",function(a){return a.hover}),Z.watchTransition(P,"scatter: groups").style("fill",function(a,b){return j(a,b)}).style("stroke",function(a,b){return j(a,b)}).style("stroke-opacity",1).style("fill-opacity",.5);var $=Z.selectAll("path.nv-point").data(function(a){return a.values.map(function(a,b){return[a,b]}).filter(function(a,b){return x(a[0],b)})});$.enter().append("path").style("fill",function(a){return a.color}).style("stroke",function(a){return a.color}).attr("transform",function(a){return"translate("+c(p(a[0],a[1]))+","+d(q(a[0],a[1]))+")"}).attr("d",a.utils.symbol().type(function(a){return s(a[0])}).size(function(a){return o(r(a[0],a[1]))})),$.exit().remove(),Z.exit().selectAll("path.nv-point").watchTransition(P,"scatter exit").attr("transform",function(a){return"translate("+m(p(a[0],a[1]))+","+n(q(a[0],a[1]))+")"}).remove(),$.each(function(a){d3.select(this).classed("nv-point",!0).classed("nv-point-"+a[1],!0).classed("nv-noninteractive",!w).classed("hover",!1)}),$.watchTransition(P,"scatter points").attr("transform",function(a){return"translate("+m(p(a[0],a[1]))+","+n(q(a[0],a[1]))+")"}).attr("d",a.utils.symbol().type(function(a){return s(a[0])}).size(function(a){return o(r(a[0],a[1]))})),clearTimeout(f),f=setTimeout(N,300),c=m.copy(),d=n.copy(),e=o.copy()}),P.renderEnd("scatter immediate"),b}var c,d,e,f,g={top:0,right:0,bottom:0,left:0},h=null,i=null,j=a.utils.defaultColor(),k=Math.floor(1e5*Math.random()),l=null,m=d3.scale.linear(),n=d3.scale.linear(),o=d3.scale.linear(),p=function(a){return a.x},q=function(a){return a.y},r=function(a){return a.size||1},s=function(a){return a.shape||"circle"},t=[],u=[],v=[],w=!0,x=function(a){return!a.notActive},y=!1,z=.1,A=!1,B=!0,C=!1,D=function(){return 25},E=null,F=null,G=null,H=null,I=null,J=null,K=!1,L=d3.dispatch("elementClick","elementDblClick","elementMouseover","elementMouseout","renderEnd"),M=!0,N=250,O=!1,P=a.utils.renderWatch(L,N),Q=[16,256];return b.dispatch=L,b.options=a.utils.optionsFunc.bind(b),b._calls=new function(){this.clearHighlights=function(){return a.dom.write(function(){l.selectAll(".nv-point.hover").classed("hover",!1)}),null},this.highlightPoint=function(b,c,d){a.dom.write(function(){l.select(" .nv-series-"+b+" .nv-point-"+c).classed("hover",d)})}},L.on("elementMouseover.point",function(a){w&&b._calls.highlightPoint(a.seriesIndex,a.pointIndex,!0)}),L.on("elementMouseout.point",function(a){w&&b._calls.highlightPoint(a.seriesIndex,a.pointIndex,!1)}),b._options=Object.create({},{width:{get:function(){return h},set:function(a){h=a}},height:{get:function(){return i},set:function(a){i=a}},xScale:{get:function(){return m},set:function(a){m=a}},yScale:{get:function(){return n},set:function(a){n=a}},pointScale:{get:function(){return o},set:function(a){o=a}},xDomain:{get:function(){return E},set:function(a){E=a}},yDomain:{get:function(){return F},set:function(a){F=a}},pointDomain:{get:function(){return I},set:function(a){I=a}},xRange:{get:function(){return G},set:function(a){G=a}},yRange:{get:function(){return H},set:function(a){H=a}},pointRange:{get:function(){return J},set:function(a){J=a}},forceX:{get:function(){return t},set:function(a){t=a}},forceY:{get:function(){return u},set:function(a){u=a}},forcePoint:{get:function(){return v},set:function(a){v=a}},interactive:{get:function(){return w},set:function(a){w=a}},pointActive:{get:function(){return x},set:function(a){x=a}},padDataOuter:{get:function(){return z},set:function(a){z=a}},padData:{get:function(){return y},set:function(a){y=a}},clipEdge:{get:function(){return A},set:function(a){A=a}},clipVoronoi:{get:function(){return B},set:function(a){B=a}},clipRadius:{get:function(){return D},set:function(a){D=a}},showVoronoi:{get:function(){return C},set:function(a){C=a}},id:{get:function(){return k},set:function(a){k=a}},x:{get:function(){return p},set:function(a){p=d3.functor(a)}},y:{get:function(){return q},set:function(a){q=d3.functor(a)}},pointSize:{get:function(){return r},set:function(a){r=d3.functor(a)}},pointShape:{get:function(){return s},set:function(a){s=d3.functor(a)}},margin:{get:function(){return g},set:function(a){g.top=void 0!==a.top?a.top:g.top,g.right=void 0!==a.right?a.right:g.right,g.bottom=void 0!==a.bottom?a.bottom:g.bottom,g.left=void 0!==a.left?a.left:g.left}},duration:{get:function(){return N},set:function(a){N=a,P.reset(N)}},color:{get:function(){return j},set:function(b){j=a.utils.getColor(b)}},useVoronoi:{get:function(){return M},set:function(a){M=a,M===!1&&(B=!1)}}}),a.utils.initOptions(b),b},a.models.scatterChart=function(){"use strict";function b(z){return D.reset(),D.models(c),t&&D.models(d),u&&D.models(e),q&&D.models(g),r&&D.models(h),z.each(function(z){m=d3.select(this),a.utils.initSVG(m);var G=a.utils.availableWidth(k,m,j),H=a.utils.availableHeight(l,m,j);if(b.update=function(){0===A?m.call(b):m.transition().duration(A).call(b)},b.container=this,w.setter(F(z),b.update).getter(E(z)).update(),w.disabled=z.map(function(a){return!!a.disabled}),!x){var I;x={};for(I in w)x[I]=w[I]instanceof Array?w[I].slice(0):w[I]}if(!(z&&z.length&&z.filter(function(a){return a.values.length}).length))return a.utils.noData(b,m),D.renderEnd("scatter immediate"),b;m.selectAll(".nv-noData").remove(),o=c.xScale(),p=c.yScale();var J=m.selectAll("g.nv-wrap.nv-scatterChart").data([z]),K=J.enter().append("g").attr("class","nvd3 nv-wrap nv-scatterChart nv-chart-"+c.id()),L=K.append("g"),M=J.select("g");if(L.append("rect").attr("class","nvd3 nv-background").style("pointer-events","none"),L.append("g").attr("class","nv-x nv-axis"),L.append("g").attr("class","nv-y nv-axis"),L.append("g").attr("class","nv-scatterWrap"),L.append("g").attr("class","nv-regressionLinesWrap"),L.append("g").attr("class","nv-distWrap"),L.append("g").attr("class","nv-legendWrap"),v&&M.select(".nv-y.nv-axis").attr("transform","translate("+G+",0)"),s){var N=G;f.width(N),J.select(".nv-legendWrap").datum(z).call(f),j.top!=f.height()&&(j.top=f.height(),H=a.utils.availableHeight(l,m,j)),J.select(".nv-legendWrap").attr("transform","translate(0,"+-j.top+")")}J.attr("transform","translate("+j.left+","+j.top+")"),c.width(G).height(H).color(z.map(function(a,b){return a.color=a.color||n(a,b),a.color}).filter(function(a,b){return!z[b].disabled})),J.select(".nv-scatterWrap").datum(z.filter(function(a){return!a.disabled})).call(c),J.select(".nv-regressionLinesWrap").attr("clip-path","url(#nv-edge-clip-"+c.id()+")");var O=J.select(".nv-regressionLinesWrap").selectAll(".nv-regLines").data(function(a){return a});O.enter().append("g").attr("class","nv-regLines");var P=O.selectAll(".nv-regLine").data(function(a){return[a]});P.enter().append("line").attr("class","nv-regLine").style("stroke-opacity",0),P.filter(function(a){return a.intercept&&a.slope}).watchTransition(D,"scatterPlusLineChart: regline").attr("x1",o.range()[0]).attr("x2",o.range()[1]).attr("y1",function(a){return p(o.domain()[0]*a.slope+a.intercept)}).attr("y2",function(a){return p(o.domain()[1]*a.slope+a.intercept)}).style("stroke",function(a,b,c){return n(a,c)}).style("stroke-opacity",function(a){return a.disabled||"undefined"==typeof a.slope||"undefined"==typeof a.intercept?0:1}),t&&(d.scale(o)._ticks(a.utils.calcTicksX(G/100,z)).tickSize(-H,0),M.select(".nv-x.nv-axis").attr("transform","translate(0,"+p.range()[0]+")").call(d)),u&&(e.scale(p)._ticks(a.utils.calcTicksY(H/36,z)).tickSize(-G,0),M.select(".nv-y.nv-axis").call(e)),q&&(g.getData(c.x()).scale(o).width(G).color(z.map(function(a,b){return a.color||n(a,b)}).filter(function(a,b){return!z[b].disabled})),L.select(".nv-distWrap").append("g").attr("class","nv-distributionX"),M.select(".nv-distributionX").attr("transform","translate(0,"+p.range()[0]+")").datum(z.filter(function(a){return!a.disabled})).call(g)),r&&(h.getData(c.y()).scale(p).width(H).color(z.map(function(a,b){return a.color||n(a,b)}).filter(function(a,b){return!z[b].disabled})),L.select(".nv-distWrap").append("g").attr("class","nv-distributionY"),M.select(".nv-distributionY").attr("transform","translate("+(v?G:-h.size())+",0)").datum(z.filter(function(a){return!a.disabled})).call(h)),f.dispatch.on("stateChange",function(a){for(var c in a)w[c]=a[c];y.stateChange(w),b.update()}),y.on("changeState",function(a){"undefined"!=typeof a.disabled&&(z.forEach(function(b,c){b.disabled=a.disabled[c]}),w.disabled=a.disabled),b.update()}),c.dispatch.on("elementMouseout.tooltip",function(a){i.hidden(!0),m.select(".nv-chart-"+c.id()+" .nv-series-"+a.seriesIndex+" .nv-distx-"+a.pointIndex).attr("y1",0),m.select(".nv-chart-"+c.id()+" .nv-series-"+a.seriesIndex+" .nv-disty-"+a.pointIndex).attr("x2",h.size())}),c.dispatch.on("elementMouseover.tooltip",function(a){m.select(".nv-series-"+a.seriesIndex+" .nv-distx-"+a.pointIndex).attr("y1",a.pos.top-H-j.top),m.select(".nv-series-"+a.seriesIndex+" .nv-disty-"+a.pointIndex).attr("x2",a.pos.left+g.size()-j.left),i.position(a.pos).data(a).hidden(!1)}),B=o.copy(),C=p.copy()}),D.renderEnd("scatter with line immediate"),b}var c=a.models.scatter(),d=a.models.axis(),e=a.models.axis(),f=a.models.legend(),g=a.models.distribution(),h=a.models.distribution(),i=a.models.tooltip(),j={top:30,right:20,bottom:50,left:75},k=null,l=null,m=null,n=a.utils.defaultColor(),o=c.xScale(),p=c.yScale(),q=!1,r=!1,s=!0,t=!0,u=!0,v=!1,w=a.utils.state(),x=null,y=d3.dispatch("stateChange","changeState","renderEnd"),z=null,A=250;c.xScale(o).yScale(p),d.orient("bottom").tickPadding(10),e.orient(v?"right":"left").tickPadding(10),g.axis("x"),h.axis("y"),i.headerFormatter(function(a,b){return d.tickFormat()(a,b)}).valueFormatter(function(a,b){return e.tickFormat()(a,b)});var B,C,D=a.utils.renderWatch(y,A),E=function(a){return function(){return{active:a.map(function(a){return!a.disabled})}}},F=function(a){return function(b){void 0!==b.active&&a.forEach(function(a,c){a.disabled=!b.active[c]})}};return b.dispatch=y,b.scatter=c,b.legend=f,b.xAxis=d,b.yAxis=e,b.distX=g,b.distY=h,b.tooltip=i,b.options=a.utils.optionsFunc.bind(b),b._options=Object.create({},{width:{get:function(){return k},set:function(a){k=a}},height:{get:function(){return l},set:function(a){l=a}},container:{get:function(){return m},set:function(a){m=a}},showDistX:{get:function(){return q},set:function(a){q=a}},showDistY:{get:function(){return r},set:function(a){r=a}},showLegend:{get:function(){return s},set:function(a){s=a}},showXAxis:{get:function(){return t},set:function(a){t=a}},showYAxis:{get:function(){return u},set:function(a){u=a}},defaultState:{get:function(){return x},set:function(a){x=a}},noData:{get:function(){return z},set:function(a){z=a}},duration:{get:function(){return A},set:function(a){A=a}},tooltips:{get:function(){return i.enabled()},set:function(b){a.deprecated("tooltips","use chart.tooltip.enabled() instead"),i.enabled(!!b)
    8: }},tooltipContent:{get:function(){return i.contentGenerator()},set:function(b){a.deprecated("tooltipContent","use chart.tooltip.contentGenerator() instead"),i.contentGenerator(b)}},tooltipXContent:{get:function(){return i.contentGenerator()},set:function(){a.deprecated("tooltipContent","This option is removed, put values into main tooltip.")}},tooltipYContent:{get:function(){return i.contentGenerator()},set:function(){a.deprecated("tooltipContent","This option is removed, put values into main tooltip.")}},margin:{get:function(){return j},set:function(a){j.top=void 0!==a.top?a.top:j.top,j.right=void 0!==a.right?a.right:j.right,j.bottom=void 0!==a.bottom?a.bottom:j.bottom,j.left=void 0!==a.left?a.left:j.left}},rightAlignYAxis:{get:function(){return v},set:function(a){v=a,e.orient(a?"right":"left")}},color:{get:function(){return n},set:function(b){n=a.utils.getColor(b),f.color(n),g.color(n),h.color(n)}}}),a.utils.inheritOptions(b,c),a.utils.initOptions(b),b},a.models.sparkline=function(){"use strict";function b(k){return k.each(function(b){var k=h-g.left-g.right,q=i-g.top-g.bottom;j=d3.select(this),a.utils.initSVG(j),l.domain(c||d3.extent(b,n)).range(e||[0,k]),m.domain(d||d3.extent(b,o)).range(f||[q,0]);{var r=j.selectAll("g.nv-wrap.nv-sparkline").data([b]),s=r.enter().append("g").attr("class","nvd3 nv-wrap nv-sparkline");s.append("g"),r.select("g")}r.attr("transform","translate("+g.left+","+g.top+")");var t=r.selectAll("path").data(function(a){return[a]});t.enter().append("path"),t.exit().remove(),t.style("stroke",function(a,b){return a.color||p(a,b)}).attr("d",d3.svg.line().x(function(a,b){return l(n(a,b))}).y(function(a,b){return m(o(a,b))}));var u=r.selectAll("circle.nv-point").data(function(a){function b(b){if(-1!=b){var c=a[b];return c.pointIndex=b,c}return null}var c=a.map(function(a,b){return o(a,b)}),d=b(c.lastIndexOf(m.domain()[1])),e=b(c.indexOf(m.domain()[0])),f=b(c.length-1);return[e,d,f].filter(function(a){return null!=a})});u.enter().append("circle"),u.exit().remove(),u.attr("cx",function(a){return l(n(a,a.pointIndex))}).attr("cy",function(a){return m(o(a,a.pointIndex))}).attr("r",2).attr("class",function(a){return n(a,a.pointIndex)==l.domain()[1]?"nv-point nv-currentValue":o(a,a.pointIndex)==m.domain()[0]?"nv-point nv-minValue":"nv-point nv-maxValue"})}),b}var c,d,e,f,g={top:2,right:0,bottom:2,left:0},h=400,i=32,j=null,k=!0,l=d3.scale.linear(),m=d3.scale.linear(),n=function(a){return a.x},o=function(a){return a.y},p=a.utils.getColor(["#000"]);return b.options=a.utils.optionsFunc.bind(b),b._options=Object.create({},{width:{get:function(){return h},set:function(a){h=a}},height:{get:function(){return i},set:function(a){i=a}},xDomain:{get:function(){return c},set:function(a){c=a}},yDomain:{get:function(){return d},set:function(a){d=a}},xRange:{get:function(){return e},set:function(a){e=a}},yRange:{get:function(){return f},set:function(a){f=a}},xScale:{get:function(){return l},set:function(a){l=a}},yScale:{get:function(){return m},set:function(a){m=a}},animate:{get:function(){return k},set:function(a){k=a}},x:{get:function(){return n},set:function(a){n=d3.functor(a)}},y:{get:function(){return o},set:function(a){o=d3.functor(a)}},margin:{get:function(){return g},set:function(a){g.top=void 0!==a.top?a.top:g.top,g.right=void 0!==a.right?a.right:g.right,g.bottom=void 0!==a.bottom?a.bottom:g.bottom,g.left=void 0!==a.left?a.left:g.left}},color:{get:function(){return p},set:function(b){p=a.utils.getColor(b)}}}),a.utils.initOptions(b),b},a.models.sparklinePlus=function(){"use strict";function b(p){return p.each(function(p){function q(){if(!j){var a=z.selectAll(".nv-hoverValue").data(i),b=a.enter().append("g").attr("class","nv-hoverValue").style("stroke-opacity",0).style("fill-opacity",0);a.exit().transition().duration(250).style("stroke-opacity",0).style("fill-opacity",0).remove(),a.attr("transform",function(a){return"translate("+c(e.x()(p[a],a))+",0)"}).transition().duration(250).style("stroke-opacity",1).style("fill-opacity",1),i.length&&(b.append("line").attr("x1",0).attr("y1",-f.top).attr("x2",0).attr("y2",u),b.append("text").attr("class","nv-xValue").attr("x",-6).attr("y",-f.top).attr("text-anchor","end").attr("dy",".9em"),z.select(".nv-hoverValue .nv-xValue").text(k(e.x()(p[i[0]],i[0]))),b.append("text").attr("class","nv-yValue").attr("x",6).attr("y",-f.top).attr("text-anchor","start").attr("dy",".9em"),z.select(".nv-hoverValue .nv-yValue").text(l(e.y()(p[i[0]],i[0]))))}}function r(){function a(a,b){for(var c=Math.abs(e.x()(a[0],0)-b),d=0,f=0;f<a.length;f++)Math.abs(e.x()(a[f],f)-b)<c&&(c=Math.abs(e.x()(a[f],f)-b),d=f);return d}if(!j){var b=d3.mouse(this)[0]-f.left;i=[a(p,Math.round(c.invert(b)))],q()}}var s=d3.select(this);a.utils.initSVG(s);var t=a.utils.availableWidth(g,s,f),u=a.utils.availableHeight(h,s,f);if(b.update=function(){s.call(b)},b.container=this,!p||!p.length)return a.utils.noData(b,s),b;s.selectAll(".nv-noData").remove();var v=e.y()(p[p.length-1],p.length-1);c=e.xScale(),d=e.yScale();var w=s.selectAll("g.nv-wrap.nv-sparklineplus").data([p]),x=w.enter().append("g").attr("class","nvd3 nv-wrap nv-sparklineplus"),y=x.append("g"),z=w.select("g");y.append("g").attr("class","nv-sparklineWrap"),y.append("g").attr("class","nv-valueWrap"),y.append("g").attr("class","nv-hoverArea"),w.attr("transform","translate("+f.left+","+f.top+")");var A=z.select(".nv-sparklineWrap");if(e.width(t).height(u),A.call(e),m){var B=z.select(".nv-valueWrap"),C=B.selectAll(".nv-currentValue").data([v]);C.enter().append("text").attr("class","nv-currentValue").attr("dx",o?-8:8).attr("dy",".9em").style("text-anchor",o?"end":"start"),C.attr("x",t+(o?f.right:0)).attr("y",n?function(a){return d(a)}:0).style("fill",e.color()(p[p.length-1],p.length-1)).text(l(v))}y.select(".nv-hoverArea").append("rect").on("mousemove",r).on("click",function(){j=!j}).on("mouseout",function(){i=[],q()}),z.select(".nv-hoverArea rect").attr("transform",function(){return"translate("+-f.left+","+-f.top+")"}).attr("width",t+f.left+f.right).attr("height",u+f.top)}),b}var c,d,e=a.models.sparkline(),f={top:15,right:100,bottom:10,left:50},g=null,h=null,i=[],j=!1,k=d3.format(",r"),l=d3.format(",.2f"),m=!0,n=!0,o=!1,p=null;return b.sparkline=e,b.options=a.utils.optionsFunc.bind(b),b._options=Object.create({},{width:{get:function(){return g},set:function(a){g=a}},height:{get:function(){return h},set:function(a){h=a}},xTickFormat:{get:function(){return k},set:function(a){k=a}},yTickFormat:{get:function(){return l},set:function(a){l=a}},showLastValue:{get:function(){return m},set:function(a){m=a}},alignValue:{get:function(){return n},set:function(a){n=a}},rightAlignValue:{get:function(){return o},set:function(a){o=a}},noData:{get:function(){return p},set:function(a){p=a}},margin:{get:function(){return f},set:function(a){f.top=void 0!==a.top?a.top:f.top,f.right=void 0!==a.right?a.right:f.right,f.bottom=void 0!==a.bottom?a.bottom:f.bottom,f.left=void 0!==a.left?a.left:f.left}}}),a.utils.inheritOptions(b,e),a.utils.initOptions(b),b},a.models.stackedArea=function(){"use strict";function b(m){return u.reset(),u.models(r),m.each(function(m){var s=f-e.left-e.right,v=g-e.top-e.bottom;j=d3.select(this),a.utils.initSVG(j),c=r.xScale(),d=r.yScale();var w=m;m.forEach(function(a,b){a.seriesIndex=b,a.values=a.values.map(function(a,c){return a.index=c,a.seriesIndex=b,a})});var x=m.filter(function(a){return!a.disabled});m=d3.layout.stack().order(o).offset(n).values(function(a){return a.values}).x(k).y(l).out(function(a,b,c){a.display={y:c,y0:b}})(x);var y=j.selectAll("g.nv-wrap.nv-stackedarea").data([m]),z=y.enter().append("g").attr("class","nvd3 nv-wrap nv-stackedarea"),A=z.append("defs"),B=z.append("g"),C=y.select("g");B.append("g").attr("class","nv-areaWrap"),B.append("g").attr("class","nv-scatterWrap"),y.attr("transform","translate("+e.left+","+e.top+")"),0==r.forceY().length&&r.forceY().push(0),r.width(s).height(v).x(k).y(function(a){return a.display.y+a.display.y0}).forceY([0]).color(m.map(function(a){return a.color||h(a,a.seriesIndex)}));var D=C.select(".nv-scatterWrap").datum(m);D.call(r),A.append("clipPath").attr("id","nv-edge-clip-"+i).append("rect"),y.select("#nv-edge-clip-"+i+" rect").attr("width",s).attr("height",v),C.attr("clip-path",q?"url(#nv-edge-clip-"+i+")":"");var E=d3.svg.area().x(function(a,b){return c(k(a,b))}).y0(function(a){return d(a.display.y0)}).y1(function(a){return d(a.display.y+a.display.y0)}).interpolate(p),F=d3.svg.area().x(function(a,b){return c(k(a,b))}).y0(function(a){return d(a.display.y0)}).y1(function(a){return d(a.display.y0)}),G=C.select(".nv-areaWrap").selectAll("path.nv-area").data(function(a){return a});G.enter().append("path").attr("class",function(a,b){return"nv-area nv-area-"+b}).attr("d",function(a){return F(a.values,a.seriesIndex)}).on("mouseover",function(a){d3.select(this).classed("hover",!0),t.areaMouseover({point:a,series:a.key,pos:[d3.event.pageX,d3.event.pageY],seriesIndex:a.seriesIndex})}).on("mouseout",function(a){d3.select(this).classed("hover",!1),t.areaMouseout({point:a,series:a.key,pos:[d3.event.pageX,d3.event.pageY],seriesIndex:a.seriesIndex})}).on("click",function(a){d3.select(this).classed("hover",!1),t.areaClick({point:a,series:a.key,pos:[d3.event.pageX,d3.event.pageY],seriesIndex:a.seriesIndex})}),G.exit().remove(),G.style("fill",function(a){return a.color||h(a,a.seriesIndex)}).style("stroke",function(a){return a.color||h(a,a.seriesIndex)}),G.watchTransition(u,"stackedArea path").attr("d",function(a,b){return E(a.values,b)}),r.dispatch.on("elementMouseover.area",function(a){C.select(".nv-chart-"+i+" .nv-area-"+a.seriesIndex).classed("hover",!0)}),r.dispatch.on("elementMouseout.area",function(a){C.select(".nv-chart-"+i+" .nv-area-"+a.seriesIndex).classed("hover",!1)}),b.d3_stackedOffset_stackPercent=function(a){var b,c,d,e=a.length,f=a[0].length,g=[];for(c=0;f>c;++c){for(b=0,d=0;b<w.length;b++)d+=l(w[b].values[c]);if(d)for(b=0;e>b;b++)a[b][c][1]/=d;else for(b=0;e>b;b++)a[b][c][1]=0}for(c=0;f>c;++c)g[c]=0;return g}}),u.renderEnd("stackedArea immediate"),b}var c,d,e={top:0,right:0,bottom:0,left:0},f=960,g=500,h=a.utils.defaultColor(),i=Math.floor(1e5*Math.random()),j=null,k=function(a){return a.x},l=function(a){return a.y},m="stack",n="zero",o="default",p="linear",q=!1,r=a.models.scatter(),s=250,t=d3.dispatch("areaClick","areaMouseover","areaMouseout","renderEnd","elementClick","elementMouseover","elementMouseout");r.pointSize(2.2).pointDomain([2.2,2.2]);var u=a.utils.renderWatch(t,s);return b.dispatch=t,b.scatter=r,r.dispatch.on("elementClick",function(){t.elementClick.apply(this,arguments)}),r.dispatch.on("elementMouseover",function(){t.elementMouseover.apply(this,arguments)}),r.dispatch.on("elementMouseout",function(){t.elementMouseout.apply(this,arguments)}),b.interpolate=function(a){return arguments.length?(p=a,b):p},b.duration=function(a){return arguments.length?(s=a,u.reset(s),r.duration(s),b):s},b.dispatch=t,b.scatter=r,b.options=a.utils.optionsFunc.bind(b),b._options=Object.create({},{width:{get:function(){return f},set:function(a){f=a}},height:{get:function(){return g},set:function(a){g=a}},clipEdge:{get:function(){return q},set:function(a){q=a}},offset:{get:function(){return n},set:function(a){n=a}},order:{get:function(){return o},set:function(a){o=a}},interpolate:{get:function(){return p},set:function(a){p=a}},x:{get:function(){return k},set:function(a){k=d3.functor(a)}},y:{get:function(){return l},set:function(a){l=d3.functor(a)}},margin:{get:function(){return e},set:function(a){e.top=void 0!==a.top?a.top:e.top,e.right=void 0!==a.right?a.right:e.right,e.bottom=void 0!==a.bottom?a.bottom:e.bottom,e.left=void 0!==a.left?a.left:e.left}},color:{get:function(){return h},set:function(b){h=a.utils.getColor(b)}},style:{get:function(){return m},set:function(a){switch(m=a){case"stack":b.offset("zero"),b.order("default");break;case"stream":b.offset("wiggle"),b.order("inside-out");break;case"stream-center":b.offset("silhouette"),b.order("inside-out");break;case"expand":b.offset("expand"),b.order("default");break;case"stack_percent":b.offset(b.d3_stackedOffset_stackPercent),b.order("default")}}},duration:{get:function(){return s},set:function(a){s=a,u.reset(s),r.duration(s)}}}),a.utils.inheritOptions(b,r),a.utils.initOptions(b),b},a.models.stackedAreaChart=function(){"use strict";function b(k){return F.reset(),F.models(e),r&&F.models(f),s&&F.models(g),k.each(function(k){var x=d3.select(this),F=this;a.utils.initSVG(x);var K=a.utils.availableWidth(m,x,l),L=a.utils.availableHeight(n,x,l);if(b.update=function(){x.transition().duration(C).call(b)},b.container=this,v.setter(I(k),b.update).getter(H(k)).update(),v.disabled=k.map(function(a){return!!a.disabled}),!w){var M;w={};for(M in v)w[M]=v[M]instanceof Array?v[M].slice(0):v[M]}if(!(k&&k.length&&k.filter(function(a){return a.values.length}).length))return a.utils.noData(b,x),b;x.selectAll(".nv-noData").remove(),c=e.xScale(),d=e.yScale();var N=x.selectAll("g.nv-wrap.nv-stackedAreaChart").data([k]),O=N.enter().append("g").attr("class","nvd3 nv-wrap nv-stackedAreaChart").append("g"),P=N.select("g");if(O.append("rect").style("opacity",0),O.append("g").attr("class","nv-x nv-axis"),O.append("g").attr("class","nv-y nv-axis"),O.append("g").attr("class","nv-stackedWrap"),O.append("g").attr("class","nv-legendWrap"),O.append("g").attr("class","nv-controlsWrap"),O.append("g").attr("class","nv-interactive"),P.select("rect").attr("width",K).attr("height",L),q){var Q=p?K-z:K;h.width(Q),P.select(".nv-legendWrap").datum(k).call(h),l.top!=h.height()&&(l.top=h.height(),L=a.utils.availableHeight(n,x,l)),P.select(".nv-legendWrap").attr("transform","translate("+(K-Q)+","+-l.top+")")}if(p){var R=[{key:B.stacked||"Stacked",metaKey:"Stacked",disabled:"stack"!=e.style(),style:"stack"},{key:B.stream||"Stream",metaKey:"Stream",disabled:"stream"!=e.style(),style:"stream"},{key:B.expanded||"Expanded",metaKey:"Expanded",disabled:"expand"!=e.style(),style:"expand"},{key:B.stack_percent||"Stack %",metaKey:"Stack_Percent",disabled:"stack_percent"!=e.style(),style:"stack_percent"}];z=A.length/3*260,R=R.filter(function(a){return-1!==A.indexOf(a.metaKey)}),i.width(z).color(["#444","#444","#444"]),P.select(".nv-controlsWrap").datum(R).call(i),l.top!=Math.max(i.height(),h.height())&&(l.top=Math.max(i.height(),h.height()),L=a.utils.availableHeight(n,x,l)),P.select(".nv-controlsWrap").attr("transform","translate(0,"+-l.top+")")}N.attr("transform","translate("+l.left+","+l.top+")"),t&&P.select(".nv-y.nv-axis").attr("transform","translate("+K+",0)"),u&&(j.width(K).height(L).margin({left:l.left,top:l.top}).svgContainer(x).xScale(c),N.select(".nv-interactive").call(j)),e.width(K).height(L);var S=P.select(".nv-stackedWrap").datum(k);if(S.transition().call(e),r&&(f.scale(c)._ticks(a.utils.calcTicksX(K/100,k)).tickSize(-L,0),P.select(".nv-x.nv-axis").attr("transform","translate(0,"+L+")"),P.select(".nv-x.nv-axis").transition().duration(0).call(f)),s){var T;if(T="wiggle"===e.offset()?0:a.utils.calcTicksY(L/36,k),g.scale(d)._ticks(T).tickSize(-K,0),"expand"===e.style()||"stack_percent"===e.style()){var U=g.tickFormat();D&&U===J||(D=U),g.tickFormat(J)}else D&&(g.tickFormat(D),D=null);P.select(".nv-y.nv-axis").transition().duration(0).call(g)}e.dispatch.on("areaClick.toggle",function(a){k.forEach(1===k.filter(function(a){return!a.disabled}).length?function(a){a.disabled=!1}:function(b,c){b.disabled=c!=a.seriesIndex}),v.disabled=k.map(function(a){return!!a.disabled}),y.stateChange(v),b.update()}),h.dispatch.on("stateChange",function(a){for(var c in a)v[c]=a[c];y.stateChange(v),b.update()}),i.dispatch.on("legendClick",function(a){a.disabled&&(R=R.map(function(a){return a.disabled=!0,a}),a.disabled=!1,e.style(a.style),v.style=e.style(),y.stateChange(v),b.update())}),j.dispatch.on("elementMousemove",function(c){e.clearHighlights();var d,g,h,i=[];if(k.filter(function(a,b){return a.seriesIndex=b,!a.disabled}).forEach(function(f,j){g=a.interactiveBisect(f.values,c.pointXValue,b.x());var k=f.values[g],l=b.y()(k,g);if(null!=l&&e.highlightPoint(j,g,!0),"undefined"!=typeof k){"undefined"==typeof d&&(d=k),"undefined"==typeof h&&(h=b.xScale()(b.x()(k,g)));var m="expand"==e.style()?k.display.y:b.y()(k,g);i.push({key:f.key,value:m,color:o(f,f.seriesIndex),stackedValue:k.display})}}),i.reverse(),i.length>2){var m=b.yScale().invert(c.mouseY),n=null;i.forEach(function(a,b){m=Math.abs(m);var c=Math.abs(a.stackedValue.y0),d=Math.abs(a.stackedValue.y);return m>=c&&d+c>=m?void(n=b):void 0}),null!=n&&(i[n].highlight=!0)}var p=f.tickFormat()(b.x()(d,g)),q=j.tooltip.valueFormatter();"expand"===e.style()||"stack_percent"===e.style()?(E||(E=q),q=d3.format(".1%")):E&&(q=E,E=null),j.tooltip.position({left:h+l.left,top:c.mouseY+l.top}).chartContainer(F.parentNode).valueFormatter(q).data({value:p,series:i})(),j.renderGuideLine(h)}),j.dispatch.on("elementMouseout",function(){e.clearHighlights()}),y.on("changeState",function(a){"undefined"!=typeof a.disabled&&k.length===a.disabled.length&&(k.forEach(function(b,c){b.disabled=a.disabled[c]}),v.disabled=a.disabled),"undefined"!=typeof a.style&&(e.style(a.style),G=a.style),b.update()})}),F.renderEnd("stacked Area chart immediate"),b}var c,d,e=a.models.stackedArea(),f=a.models.axis(),g=a.models.axis(),h=a.models.legend(),i=a.models.legend(),j=a.interactiveGuideline(),k=a.models.tooltip(),l={top:30,right:25,bottom:50,left:60},m=null,n=null,o=a.utils.defaultColor(),p=!0,q=!0,r=!0,s=!0,t=!1,u=!1,v=a.utils.state(),w=null,x=null,y=d3.dispatch("stateChange","changeState","renderEnd"),z=250,A=["Stacked","Stream","Expanded"],B={},C=250;v.style=e.style(),f.orient("bottom").tickPadding(7),g.orient(t?"right":"left"),k.headerFormatter(function(a,b){return f.tickFormat()(a,b)}).valueFormatter(function(a,b){return g.tickFormat()(a,b)}),j.tooltip.headerFormatter(function(a,b){return f.tickFormat()(a,b)}).valueFormatter(function(a,b){return g.tickFormat()(a,b)});var D=null,E=null;i.updateState(!1);var F=a.utils.renderWatch(y),G=e.style(),H=function(a){return function(){return{active:a.map(function(a){return!a.disabled}),style:e.style()}}},I=function(a){return function(b){void 0!==b.style&&(G=b.style),void 0!==b.active&&a.forEach(function(a,c){a.disabled=!b.active[c]})}},J=d3.format("%");return e.dispatch.on("elementMouseover.tooltip",function(a){a.point.x=e.x()(a.point),a.point.y=e.y()(a.point),k.data(a).position(a.pos).hidden(!1)}),e.dispatch.on("elementMouseout.tooltip",function(){k.hidden(!0)}),b.dispatch=y,b.stacked=e,b.legend=h,b.controls=i,b.xAxis=f,b.yAxis=g,b.interactiveLayer=j,b.tooltip=k,b.dispatch=y,b.options=a.utils.optionsFunc.bind(b),b._options=Object.create({},{width:{get:function(){return m},set:function(a){m=a}},height:{get:function(){return n},set:function(a){n=a}},showLegend:{get:function(){return q},set:function(a){q=a}},showXAxis:{get:function(){return r},set:function(a){r=a}},showYAxis:{get:function(){return s},set:function(a){s=a}},defaultState:{get:function(){return w},set:function(a){w=a}},noData:{get:function(){return x},set:function(a){x=a}},showControls:{get:function(){return p},set:function(a){p=a}},controlLabels:{get:function(){return B},set:function(a){B=a}},controlOptions:{get:function(){return A},set:function(a){A=a}},tooltips:{get:function(){return k.enabled()},set:function(b){a.deprecated("tooltips","use chart.tooltip.enabled() instead"),k.enabled(!!b)}},tooltipContent:{get:function(){return k.contentGenerator()},set:function(b){a.deprecated("tooltipContent","use chart.tooltip.contentGenerator() instead"),k.contentGenerator(b)}},margin:{get:function(){return l},set:function(a){l.top=void 0!==a.top?a.top:l.top,l.right=void 0!==a.right?a.right:l.right,l.bottom=void 0!==a.bottom?a.bottom:l.bottom,l.left=void 0!==a.left?a.left:l.left}},duration:{get:function(){return C},set:function(a){C=a,F.reset(C),e.duration(C),f.duration(C),g.duration(C)}},color:{get:function(){return o},set:function(b){o=a.utils.getColor(b),h.color(o),e.color(o)}},rightAlignYAxis:{get:function(){return t},set:function(a){t=a,g.orient(t?"right":"left")}},useInteractiveGuideline:{get:function(){return u},set:function(a){u=!!a,b.interactive(!a),b.useVoronoi(!a),e.scatter.interactive(!a)}}}),a.utils.inheritOptions(b,e),a.utils.initOptions(b),b},a.models.sunburst=function(){"use strict";function b(u){return t.reset(),u.each(function(b){function t(a){a.x0=a.x,a.dx0=a.dx}function u(a){var b=d3.interpolate(p.domain(),[a.x,a.x+a.dx]),c=d3.interpolate(q.domain(),[a.y,1]),d=d3.interpolate(q.range(),[a.y?20:0,y]);return function(a,e){return e?function(){return s(a)}:function(e){return p.domain(b(e)),q.domain(c(e)).range(d(e)),s(a)}}}l=d3.select(this);var v,w=a.utils.availableWidth(g,l,f),x=a.utils.availableHeight(h,l,f),y=Math.min(w,x)/2;a.utils.initSVG(l);var z=l.selectAll(".nv-wrap.nv-sunburst").data(b),A=z.enter().append("g").attr("class","nvd3 nv-wrap nv-sunburst nv-chart-"+k),B=A.selectAll("nv-sunburst");z.attr("transform","translate("+w/2+","+x/2+")"),l.on("click",function(a,b){o.chartClick({data:a,index:b,pos:d3.event,id:k})}),q.range([0,y]),c=c||b,e=b[0],r.value(j[i]||j.count),v=B.data(r.nodes).enter().append("path").attr("d",s).style("fill",function(a){return m((a.children?a:a.parent).name)}).style("stroke","#FFF").on("click",function(a){d!==c&&c!==a&&(d=c),c=a,v.transition().duration(n).attrTween("d",u(a))}).each(t).on("dblclick",function(a){d.parent==a&&v.transition().duration(n).attrTween("d",u(e))}).each(t).on("mouseover",function(a){d3.select(this).classed("hover",!0).style("opacity",.8),o.elementMouseover({data:a,color:d3.select(this).style("fill")})}).on("mouseout",function(a){d3.select(this).classed("hover",!1).style("opacity",1),o.elementMouseout({data:a})}).on("mousemove",function(a){o.elementMousemove({data:a})})}),t.renderEnd("sunburst immediate"),b}var c,d,e,f={top:0,right:0,bottom:0,left:0},g=null,h=null,i="count",j={count:function(){return 1},size:function(a){return a.size}},k=Math.floor(1e4*Math.random()),l=null,m=a.utils.defaultColor(),n=500,o=d3.dispatch("chartClick","elementClick","elementDblClick","elementMousemove","elementMouseover","elementMouseout","renderEnd"),p=d3.scale.linear().range([0,2*Math.PI]),q=d3.scale.sqrt(),r=d3.layout.partition().sort(null).value(function(){return 1}),s=d3.svg.arc().startAngle(function(a){return Math.max(0,Math.min(2*Math.PI,p(a.x)))}).endAngle(function(a){return Math.max(0,Math.min(2*Math.PI,p(a.x+a.dx)))}).innerRadius(function(a){return Math.max(0,q(a.y))}).outerRadius(function(a){return Math.max(0,q(a.y+a.dy))}),t=a.utils.renderWatch(o);return b.dispatch=o,b.options=a.utils.optionsFunc.bind(b),b._options=Object.create({},{width:{get:function(){return g},set:function(a){g=a}},height:{get:function(){return h},set:function(a){h=a}},mode:{get:function(){return i},set:function(a){i=a}},id:{get:function(){return k},set:function(a){k=a}},duration:{get:function(){return n},set:function(a){n=a}},margin:{get:function(){return f},set:function(a){f.top=void 0!=a.top?a.top:f.top,f.right=void 0!=a.right?a.right:f.right,f.bottom=void 0!=a.bottom?a.bottom:f.bottom,f.left=void 0!=a.left?a.left:f.left}},color:{get:function(){return m},set:function(b){m=a.utils.getColor(b)}}}),a.utils.initOptions(b),b},a.models.sunburstChart=function(){"use strict";function b(d){return m.reset(),m.models(c),d.each(function(d){var h=d3.select(this);a.utils.initSVG(h);var i=a.utils.availableWidth(f,h,e),j=a.utils.availableHeight(g,h,e);if(b.update=function(){0===k?h.call(b):h.transition().duration(k).call(b)},b.container=this,!d||!d.length)return a.utils.noData(b,h),b;h.selectAll(".nv-noData").remove();var l=h.selectAll("g.nv-wrap.nv-sunburstChart").data(d),m=l.enter().append("g").attr("class","nvd3 nv-wrap nv-sunburstChart").append("g"),n=l.select("g");m.append("g").attr("class","nv-sunburstWrap"),l.attr("transform","translate("+e.left+","+e.top+")"),c.width(i).height(j);var o=n.select(".nv-sunburstWrap").datum(d);d3.transition(o).call(c)}),m.renderEnd("sunburstChart immediate"),b}var c=a.models.sunburst(),d=a.models.tooltip(),e={top:30,right:20,bottom:20,left:20},f=null,g=null,h=a.utils.defaultColor(),i=(Math.round(1e5*Math.random()),null),j=null,k=250,l=d3.dispatch("tooltipShow","tooltipHide","stateChange","changeState","renderEnd"),m=a.utils.renderWatch(l);return d.headerEnabled(!1).duration(0).valueFormatter(function(a){return a}),c.dispatch.on("elementMouseover.tooltip",function(a){a.series={key:a.data.name,value:a.data.size,color:a.color},d.data(a).hidden(!1)}),c.dispatch.on("elementMouseout.tooltip",function(){d.hidden(!0)}),c.dispatch.on("elementMousemove.tooltip",function(){d.position({top:d3.event.pageY,left:d3.event.pageX})()}),b.dispatch=l,b.sunburst=c,b.tooltip=d,b.options=a.utils.optionsFunc.bind(b),b._options=Object.create({},{noData:{get:function(){return j},set:function(a){j=a}},defaultState:{get:function(){return i},set:function(a){i=a}},color:{get:function(){return h},set:function(a){h=a,c.color(h)}},duration:{get:function(){return k},set:function(a){k=a,m.reset(k),c.duration(k)}},margin:{get:function(){return e},set:function(a){e.top=void 0!==a.top?a.top:e.top,e.right=void 0!==a.right?a.right:e.right,e.bottom=void 0!==a.bottom?a.bottom:e.bottom,e.left=void 0!==a.left?a.left:e.left}}}),a.utils.inheritOptions(b,c),a.utils.initOptions(b),b},a.version="1.8.1"}();

/home/genis/Proyectos/ProyectoXat/vendor/phpunit/php-code-coverage/src/Report/Html/Renderer/Template/js/respond.min.js:
    3   *  */
    4  
    5: !function(a){"use strict";a.matchMedia=a.matchMedia||function(a){var b,c=a.documentElement,d=c.firstElementChild||c.firstChild,e=a.createElement("body"),f=a.createElement("div");return f.id="mq-test-1",f.style.cssText="position:absolute;top:-100em",e.style.background="none",e.appendChild(f),function(a){return f.innerHTML='&shy;<style media="'+a+'"> #mq-test-1 { width: 42px; }</style>',c.insertBefore(e,d),b=42===f.offsetWidth,c.removeChild(e),{matches:b,media:a}}}(a.document)}(this),function(a){"use strict";function b(){u(!0)}var c={};a.respond=c,c.update=function(){};var d=[],e=function(){var b=!1;try{b=new a.XMLHttpRequest}catch(c){b=new a.ActiveXObject("Microsoft.XMLHTTP")}return function(){return b}}(),f=function(a,b){var c=e();c&&(c.open("GET",a,!0),c.onreadystatechange=function(){4!==c.readyState||200!==c.status&&304!==c.status||b(c.responseText)},4!==c.readyState&&c.send(null))};if(c.ajax=f,c.queue=d,c.regex={media:/@media[^\{]+\{([^\{\}]*\{[^\}\{]*\})+/gi,keyframes:/@(?:\-(?:o|moz|webkit)\-)?keyframes[^\{]+\{(?:[^\{\}]*\{[^\}\{]*\})+[^\}]*\}/gi,urls:/(url\()['"]?([^\/\)'"][^:\)'"]+)['"]?(\))/g,findStyles:/@media *([^\{]+)\{([\S\s]+?)$/,only:/(only\s+)?([a-zA-Z]+)\s?/,minw:/\([\s]*min\-width\s*:[\s]*([\s]*[0-9\.]+)(px|em)[\s]*\)/,maxw:/\([\s]*max\-width\s*:[\s]*([\s]*[0-9\.]+)(px|em)[\s]*\)/},c.mediaQueriesSupported=a.matchMedia&&null!==a.matchMedia("only all")&&a.matchMedia("only all").matches,!c.mediaQueriesSupported){var g,h,i,j=a.document,k=j.documentElement,l=[],m=[],n=[],o={},p=30,q=j.getElementsByTagName("head")[0]||k,r=j.getElementsByTagName("base")[0],s=q.getElementsByTagName("link"),t=function(){var a,b=j.createElement("div"),c=j.body,d=k.style.fontSize,e=c&&c.style.fontSize,f=!1;return b.style.cssText="position:absolute;font-size:1em;width:1em",c||(c=f=j.createElement("body"),c.style.background="none"),k.style.fontSize="100%",c.style.fontSize="100%",c.appendChild(b),f&&k.insertBefore(c,k.firstChild),a=b.offsetWidth,f?k.removeChild(c):c.removeChild(b),k.style.fontSize=d,e&&(c.style.fontSize=e),a=i=parseFloat(a)},u=function(b){var c="clientWidth",d=k[c],e="CSS1Compat"===j.compatMode&&d||j.body[c]||d,f={},o=s[s.length-1],r=(new Date).getTime();if(b&&g&&p>r-g)return a.clearTimeout(h),h=a.setTimeout(u,p),void 0;g=r;for(var v in l)if(l.hasOwnProperty(v)){var w=l[v],x=w.minw,y=w.maxw,z=null===x,A=null===y,B="em";x&&(x=parseFloat(x)*(x.indexOf(B)>-1?i||t():1)),y&&(y=parseFloat(y)*(y.indexOf(B)>-1?i||t():1)),w.hasquery&&(z&&A||!(z||e>=x)||!(A||y>=e))||(f[w.media]||(f[w.media]=[]),f[w.media].push(m[w.rules]))}for(var C in n)n.hasOwnProperty(C)&&n[C]&&n[C].parentNode===q&&q.removeChild(n[C]);n.length=0;for(var D in f)if(f.hasOwnProperty(D)){var E=j.createElement("style"),F=f[D].join("\n");E.type="text/css",E.media=D,q.insertBefore(E,o.nextSibling),E.styleSheet?E.styleSheet.cssText=F:E.appendChild(j.createTextNode(F)),n.push(E)}},v=function(a,b,d){var e=a.replace(c.regex.keyframes,"").match(c.regex.media),f=e&&e.length||0;b=b.substring(0,b.lastIndexOf("/"));var g=function(a){return a.replace(c.regex.urls,"$1"+b+"$2$3")},h=!f&&d;b.length&&(b+="/"),h&&(f=1);for(var i=0;f>i;i++){var j,k,n,o;h?(j=d,m.push(g(a))):(j=e[i].match(c.regex.findStyles)&&RegExp.$1,m.push(RegExp.$2&&g(RegExp.$2))),n=j.split(","),o=n.length;for(var p=0;o>p;p++)k=n[p],l.push({media:k.split("(")[0].match(c.regex.only)&&RegExp.$2||"all",rules:m.length-1,hasquery:k.indexOf("(")>-1,minw:k.match(c.regex.minw)&&parseFloat(RegExp.$1)+(RegExp.$2||""),maxw:k.match(c.regex.maxw)&&parseFloat(RegExp.$1)+(RegExp.$2||"")})}u()},w=function(){if(d.length){var b=d.shift();f(b.href,function(c){v(c,b.href,b.media),o[b.href]=!0,a.setTimeout(function(){w()},0)})}},x=function(){for(var b=0;b<s.length;b++){var c=s[b],e=c.href,f=c.media,g=c.rel&&"stylesheet"===c.rel.toLowerCase();e&&g&&!o[e]&&(c.styleSheet&&c.styleSheet.rawCssText?(v(c.styleSheet.rawCssText,e,f),o[e]=!0):(!/^([a-zA-Z:]*\/\/)/.test(e)&&!r||e.replace(RegExp.$1,"").split("/")[0]===a.location.host)&&("//"===e.substring(0,2)&&(e=a.location.protocol+e),d.push({href:e,media:f})))}w()};x(),c.update=x,c.getEmValue=t,a.addEventListener?a.addEventListener("resize",b,!1):a.attachEvent&&a.attachEvent("onresize",b)}}(this);

/home/genis/Proyectos/ProyectoXat/vendor/phpunit/php-code-coverage/src/Report/Text.php:
   31          'yellow' => "\x1b[30;43m",
   32          'red'    => "\x1b[37;41m",
   33:         'header' => "\x1b[1;37;40m",
   34          'reset'  => "\x1b[0m",
   35          'eol'    => "\x1b[2K",
   ..
   63  
   64          $colors = [
   65:             'header'  => '',
   66              'classes' => '',
   67              'methods' => '',
   ..
   85              );
   86              $colors['reset']   = $this->colors['reset'];
   87:             $colors['header']  = $this->colors['header'];
   88              $colors['eol']     = $this->colors['eol'];
   89          }
   ..
  128              $padding = \max($padding, \strlen($title));
  129  
  130:             $output .= $this->format($colors['header'], $padding, $title);
  131          } else {
  132              $date  = \date('  Y-m-d H:i:s', $_SERVER['REQUEST_TIME']);
  133              $title = 'Code Coverage Report:';
  134  
  135:             $output .= $this->format($colors['header'], $padding, $title);
  136:             $output .= $this->format($colors['header'], $padding, $date);
  137:             $output .= $this->format($colors['header'], $padding, '');
  138:             $output .= $this->format($colors['header'], $padding, ' Summary:');
  139          }
  140  

/home/genis/Proyectos/ProyectoXat/vendor/phpunit/php-code-coverage/tests/_files/Report/HTML/CoverageForBankAccount/BankAccount.php.html:
    1  <!DOCTYPE html>
    2  <html lang="en">
    3:  <head>
    4    <meta charset="UTF-8">
    5    <title>Code Coverage for %s/BankAccount.php</title>
    .
   11    <script src=".js/respond.min.js"></script>
   12    <![endif]-->
   13:  </head>
   14   <body>
   15:   <header>
   16     <div class="container">
   17      <div class="row">
   ..
   25      </div>
   26     </div>
   27:   </header>
   28    <div class="container">
   29     <table class="table table-bordered">
   30:     <thead>
   31       <tr>
   32        <td>&nbsp;</td>
   ..
   39        <td colspan="3"><div align="center"><strong>Lines</strong></div></td>
   40       </tr>
   41:     </thead>
   42      <tbody>
   43       <tr>

/home/genis/Proyectos/ProyectoXat/vendor/phpunit/php-code-coverage/tests/_files/Report/HTML/CoverageForBankAccount/dashboard.html:
    1  <!DOCTYPE html>
    2  <html lang="en">
    3:  <head>
    4    <meta charset="UTF-8">
    5    <title>Dashboard for %s</title>
    .
   12    <script src=".js/respond.min.js"></script>
   13    <![endif]-->
   14:  </head>
   15   <body>
   16:   <header>
   17     <div class="container">
   18      <div class="row">
   ..
   26      </div>
   27     </div>
   28:   </header>
   29    <div class="container">
   30     <div class="row">
   ..
   52       <div class="scrollbox">
   53        <table class="table">
   54:        <thead>
   55          <tr>
   56           <th>Class</th>
   57           <th class="text-right">Coverage</th>
   58          </tr>
   59:        </thead>
   60         <tbody>
   61         <tr><td><a href="BankAccount.php.html#2">BankAccount</a></td><td class="text-right">50%</td></tr>
   ..
   69       <div class="scrollbox">
   70        <table class="table">
   71:        <thead>
   72          <tr>
   73           <th>Class</th>
   74           <th class="text-right"><abbr title="Change Risk Anti-Patterns (CRAP) Index">CRAP</abbr></th>
   75          </tr>
   76:        </thead>
   77         <tbody>
   78         <tr><td><a href="BankAccount.php.html#2">BankAccount</a></td><td class="text-right">8</td></tr>
   ..
  107       <div class="scrollbox">
  108        <table class="table">
  109:        <thead>
  110          <tr>
  111           <th>Method</th>
  112           <th class="text-right">Coverage</th>
  113          </tr>
  114:        </thead>
  115         <tbody>
  116         <tr><td><a href="BankAccount.php.html#11"><abbr title="BankAccount::setBalance">setBalance</abbr></a></td><td class="text-right">0%</td></tr>
  ...
  124       <div class="scrollbox">
  125        <table class="table">
  126:        <thead>
  127          <tr>
  128           <th>Method</th>
  129           <th class="text-right"><abbr title="Change Risk Anti-Patterns (CRAP) Index">CRAP</abbr></th>
  130          </tr>
  131:        </thead>
  132         <tbody>
  133         <tr><td><a href="BankAccount.php.html#11"><abbr title="BankAccount::setBalance">setBalance</abbr></a></td><td class="text-right">6</td></tr>

/home/genis/Proyectos/ProyectoXat/vendor/phpunit/php-code-coverage/tests/_files/Report/HTML/CoverageForBankAccount/index.html:
    1  <!DOCTYPE html>
    2  <html lang="en">
    3:  <head>
    4    <meta charset="UTF-8">
    5    <title>Code Coverage for %s</title>
    .
   11    <script src=".js/respond.min.js"></script>
   12    <![endif]-->
   13:  </head>
   14   <body>
   15:   <header>
   16     <div class="container">
   17      <div class="row">
   ..
   25      </div>
   26     </div>
   27:   </header>
   28    <div class="container">
   29     <table class="table table-bordered">
   30:     <thead>
   31       <tr>
   32        <td>&nbsp;</td>
   ..
   39        <td colspan="3"><div align="center"><strong>Classes and Traits</strong></div></td>
   40       </tr>
   41:     </thead>
   42      <tbody>
   43       <tr>

/home/genis/Proyectos/ProyectoXat/vendor/phpunit/php-code-coverage/tests/_files/Report/HTML/CoverageForClassWithAnonymousFunction/dashboard.html:
    1  <!DOCTYPE html>
    2  <html lang="en">
    3:  <head>
    4    <meta charset="UTF-8">
    5    <title>Dashboard for %s</title>
    .
   12    <script src=".js/respond.min.js"></script>
   13    <![endif]-->
   14:  </head>
   15   <body>
   16:   <header>
   17     <div class="container">
   18      <div class="row">
   ..
   26      </div>
   27     </div>
   28:   </header>
   29    <div class="container">
   30     <div class="row">
   ..
   52       <div class="scrollbox">
   53        <table class="table">
   54:        <thead>
   55          <tr>
   56           <th>Class</th>
   57           <th class="text-right">Coverage</th>
   58          </tr>
   59:        </thead>
   60         <tbody>
   61         <tr><td><a href="source_with_class_and_anonymous_function.php.html#3">CoveredClassWithAnonymousFunctionInStaticMethod</a></td><td class="text-right">87%</td></tr>
   ..
   69       <div class="scrollbox">
   70        <table class="table">
   71:        <thead>
   72          <tr>
   73           <th>Class</th>
   74           <th class="text-right"><abbr title="Change Risk Anti-Patterns (CRAP) Index">CRAP</abbr></th>
   75          </tr>
   76:        </thead>
   77         <tbody>
   78  
   ..
  106       <div class="scrollbox">
  107        <table class="table">
  108:        <thead>
  109          <tr>
  110           <th>Method</th>
  111           <th class="text-right">Coverage</th>
  112          </tr>
  113:        </thead>
  114         <tbody>
  115         <tr><td><a href="source_with_class_and_anonymous_function.php.html#5"><abbr title="CoveredClassWithAnonymousFunctionInStaticMethod::runAnonymous">runAnonymous</abbr></a></td><td class="text-right">66%</td></tr>
  ...
  123       <div class="scrollbox">
  124        <table class="table">
  125:        <thead>
  126          <tr>
  127           <th>Method</th>
  128           <th class="text-right"><abbr title="Change Risk Anti-Patterns (CRAP) Index">CRAP</abbr></th>
  129          </tr>
  130:        </thead>
  131         <tbody>
  132  

/home/genis/Proyectos/ProyectoXat/vendor/phpunit/php-code-coverage/tests/_files/Report/HTML/CoverageForClassWithAnonymousFunction/index.html:
    1  <!DOCTYPE html>
    2  <html lang="en">
    3:  <head>
    4    <meta charset="UTF-8">
    5    <title>Code Coverage for %s</title>
    .
   11    <script src=".js/respond.min.js"></script>
   12    <![endif]-->
   13:  </head>
   14   <body>
   15:   <header>
   16     <div class="container">
   17      <div class="row">
   ..
   25      </div>
   26     </div>
   27:   </header>
   28    <div class="container">
   29     <table class="table table-bordered">
   30:     <thead>
   31       <tr>
   32        <td>&nbsp;</td>
   ..
   39        <td colspan="3"><div align="center"><strong>Classes and Traits</strong></div></td>
   40       </tr>
   41:     </thead>
   42      <tbody>
   43       <tr>

/home/genis/Proyectos/ProyectoXat/vendor/phpunit/php-code-coverage/tests/_files/Report/HTML/CoverageForClassWithAnonymousFunction/source_with_class_and_anonymous_function.php.html:
    1  <!DOCTYPE html>
    2  <html lang="en">
    3:  <head>
    4    <meta charset="UTF-8">
    5    <title>Code Coverage for %s/source_with_class_and_anonymous_function.php</title>
    .
   11    <script src=".js/respond.min.js"></script>
   12    <![endif]-->
   13:  </head>
   14   <body>
   15:   <header>
   16     <div class="container">
   17      <div class="row">
   ..
   25      </div>
   26     </div>
   27:   </header>
   28    <div class="container">
   29     <table class="table table-bordered">
   30:     <thead>
   31       <tr>
   32        <td>&nbsp;</td>
   ..
   39        <td colspan="3"><div align="center"><strong>Lines</strong></div></td>
   40       </tr>
   41:     </thead>
   42      <tbody>
   43       <tr>

/home/genis/Proyectos/ProyectoXat/vendor/phpunit/php-code-coverage/tests/_files/Report/HTML/CoverageForFileWithIgnoredLines/dashboard.html:
    1  <!DOCTYPE html>
    2  <html lang="en">
    3:  <head>
    4    <meta charset="UTF-8">
    5    <title>Dashboard for %s</title>
    .
   12    <script src=".js/respond.min.js"></script>
   13    <![endif]-->
   14:  </head>
   15   <body>
   16:   <header>
   17     <div class="container">
   18      <div class="row">
   ..
   26      </div>
   27     </div>
   28:   </header>
   29    <div class="container">
   30     <div class="row">
   ..
   52       <div class="scrollbox">
   53        <table class="table">
   54:        <thead>
   55          <tr>
   56           <th>Class</th>
   57           <th class="text-right">Coverage</th>
   58          </tr>
   59:        </thead>
   60         <tbody>
   61  
   ..
   68       <div class="scrollbox">
   69        <table class="table">
   70:        <thead>
   71          <tr>
   72           <th>Class</th>
   73           <th class="text-right"><abbr title="Change Risk Anti-Patterns (CRAP) Index">CRAP</abbr></th>
   74          </tr>
   75:        </thead>
   76         <tbody>
   77  
   ..
  105       <div class="scrollbox">
  106        <table class="table">
  107:        <thead>
  108          <tr>
  109           <th>Method</th>
  110           <th class="text-right">Coverage</th>
  111          </tr>
  112:        </thead>
  113         <tbody>
  114  
  ...
  121       <div class="scrollbox">
  122        <table class="table">
  123:        <thead>
  124          <tr>
  125           <th>Method</th>
  126           <th class="text-right"><abbr title="Change Risk Anti-Patterns (CRAP) Index">CRAP</abbr></th>
  127          </tr>
  128:        </thead>
  129         <tbody>
  130  

/home/genis/Proyectos/ProyectoXat/vendor/phpunit/php-code-coverage/tests/_files/Report/HTML/CoverageForFileWithIgnoredLines/index.html:
    1  <!DOCTYPE html>
    2  <html lang="en">
    3:  <head>
    4    <meta charset="UTF-8">
    5    <title>Code Coverage for %s</title>
    .
   11    <script src=".js/respond.min.js"></script>
   12    <![endif]-->
   13:  </head>
   14   <body>
   15:   <header>
   16     <div class="container">
   17      <div class="row">
   ..
   25      </div>
   26     </div>
   27:   </header>
   28    <div class="container">
   29     <table class="table table-bordered">
   30:     <thead>
   31       <tr>
   32        <td>&nbsp;</td>
   ..
   39        <td colspan="3"><div align="center"><strong>Classes and Traits</strong></div></td>
   40       </tr>
   41:     </thead>
   42      <tbody>
   43       <tr>

/home/genis/Proyectos/ProyectoXat/vendor/phpunit/php-code-coverage/tests/_files/Report/HTML/CoverageForFileWithIgnoredLines/source_with_ignore.php.html:
    1  <!DOCTYPE html>
    2  <html lang="en">
    3:  <head>
    4    <meta charset="UTF-8">
    5    <title>Code Coverage for %s</title>
    .
   11    <script src=".js/respond.min.js"></script>
   12    <![endif]-->
   13:  </head>
   14   <body>
   15:   <header>
   16     <div class="container">
   17      <div class="row">
   ..
   25      </div>
   26     </div>
   27:   </header>
   28    <div class="container">
   29     <table class="table table-bordered">
   30:     <thead>
   31       <tr>
   32        <td>&nbsp;</td>
   ..
   39        <td colspan="3"><div align="center"><strong>Lines</strong></div></td>
   40       </tr>
   41:     </thead>
   42      <tbody>
   43       <tr>

/home/genis/Proyectos/ProyectoXat/vendor/phpunit/phpunit-mock-objects/.php_cs:
    1  <?php
    2: $header = <<<'EOF'
    3  This file is part of the phpunit-mock-objects package.
    4  
    .
   35              'full_opening_tag' => true,
   36              'function_declaration' => true,
   37:             'header_comment' => ['header' => $header, 'separate' => 'none'],
   38              'indentation_type' => true,
   39              'line_ending' => true,

/home/genis/Proyectos/ProyectoXat/vendor/phpunit/phpunit/.php_cs.dist:
    1  <?php
    2: $header = <<<'EOF'
    3  This file is part of PHPUnit.
    4  
    .
   35              'full_opening_tag' => true,
   36              'function_declaration' => true,
   37:             'header_comment' => ['header' => $header, 'separate' => 'none'],
   38              'indentation_type' => true,
   39              'line_ending' => true,

/home/genis/Proyectos/ProyectoXat/vendor/phpunit/phpunit/src/Framework/TestCase.php:
 2354       * @param array  $before
 2355       * @param array  $after
 2356:      * @param string $header
 2357       *
 2358       * @throws RiskyTestError
 2359       */
 2360:     private function compareGlobalStateSnapshotPart(array $before, array $after, $header)
 2361      {
 2362          if ($before != $after) {
 2363:             $differ   = new Differ($header);
 2364              $exporter = new Exporter;
 2365  

/home/genis/Proyectos/ProyectoXat/vendor/phpunit/phpunit/src/Runner/PhptTestCase.php:
  314              'GET',
  315              'COOKIE',
  316:             'HEADERS',
  317              'CGI',
  318:             'EXPECTHEADERS',
  319              'EXTENSIONS',
  320              'PHPDBG'

/home/genis/Proyectos/ProyectoXat/vendor/phpunit/phpunit/src/TextUI/ResultPrinter.php:
  194      public function printResult(TestResult $result)
  195      {
  196:         $this->printHeader();
  197          $this->printErrors($result);
  198          $this->printWarnings($result);
  ...
  253      protected function printDefect(TestFailure $defect, $count)
  254      {
  255:         $this->printDefectHeader($defect, $count);
  256          $this->printDefectTrace($defect);
  257      }
  ...
  261       * @param int         $count
  262       */
  263:     protected function printDefectHeader(TestFailure $defect, $count)
  264      {
  265          $this->write(
  ...
  333      }
  334  
  335:     protected function printHeader()
  336      {
  337          $this->write("\n\n" . PHP_Timer::resourceUsage() . "\n\n");

/home/genis/Proyectos/ProyectoXat/vendor/phpunit/phpunit/src/Util/Log/TeamCity.php:
   58      public function printResult(TestResult $result)
   59      {
   60:         $this->printHeader();
   61          $this->printFooter($result);
   62      }

/home/genis/Proyectos/ProyectoXat/vendor/phpunit/phpunit/src/Util/Test.php:
  682      {
  683          $annotations = [];
  684:         // Strip away the docblock header and footer to ease parsing of one line annotations
  685          $docblock = \substr($docblock, 3, -2);
  686  

/home/genis/Proyectos/ProyectoXat/vendor/phpunit/phpunit/src/Util/TestDox/HtmlResultPrinter.php:
   18       * @var string
   19       */
   20:     private $pageHeader = <<<EOT
   21  <!doctype html>
   22  <html lang="en">
   23:     <head>
   24          <meta charset="utf-8"/>
   25          <title>Test Documentation</title>
   ..
   47              }
   48          </style>
   49:     </head>
   50      <body>
   51  EOT;
   ..
   54       * @var string
   55       */
   56:     private $classHeader = <<<EOT
   57  
   58          <h2 id="%s">%s</h2>
   ..
   82      protected function startRun()
   83      {
   84:         $this->write($this->pageHeader);
   85      }
   86  
   ..
   94          $this->write(
   95              \sprintf(
   96:                 $this->classHeader,
   97                  $name,
   98                  $this->currentTestClassPrettified

/home/genis/Proyectos/ProyectoXat/vendor/phpunit/phpunit/tests/TextUI/testdox-html.phpt:
   15  <!doctype html>
   16  <html lang="en">
   17:     <head>
   18          <meta charset="utf-8"/>
   19          <title>Test Documentation</title>
   ..
   41              }
   42          </style>
   43:     </head>
   44      <body>
   45  

/home/genis/Proyectos/ProyectoXat/vendor/phpunit/phpunit/tests/Util/TestDox/NamePrettifierTest.php:
   69      public function testTestNameIsNotGroupedWhenNotInSequence()
   70      {
   71:         $this->assertEquals('Sets redirect header on 301', $this->namePrettifier->prettifyTestMethod('testSetsRedirectHeaderOn301'));
   72:         $this->assertEquals('Sets redirect header on 302', $this->namePrettifier->prettifyTestMethod('testSetsRedirectHeaderOn302'));
   73      }
   74  

/home/genis/Proyectos/ProyectoXat/vendor/psy/psysh/.php_cs:
    8      ->exclude('build-vendor');
    9  
   10: $header = <<<EOF
   11  This file is part of Psy Shell.
   12  
   ..
   23          'binary_operator_spaces' => false,
   24          'concat_space' => array('spacing' => 'one'),
   25:         'header_comment' => array('header' => $header),
   26          'increment_style' => array('style' => 'post'),
   27          'method_argument_space' => array('keep_multiple_spaces_after_comma' => true),

/home/genis/Proyectos/ProyectoXat/vendor/psy/psysh/src/Psy/CodeCleaner/ValidClassNamePass.php:
   31   *
   32   * This pass throws a FatalErrorException rather than letting PHP run
   33:  * headfirst into a real fatal error and die.
   34   */
   35  class ValidClassNamePass extends NamespaceAwarePass

/home/genis/Proyectos/ProyectoXat/vendor/psy/psysh/src/Psy/CodeCleaner/ValidConstantPass.php:
   22   *
   23   * This pass throws a FatalErrorException rather than letting PHP run
   24:  * headfirst into a real fatal error and die.
   25   *
   26   * @todo Detect constants defined in the current code snippet?

/home/genis/Proyectos/ProyectoXat/vendor/psy/psysh/src/Psy/CodeCleaner/ValidFunctionNamePass.php:
   27   *
   28   * This pass throws a FatalErrorException rather than letting PHP run
   29:  * headfirst into a real fatal error and die.
   30   */
   31  class ValidFunctionNamePass extends NamespaceAwarePass

/home/genis/Proyectos/ProyectoXat/vendor/psy/psysh/src/Psy/Command/HistoryCommand.php:
   61              ->setDefinition(array(
   62                  new InputOption('show',        's', InputOption::VALUE_REQUIRED, 'Show the given range of lines'),
   63:                 new InputOption('head',        'H', InputOption::VALUE_REQUIRED, 'Display the first N items.'),
   64                  new InputOption('tail',        'T', InputOption::VALUE_REQUIRED, 'Display the last N items.'),
   65  
   ..
   93      protected function execute(InputInterface $input, OutputInterface $output)
   94      {
   95:         $this->validateOnlyOne($input, array('show', 'head', 'tail'));
   96          $this->validateOnlyOne($input, array('save', 'replay', 'clear'));
   97  
   98          $history = $this->getHistorySlice(
   99              $input->getOption('show'),
  100:             $input->getOption('head'),
  101              $input->getOption('tail')
  102          );
  ...
  127              $output->writeln('<info>History saved.</info>');
  128          } elseif ($input->getOption('replay')) {
  129:             if (!($input->getOption('show') || $input->getOption('head') || $input->getOption('tail'))) {
  130:                 throw new \InvalidArgumentException('You must limit history via --head, --tail or --show before replaying.');
  131              }
  132  
  ...
  175       *
  176       * @param string $show
  177:      * @param string $head
  178       * @param string $tail
  179       *
  180       * @return array A slilce of history
  181       */
  182:     private function getHistorySlice($show, $head, $tail)
  183      {
  184          $history = $this->readline->listHistory();
  ...
  190              list($start, $end) = $this->extractRange($show);
  191              $length = $end - $start;
  192:         } elseif ($head) {
  193:             if (!preg_match('/^\d+$/', $head)) {
  194:                 throw new \InvalidArgumentException('Please specify an integer argument for --head.');
  195              }
  196  
  197              $start  = 0;
  198:             $length = intval($head);
  199          } elseif ($tail) {
  200              if (!preg_match('/^\d+$/', $tail)) {

/home/genis/Proyectos/ProyectoXat/vendor/psy/psysh/src/Psy/Shell.php:
  287          // }
  288  
  289:         $this->output->writeln($this->getHeader());
  290          $this->writeVersionInfo();
  291          $this->writeStartupMessage();
  ...
  921  
  922      /**
  923:      * Get the shell output header.
  924       *
  925       * @return string
  926       */
  927:     protected function getHeader()
  928      {
  929          return sprintf('<aside>%s by Justin Hileman</aside>', $this->getVersion());

/home/genis/Proyectos/ProyectoXat/vendor/sebastian/comparator/.php_cs.dist:
    1  <?php
    2: $header = <<<'EOF'
    3  This file is part of sebastian/comparator.
    4  
    .
   35              'full_opening_tag' => true,
   36              'function_declaration' => true,
   37:             'header_comment' => ['header' => $header, 'separate' => 'none'],
   38              'indentation_type' => true,
   39              'line_ending' => true,

/home/genis/Proyectos/ProyectoXat/vendor/sebastian/diff/.php_cs:
    1  <?php declare(strict_types=1);
    2: $header = <<<'EOF'
    3  This file is part of sebastian/diff.
    4  
    .
   28              'full_opening_tag' => true,
   29              'function_declaration' => true,
   30:             'header_comment' => ['header' => $header, 'separate' => 'none'],
   31              'indentation_type' => true,
   32              'line_ending' => true,

/home/genis/Proyectos/ProyectoXat/vendor/sebastian/diff/src/Output/DiffOnlyOutputBuilder.php:
   19       * @var string
   20       */
   21:     private $header;
   22  
   23:     public function __construct(string $header = "--- Original\n+++ New\n")
   24      {
   25:         $this->header = $header;
   26      }
   27  
   ..
   30          $buffer = \fopen('php://memory', 'r+b');
   31  
   32:         if ('' !== $this->header) {
   33:             \fwrite($buffer, $this->header);
   34:             if ("\n" !== \substr($this->header, -1, 1)) {
   35                  \fwrite($buffer, "\n");
   36              }

/home/genis/Proyectos/ProyectoXat/vendor/sebastian/diff/src/Output/UnifiedDiffOutputBuilder.php:
   19       * @var string
   20       */
   21:     private $header;
   22  
   23      /**
   ..
   26      private $addLineNumbers;
   27  
   28:     public function __construct(string $header = "--- Original\n+++ New\n", bool $addLineNumbers = false)
   29      {
   30:         $this->header         = $header;
   31          $this->addLineNumbers = $addLineNumbers;
   32      }
   ..
   36          $buffer = \fopen('php://memory', 'r+b');
   37  
   38:         if ('' !== $this->header) {
   39:             \fwrite($buffer, $this->header);
   40:             if ("\n" !== \substr($this->header, -1, 1)) {
   41                  \fwrite($buffer, "\n");
   42              }

/home/genis/Proyectos/ProyectoXat/vendor/sebastian/diff/tests/DifferTest.php:
    <binary>

/home/genis/Proyectos/ProyectoXat/vendor/sebastian/environment/.php_cs:
    1  <?php
    2: $header = <<<'EOF'
    3  This file is part of sebastian/environment.
    4  
    .
   27              'full_opening_tag' => true,
   28              'function_declaration' => true,
   29:             #'header_comment' => ['header' => $header, 'separate' => 'none'],
   30              'indentation_type' => true,
   31              'line_ending' => true,

/home/genis/Proyectos/ProyectoXat/vendor/sebastian/exporter/.php_cs:
    1  <?php
    2: $header = <<<'EOF'
    3  This file is part of the exporter package.
    4  
    .
   27              'full_opening_tag' => true,
   28              'function_declaration' => true,
   29:             'header_comment' => ['header' => $header, 'separate' => 'none'],
   30              'indentation_type' => true,
   31              'line_ending' => true,

/home/genis/Proyectos/ProyectoXat/vendor/sebastian/global-state/.php_cs:
    1  <?php
    2: $header = <<<'EOF'
    3  This file is part of sebastian/global-state.
    4  
    .
   27              'full_opening_tag' => true,
   28              'function_declaration' => true,
   29:             #'header_comment' => ['header' => $header, 'separate' => 'none'],
   30              'indentation_type' => true,
   31              'line_ending' => true,

/home/genis/Proyectos/ProyectoXat/vendor/sebastian/object-reflector/.php_cs:
    1  <?php
    2: $header = <<<'EOF'
    3  This file is part of object-reflector.
    4  
    .
   28              'full_opening_tag' => true,
   29              'function_declaration' => true,
   30:             #'header_comment' => ['header' => $header, 'separate' => 'none'],
   31              'indentation_type' => true,
   32              'line_ending' => true,

/home/genis/Proyectos/ProyectoXat/vendor/sebastian/resource-operations/src/ResourceOperations.php:
  137              'eio_open',
  138              'eio_read',
  139:             'eio_readahead',
  140              'eio_readdir',
  141              'eio_readlink',

/home/genis/Proyectos/ProyectoXat/vendor/swiftmailer/swiftmailer/CHANGES:
   17  
   18   * added Swift_Transport::ping()
   19:  * removed Swift_Mime_HeaderFactory, Swift_Mime_HeaderSet, Swift_Mime_Message, Swift_Mime_MimeEntity,
   20:    and Swift_Mime_ParameterizedHeader interfaces
   21   * removed Swift_MailTransport and Swift_Transport_MailTransport
   22   * removed Swift_Encoding
   ..
   24   * removed the Swift_SignedMessage class
   25   * removed newInstance() methods everywhere
   26:  * methods operating on Date header now use DateTimeImmutable object instead of Unix timestamp;
   27:    Swift_Mime_Headers_DateHeader::getTimestamp()/setTimestamp() renamed to getDateTime()/setDateTime()
   28   * bumped minimum version to PHP 7.0
   29   * removed Swift_Validate and replaced by egulias/email-validator
   ..
   51   * switched to use sha256 by default in DKIM as per the RFC
   52   * fixed an 'Undefined variable: pipes' PHP notice
   53:  * fixed long To headers when using the mail transport
   54   * fixed NTLMAuthenticator when no domain is passed with the username
   55   * prevented fatal error during unserialization of a message
   ..
   62  
   63     Prior to 5.4.5, the mail transport (Swift_Transport_MailTransport) was vulnerable to passing
   64:    arbitrary shell arguments if the "From", "ReturnPath" or "Sender" header came
   65     from a non-trusted source, potentially allowing Remote Code Execution
   66   * deprecated the mail transport
   ..
   74  ------------------
   75  
   76:  * fixed SimpleHeaderSet::has()/get() when the 0 index is removed
   77   * removed the need to have mcrypt installed
   78:  * fixed broken MIME header encoding with quotes/colons and non-ascii chars
   79:  * allowed mail transport send for messages without To header
   80   * fixed PHP 7 support
   81  
   ..
   90   * added methods to set custom stream context options
   91   * fixed charset changes in QpContentEncoderProxy
   92:  * added return-path header to the ignoredHeaders list of DKIMSigner
   93   * fixed crlf for subject using mail
   94   * fixed add soft line break only when necessary
   ..
   99  
  100   * made Swiftmailer exceptions confirm to PHP base exception constructor signature
  101:  * fixed MAIL FROM & RCPT TO headers to be RFC compliant
  102  
  103  5.4.0 (2015-03-14)
  ...
  137  
  138     Prior to 5.2.1, the sendmail transport (Swift_Transport_SendmailTransport)
  139:    was vulnerable to an arbitrary shell execution if the "From" header came
  140     from a non-trusted source and no "Return-Path" is configured.
  141  
  ...
  190   * removed usage of the native QP encoder when the charset is not UTF-8
  191   * fixed usage of uniqid to avoid collisions
  192:  * made a performance improvement when tokenizing large headers
  193   * fixed usage of the PHP native QP encoder on PHP 5.4.7+
  194  
  ...
  227   * changed the init script to lazy-load the initialization
  228   * fixed docblocks (@id) which caused some problems with libraries parsing the dobclocks
  229:  * fixed Swift_Mime_Headers_IdentificationHeader::setId() when passed an array of ids
  230:  * fixed encoding of email addresses in headers
  231   * added replacements setter to the Decorator plugin
  232  
  ...
  268  
  269   * fixed wrong detection of magic_quotes_runtime
  270:  * fixed fatal errors when no To or Subject header has been set
  271:  * fixed charset on parameter header continuations
  272   * added documentation about how to install Swiftmailer from the PEAR channel
  273   * fixed various typos and markup problem in the documentation
  ...
  291  New features:
  292  
  293:  * changed the Decorator Plugin to allow replacements in all headers
  294   * added Swift_Mime_Grammar and Swift_Validate to validate an email address
  295   * modified the autoloader to lazy-initialize Swiftmailer

/home/genis/Proyectos/ProyectoXat/vendor/swiftmailer/swiftmailer/doc/headers.rst:
    1: Message Headers
    2  ===============
    3  
    4: Sometimes you'll want to add your own headers to a message or modify/remove
    5: headers that are already present. You work with the message's HeaderSet to do
    6  this.
    7  
    8: Header Basics
    9  -------------
   10  
   11  All MIME entities in Swift Mailer -- including the message itself -- store
   12: their headers in a single object called a HeaderSet. This HeaderSet is
   13: retrieved with the ``getHeaders()`` method.
   14  
   15  As mentioned in the previous chapter, everything that forms a part of a message
   ..
   17  ``Swift_Mime_SimpleMimeEntity``. This includes -- most notably -- the message
   18  object itself, attachments, MIME parts and embedded images. Each of these MIME
   19: entities consists of a body and a set of headers that describe the body.
   20  
   21: For all of the "standard" headers in these MIME entities, such as the
   22  ``Content-Type``, there are named methods for working with them, such as
   23: ``setContentType()`` and ``getContentType()``. This is because headers are a
   24: moderately complex area of the library. Each header has a slightly different
   25  required structure that it must meet in order to comply with the standards that
   26  govern email (and that are checked by spam blockers etc).
   27  
   28: You fetch the HeaderSet from a MIME entity like so::
   29  
   30      $message = new Swift_Message();
   31  
   32:     // Fetch the HeaderSet from a Message object
   33:     $headers = $message->getHeaders();
   34  
   35      $attachment = Swift_Attachment::fromPath('document.pdf');
   36  
   37:     // Fetch the HeaderSet from an attachment object
   38:     $headers = $attachment->getHeaders();
   39  
   40: The job of the HeaderSet is to contain and manage instances of Header objects.
   41: Depending upon the MIME entity the HeaderSet came from, the contents of the
   42: HeaderSet will be different, since an attachment for example has a different
   43: set of headers to those in a message.
   44  
   45: You can find out what the HeaderSet contains with a quick loop, dumping out the
   46: names of the headers::
   47  
   48:     foreach ($headers->getAll() as $header) {
   49:       printf("%s<br />\n", $header->getFieldName());
   50      }
   51  
   ..
   61      */
   62  
   63: You can also dump out the rendered HeaderSet by calling its ``toString()``
   64  method::
   65  
   66:     echo $headers->toString();
   67  
   68      /*
   ..
   77      */
   78  
   79: Where the complexity comes in is when you want to modify an existing header.
   80: This complexity comes from the fact that each header can be of a slightly
   81: different type (such as a Date header, or a header that contains email
   82: addresses, or a header that has key-value parameters on it!). Each header in
   83: the HeaderSet is an instance of ``Swift_Mime_Header``. They all have common
   84: functionality, but knowing exactly what type of header you're working with will
   85  allow you a little more control.
   86  
   87: You can determine the type of header by comparing the return value of its
   88  ``getFieldType()`` method with the constants ``TYPE_TEXT``,
   89  ``TYPE_PARAMETERIZED``, ``TYPE_DATE``, ``TYPE_MAILBOX``, ``TYPE_ID`` and
   90: ``TYPE_PATH`` which are defined in ``Swift_Mime_Header``::
   91  
   92:     foreach ($headers->getAll() as $header) {
   93:       switch ($header->getFieldType()) {
   94:         case Swift_Mime_Header::TYPE_TEXT: $type = 'text';
   95            break;
   96:         case Swift_Mime_Header::TYPE_PARAMETERIZED: $type = 'parameterized';
   97            break;
   98:         case Swift_Mime_Header::TYPE_MAILBOX: $type = 'mailbox';
   99            break;
  100:         case Swift_Mime_Header::TYPE_DATE: $type = 'date';
  101            break;
  102:         case Swift_Mime_Header::TYPE_ID: $type = 'ID';
  103            break;
  104:         case Swift_Mime_Header::TYPE_PATH: $type = 'path';
  105            break;
  106        }
  107:       printf("%s: is a %s header<br />\n", $header->getFieldName(), $type);
  108      }
  109  
  110      /*
  111:     Content-Transfer-Encoding: is a text header
  112:     Content-Type: is a parameterized header
  113:     MIME-Version: is a text header
  114:     Date: is a date header
  115:     Message-ID: is a ID header
  116:     From: is a mailbox header
  117:     Subject: is a text header
  118:     To: is a mailbox header
  119      */
  120  
  121: Headers can be removed from the set, modified within the set, or added to the
  122  set.
  123  
  124: The following sections show you how to work with the HeaderSet and explain the
  125: details of each implementation of ``Swift_Mime_Header`` that may exist within
  126: the HeaderSet.
  127  
  128: Header Types
  129  ------------
  130  
  131: Because all headers are modeled on different data (dates, addresses, text!)
  132: there are different types of Header in Swift Mailer. Swift Mailer attempts to
  133: categorize all possible MIME headers into more general groups, defined by a
  134  small number of classes.
  135  
  136: Text Headers
  137  ~~~~~~~~~~~~
  138  
  139: Text headers are the simplest type of Header. They contain textual information
  140  with no special information included within it -- for example the Subject
  141: header in a message.
  142  
  143: There's nothing particularly interesting about a text header, though it is
  144: probably the one you'd opt to use if you need to add a custom header to a
  145  message. It represents text just like you'd think it does. If the text contains
  146: characters that are not permitted in a message header (such as new lines, or
  147: non-ascii characters) then the header takes care of encoding the text so that
  148  it can be used.
  149  
  150: No header -- including text headers -- in Swift Mailer is vulnerable to
  151: header-injection attacks. Swift Mailer breaks any attempt at header injection
  152  by encoding the dangerous data into a non-dangerous form.
  153  
  154: It's easy to add a new text header to a HeaderSet. You do this by calling the
  155: HeaderSet's ``addTextHeader()`` method::
  156  
  157      $message = new Swift_Message();
  158:     $headers = $message->getHeaders();
  159:     $headers->addTextHeader('Your-Header-Name', 'the header value');
  160  
  161: Changing the value of an existing text header is done by calling it's
  162  ``setValue()`` method::
  163  
  164:     $subject = $message->getHeaders()->get('Subject');
  165      $subject->setValue('new subject');
  166  
  167: When output via ``toString()``, a text header produces something like the
  168  following::
  169  
  170:     $subject = $message->getHeaders()->get('Subject');
  171      $subject->setValue('amazing subject line');
  172      echo $subject->toString();
  ...
  178      */
  179  
  180: If the header contains any characters that are outside of the US-ASCII range
  181  however, they will be encoded. This is nothing to be concerned about since mail
  182  clients will decode them back::
  183  
  184:     $subject = $message->getHeaders()->get('Subject');
  185      $subject->setValue('contains – dash');
  186      echo $subject->toString();
  ...
  192      */
  193  
  194: Parameterized Headers
  195  ~~~~~~~~~~~~~~~~~~~~~
  196  
  197: Parameterized headers are text headers that contain key-value parameters
  198: following the textual content. The Content-Type header of a message is a
  199: parameterized header since it contains charset information after the content
  200  type.
  201  
  202: The parameterized header type is a special type of text header. It extends the
  203: text header by allowing additional information to follow it. All of the methods
  204: from text headers are available in addition to the methods described here.
  205  
  206: Adding a parameterized header to a HeaderSet is done by using the
  207: ``addParameterizedHeader()`` method which takes a text value like
  208: ``addTextHeader()`` but it also accepts an associative array of key-value
  209  parameters::
  210  
  211      $message = new Swift_Message();
  212:     $headers = $message->getHeaders();
  213:     $headers->addParameterizedHeader(
  214:       'Header-Name', 'header value',
  215        ['foo' => 'bar']
  216        );
  217  
  218: To change the text value of the header, call it's ``setValue()`` method just as
  219: you do with text headers.
  220  
  221: To change the parameters in the header, call the header's ``setParameters()``
  222  method or the ``setParameter()`` method (note the pluralization)::
  223  
  224:     $type = $message->getHeaders()->get('Content-Type');
  225  
  226      // setParameters() takes an associative array
  ...
  233      $type->setParameter('charset', 'iso-8859-1');
  234  
  235: When output via ``toString()``, a parameterized header produces something like
  236  the following::
  237  
  238:     $type = $message->getHeaders()->get('Content-Type');
  239      $type->setValue('text/html');
  240      $type->setParameter('charset', 'utf-8');
  ...
  248      */
  249  
  250: If the header contains any characters that are outside of the US-ASCII range
  251: however, they will be encoded, just like they are for text headers. This is
  252  nothing to be concerned about since mail clients will decode them back.
  253  Likewise, if the parameters contain any non-ascii characters they will be
  ...
  255  
  256      $attachment = new Swift_Attachment();
  257:     $disp = $attachment->getHeaders()->get('Content-Disposition');
  258      $disp->setValue('attachment');
  259      $disp->setParameter('filename', 'report–may.pdf');
  ...
  266      */
  267  
  268: Date Headers
  269  ~~~~~~~~~~~~
  270  
  271: Date headers contains an RFC 2822 formatted date (i.e. what PHP's ``date('r')``
  272  returns). They are used anywhere a date or time is needed to be presented as a
  273: message header.
  274  
  275: The data on which a date header is modeled as a DateTimeImmutable object. The
  276  object is used to create a correctly structured RFC 2822 formatted date with
  277  timezone such as ``Tue, 17 Feb 2009 22:26:31 +1100``.
  278  
  279: The obvious place this header type is used is in the ``Date:`` header of the
  280  message itself.
  281  
  282: It's easy to add a new date header to a HeaderSet. You do this by calling the
  283: HeaderSet's ``addDateHeader()`` method::
  284  
  285      $message = new Swift_Message();
  286:     $headers = $message->getHeaders();
  287:     $headers->addDateHeader('Your-Header', new DateTimeImmutable('3 days ago'));
  288  
  289: Changing the value of an existing date header is done by calling it's
  290  ``setDateTime()`` method::
  291  
  292:     $date = $message->getHeaders()->get('Date');
  293      $date->setDateTime(new DateTimeImmutable());
  294  
  295: When output via ``toString()``, a date header produces something like the
  296  following::
  297  
  298:     $date = $message->getHeaders()->get('Date');
  299      echo $date->toString();
  300  
  ...
  305      */
  306  
  307: Mailbox (e-mail address) Headers
  308  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  309  
  310: Mailbox headers contain one or more email addresses, possibly with personalized
  311  names attached to them. The data on which they are modeled is represented by an
  312  associative array of email addresses and names.
  313  
  314: Mailbox headers are probably the most complex header type to understand in
  315  Swift Mailer because they accept their input as an array which can take various
  316  forms, as described in the previous chapter.
  317  
  318: All of the headers that contain e-mail addresses in a message -- with the
  319: exception of ``Return-Path:`` which has a stricter syntax -- use this header
  320  type. That is, ``To:``, ``From:`` etc.
  321  
  322: You add a new mailbox header to a HeaderSet by calling the HeaderSet's
  323: ``addMailboxHeader()`` method::
  324  
  325      $message = new Swift_Message();
  326:     $headers = $message->getHeaders();
  327:     $headers->addMailboxHeader('Your-Header-Name', [
  328            'person1@example.org' => 'Person Name One',
  329            'person2@example.org',
  ...
  332      ]);
  333  
  334: Changing the value of an existing mailbox header is done by calling it's
  335  ``setNameAddresses()`` method::
  336  
  337:     $to = $message->getHeaders()->get('To');
  338      $to->setNameAddresses([
  339        'joe@example.org' => 'Joe Bloggs',
  ...
  347  use the ``setAddresses()`` method instead::
  348  
  349:     $to = $message->getHeaders()->get('To');
  350      $to->setAddresses([
  351        'joe@example.org',
  ...
  358      Both methods will accept the above input format in practice.
  359  
  360: If all you want to do is set a single address in the header, you can use a
  361  string as the input parameter to ``setAddresses()`` and/or
  362  ``setNameAddresses()``::
  363  
  364:     $to = $message->getHeaders()->get('To');
  365      $to->setAddresses('joe-bloggs@example.org');
  366  
  367: When output via ``toString()``, a mailbox header produces something like the
  368  following::
  369  
  370:     $to = $message->getHeaders()->get('To');
  371      $to->setNameAddresses([
  372        'person1@example.org' => 'Name of Person',
  ...
  384      */
  385  
  386: ID Headers
  387  ~~~~~~~~~~
  388  
  389: ID headers contain identifiers for the entity (or the message). The most
  390: notable ID header is the Message-ID header on the message itself.
  391  
  392: An ID that exists inside an ID header looks more-or-less less like an email
  393  address. For example, ``<1234955437.499becad62ec2@example.org>``. The part to
  394  the left of the @ sign is usually unique, based on the current time and some
  395  random factor. The part on the right is usually a domain name.
  396  
  397: Any ID passed to the header's ``setId()`` method absolutely MUST conform to
  398  this structure, otherwise you'll get an Exception thrown at you by Swift Mailer
  399  (a ``Swift_RfcComplianceException``). This is to ensure that the generated
  ...
  401  blocked as spam.
  402  
  403: It's easy to add a new ID header to a HeaderSet. You do this by calling the
  404: HeaderSet's ``addIdHeader()`` method::
  405  
  406      $message = new Swift_Message();
  407:     $headers = $message->getHeaders();
  408:     $headers->addIdHeader('Your-Header-Name', '123456.unqiue@example.org');
  409  
  410: Changing the value of an existing ID header is done by calling its ``setId()``
  411  method::
  412  
  413:     $msgId = $message->getHeaders()->get('Message-ID');
  414      $msgId->setId(time() . '.' . uniqid('thing') . '@example.org');
  415  
  416: When output via ``toString()``, an ID header produces something like the
  417  following::
  418  
  419:     $msgId = $message->getHeaders()->get('Message-ID');
  420      echo $msgId->toString();
  421  
  ...
  426      */
  427  
  428: Path Headers
  429  ~~~~~~~~~~~~
  430  
  431: Path headers are like very-restricted mailbox headers. They contain a single
  432: email address with no associated name. The Return-Path header of a message is a
  433: path header.
  434  
  435: You add a new path header to a HeaderSet by calling the HeaderSet's
  436: ``addPathHeader()`` method::
  437  
  438      $message = new Swift_Message();
  439:     $headers = $message->getHeaders();
  440:     $headers->addPathHeader('Your-Header-Name', 'person@example.org');
  441  
  442  
  443: Changing the value of an existing path header is done by calling its
  444  ``setAddress()`` method::
  445  
  446:     $return = $message->getHeaders()->get('Return-Path');
  447      $return->setAddress('my-address@example.org');
  448  
  449: When output via ``toString()``, a path header produces something like the
  450  following::
  451  
  452:     $return = $message->getHeaders()->get('Return-Path');
  453      $return->setAddress('person@example.org');
  454      echo $return->toString();
  ...
  460      */
  461  
  462: Header Operations
  463  -----------------
  464  
  465: Working with the headers in a message involves knowing how to use the methods
  466: on the HeaderSet and on the individual Headers within the HeaderSet.
  467  
  468: Adding new Headers
  469  ~~~~~~~~~~~~~~~~~~
  470  
  471: New headers can be added to the HeaderSet by using one of the provided
  472: ``add..Header()`` methods.
  473  
  474: The added header will appear in the message when it is sent::
  475  
  476:     // Adding a custom header to a message
  477      $message = new Swift_Message();
  478:     $headers = $message->getHeaders();
  479:     $headers->addTextHeader('X-Mine', 'something here');
  480  
  481:     // Adding a custom header to an attachment
  482      $attachment = Swift_Attachment::fromPath('/path/to/doc.pdf');
  483:     $attachment->getHeaders()->addDateHeader('X-Created-Time', time());
  484  
  485: Retrieving Headers
  486  ~~~~~~~~~~~~~~~~~~
  487  
  488: Headers are retrieved through the HeaderSet's ``get()`` and ``getAll()``
  489  methods::
  490  
  491:     $headers = $message->getHeaders();
  492  
  493:     // Get the To: header
  494:     $toHeader = $headers->get('To');
  495  
  496:     // Get all headers named "X-Foo"
  497:     $fooHeaders = $headers->getAll('X-Foo');
  498  
  499:     // Get the second header named "X-Foo"
  500:     $foo = $headers->get('X-Foo', 1);
  501  
  502:     // Get all headers that are present
  503:     $all = $headers->getAll();
  504  
  505: When using ``get()`` a single header is returned that matches the name (case
  506: insensitive) that is passed to it. When using ``getAll()`` with a header name,
  507: an array of headers with that name are returned. Calling ``getAll()`` with no
  508: arguments returns an array of all headers present in the entity.
  509  
  510  .. note::
  511  
  512:     It's valid for some headers to appear more than once in a message (e.g.
  513:     the Received header). For this reason ``getAll()`` exists to fetch all
  514:     headers with a specified name. In addition, ``get()`` accepts an optional
  515:     numerical index, starting from zero to specify which header you want more
  516      specifically.
  517  
  518  .. note::
  519  
  520:     If you want to modify the contents of the header and you don't know for
  521:     sure what type of header it is then you may need to check the type by
  522      calling its ``getFieldType()`` method.
  523  
  524: Check if a Header Exists
  525  ~~~~~~~~~~~~~~~~~~~~~~~~
  526  
  527: You can check if a named header is present in a HeaderSet by calling its
  528  ``has()`` method::
  529  
  530:     $headers = $message->getHeaders();
  531  
  532:     // Check if the To: header exists
  533:     if ($headers->has('To')) {
  534        echo 'To: exists';
  535      }
  536  
  537:     // Check if an X-Foo header exists twice (i.e. check for the 2nd one)
  538:     if ($headers->has('X-Foo', 1)) {
  539:       echo 'Second X-Foo header exists';
  540      }
  541  
  542: If the header exists, ``true`` will be returned or ``false`` if not.
  543  
  544  .. note::
  545  
  546:     It's valid for some headers to appear more than once in a message (e.g.
  547:     the Received header). For this reason ``has()`` accepts an optional
  548:     numerical index, starting from zero to specify which header you want to
  549      check more specifically.
  550  
  551: Removing Headers
  552  ~~~~~~~~~~~~~~~~
  553  
  554: Removing a Header from the HeaderSet is done by calling the HeaderSet's
  555  ``remove()`` or ``removeAll()`` methods::
  556  
  557:     $headers = $message->getHeaders();
  558  
  559:     // Remove the Subject: header
  560:     $headers->remove('Subject');
  561  
  562:     // Remove all X-Foo headers
  563:     $headers->removeAll('X-Foo');
  564  
  565:     // Remove only the second X-Foo header
  566:     $headers->remove('X-Foo', 1);
  567  
  568: When calling ``remove()`` a single header will be removed. When calling
  569: ``removeAll()`` all headers with the given name will be removed. If no headers
  570  exist with the given name, no errors will occur.
  571  
  572  .. note::
  573  
  574:     It's valid for some headers to appear more than once in a message (e.g.
  575:     the Received header). For this reason ``remove()`` accepts an optional
  576:     numerical index, starting from zero to specify which header you want to
  577      check more specifically. For the same reason, ``removeAll()`` exists to
  578:     remove all headers that have the given name.
  579  
  580: Modifying a Header's Content
  581  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  582  
  583: To change a Header's content you should know what type of header it is and then
  584: call it's appropriate setter method. All headers also have a
  585  ``setFieldBodyModel()`` method that accepts a mixed parameter and delegates to
  586  the correct setter::
  587  
  588: The header will be updated inside the HeaderSet and the changes will be seen
  589  when the message is sent::
  590  
  591:     $headers = $message->getHeaders();
  592  
  593:     // Change the Subject: header
  594:     $subj = $headers->get('Subject');
  595      $subj->setValue('new subject here');
  596  
  597:     // Change the To: header
  598:     $to = $headers->get('To');
  599      $to->setNameAddresses([
  600        'person@example.org' => 'Person',

/home/genis/Proyectos/ProyectoXat/vendor/swiftmailer/swiftmailer/doc/index.rst:
    7      introduction
    8      messages
    9:     headers
   10      sending
   11      plugins

/home/genis/Proyectos/ProyectoXat/vendor/swiftmailer/swiftmailer/doc/japanese.rst:
    9      Swift::init(function () {
   10          Swift_DependencyContainer::getInstance()
   11:             ->register('mime.qpheaderencoder')
   12:             ->asAliasOf('mime.base64headerencoder');
   13  
   14          Swift_Preferences::getInstance()->setCharset('iso-2022-jp');

/home/genis/Proyectos/ProyectoXat/vendor/swiftmailer/swiftmailer/doc/messages.rst:
   48  
   49  The basic units of each MIME entity -- be it the Message itself, or an
   50: Attachment -- are its Headers and its body:
   51  
   52  .. code-block:: text
   53  
   54:     Header-Name: A header value
   55:     Other-Header: Another value
   56  
   57      The body content itself
   58  
   59: The Headers of a MIME entity, and its body must conform to some strict
   60  standards defined by various RFC documents. Swift Mailer ensures that these
   61  specifications are followed by using various types of object, including
   62: Encoders and different Header types to generate the entity.
   63  
   64  The Structure of a Message
   ..
   69  other MIME entities -- attachments for example -- nested inside it.
   70  
   71: A Message has a lot of different Headers which are there to present information
   72: about the message to the recipients' mail client. Most of these headers will be
   73  familiar to the majority of users, but we'll list the basic ones. Although it's
   74: possible to work directly with the Headers of a Message (or other MIME entity),
   75: the standard Headers have accessor methods provided to abstract away the
   76  complex details for you. For example, although the Date on a message is written
   77  with a strict format, you only need to pass a DateTimeInterface instance to
   ..
   79  
   80  +-------------------------------+------------------------------------------------------------------------------------------------------------------------------------+---------------------------------------------+
   81: | Header                        | Description                                                                                                                        | Accessors                                   |
   82  +===============================+====================================================================================================================================+=============================================+
   83  | ``Message-ID``                | Identifies this message with a unique ID, usually containing the domain name and time generated                                    | ``getId()`` / ``setId()``                   |
   ..
  533  of the recipient.
  534  
  535: ``To:`` recipients are visible in the message headers and will be seen by the
  536  other recipients::
  537  
  ...
  571  of the recipient.
  572  
  573: ``Cc:`` recipients are visible in the message headers and will be seen by the
  574  other recipients::
  575  
  ...
  610  
  611  Only the individual ``Bcc:`` recipient will see their address in the message
  612: headers. Other recipients (including other ``Bcc:`` recipients) will not see
  613  the address::
  614  
  ...
  667  email was put together by a committee.
  668  
  669: The ``From:`` address(es) are visible in the message headers and will be seen
  670  by the recipients.
  671  
  ...
  695  ``setSender()`` method of the message.
  696  
  697: The ``Sender:`` address is visible in the message headers and will be seen by
  698  the recipients.
  699  

/home/genis/Proyectos/ProyectoXat/vendor/swiftmailer/swiftmailer/doc/plugins.rst:
  281  various ways you could tackle this problem without the need for a plugin. We're
  282  trying to come up with a better way ourselves and while we have several
  283: (obvious) ideas we don't quite have the perfect solution to go ahead and
  284  implement it. Watch this space.
  285  

/home/genis/Proyectos/ProyectoXat/vendor/swiftmailer/swiftmailer/lib/classes/Swift/Message.php:
   17  {
   18      /**
   19:      * @var Swift_Signers_HeaderSigner[]
   20       */
   21:     private $headerSigners = array();
   22  
   23      /**
   ..
   84      public function attachSigner(Swift_Signer $signer)
   85      {
   86:         if ($signer instanceof Swift_Signers_HeaderSigner) {
   87:             $this->headerSigners[] = $signer;
   88          } elseif ($signer instanceof Swift_Signers_BodySigner) {
   89              $this->bodySigners[] = $signer;
   ..
  102      public function detachSigner(Swift_Signer $signer)
  103      {
  104:         if ($signer instanceof Swift_Signers_HeaderSigner) {
  105:             foreach ($this->headerSigners as $k => $headerSigner) {
  106:                 if ($headerSigner === $signer) {
  107:                     unset($this->headerSigners[$k]);
  108  
  109                      return $this;
  ...
  130      public function toString()
  131      {
  132:         if (empty($this->headerSigners) && empty($this->bodySigners)) {
  133              return parent::toString();
  134          }
  ...
  152      public function toByteStream(Swift_InputByteStream $is)
  153      {
  154:         if (empty($this->headerSigners) && empty($this->bodySigners)) {
  155              parent::toByteStream($is);
  156  
  ...
  178      {
  179          foreach ($this->bodySigners as $signer) {
  180:             $altered = $signer->getAlteredHeaders();
  181:             $this->saveHeaders($altered);
  182              $signer->signMessage($this);
  183          }
  184  
  185:         foreach ($this->headerSigners as $signer) {
  186:             $altered = $signer->getAlteredHeaders();
  187:             $this->saveHeaders($altered);
  188              $signer->reset();
  189  
  190:             $signer->setHeaders($this->getHeaders());
  191  
  192              $signer->startBody();
  ...
  194              $signer->endBody();
  195  
  196:             $signer->addSignature($this->getHeaders());
  197          }
  198      }
  ...
  203      protected function saveMessage()
  204      {
  205:         $this->savedMessage = array('headers' => array());
  206          $this->savedMessage['body'] = $this->getBody();
  207          $this->savedMessage['children'] = $this->getChildren();
  ...
  213  
  214      /**
  215:      * save the original headers.
  216       *
  217       * @param array $altered
  218       */
  219:     protected function saveHeaders(array $altered)
  220      {
  221:         foreach ($altered as $head) {
  222:             $lc = strtolower($head);
  223  
  224:             if (!isset($this->savedMessage['headers'][$lc])) {
  225:                 $this->savedMessage['headers'][$lc] = $this->getHeaders()->getAll($head);
  226              }
  227          }
  ...
  229  
  230      /**
  231:      * Remove or restore altered headers.
  232       */
  233:     protected function restoreHeaders()
  234      {
  235:         foreach ($this->savedMessage['headers'] as $name => $savedValue) {
  236:             $headers = $this->getHeaders()->getAll($name);
  237  
  238:             foreach ($headers as $key => $value) {
  239                  if (!isset($savedValue[$key])) {
  240:                     $this->getHeaders()->remove($name, $key);
  241                  }
  242              }
  ...
  252          $this->setChildren($this->savedMessage['children']);
  253  
  254:         $this->restoreHeaders();
  255          $this->savedMessage = array();
  256      }
  ...
  268          }
  269  
  270:         foreach ($this->headerSigners as $key => $headerSigner) {
  271:             $this->headerSigners[$key] = clone $headerSigner;
  272          }
  273      }

/home/genis/Proyectos/ProyectoXat/vendor/swiftmailer/swiftmailer/lib/classes/Swift/Mime/Attachment.php:
   20  
   21      /**
   22:      * Create a new Attachment with $headers, $encoder and $cache.
   23       *
   24:      * @param Swift_Mime_SimpleHeaderSet $headers
   25       * @param Swift_Mime_ContentEncoder  $encoder
   26       * @param Swift_KeyCache             $cache
   ..
   28       * @param array                      $mimeTypes
   29       */
   30:     public function __construct(Swift_Mime_SimpleHeaderSet $headers, Swift_Mime_ContentEncoder $encoder, Swift_KeyCache $cache, Swift_IdGenerator $idGenerator, $mimeTypes = array())
   31      {
   32:         parent::__construct($headers, $encoder, $cache, $idGenerator);
   33          $this->setDisposition('attachment');
   34          $this->setContentType('application/octet-stream');
   ..
   57      public function getDisposition()
   58      {
   59:         return $this->getHeaderFieldModel('Content-Disposition');
   60      }
   61  
   ..
   69      public function setDisposition($disposition)
   70      {
   71:         if (!$this->setHeaderFieldModel('Content-Disposition', $disposition)) {
   72:             $this->getHeaders()->addParameterizedHeader('Content-Disposition', $disposition);
   73          }
   74  
   ..
   83      public function getFilename()
   84      {
   85:         return $this->getHeaderParameter('Content-Disposition', 'filename');
   86      }
   87  
   ..
   95      public function setFilename($filename)
   96      {
   97:         $this->setHeaderParameter('Content-Disposition', 'filename', $filename);
   98:         $this->setHeaderParameter('Content-Type', 'name', $filename);
   99  
  100          return $this;
  ...
  108      public function getSize()
  109      {
  110:         return $this->getHeaderParameter('Content-Disposition', 'size');
  111      }
  112  
  ...
  120      public function setSize($size)
  121      {
  122:         $this->setHeaderParameter('Content-Disposition', 'size', $size);
  123  
  124          return $this;

/home/genis/Proyectos/ProyectoXat/vendor/swiftmailer/swiftmailer/lib/classes/Swift/Mime/EmbeddedFile.php:
   17  {
   18      /**
   19:      * Creates a new Attachment with $headers and $encoder.
   20       *
   21:      * @param Swift_Mime_SimpleHeaderSet $headers
   22       * @param Swift_Mime_ContentEncoder  $encoder
   23       * @param Swift_KeyCache             $cache
   ..
   25       * @param array                      $mimeTypes   optional
   26       */
   27:     public function __construct(Swift_Mime_SimpleHeaderSet $headers, Swift_Mime_ContentEncoder $encoder, Swift_KeyCache $cache, Swift_IdGenerator $idGenerator, $mimeTypes = array())
   28      {
   29:         parent::__construct($headers, $encoder, $cache, $idGenerator, $mimeTypes);
   30          $this->setDisposition('inline');
   31          $this->setId($this->getId());

/home/genis/Proyectos/ProyectoXat/vendor/swiftmailer/swiftmailer/lib/classes/Swift/Mime/Header.php:
   10  
   11  /**
   12:  * A MIME Header.
   13   *
   14   * @author Chris Corbyn
   15   */
   16: interface Swift_Mime_Header
   17  {
   18:     /** Text headers */
   19      const TYPE_TEXT = 2;
   20  
   21:     /**  headers (text + params) */
   22      const TYPE_PARAMETERIZED = 6;
   23  
   24:     /** Mailbox and address headers */
   25      const TYPE_MAILBOX = 8;
   26  
   27:     /** Date and time headers */
   28      const TYPE_DATE = 16;
   29  
   30:     /** Identification headers */
   31      const TYPE_ID = 32;
   32  
   33:     /** Address path headers */
   34      const TYPE_PATH = 64;
   35  
   36      /**
   37:      * Get the type of Header that this instance represents.
   38       *
   39       * @see TYPE_TEXT, TYPE_PARAMETERIZED, TYPE_MAILBOX
   ..
   47       * Set the model for the field body.
   48       *
   49:      * The actual types needed will vary depending upon the type of Header.
   50       *
   51       * @param mixed $model
   ..
   54  
   55      /**
   56:      * Set the charset used when rendering the Header.
   57       *
   58       * @param string $charset
   ..
   63       * Get the model for the field body.
   64       *
   65:      * The return type depends on the specifics of the Header.
   66       *
   67       * @return mixed
   ..
   70  
   71      /**
   72:      * Get the name of this header (e.g. Subject).
   73       *
   74       * The name is an identifier and as such will be immutable.
   ..
   79  
   80      /**
   81:      * Get the field body, prepared for folding into a final header value.
   82       *
   83       * @return string
   ..
   86  
   87      /**
   88:      * Get this Header rendered as a compliant string.
   89       *
   90       * @return string

/home/genis/Proyectos/ProyectoXat/vendor/swiftmailer/swiftmailer/lib/classes/Swift/Mime/HeaderEncoder.php:
   10  
   11  /**
   12:  * Interface for all Header Encoding schemes.
   13   *
   14   * @author Chris Corbyn
   15   */
   16: interface Swift_Mime_HeaderEncoder extends Swift_Encoder
   17  {
   18      /**

/home/genis/Proyectos/ProyectoXat/vendor/swiftmailer/swiftmailer/lib/classes/Swift/Mime/HeaderEncoder/Base64HeaderEncoder.php:
   10  
   11  /**
   12:  * Handles Base64 (B) Header Encoding in Swift Mailer.
   13   *
   14   * @author Chris Corbyn
   15   */
   16: class Swift_Mime_HeaderEncoder_Base64HeaderEncoder extends Swift_Encoder_Base64Encoder implements Swift_Mime_HeaderEncoder
   17  {
   18      /**
   ..
   30       * Takes an unencoded string and produces a Base64 encoded string from it.
   31       *
   32:      * If the charset is iso-2022-jp, it uses mb_encode_mimeheader instead of
   33       * default encodeString, otherwise pass to the parent method.
   34       *
   ..
   45              $old = mb_internal_encoding();
   46              mb_internal_encoding('utf-8');
   47:             $newstring = mb_encode_mimeheader($string, $charset, $this->getName(), "\r\n");
   48              mb_internal_encoding($old);
   49  

/home/genis/Proyectos/ProyectoXat/vendor/swiftmailer/swiftmailer/lib/classes/Swift/Mime/HeaderEncoder/QpHeaderEncoder.php:
   10  
   11  /**
   12:  * Handles Quoted Printable (Q) Header Encoding in Swift Mailer.
   13   *
   14   * @author Chris Corbyn
   15   */
   16: class Swift_Mime_HeaderEncoder_QpHeaderEncoder extends Swift_Encoder_QpEncoder implements Swift_Mime_HeaderEncoder
   17  {
   18      /**
   19:      * Creates a new QpHeaderEncoder for the given CharacterStream.
   20       *
   21       * @param Swift_CharacterStream $charStream to use for reading characters

/home/genis/Proyectos/ProyectoXat/vendor/swiftmailer/swiftmailer/lib/classes/Swift/Mime/Headers/AbstractHeader.php:
   10  
   11  /**
   12:  * An abstract base MIME Header.
   13   *
   14   * @author     Chris Corbyn
   15   */
   16: abstract class Swift_Mime_Headers_AbstractHeader implements Swift_Mime_Header
   17  {
   18      const PHRASE_PATTERN = '(?:(?:(?:(?:(?:(?:(?:[ \t]*(?:\r\n))?[ \t])?(\((?:(?:(?:[ \t]*(?:\r\n))?[ \t])|(?:(?:[\x01-\x08\x0B\x0C\x0E-\x19\x7F]|[\x21-\x27\x2A-\x5B\x5D-\x7E])|(?:\\[\x00-\x08\x0B\x0C\x0E-\x7F])|(?1)))*(?:(?:[ \t]*(?:\r\n))?[ \t])?\)))*(?:(?:(?:(?:[ \t]*(?:\r\n))?[ \t])?(\((?:(?:(?:[ \t]*(?:\r\n))?[ \t])|(?:(?:[\x01-\x08\x0B\x0C\x0E-\x19\x7F]|[\x21-\x27\x2A-\x5B\x5D-\x7E])|(?:\\[\x00-\x08\x0B\x0C\x0E-\x7F])|(?1)))*(?:(?:[ \t]*(?:\r\n))?[ \t])?\)))|(?:(?:[ \t]*(?:\r\n))?[ \t])))?[a-zA-Z0-9!#\$%&\'\*\+\-\/=\?\^_`\{\}\|~]+(?:(?:(?:(?:[ \t]*(?:\r\n))?[ \t])?(\((?:(?:(?:[ \t]*(?:\r\n))?[ \t])|(?:(?:[\x01-\x08\x0B\x0C\x0E-\x19\x7F]|[\x21-\x27\x2A-\x5B\x5D-\x7E])|(?:\\[\x00-\x08\x0B\x0C\x0E-\x7F])|(?1)))*(?:(?:[ \t]*(?:\r\n))?[ \t])?\)))*(?:(?:(?:(?:[ \t]*(?:\r\n))?[ \t])?(\((?:(?:(?:[ \t]*(?:\r\n))?[ \t])|(?:(?:[\x01-\x08\x0B\x0C\x0E-\x19\x7F]|[\x21-\x27\x2A-\x5B\x5D-\x7E])|(?:\\[\x00-\x08\x0B\x0C\x0E-\x7F])|(?1)))*(?:(?:[ \t]*(?:\r\n))?[ \t])?\)))|(?:(?:[ \t]*(?:\r\n))?[ \t])))?)|(?:(?:(?:(?:(?:[ \t]*(?:\r\n))?[ \t])?(\((?:(?:(?:[ \t]*(?:\r\n))?[ \t])|(?:(?:[\x01-\x08\x0B\x0C\x0E-\x19\x7F]|[\x21-\x27\x2A-\x5B\x5D-\x7E])|(?:\\[\x00-\x08\x0B\x0C\x0E-\x7F])|(?1)))*(?:(?:[ \t]*(?:\r\n))?[ \t])?\)))*(?:(?:(?:(?:[ \t]*(?:\r\n))?[ \t])?(\((?:(?:(?:[ \t]*(?:\r\n))?[ \t])|(?:(?:[\x01-\x08\x0B\x0C\x0E-\x19\x7F]|[\x21-\x27\x2A-\x5B\x5D-\x7E])|(?:\\[\x00-\x08\x0B\x0C\x0E-\x7F])|(?1)))*(?:(?:[ \t]*(?:\r\n))?[ \t])?\)))|(?:(?:[ \t]*(?:\r\n))?[ \t])))?"((?:(?:[ \t]*(?:\r\n))?[ \t])?(?:(?:[\x01-\x08\x0B\x0C\x0E-\x19\x7F]|[\x21\x23-\x5B\x5D-\x7E])|(?:\\[\x00-\x08\x0B\x0C\x0E-\x7F])))*(?:(?:[ \t]*(?:\r\n))?[ \t])?"(?:(?:(?:(?:[ \t]*(?:\r\n))?[ \t])?(\((?:(?:(?:[ \t]*(?:\r\n))?[ \t])|(?:(?:[\x01-\x08\x0B\x0C\x0E-\x19\x7F]|[\x21-\x27\x2A-\x5B\x5D-\x7E])|(?:\\[\x00-\x08\x0B\x0C\x0E-\x7F])|(?1)))*(?:(?:[ \t]*(?:\r\n))?[ \t])?\)))*(?:(?:(?:(?:[ \t]*(?:\r\n))?[ \t])?(\((?:(?:(?:[ \t]*(?:\r\n))?[ \t])|(?:(?:[\x01-\x08\x0B\x0C\x0E-\x19\x7F]|[\x21-\x27\x2A-\x5B\x5D-\x7E])|(?:\\[\x00-\x08\x0B\x0C\x0E-\x7F])|(?1)))*(?:(?:[ \t]*(?:\r\n))?[ \t])?\)))|(?:(?:[ \t]*(?:\r\n))?[ \t])))?))+?)';
   19  
   20      /**
   21:      * The name of this Header.
   22       *
   23       * @var string
   ..
   26  
   27      /**
   28:      * The Encoder used to encode this Header.
   29       *
   30       * @var Swift_Encoder
   ..
   33  
   34      /**
   35:      * The maximum length of a line in the header.
   36       *
   37       * @var int
   ..
   40  
   41      /**
   42:      * The language used in this Header.
   43       *
   44       * @var string
   ..
   47  
   48      /**
   49:      * The character set of the text in this Header.
   50       *
   51       * @var string
   ..
   54  
   55      /**
   56:      * The value of this Header, cached.
   57       *
   58       * @var string
   ..
   61  
   62      /**
   63:      * Set the character set used in this Header.
   64       *
   65       * @param string $charset
   ..
   75  
   76      /**
   77:      * Get the character set used in this Header.
   78       *
   79       * @return string
   ..
   85  
   86      /**
   87:      * Set the language used in this Header.
   88       *
   89       * For example, for US English, 'en-us'.
   ..
   99  
  100      /**
  101:      * Get the language used in this Header.
  102       *
  103       * @return string
  ...
  109  
  110      /**
  111:      * Set the encoder used for encoding the header.
  112       *
  113:      * @param Swift_Mime_HeaderEncoder $encoder
  114       */
  115:     public function setEncoder(Swift_Mime_HeaderEncoder $encoder)
  116      {
  117          $this->encoder = $encoder;
  ...
  120  
  121      /**
  122:      * Get the encoder used for encoding this Header.
  123       *
  124:      * @return Swift_Mime_HeaderEncoder
  125       */
  126      public function getEncoder()
  ...
  130  
  131      /**
  132:      * Get the name of this header (e.g. charset).
  133       *
  134       * @return string
  ...
  140  
  141      /**
  142:      * Set the maximum length of lines in the header (excluding EOL).
  143       *
  144       * @param int $lineLength
  ...
  151  
  152      /**
  153:      * Get the maximum permitted length of lines in this Header.
  154       *
  155       * @return int
  ...
  161  
  162      /**
  163:      * Get this Header rendered as a RFC 2822 compliant string.
  164       *
  165       * @return string
  ...
  185  
  186      /**
  187:      * Set the name of this Header field.
  188       *
  189       * @param string $name
  ...
  197       * Produces a compliant, formatted RFC 2822 'phrase' based on the string given.
  198       *
  199:      * @param Swift_Mime_Header        $header
  200       * @param string                   $string  as displayed
  201       * @param string                   $charset of the text
  202:      * @param Swift_Mime_HeaderEncoder $encoder
  203:      * @param bool                     $shorten the first line to make remove for header name
  204       *
  205       * @return string
  206       */
  207:     protected function createPhrase(Swift_Mime_Header $header, $string, $charset, Swift_Mime_HeaderEncoder $encoder = null, $shorten = false)
  208      {
  209          // Treat token as exactly what was given
  ...
  221                  // Determine space remaining on line if first line
  222                  if ($shorten) {
  223:                     $usedLength = strlen($header->getFieldName().': ');
  224                  } else {
  225                      $usedLength = 0;
  226                  }
  227:                 $phraseStr = $this->encodeWords($header, $string, $usedLength);
  228              }
  229          }
  ...
  252       * Encode needed word tokens within a string of input.
  253       *
  254:      * @param Swift_Mime_Header $header
  255       * @param string            $input
  256       * @param string            $usedLength optional
  ...
  258       * @return string
  259       */
  260:     protected function encodeWords(Swift_Mime_Header $header, $input, $usedLength = -1)
  261      {
  262          $value = '';
  ...
  277  
  278                  if (-1 == $usedLength) {
  279:                     $usedLength = strlen($header->getFieldName().': ') + strlen($value);
  280                  }
  281                  $value .= $this->getTokenAsEncodedWord($token, $usedLength);
  282  
  283:                 $header->setMaxLineLength(76); // Forcefully override
  284              } else {
  285                  $value .= $token;
  ...
  334  
  335      /**
  336:      * Get a token as an encoded word for safe insertion into headers.
  337       *
  338       * @param string $token           token to encode
  ...
  364  
  365          if (strtolower($this->charset) !== 'iso-2022-jp') {
  366:             // special encoding for iso-2022-jp using mb_encode_mimeheader
  367              foreach ($encodedTextLines as $lineNum => $line) {
  368                  $encodedTextLines[$lineNum] = '=?'.$charsetDecl.
  ...
  420  
  421      /**
  422:      * Generate a list of all tokens in the final header.
  423       *
  424       * @param string $string The string to tokenize
  ...
  446  
  447      /**
  448:      * Takes an array of tokens which appear in the header and turns them into
  449       * an RFC 2822 compliant string, adding FWSP where needed.
  450       *
  ...
  456      {
  457          $lineCount = 0;
  458:         $headerLines = array();
  459:         $headerLines[] = $this->name.': ';
  460:         $currentLine = &$headerLines[$lineCount++];
  461  
  462:         // Build all tokens back into compliant header
  463          foreach ($tokens as $i => $token) {
  464              // Line longer than specified maximum or token was just a new line
  ...
  466                  ($i > 0 && strlen($currentLine.$token) > $this->lineLength)
  467                  && 0 < strlen($currentLine)) {
  468:                 $headerLines[] = '';
  469:                 $currentLine = &$headerLines[$lineCount++];
  470              }
  471  
  ...
  477  
  478          // Implode with FWS (RFC 2822, 2.2.3)
  479:         return implode("\r\n", $headerLines)."\r\n";
  480      }
  481  }

/home/genis/Proyectos/ProyectoXat/vendor/swiftmailer/swiftmailer/lib/classes/Swift/Mime/Headers/DateHeader.php:
   10  
   11  /**
   12:  * A Date MIME Header for Swift Mailer.
   13   *
   14   * @author Chris Corbyn
   15   */
   16: class Swift_Mime_Headers_DateHeader extends Swift_Mime_Headers_AbstractHeader
   17  {
   18      /**
   19:      * Date-time value of this Header.
   20       *
   21       * @var DateTimeImmutable
   ..
   24  
   25      /**
   26:      * Creates a new DateHeader with $name.
   27       *
   28:      * @param string $name of Header
   29       */
   30      public function __construct($name)
   ..
   34  
   35      /**
   36:      * Get the type of Header that this instance represents.
   37       *
   38       * @see TYPE_TEXT, TYPE_PARAMETERIZED, TYPE_MAILBOX
   ..
   67  
   68      /**
   69:      * Get the date-time representing the Date in this Header.
   70       *
   71       * @return DateTimeImmutable
   ..
   77  
   78      /**
   79:      * Set the date-time of the Date in this Header.
   80       *
   81       * If a DateTime instance is provided, it is converted to DateTimeImmutable.
   ..
   94  
   95      /**
   96:      * Get the string value of the body in this Header.
   97       *
   98       * This is not necessarily RFC 2822 compliant since folding white space will

/home/genis/Proyectos/ProyectoXat/vendor/swiftmailer/swiftmailer/lib/classes/Swift/Mime/Headers/IdentificationHeader.php:
   13  
   14  /**
   15:  * An ID MIME Header for something like Message-ID or Content-ID.
   16   *
   17   * @author Chris Corbyn
   18   */
   19: class Swift_Mime_Headers_IdentificationHeader extends Swift_Mime_Headers_AbstractHeader
   20  {
   21      /**
   22:      * The IDs used in the value of this Header.
   23       *
   24       * This may hold multiple IDs or just a single ID.
   ..
   36  
   37      /**
   38:      * Creates a new IdentificationHeader with the given $name and $id.
   39       *
   40       * @param string         $name
   ..
   48  
   49      /**
   50:      * Get the type of Header that this instance represents.
   51       *
   52       * @see TYPE_TEXT, TYPE_PARAMETERIZED, TYPE_MAILBOX
   ..
   87  
   88      /**
   89:      * Set the ID used in the value of this header.
   90       *
   91       * @param string|array $id
   ..
   99  
  100      /**
  101:      * Get the ID used in the value of this Header.
  102       *
  103       * If multiple IDs are set only the first is returned.
  ...
  113  
  114      /**
  115:      * Set a collection of IDs to use in the value of this Header.
  116       *
  117       * @param string[] $ids
  ...
  133  
  134      /**
  135:      * Get the list of IDs used in this Header.
  136       *
  137       * @return string[]
  ...
  143  
  144      /**
  145:      * Get the string value of the body in this Header.
  146       *
  147       * This is not necessarily RFC 2822 compliant since folding white space will

/home/genis/Proyectos/ProyectoXat/vendor/swiftmailer/swiftmailer/lib/classes/Swift/Mime/Headers/MailboxHeader.php:
   13  
   14  /**
   15:  * A Mailbox Address MIME Header for something like From or Sender.
   16   *
   17   * @author Chris Corbyn
   18   */
   19: class Swift_Mime_Headers_MailboxHeader extends Swift_Mime_Headers_AbstractHeader
   20  {
   21      /**
   22:      * The mailboxes used in this Header.
   23       *
   24       * @var string[]
   ..
   34  
   35      /**
   36:      * Creates a new MailboxHeader with $name.
   37       *
   38:      * @param string                   $name           of Header
   39:      * @param Swift_Mime_HeaderEncoder $encoder
   40       * @param EmailValidator           $emailValidator
   41       */
   42:     public function __construct($name, Swift_Mime_HeaderEncoder $encoder, EmailValidator $emailValidator)
   43      {
   44          $this->setFieldName($name);
   ..
   48  
   49      /**
   50:      * Get the type of Header that this instance represents.
   51       *
   52       * @see TYPE_TEXT, TYPE_PARAMETERIZED, TYPE_MAILBOX
   ..
   89  
   90      /**
   91:      * Set a list of mailboxes to be shown in this Header.
   92       *
   93       * The mailboxes can be a simple array of addresses, or an array of
   ..
   96       * <code>
   97       * <?php
   98:      * //Sets two mailboxes in the Header, one with a personal name
   99:      * $header->setNameAddresses(array(
  100       *  'chris@swiftmailer.org' => 'Chris Corbyn',
  101       *  'mark@swiftmailer.org' //No associated personal name
  ...
  119  
  120      /**
  121:      * Get the full mailbox list of this Header as an array of valid RFC 2822 strings.
  122       *
  123       * Example:
  124       * <code>
  125       * <?php
  126:      * $header = new Swift_Mime_Headers_MailboxHeader('From',
  127       *  array('chris@swiftmailer.org' => 'Chris Corbyn',
  128       *  'mark@swiftmailer.org' => 'Mark Corbyn')
  129       *  );
  130:      * print_r($header->getNameAddressStrings());
  131       * // array (
  132       * // 0 => Chris Corbyn <chris@swiftmailer.org>,
  ...
  149  
  150      /**
  151:      * Get all mailboxes in this Header as key=>value pairs.
  152       *
  153       * The key is the address and the value is the name (or null if none set).
  ...
  155       * <code>
  156       * <?php
  157:      * $header = new Swift_Mime_Headers_MailboxHeader('From',
  158       *  array('chris@swiftmailer.org' => 'Chris Corbyn',
  159       *  'mark@swiftmailer.org' => 'Mark Corbyn')
  160       *  );
  161:      * print_r($header->getNameAddresses());
  162       * // array (
  163       * // chris@swiftmailer.org => Chris Corbyn,
  ...
  178  
  179      /**
  180:      * Makes this Header represent a list of plain email addresses with no names.
  181       *
  182       * Example:
  183       * <code>
  184       * <?php
  185:      * //Sets three email addresses as the Header data
  186:      * $header->setAddresses(
  187       *  array('one@domain.tld', 'two@domain.tld', 'three@domain.tld')
  188       *  );
  ...
  203  
  204      /**
  205:      * Get all email addresses in this Header.
  206       *
  207       * @see getNameAddresses()
  ...
  215  
  216      /**
  217:      * Remove one or more addresses from this Header.
  218       *
  219       * @param string|string[] $addresses
  ...
  228  
  229      /**
  230:      * Get the string value of the body in this Header.
  231       *
  232       * This is not necessarily RFC 2822 compliant since folding white space will
  ...
  241      public function getFieldBody()
  242      {
  243:         // Compute the string value of the header only if needed
  244          if (null === $this->getCachedValue()) {
  245              $this->setCachedValue($this->createMailboxListString($this->mailboxes));
  ...
  280       *
  281       * @param string $displayName as displayed
  282:      * @param bool   $shorten     the first line to make remove for header name
  283       *
  284       * @return string
  ...
  306       * Redefine the encoding requirements for mailboxes.
  307       *
  308:      * All "specials" must be encoded as the full header value will not be quoted
  309       *
  310       * @see RFC 2822 3.2.1

/home/genis/Proyectos/ProyectoXat/vendor/swiftmailer/swiftmailer/lib/classes/Swift/Mime/Headers/OpenDKIMHeader.php:
   10  
   11  /**
   12:  * An OpenDKIM Specific Header using only raw header datas without encoding.
   13   *
   14   * @author De Cock Xavier <xdecock@gmail.com>
   15   */
   16: class Swift_Mime_Headers_OpenDKIMHeader implements Swift_Mime_Header
   17  {
   18      /**
   19:      * The value of this Header.
   20       *
   21       * @var string
   ..
   24  
   25      /**
   26:      * The name of this Header.
   27       *
   28       * @var string
   ..
   39  
   40      /**
   41:      * Get the type of Header that this instance represents.
   42       *
   43       * @see TYPE_TEXT, TYPE_PARAMETERIZED, TYPE_MAILBOX
   ..
   76  
   77      /**
   78:      * Get the (unencoded) value of this header.
   79       *
   80       * @return string
   ..
   86  
   87      /**
   88:      * Set the (unencoded) value of this header.
   89       *
   90       * @param string $value
   ..
   96  
   97      /**
   98:      * Get the value of this header prepared for rendering.
   99       *
  100       * @return string
  ...
  106  
  107      /**
  108:      * Get this Header rendered as a RFC 2822 compliant string.
  109       *
  110       * @return string
  ...
  116  
  117      /**
  118:      * Set the Header FieldName.
  119       *
  120:      * @see Swift_Mime_Header::getFieldName()
  121       */
  122      public function getFieldName()

/home/genis/Proyectos/ProyectoXat/vendor/swiftmailer/swiftmailer/lib/classes/Swift/Mime/Headers/ParameterizedHeader.php:
   10  
   11  /**
   12:  * An abstract base MIME Header.
   13   *
   14   * @author Chris Corbyn
   15   */
   16: class Swift_Mime_Headers_ParameterizedHeader extends Swift_Mime_Headers_UnstructuredHeader
   17  {
   18      /**
   ..
   38  
   39      /**
   40:      * Creates a new ParameterizedHeader with $name.
   41       *
   42       * @param string                   $name
   43:      * @param Swift_Mime_HeaderEncoder $encoder
   44       * @param Swift_Encoder            $paramEncoder, optional
   45       */
   46:     public function __construct($name, Swift_Mime_HeaderEncoder $encoder, Swift_Encoder $paramEncoder = null)
   47      {
   48          parent::__construct($name, $encoder);
   ..
   51  
   52      /**
   53:      * Get the type of Header that this instance represents.
   54       *
   55       * @see TYPE_TEXT, TYPE_PARAMETERIZED, TYPE_MAILBOX
   ..
   64  
   65      /**
   66:      * Set the character set used in this Header.
   67       *
   68       * @param string $charset
   ..
  123  
  124      /**
  125:      * Get the value of this header prepared for rendering.
  126       *
  127       * @return string
  ...
  141  
  142      /**
  143:      * Generate a list of all tokens in the final header.
  144       *
  145       * This doesn't need to be overridden in theory, but it is for implementation
  ...
  169  
  170      /**
  171:      * Render a RFC 2047 compliant header parameter from the $name and $value.
  172       *
  173       * @param string $name

/home/genis/Proyectos/ProyectoXat/vendor/swiftmailer/swiftmailer/lib/classes/Swift/Mime/Headers/PathHeader.php:
   13  
   14  /**
   15:  * A Path Header in Swift Mailer, such a Return-Path.
   16   *
   17   * @author Chris Corbyn
   18   */
   19: class Swift_Mime_Headers_PathHeader extends Swift_Mime_Headers_AbstractHeader
   20  {
   21      /**
   22:      * The address in this Header (if specified).
   23       *
   24       * @var string
   ..
   34  
   35      /**
   36:      * Creates a new PathHeader with the given $name.
   37       *
   38       * @param string         $name
   ..
   46  
   47      /**
   48:      * Get the type of Header that this instance represents.
   49       *
   50       * @see TYPE_TEXT, TYPE_PARAMETERIZED, TYPE_MAILBOX
   ..
   83  
   84      /**
   85:      * Set the Address which should appear in this Header.
   86       *
   87       * @param string $address
   ..
  103  
  104      /**
  105:      * Get the address which is used in this Header (if any).
  106       *
  107       * Null is returned if no address is set.
  ...
  115  
  116      /**
  117:      * Get the string value of the body in this Header.
  118       *
  119       * This is not necessarily RFC 2822 compliant since folding white space will
  ...
  146          if (!$this->emailValidator->isValid($address, new RFCValidation())) {
  147              throw new Swift_RfcComplianceException(
  148:                 'Address set in PathHeader does not comply with addr-spec of RFC 2822.'
  149              );
  150          }

/home/genis/Proyectos/ProyectoXat/vendor/swiftmailer/swiftmailer/lib/classes/Swift/Mime/Headers/UnstructuredHeader.php:
   10  
   11  /**
   12:  * A Simple MIME Header.
   13   *
   14   * @author Chris Corbyn
   15   */
   16: class Swift_Mime_Headers_UnstructuredHeader extends Swift_Mime_Headers_AbstractHeader
   17  {
   18      /**
   19:      * The value of this Header.
   20       *
   21       * @var string
   ..
   24  
   25      /**
   26:      * Creates a new SimpleHeader with $name.
   27       *
   28       * @param string                   $name
   29:      * @param Swift_Mime_HeaderEncoder $encoder
   30       */
   31:     public function __construct($name, Swift_Mime_HeaderEncoder $encoder)
   32      {
   33          $this->setFieldName($name);
   ..
   36  
   37      /**
   38:      * Get the type of Header that this instance represents.
   39       *
   40       * @see TYPE_TEXT, TYPE_PARAMETERIZED, TYPE_MAILBOX
   ..
   73  
   74      /**
   75:      * Get the (unencoded) value of this header.
   76       *
   77       * @return string
   ..
   83  
   84      /**
   85:      * Set the (unencoded) value of this header.
   86       *
   87       * @param string $value
   ..
   94  
   95      /**
   96:      * Get the value of this header prepared for rendering.
   97       *
   98       * @return string

/home/genis/Proyectos/ProyectoXat/vendor/swiftmailer/swiftmailer/lib/classes/Swift/Mime/MimePart.php:
   29  
   30      /**
   31:      * Create a new MimePart with $headers, $encoder and $cache.
   32       *
   33:      * @param Swift_Mime_SimpleHeaderSet $headers
   34       * @param Swift_Mime_ContentEncoder  $encoder
   35       * @param Swift_KeyCache             $cache
   ..
   37       * @param string                     $charset
   38       */
   39:     public function __construct(Swift_Mime_SimpleHeaderSet $headers, Swift_Mime_ContentEncoder $encoder, Swift_KeyCache $cache, Swift_IdGenerator $idGenerator, $charset = null)
   40      {
   41:         parent::__construct($headers, $encoder, $cache, $idGenerator);
   42          $this->setContentType('text/plain');
   43          if (null !== $charset) {
   ..
   75      public function getCharset()
   76      {
   77:         return $this->getHeaderParameter('Content-Type', 'charset');
   78      }
   79  
   ..
   87      public function setCharset($charset)
   88      {
   89:         $this->setHeaderParameter('Content-Type', 'charset', $charset);
   90          if ($charset !== $this->userCharset) {
   91              $this->clearCache();
   ..
  104      public function getFormat()
  105      {
  106:         return $this->getHeaderParameter('Content-Type', 'format');
  107      }
  108  
  ...
  116      public function setFormat($format)
  117      {
  118:         $this->setHeaderParameter('Content-Type', 'format', $format);
  119          $this->userFormat = $format;
  120  
  ...
  129      public function getDelSp()
  130      {
  131:         return 'yes' === $this->getHeaderParameter('Content-Type', 'delsp');
  132      }
  133  
  ...
  141      public function setDelSp($delsp = true)
  142      {
  143:         $this->setHeaderParameter('Content-Type', 'delsp', $delsp ? 'yes' : null);
  144          $this->userDelSp = $delsp;
  145  
  ...
  171  
  172      /** Fix the content-type and encoding of this entity */
  173:     protected function fixHeaders()
  174      {
  175:         parent::fixHeaders();
  176          if (count($this->getChildren())) {
  177:             $this->setHeaderParameter('Content-Type', 'charset', null);
  178:             $this->setHeaderParameter('Content-Type', 'format', null);
  179:             $this->setHeaderParameter('Content-Type', 'delsp', null);
  180          } else {
  181              $this->setCharset($this->userCharset);

/home/genis/Proyectos/ProyectoXat/vendor/swiftmailer/swiftmailer/lib/classes/Swift/Mime/SimpleHeaderFactory.php:
   12  
   13  /**
   14:  * Creates MIME headers.
   15   *
   16   * @author Chris Corbyn
   17   */
   18: class Swift_Mime_SimpleHeaderFactory implements Swift_Mime_CharsetObserver
   19  {
   20:     /** The HeaderEncoder used by these headers */
   21      private $encoder;
   22  
   ..
   30      private $emailValidator;
   31  
   32:     /** The charset of created Headers */
   33      private $charset;
   34  
   35      /**
   36:      * Creates a new SimpleHeaderFactory using $encoder and $paramEncoder.
   37       *
   38:      * @param Swift_Mime_HeaderEncoder $encoder
   39       * @param Swift_Encoder            $paramEncoder
   40       * @param EmailValidator           $emailValidator
   41       * @param string|null              $charset
   42       */
   43:     public function __construct(Swift_Mime_HeaderEncoder $encoder, Swift_Encoder $paramEncoder, EmailValidator $emailValidator, $charset = null)
   44      {
   45          $this->encoder = $encoder;
   ..
   50  
   51      /**
   52:      * Create a new Mailbox Header with a list of $addresses.
   53       *
   54       * @param string            $name
   55       * @param array|string|null $addresses
   56       *
   57:      * @return Swift_Mime_Header
   58       */
   59:     public function createMailboxHeader($name, $addresses = null)
   60      {
   61:         $header = new Swift_Mime_Headers_MailboxHeader($name, $this->encoder, $this->emailValidator);
   62          if (isset($addresses)) {
   63:             $header->setFieldBodyModel($addresses);
   64          }
   65:         $this->setHeaderCharset($header);
   66  
   67:         return $header;
   68      }
   69  
   70      /**
   71:      * Create a new Date header using $dateTime.
   72       *
   73       * @param string                 $name
   74       * @param DateTimeInterface|null $dateTime
   75       *
   76:      * @return Swift_Mime_Header
   77       */
   78:     public function createDateHeader($name, DateTimeInterface $dateTime = null)
   79      {
   80:         $header = new Swift_Mime_Headers_DateHeader($name);
   81          if (isset($dateTime)) {
   82:             $header->setFieldBodyModel($dateTime);
   83          }
   84:         $this->setHeaderCharset($header);
   85  
   86:         return $header;
   87      }
   88  
   89      /**
   90:      * Create a new basic text header with $name and $value.
   91       *
   92       * @param string $name
   93       * @param string $value
   94       *
   95:      * @return Swift_Mime_Header
   96       */
   97:     public function createTextHeader($name, $value = null)
   98      {
   99:         $header = new Swift_Mime_Headers_UnstructuredHeader($name, $this->encoder);
  100          if (isset($value)) {
  101:             $header->setFieldBodyModel($value);
  102          }
  103:         $this->setHeaderCharset($header);
  104  
  105:         return $header;
  106      }
  107  
  108      /**
  109:      * Create a new ParameterizedHeader with $name, $value and $params.
  110       *
  111       * @param string $name
  ...
  113       * @param array  $params
  114       *
  115:      * @return Swift_Mime_Headers_ParameterizedHeader
  116       */
  117:     public function createParameterizedHeader($name, $value = null, $params = array())
  118      {
  119:         $header = new Swift_Mime_Headers_ParameterizedHeader($name, $this->encoder, (strtolower($name) == 'content-disposition') ? $this->paramEncoder : null);
  120          if (isset($value)) {
  121:             $header->setFieldBodyModel($value);
  122          }
  123          foreach ($params as $k => $v) {
  124:             $header->setParameter($k, $v);
  125          }
  126:         $this->setHeaderCharset($header);
  127  
  128:         return $header;
  129      }
  130  
  131      /**
  132:      * Create a new ID header for Message-ID or Content-ID.
  133       *
  134       * @param string       $name
  135       * @param string|array $ids
  136       *
  137:      * @return Swift_Mime_Header
  138       */
  139:     public function createIdHeader($name, $ids = null)
  140      {
  141:         $header = new Swift_Mime_Headers_IdentificationHeader($name, $this->emailValidator);
  142          if (isset($ids)) {
  143:             $header->setFieldBodyModel($ids);
  144          }
  145:         $this->setHeaderCharset($header);
  146  
  147:         return $header;
  148      }
  149  
  150      /**
  151:      * Create a new Path header with an address (path) in it.
  152       *
  153       * @param string $name
  154       * @param string $path
  155       *
  156:      * @return Swift_Mime_Header
  157       */
  158:     public function createPathHeader($name, $path = null)
  159      {
  160:         $header = new Swift_Mime_Headers_PathHeader($name, $this->emailValidator);
  161          if (isset($path)) {
  162:             $header->setFieldBodyModel($path);
  163          }
  164:         $this->setHeaderCharset($header);
  165  
  166:         return $header;
  167      }
  168  
  ...
  188      }
  189  
  190:     /** Apply the charset to the Header */
  191:     private function setHeaderCharset(Swift_Mime_Header $header)
  192      {
  193          if (isset($this->charset)) {
  194:             $header->setCharset($this->charset);
  195          }
  196      }

/home/genis/Proyectos/ProyectoXat/vendor/swiftmailer/swiftmailer/lib/classes/Swift/Mime/SimpleHeaderSet.php:
   10  
   11  /**
   12:  * A collection of MIME headers.
   13   *
   14   * @author Chris Corbyn
   15   */
   16: class Swift_Mime_SimpleHeaderSet implements Swift_Mime_CharsetObserver
   17  {
   18:     /** HeaderFactory */
   19      private $factory;
   20  
   21:     /** Collection of set Headers */
   22:     private $headers = array();
   23  
   24      /** Field ordering details */
   ..
   28      private $required = array();
   29  
   30:     /** The charset used by Headers */
   31      private $charset;
   32  
   33      /**
   34:      * Create a new SimpleHeaderSet with the given $factory.
   35       *
   36:      * @param Swift_Mime_SimpleHeaderFactory $factory
   37       * @param string                         $charset
   38       */
   39:     public function __construct(Swift_Mime_SimpleHeaderFactory $factory, $charset = null)
   40      {
   41          $this->factory = $factory;
   ..
   51  
   52      /**
   53:      * Set the charset used by these headers.
   54       *
   55       * @param string $charset
   ..
   59          $this->charset = $charset;
   60          $this->factory->charsetChanged($charset);
   61:         $this->notifyHeadersOfCharset($charset);
   62      }
   63  
   64      /**
   65:      * Add a new Mailbox Header with a list of $addresses.
   66       *
   67       * @param string       $name
   68       * @param array|string $addresses
   69       */
   70:     public function addMailboxHeader($name, $addresses = null)
   71      {
   72:         $this->storeHeader($name,
   73:         $this->factory->createMailboxHeader($name, $addresses));
   74      }
   75  
   76      /**
   77:      * Add a new Date header using $dateTime.
   78       *
   79       * @param string            $name
   80       * @param DateTimeInterface $dateTime
   81       */
   82:     public function addDateHeader($name, DateTimeInterface $dateTime = null)
   83      {
   84:         $this->storeHeader($name,
   85:         $this->factory->createDateHeader($name, $dateTime));
   86      }
   87  
   88      /**
   89:      * Add a new basic text header with $name and $value.
   90       *
   91       * @param string $name
   92       * @param string $value
   93       */
   94:     public function addTextHeader($name, $value = null)
   95      {
   96:         $this->storeHeader($name,
   97:         $this->factory->createTextHeader($name, $value));
   98      }
   99  
  100      /**
  101:      * Add a new ParameterizedHeader with $name, $value and $params.
  102       *
  103       * @param string $name
  ...
  105       * @param array  $params
  106       */
  107:     public function addParameterizedHeader($name, $value = null, $params = array())
  108      {
  109:         $this->storeHeader($name, $this->factory->createParameterizedHeader($name, $value, $params));
  110      }
  111  
  112      /**
  113:      * Add a new ID header for Message-ID or Content-ID.
  114       *
  115       * @param string       $name
  116       * @param string|array $ids
  117       */
  118:     public function addIdHeader($name, $ids = null)
  119      {
  120:         $this->storeHeader($name, $this->factory->createIdHeader($name, $ids));
  121      }
  122  
  123      /**
  124:      * Add a new Path header with an address (path) in it.
  125       *
  126       * @param string $name
  127       * @param string $path
  128       */
  129:     public function addPathHeader($name, $path = null)
  130      {
  131:         $this->storeHeader($name, $this->factory->createPathHeader($name, $path));
  132      }
  133  
  134      /**
  135:      * Returns true if at least one header with the given $name exists.
  136       *
  137:      * If multiple headers match, the actual one may be specified by $index.
  138       *
  139       * @param string $name
  ...
  146          $lowerName = strtolower($name);
  147  
  148:         if (!array_key_exists($lowerName, $this->headers)) {
  149              return false;
  150          }
  151  
  152          if (func_num_args() < 2) {
  153:             // index was not specified, so we only need to check that there is at least one header value set
  154:             return (bool) count($this->headers[$lowerName]);
  155          }
  156  
  157:         return array_key_exists($index, $this->headers[$lowerName]);
  158      }
  159  
  160      /**
  161:      * Set a header in the HeaderSet.
  162       *
  163:      * The header may be a previously fetched header via {@link get()} or it may
  164       * be one that has been created separately.
  165       *
  166:      * If $index is specified, the header will be inserted into the set at this
  167       * offset.
  168       *
  169:      * @param Swift_Mime_Header $header
  170       * @param int               $index
  171       */
  172:     public function set(Swift_Mime_Header $header, $index = 0)
  173      {
  174:         $this->storeHeader($header->getFieldName(), $header, $index);
  175      }
  176  
  177      /**
  178:      * Get the header with the given $name.
  179       *
  180:      * If multiple headers match, the actual one may be specified by $index.
  181       * Returns NULL if none present.
  182       *
  ...
  184       * @param int    $index
  185       *
  186:      * @return Swift_Mime_Header
  187       */
  188      public function get($name, $index = 0)
  ...
  192          if (func_num_args() < 2) {
  193              if ($this->has($name)) {
  194:                 $values = array_values($this->headers[$name]);
  195  
  196                  return array_shift($values);
  ...
  198          } else {
  199              if ($this->has($name, $index)) {
  200:                 return $this->headers[$name][$index];
  201              }
  202          }
  ...
  204  
  205      /**
  206:      * Get all headers with the given $name.
  207       *
  208       * @param string $name
  ...
  213      {
  214          if (!isset($name)) {
  215:             $headers = array();
  216:             foreach ($this->headers as $collection) {
  217:                 $headers = array_merge($headers, $collection);
  218              }
  219  
  220:             return $headers;
  221          }
  222  
  223          $lowerName = strtolower($name);
  224:         if (!array_key_exists($lowerName, $this->headers)) {
  225              return array();
  226          }
  227  
  228:         return $this->headers[$lowerName];
  229      }
  230  
  231      /**
  232:      * Return the name of all Headers.
  233       *
  234       * @return array
  ...
  236      public function listAll()
  237      {
  238:         $headers = $this->headers;
  239          if ($this->canSort()) {
  240:             uksort($headers, array($this, 'sortHeaders'));
  241          }
  242  
  243:         return array_keys($headers);
  244      }
  245  
  246      /**
  247:      * Remove the header with the given $name if it's set.
  248       *
  249:      * If multiple headers match, the actual one may be specified by $index.
  250       *
  251       * @param string $name
  ...
  255      {
  256          $lowerName = strtolower($name);
  257:         unset($this->headers[$lowerName][$index]);
  258      }
  259  
  260      /**
  261:      * Remove all headers with the given $name.
  262       *
  263       * @param string $name
  ...
  266      {
  267          $lowerName = strtolower($name);
  268:         unset($this->headers[$lowerName]);
  269      }
  270  
  271      /**
  272:      * Define a list of Header names as an array in the correct order.
  273       *
  274:      * These Headers will be output in the given order where present.
  275       *
  276       * @param array $sequence
  ...
  282  
  283      /**
  284:      * Set a list of header names which must always be displayed when set.
  285       *
  286:      * Usually headers without a field value won't be output unless set here.
  287       *
  288       * @param array $names
  ...
  304  
  305      /**
  306:      * Returns a string with a representation of all headers.
  307       *
  308       * @return string
  ...
  311      {
  312          $string = '';
  313:         $headers = $this->headers;
  314          if ($this->canSort()) {
  315:             uksort($headers, array($this, 'sortHeaders'));
  316          }
  317:         foreach ($headers as $collection) {
  318:             foreach ($collection as $header) {
  319:                 if ($this->isDisplayed($header) || $header->getFieldBody() != '') {
  320:                     $string .= $header->toString();
  321                  }
  322              }
  ...
  338      }
  339  
  340:     /** Save a Header to the internal collection */
  341:     private function storeHeader($name, Swift_Mime_Header $header, $offset = null)
  342      {
  343:         if (!isset($this->headers[strtolower($name)])) {
  344:             $this->headers[strtolower($name)] = array();
  345          }
  346          if (!isset($offset)) {
  347:             $this->headers[strtolower($name)][] = $header;
  348          } else {
  349:             $this->headers[strtolower($name)][$offset] = $header;
  350          }
  351      }
  352  
  353:     /** Test if the headers can be sorted */
  354      private function canSort()
  355      {
  ...
  357      }
  358  
  359:     /** uksort() algorithm for Header ordering */
  360:     private function sortHeaders($a, $b)
  361      {
  362          $lowerA = strtolower($a);
  ...
  379      }
  380  
  381:     /** Test if the given Header is always displayed */
  382:     private function isDisplayed(Swift_Mime_Header $header)
  383      {
  384:         return array_key_exists(strtolower($header->getFieldName()), $this->required);
  385      }
  386  
  387:     /** Notify all Headers of the new charset */
  388:     private function notifyHeadersOfCharset($charset)
  389      {
  390:         foreach ($this->headers as $headerGroup) {
  391:             foreach ($headerGroup as $header) {
  392:                 $header->setCharset($charset);
  393              }
  394          }
  ...
  401      {
  402          $this->factory = clone $this->factory;
  403:         foreach ($this->headers as $groupKey => $headerGroup) {
  404:             foreach ($headerGroup as $key => $header) {
  405:                 $this->headers[$groupKey][$key] = clone $header;
  406              }
  407          }

/home/genis/Proyectos/ProyectoXat/vendor/swiftmailer/swiftmailer/lib/classes/Swift/Mime/SimpleMessage.php:
   23  
   24      /**
   25:      * Create a new SimpleMessage with $headers, $encoder and $cache.
   26       *
   27:      * @param Swift_Mime_SimpleHeaderSet $headers
   28       * @param Swift_Mime_ContentEncoder  $encoder
   29       * @param Swift_KeyCache             $cache
   ..
   31       * @param string                     $charset
   32       */
   33:     public function __construct(Swift_Mime_SimpleHeaderSet $headers, Swift_Mime_ContentEncoder $encoder, Swift_KeyCache $cache, Swift_IdGenerator $idGenerator, $charset = null)
   34      {
   35:         parent::__construct($headers, $encoder, $cache, $idGenerator, $charset);
   36:         $this->getHeaders()->defineOrdering(array(
   37              'Return-Path',
   38              'Received',
   ..
   52              'Content-Transfer-Encoding',
   53              ));
   54:         $this->getHeaders()->setAlwaysDisplayed(array('Date', 'Message-ID', 'From'));
   55:         $this->getHeaders()->addTextHeader('MIME-Version', '1.0');
   56          $this->setDate(new DateTimeImmutable());
   57          $this->setId($this->getId());
   58:         $this->getHeaders()->addMailboxHeader('From');
   59      }
   60  
   ..
   78      public function setSubject($subject)
   79      {
   80:         if (!$this->setHeaderFieldModel('Subject', $subject)) {
   81:             $this->getHeaders()->addTextHeader('Subject', $subject);
   82          }
   83  
   ..
   92      public function getSubject()
   93      {
   94:         return $this->getHeaderFieldModel('Subject');
   95      }
   96  
   ..
  104      public function setDate(DateTimeInterface $dateTime)
  105      {
  106:         if (!$this->setHeaderFieldModel('Date', $dateTime)) {
  107:             $this->getHeaders()->addDateHeader('Date', $dateTime);
  108          }
  109  
  ...
  118      public function getDate()
  119      {
  120:         return $this->getHeaderFieldModel('Date');
  121      }
  122  
  ...
  130      public function setReturnPath($address)
  131      {
  132:         if (!$this->setHeaderFieldModel('Return-Path', $address)) {
  133:             $this->getHeaders()->addPathHeader('Return-Path', $address);
  134          }
  135  
  ...
  144      public function getReturnPath()
  145      {
  146:         return $this->getHeaderFieldModel('Return-Path');
  147      }
  148  
  ...
  163          }
  164  
  165:         if (!$this->setHeaderFieldModel('Sender', (array) $address)) {
  166:             $this->getHeaders()->addMailboxHeader('Sender', (array) $address);
  167          }
  168  
  ...
  177      public function getSender()
  178      {
  179:         return $this->getHeaderFieldModel('Sender');
  180      }
  181  
  ...
  217          }
  218  
  219:         if (!$this->setHeaderFieldModel('From', (array) $addresses)) {
  220:             $this->getHeaders()->addMailboxHeader('From', (array) $addresses);
  221          }
  222  
  ...
  231      public function getFrom()
  232      {
  233:         return $this->getHeaderFieldModel('From');
  234      }
  235  
  ...
  271          }
  272  
  273:         if (!$this->setHeaderFieldModel('Reply-To', (array) $addresses)) {
  274:             $this->getHeaders()->addMailboxHeader('Reply-To', (array) $addresses);
  275          }
  276  
  ...
  285      public function getReplyTo()
  286      {
  287:         return $this->getHeaderFieldModel('Reply-To');
  288      }
  289  
  ...
  326          }
  327  
  328:         if (!$this->setHeaderFieldModel('To', (array) $addresses)) {
  329:             $this->getHeaders()->addMailboxHeader('To', (array) $addresses);
  330          }
  331  
  ...
  340      public function getTo()
  341      {
  342:         return $this->getHeaderFieldModel('To');
  343      }
  344  
  ...
  378          }
  379  
  380:         if (!$this->setHeaderFieldModel('Cc', (array) $addresses)) {
  381:             $this->getHeaders()->addMailboxHeader('Cc', (array) $addresses);
  382          }
  383  
  ...
  392      public function getCc()
  393      {
  394:         return $this->getHeaderFieldModel('Cc');
  395      }
  396  
  ...
  430          }
  431  
  432:         if (!$this->setHeaderFieldModel('Bcc', (array) $addresses)) {
  433:             $this->getHeaders()->addMailboxHeader('Bcc', (array) $addresses);
  434          }
  435  
  ...
  444      public function getBcc()
  445      {
  446:         return $this->getHeaderFieldModel('Bcc');
  447      }
  448  
  ...
  471              $priority = min($pMapKeys);
  472          }
  473:         if (!$this->setHeaderFieldModel('X-Priority',
  474              sprintf('%d (%s)', $priority, $priorityMap[$priority]))) {
  475:             $this->getHeaders()->addTextHeader('X-Priority',
  476                  sprintf('%d (%s)', $priority, $priorityMap[$priority]));
  477          }
  ...
  490      public function getPriority()
  491      {
  492:         list($priority) = sscanf($this->getHeaderFieldModel('X-Priority'),
  493              '%[1-5]'
  494              );
  ...
  506      public function setReadReceiptTo($addresses)
  507      {
  508:         if (!$this->setHeaderFieldModel('Disposition-Notification-To', $addresses)) {
  509:             $this->getHeaders()
  510:                 ->addMailboxHeader('Disposition-Notification-To', $addresses);
  511          }
  512  
  ...
  521      public function getReadReceiptTo()
  522      {
  523:         return $this->getHeaderFieldModel('Disposition-Notification-To');
  524      }
  525  
  ...
  628      protected function becomeMimePart()
  629      {
  630:         $part = new parent($this->getHeaders()->newInstance(), $this->getEncoder(),
  631              $this->getCache(), $this->getIdGenerator(), $this->userCharset
  632              );

/home/genis/Proyectos/ProyectoXat/vendor/swiftmailer/swiftmailer/lib/classes/Swift/Mime/SimpleMimeEntity.php:
   28      const LEVEL_RELATED = 65536;
   29  
   30:     /** A collection of Headers for this mime entity */
   31:     private $headers;
   32  
   33      /** The body as a string, or a stream */
   ..
   84  
   85      /**
   86:      * Create a new SimpleMimeEntity with $headers, $encoder and $cache.
   87       *
   88:      * @param Swift_Mime_SimpleHeaderSet $headers
   89       * @param Swift_Mime_ContentEncoder  $encoder
   90       * @param Swift_KeyCache             $cache
   91       * @param Swift_IdGenerator          $idGenerator
   92       */
   93:     public function __construct(Swift_Mime_SimpleHeaderSet $headers, Swift_Mime_ContentEncoder $encoder, Swift_KeyCache $cache, Swift_IdGenerator $idGenerator)
   94      {
   95          $this->cacheKey = bin2hex(random_bytes(16)); // set 32 hex values
   96          $this->cache = $cache;
   97:         $this->headers = $headers;
   98          $this->idGenerator = $idGenerator;
   99          $this->setEncoder($encoder);
  100:         $this->headers->defineOrdering(array('Content-Type', 'Content-Transfer-Encoding'));
  101  
  102          // This array specifies that, when the entire MIME document contains
  ...
  138  
  139      /**
  140:      * Get the {@link Swift_Mime_SimpleHeaderSet} for this entity.
  141       *
  142:      * @return Swift_Mime_SimpleHeaderSet
  143       */
  144:     public function getHeaders()
  145      {
  146:         return $this->headers;
  147      }
  148  
  ...
  166      public function getContentType()
  167      {
  168:         return $this->getHeaderFieldModel('Content-Type');
  169      }
  170  
  ...
  178      public function setContentType($type)
  179      {
  180:         $this->setContentTypeInHeaders($type);
  181          // Keep track of the value so that if the content-type changes automatically
  182          // due to added child entities, it can be restored if they are later removed
  ...
  189       * Get the CID of this entity.
  190       *
  191:      * The CID will only be present in headers if a Content-ID header is present.
  192       *
  193       * @return string
  ...
  195      public function getId()
  196      {
  197:         $tmp = (array) $this->getHeaderFieldModel($this->getIdField());
  198  
  199:         return $this->headers->has($this->getIdField()) ? current($tmp) : $this->id;
  200      }
  201  
  ...
  209      public function setId($id)
  210      {
  211:         if (!$this->setHeaderFieldModel($this->getIdField(), $id)) {
  212:             $this->headers->addIdHeader($this->getIdField(), $id);
  213          }
  214          $this->id = $id;
  ...
  220       * Get the description of this entity.
  221       *
  222:      * This value comes from the Content-Description header if set.
  223       *
  224       * @return string
  ...
  226      public function getDescription()
  227      {
  228:         return $this->getHeaderFieldModel('Content-Description');
  229      }
  230  
  ...
  232       * Set the description of this entity.
  233       *
  234:      * This method sets a value in the Content-ID header.
  235       *
  236       * @param string $description
  ...
  240      public function setDescription($description)
  241      {
  242:         if (!$this->setHeaderFieldModel('Content-Description', $description)) {
  243:             $this->headers->addTextHeader('Content-Description', $description);
  244          }
  245  
  ...
  343          $this->immediateChildren = $immediateChildren;
  344          $this->children = $children;
  345:         $this->setContentTypeInHeaders($newContentType);
  346:         $this->fixHeaders();
  347          $this->sortChildren();
  348  
  ...
  473      public function toString()
  474      {
  475:         $string = $this->headers->toString();
  476          $string .= $this->bodyToString();
  477  
  ...
  528      public function toByteStream(Swift_InputByteStream $is)
  529      {
  530:         $is->write($this->headers->toString());
  531          $is->commit();
  532  
  ...
  578  
  579      /**
  580:      * Get the name of the header that provides the ID of this entity.
  581       */
  582      protected function getIdField()
  ...
  588       * Get the model data (usually an array or a string) for $field.
  589       */
  590:     protected function getHeaderFieldModel($field)
  591      {
  592:         if ($this->headers->has($field)) {
  593:             return $this->headers->get($field)->getFieldBodyModel();
  594          }
  595      }
  ...
  598       * Set the model data for $field.
  599       */
  600:     protected function setHeaderFieldModel($field, $model)
  601      {
  602:         if ($this->headers->has($field)) {
  603:             $this->headers->get($field)->setFieldBodyModel($model);
  604  
  605              return true;
  ...
  610  
  611      /**
  612:      * Get the parameter value of $parameter on $field header.
  613       */
  614:     protected function getHeaderParameter($field, $parameter)
  615      {
  616:         if ($this->headers->has($field)) {
  617:             return $this->headers->get($field)->getParameter($parameter);
  618          }
  619      }
  620  
  621      /**
  622:      * Set the parameter value of $parameter on $field header.
  623       */
  624:     protected function setHeaderParameter($field, $parameter, $value)
  625      {
  626:         if ($this->headers->has($field)) {
  627:             $this->headers->get($field)->setParameter($parameter, $value);
  628  
  629              return true;
  ...
  636       * Re-evaluate what content type and encoding should be used on this entity.
  637       */
  638:     protected function fixHeaders()
  639      {
  640          if (count($this->immediateChildren)) {
  641:             $this->setHeaderParameter('Content-Type', 'boundary',
  642                  $this->getBoundary()
  643                  );
  644:             $this->headers->remove('Content-Transfer-Encoding');
  645          } else {
  646:             $this->setHeaderParameter('Content-Type', 'boundary', null);
  647              $this->setEncoding($this->encoder->getName());
  648          }
  ...
  691      private function setEncoding($encoding)
  692      {
  693:         if (!$this->setHeaderFieldModel('Content-Transfer-Encoding', $encoding)) {
  694:             $this->headers->addTextHeader('Content-Transfer-Encoding', $encoding);
  695          }
  696      }
  ...
  703      }
  704  
  705:     private function setContentTypeInHeaders($type)
  706      {
  707:         if (!$this->setHeaderFieldModel('Content-Type', $type)) {
  708:             $this->headers->addParameterizedHeader('Content-Type', $type);
  709          }
  710      }
  ...
  746      private function createChild()
  747      {
  748:         return new self($this->headers->newInstance(), $this->encoder, $this->cache, $this->idGenerator);
  749      }
  750  
  ...
  759      {
  760          $this->encoder->charsetChanged($charset);
  761:         $this->headers->charsetChanged($charset);
  762          foreach ($this->immediateChildren as $child) {
  763              $child->charsetChanged($charset);
  ...
  812      public function __clone()
  813      {
  814:         $this->headers = clone $this->headers;
  815          $this->encoder = clone $this->encoder;
  816          $this->cacheKey = bin2hex(random_bytes(16)); // set 32 hex values

/home/genis/Proyectos/ProyectoXat/vendor/swiftmailer/swiftmailer/lib/classes/Swift/Plugins/DecoratorPlugin.php:
   23      private $originalBody;
   24  
   25:     /** The original headers of the message, before replacements */
   26:     private $originalHeaders = array();
   27  
   28      /** Bodies of children before they are replaced */
   ..
   96              }
   97  
   98:             foreach ($message->getHeaders()->getAll() as $header) {
   99:                 $body = $header->getFieldBodyModel();
  100                  $count = 0;
  101                  if (is_array($body)) {
  ...
  117  
  118                  if ($count) {
  119:                     $this->originalHeaders[$header->getFieldName()] = $body;
  120:                     $header->setFieldBodyModel($bodyReplaced);
  121                  }
  122              }
  ...
  181                  $this->originalBody = null;
  182              }
  183:             if (!empty($this->originalHeaders)) {
  184:                 foreach ($message->getHeaders()->getAll() as $header) {
  185:                     if (array_key_exists($header->getFieldName(), $this->originalHeaders)) {
  186:                         $header->setFieldBodyModel($this->originalHeaders[$header->getFieldName()]);
  187                      }
  188                  }
  189:                 $this->originalHeaders = array();
  190              }
  191              if (!empty($this->originalChildBodies)) {

/home/genis/Proyectos/ProyectoXat/vendor/swiftmailer/swiftmailer/lib/classes/Swift/Plugins/ImpersonatePlugin.php:
   41      {
   42          $message = $evt->getMessage();
   43:         $headers = $message->getHeaders();
   44  
   45          // save current recipients
   46:         $headers->addPathHeader('X-Swift-Return-Path', $message->getReturnPath());
   47  
   48          // replace them with the one to send to
   ..
   59          $message = $evt->getMessage();
   60  
   61:         // restore original headers
   62:         $headers = $message->getHeaders();
   63  
   64:         if ($headers->has('X-Swift-Return-Path')) {
   65:             $message->setReturnPath($headers->get('X-Swift-Return-Path')->getAddress());
   66:             $headers->removeAll('X-Swift-Return-Path');
   67          }
   68      }

/home/genis/Proyectos/ProyectoXat/vendor/swiftmailer/swiftmailer/lib/classes/Swift/Plugins/RedirectingPlugin.php:
   90      {
   91          $message = $evt->getMessage();
   92:         $headers = $message->getHeaders();
   93  
   94          // conditionally save current recipients
   95  
   96:         if ($headers->has('to')) {
   97:             $headers->addMailboxHeader('X-Swift-To', $message->getTo());
   98          }
   99  
  100:         if ($headers->has('cc')) {
  101:             $headers->addMailboxHeader('X-Swift-Cc', $message->getCc());
  102          }
  103  
  104:         if ($headers->has('bcc')) {
  105:             $headers->addMailboxHeader('X-Swift-Bcc', $message->getBcc());
  106          }
  107  
  108:         // Filter remaining headers against whitelist
  109:         $this->filterHeaderSet($headers, 'To');
  110:         $this->filterHeaderSet($headers, 'Cc');
  111:         $this->filterHeaderSet($headers, 'Bcc');
  112  
  113          // Add each hard coded recipient
  ...
  125  
  126      /**
  127:      * Filter header set against a whitelist of regular expressions.
  128       *
  129:      * @param Swift_Mime_SimpleHeaderSet $headerSet
  130       * @param string                     $type
  131       */
  132:     private function filterHeaderSet(Swift_Mime_SimpleHeaderSet $headerSet, $type)
  133      {
  134:         foreach ($headerSet->getAll($type) as $headers) {
  135:             $headers->setNameAddresses($this->filterNameAddresses($headers->getNameAddresses()));
  136          }
  137      }
  ...
  191      private function restoreMessage(Swift_Mime_SimpleMessage $message)
  192      {
  193:         // restore original headers
  194:         $headers = $message->getHeaders();
  195  
  196:         if ($headers->has('X-Swift-To')) {
  197:             $message->setTo($headers->get('X-Swift-To')->getNameAddresses());
  198:             $headers->removeAll('X-Swift-To');
  199          } else {
  200              $message->setTo(null);
  201          }
  202  
  203:         if ($headers->has('X-Swift-Cc')) {
  204:             $message->setCc($headers->get('X-Swift-Cc')->getNameAddresses());
  205:             $headers->removeAll('X-Swift-Cc');
  206          }
  207  
  208:         if ($headers->has('X-Swift-Bcc')) {
  209:             $message->setBcc($headers->get('X-Swift-Bcc')->getNameAddresses());
  210:             $headers->removeAll('X-Swift-Bcc');
  211          }
  212      }

/home/genis/Proyectos/ProyectoXat/vendor/swiftmailer/swiftmailer/lib/classes/Swift/Signers/BodySigner.php:
   26  
   27      /**
   28:      * Return the list of header a signer might tamper.
   29       *
   30       * @return array
   31       */
   32:     public function getAlteredHeaders();
   33  }
   34  

/home/genis/Proyectos/ProyectoXat/vendor/swiftmailer/swiftmailer/lib/classes/Swift/Signers/DKIMSigner.php:
   14   * @author     Xavier De Cock <xdecock@gmail.com>
   15   */
   16: class Swift_Signers_DKIMSigner implements Swift_Signers_HeaderSigner
   17  {
   18      /**
   ..
   56  
   57      /**
   58:      * Header canon method.
   59       *
   60       * @var string
   61       */
   62:     protected $headerCanon = 'simple';
   63  
   64      /**
   65:      * Headers not being signed.
   66       *
   67       * @var array
   68       */
   69:     protected $ignoredHeaders = array('return-path' => true);
   70  
   71      /**
   ..
  113  
  114      /**
  115:      * Must we embed signed headers?
  116       *
  117       * @var bool
  118       */
  119:     protected $debugHeaders = false;
  120  
  121      // work variables
  122      /**
  123:      * Headers used to generate hash.
  124       *
  125       * @var array
  126       */
  127:     protected $signedHeaders = array();
  128  
  129      /**
  130:      * If debugHeaders is set store debugData here.
  131       *
  132       * @var string
  133       */
  134:     private $debugHeadersData = '';
  135  
  136      /**
  ...
  142  
  143      /**
  144:      * Stores the signature header.
  145       *
  146:      * @var Swift_Mime_Headers_ParameterizedHeader
  147       */
  148:     protected $dkimHeader;
  149  
  150      private $bodyHashHandler;
  151  
  152:     private $headerHash;
  153  
  154:     private $headerCanonData = '';
  155  
  156      private $bodyCanonEmptyCounter = 0;
  ...
  190      public function reset()
  191      {
  192:         $this->headerHash = null;
  193:         $this->signedHeaders = array();
  194          $this->bodyHash = null;
  195          $this->bodyHashHandler = null;
  ...
  328  
  329      /**
  330:      * Set the header canonicalization algorithm.
  331       *
  332       * @param string $canon
  ...
  334       * @return $this
  335       */
  336:     public function setHeaderCanon($canon)
  337      {
  338          if ($canon == 'relaxed') {
  339:             $this->headerCanon = 'relaxed';
  340          } else {
  341:             $this->headerCanon = 'simple';
  342          }
  343  
  ...
  411  
  412      /**
  413:      * Enable / disable the DebugHeaders.
  414       *
  415       * @param bool $debug
  ...
  417       * @return Swift_Signers_DKIMSigner
  418       */
  419:     public function setDebugHeaders($debug)
  420      {
  421:         $this->debugHeaders = (bool) $debug;
  422  
  423          return $this;
  ...
  450  
  451      /**
  452:      * Returns the list of Headers Tampered by this plugin.
  453       *
  454       * @return array
  455       */
  456:     public function getAlteredHeaders()
  457      {
  458:         if ($this->debugHeaders) {
  459              return array('DKIM-Signature', 'X-DebugHash');
  460          } else {
  ...
  464  
  465      /**
  466:      * Adds an ignored Header.
  467       *
  468:      * @param string $header_name
  469       *
  470       * @return Swift_Signers_DKIMSigner
  471       */
  472:     public function ignoreHeader($header_name)
  473      {
  474:         $this->ignoredHeaders[strtolower($header_name)] = true;
  475  
  476          return $this;
  ...
  478  
  479      /**
  480:      * Set the headers to sign.
  481       *
  482:      * @param Swift_Mime_SimpleHeaderSet $headers
  483       *
  484       * @return Swift_Signers_DKIMSigner
  485       */
  486:     public function setHeaders(Swift_Mime_SimpleHeaderSet $headers)
  487      {
  488:         $this->headerCanonData = '';
  489:         // Loop through Headers
  490:         $listHeaders = $headers->listAll();
  491:         foreach ($listHeaders as $hName) {
  492:             // Check if we need to ignore Header
  493:             if (!isset($this->ignoredHeaders[strtolower($hName)])) {
  494:                 if ($headers->has($hName)) {
  495:                     $tmp = $headers->getAll($hName);
  496:                     foreach ($tmp as $header) {
  497:                         if ($header->getFieldBody() != '') {
  498:                             $this->addHeader($header->toString());
  499:                             $this->signedHeaders[] = $header->getFieldName();
  500                          }
  501                      }
  ...
  508  
  509      /**
  510:      * Add the signature to the given Headers.
  511       *
  512:      * @param Swift_Mime_SimpleHeaderSet $headers
  513       *
  514       * @return Swift_Signers_DKIMSigner
  515       */
  516:     public function addSignature(Swift_Mime_SimpleHeaderSet $headers)
  517      {
  518          // Prepare the DKIM-Signature
  519:         $params = array('v' => '1', 'a' => $this->hashAlgorithm, 'bh' => base64_encode($this->bodyHash), 'd' => $this->domainName, 'h' => implode(': ', $this->signedHeaders), 'i' => $this->signerIdentity, 's' => $this->selector);
  520          if ($this->bodyCanon != 'simple') {
  521:             $params['c'] = $this->headerCanon.'/'.$this->bodyCanon;
  522:         } elseif ($this->headerCanon != 'simple') {
  523:             $params['c'] = $this->headerCanon;
  524          }
  525          if ($this->showLen) {
  ...
  539              }
  540          }
  541:         if ($this->debugHeaders) {
  542:             $params['z'] = implode('|', $this->debugHeadersData);
  543          }
  544          $string = '';
  ...
  547          }
  548          $string = trim($string);
  549:         $headers->addTextHeader('DKIM-Signature', $string);
  550          // Add the last DKIM-Signature
  551:         $tmp = $headers->getAll('DKIM-Signature');
  552:         $this->dkimHeader = end($tmp);
  553:         $this->addHeader(trim($this->dkimHeader->toString())."\r\n b=", true);
  554:         if ($this->debugHeaders) {
  555:             $headers->addTextHeader('X-DebugHash', base64_encode($this->headerHash));
  556          }
  557:         $this->dkimHeader->setValue($string.' b='.trim(chunk_split(base64_encode($this->getEncryptedHash()), 73, ' ')));
  558  
  559          return $this;
  ...
  562      /* Private helpers */
  563  
  564:     protected function addHeader($header, $is_sig = false)
  565      {
  566:         switch ($this->headerCanon) {
  567              case 'relaxed':
  568:                 // Prepare Header and cascade
  569:                 $exploded = explode(':', $header, 2);
  570                  $name = strtolower(trim($exploded[0]));
  571                  $value = str_replace("\r\n", '', $exploded[1]);
  572                  $value = preg_replace("/[ \t][ \t]+/", ' ', $value);
  573:                 $header = $name.':'.trim($value).($is_sig ? '' : "\r\n");
  574              case 'simple':
  575                  // Nothing to do
  576          }
  577:         $this->addToHeaderHash($header);
  578      }
  579  
  ...
  651      }
  652  
  653:     private function addToHeaderHash($header)
  654      {
  655:         if ($this->debugHeaders) {
  656:             $this->debugHeadersData[] = trim($header);
  657          }
  658:         $this->headerCanonData .= $header;
  659      }
  660  
  ...
  679              throw new Swift_SwiftException('Unable to load DKIM Private Key ['.openssl_error_string().']');
  680          }
  681:         if (openssl_sign($this->headerCanonData, $signature, $pkeyId, $algorithm)) {
  682              return $signature;
  683          }

/home/genis/Proyectos/ProyectoXat/vendor/swiftmailer/swiftmailer/lib/classes/Swift/Signers/DomainKeySigner.php:
   14   * @author     Xavier De Cock <xdecock@gmail.com>
   15   */
   16: class Swift_Signers_DomainKeySigner implements Swift_Signers_HeaderSigner
   17  {
   18      /**
   ..
   52  
   53      /**
   54:      * Headers not being signed.
   55       *
   56       * @var array
   57       */
   58:     protected $ignoredHeaders = array();
   59  
   60      /**
   ..
   66  
   67      /**
   68:      * Must we embed signed headers?
   69       *
   70       * @var bool
   71       */
   72:     protected $debugHeaders = false;
   73  
   74      // work variables
   75      /**
   76:      * Headers used to generate hash.
   77       *
   78       * @var array
   79       */
   80:     private $signedHeaders = array();
   81  
   82      /**
   83:      * Stores the signature header.
   84       *
   85:      * @var Swift_Mime_Headers_ParameterizedHeader
   86       */
   87:     protected $domainKeyHeader;
   88  
   89      /**
   ..
  287  
  288      /**
  289:      * Enable / disable the DebugHeaders.
  290       *
  291       * @param bool $debug
  ...
  293       * @return $this
  294       */
  295:     public function setDebugHeaders($debug)
  296      {
  297:         $this->debugHeaders = (bool) $debug;
  298  
  299          return $this;
  ...
  316  
  317      /**
  318:      * Returns the list of Headers Tampered by this plugin.
  319       *
  320       * @return array
  321       */
  322:     public function getAlteredHeaders()
  323      {
  324:         if ($this->debugHeaders) {
  325              return array('DomainKey-Signature', 'X-DebugHash');
  326          }
  ...
  330  
  331      /**
  332:      * Adds an ignored Header.
  333       *
  334:      * @param string $header_name
  335       *
  336       * @return $this
  337       */
  338:     public function ignoreHeader($header_name)
  339      {
  340:         $this->ignoredHeaders[strtolower($header_name)] = true;
  341  
  342          return $this;
  ...
  344  
  345      /**
  346:      * Set the headers to sign.
  347       *
  348:      * @param Swift_Mime_SimpleHeaderSet $headers
  349       *
  350       * @return $this
  351       */
  352:     public function setHeaders(Swift_Mime_SimpleHeaderSet $headers)
  353      {
  354          $this->startHash();
  355          $this->canonData = '';
  356:         // Loop through Headers
  357:         $listHeaders = $headers->listAll();
  358:         foreach ($listHeaders as $hName) {
  359:             // Check if we need to ignore Header
  360:             if (!isset($this->ignoredHeaders[strtolower($hName)])) {
  361:                 if ($headers->has($hName)) {
  362:                     $tmp = $headers->getAll($hName);
  363:                     foreach ($tmp as $header) {
  364:                         if ($header->getFieldBody() != '') {
  365:                             $this->addHeader($header->toString());
  366:                             $this->signedHeaders[] = $header->getFieldName();
  367                          }
  368                      }
  ...
  370              }
  371          }
  372:         $this->endOfHeaders();
  373  
  374          return $this;
  ...
  376  
  377      /**
  378:      * Add the signature to the given Headers.
  379       *
  380:      * @param Swift_Mime_SimpleHeaderSet $headers
  381       *
  382       * @return $this
  383       */
  384:     public function addSignature(Swift_Mime_SimpleHeaderSet $headers)
  385      {
  386:         // Prepare the DomainKey-Signature Header
  387:         $params = array('a' => $this->hashAlgorithm, 'b' => chunk_split(base64_encode($this->getEncryptedHash()), 73, ' '), 'c' => $this->canon, 'd' => $this->domainName, 'h' => implode(': ', $this->signedHeaders), 'q' => 'dns', 's' => $this->selector);
  388          $string = '';
  389          foreach ($params as $k => $v) {
  ...
  391          }
  392          $string = trim($string);
  393:         $headers->addTextHeader('DomainKey-Signature', $string);
  394  
  395          return $this;
  ...
  398      /* Private helpers */
  399  
  400:     protected function addHeader($header)
  401      {
  402          switch ($this->canon) {
  403              case 'nofws':
  404:                 // Prepare Header and cascade
  405:                 $exploded = explode(':', $header, 2);
  406                  $name = strtolower(trim($exploded[0]));
  407                  $value = str_replace("\r\n", '', $exploded[1]);
  408                  $value = preg_replace("/[ \t][ \t]+/", ' ', $value);
  409:                 $header = $name.':'.trim($value)."\r\n";
  410              case 'simple':
  411                  // Nothing to do
  412          }
  413:         $this->addToHash($header);
  414      }
  415  
  416:     protected function endOfHeaders()
  417      {
  418          $this->bodyCanonEmptyCounter = 1;

/home/genis/Proyectos/ProyectoXat/vendor/swiftmailer/swiftmailer/lib/classes/Swift/Signers/HeaderSigner.php:
   10  
   11  /**
   12:  * Header Signer Interface used to apply Header-Based Signature to a message.
   13   *
   14   * @author Xavier De Cock <xdecock@gmail.com>
   15   */
   16: interface Swift_Signers_HeaderSigner extends Swift_Signer, Swift_InputByteStream
   17  {
   18      /**
   19:      * Exclude an header from the signed headers.
   20       *
   21:      * @param string $header_name
   22       *
   23       * @return self
   24       */
   25:     public function ignoreHeader($header_name);
   26  
   27      /**
   ..
   40  
   41      /**
   42:      * Give the headers already given.
   43       *
   44:      * @param Swift_Mime_SimpleHeaderSet $headers
   45       *
   46       * @return self
   47       */
   48:     public function setHeaders(Swift_Mime_SimpleHeaderSet $headers);
   49  
   50      /**
   51:      * Add the header(s) to the headerSet.
   52       *
   53:      * @param Swift_Mime_SimpleHeaderSet $headers
   54       *
   55       * @return self
   56       */
   57:     public function addSignature(Swift_Mime_SimpleHeaderSet $headers);
   58  
   59      /**
   60:      * Return the list of header a signer might tamper.
   61       *
   62       * @return array
   63       */
   64:     public function getAlteredHeaders();
   65  }
   66  

/home/genis/Proyectos/ProyectoXat/vendor/swiftmailer/swiftmailer/lib/classes/Swift/Signers/OpenDKIMSigner.php:
   39      }
   40  
   41:     public function addSignature(Swift_Mime_SimpleHeaderSet $headers)
   42      {
   43:         $header = new Swift_Mime_Headers_OpenDKIMHeader('DKIM-Signature');
   44:         $headerVal = $this->dkimHandler->getSignatureHeader();
   45:         if (!$headerVal) {
   46              throw new Swift_SwiftException('OpenDKIM Error: '.$this->dkimHandler->getError());
   47          }
   48:         $header->setValue($headerVal);
   49:         $headers->set($header);
   50  
   51          return $this;
   52      }
   53  
   54:     public function setHeaders(Swift_Mime_SimpleHeaderSet $headers)
   55      {
   56          $bodyLen = $this->bodyLen;
   ..
   60          $hash = $this->hashAlgorithm == 'rsa-sha1' ? OpenDKIMSign::ALG_RSASHA1 : OpenDKIMSign::ALG_RSASHA256;
   61          $bodyCanon = $this->bodyCanon == 'simple' ? OpenDKIMSign::CANON_SIMPLE : OpenDKIMSign::CANON_RELAXED;
   62:         $headerCanon = $this->headerCanon == 'simple' ? OpenDKIMSign::CANON_SIMPLE : OpenDKIMSign::CANON_RELAXED;
   63:         $this->dkimHandler = new OpenDKIMSign($this->privateKey, $this->selector, $this->domainName, $headerCanon, $bodyCanon, $hash, $bodyLen);
   64          // Hardcode signature Margin for now
   65          $this->dkimHandler->setMargin(78);
   ..
   75              $this->dkimHandler->setSigner($this->signerIdentity);
   76          }
   77:         $listHeaders = $headers->listAll();
   78:         foreach ($listHeaders as $hName) {
   79:             // Check if we need to ignore Header
   80:             if (!isset($this->ignoredHeaders[strtolower($hName)])) {
   81:                 $tmp = $headers->getAll($hName);
   82:                 if ($headers->has($hName)) {
   83:                     foreach ($tmp as $header) {
   84:                         if ($header->getFieldBody() != '') {
   85:                             $htosign = $header->toString();
   86:                             $this->dkimHandler->header($htosign);
   87:                             $this->signedHeaders[] = $header->getFieldName();
   88                          }
   89                      }
   ..
  153  
  154      /**
  155:      * Enable / disable the DebugHeaders.
  156       *
  157       * @param bool $debug
  ...
  159       * @return $this
  160       */
  161:     public function setDebugHeaders($debug)
  162      {
  163:         $this->debugHeaders = (bool) $debug;
  164  
  165          return $this;

/home/genis/Proyectos/ProyectoXat/vendor/swiftmailer/swiftmailer/lib/classes/Swift/Signers/SMimeSigner.php:
   35  
   36      /**
   37:      * @var Swift_Mime_SimpleHeaderFactory
   38       */
   39:     protected $headerFactory;
   40  
   41      /**
   ..
  193          // Store the message using ByteStream to a file{1}
  194          // Remove all Children
  195:         // Sign file{1}, parse the new MIME headers and set them on the primary MimeEntity
  196          // Set the singed-body as the new body (without boundary)
  197  
  ...
  205  
  206      /**
  207:      * Return the list of header a signer might tamper.
  208       *
  209       * @return array
  210       */
  211:     public function getAlteredHeaders()
  212      {
  213          return array('Content-Type', 'Content-Transfer-Encoding', 'Content-Disposition');
  ...
  253          $mimeEntity->setChildren($message->getChildren());
  254  
  255:         $messageHeaders = $mimeEntity->getHeaders();
  256:         $messageHeaders->remove('Message-ID');
  257:         $messageHeaders->remove('Date');
  258:         $messageHeaders->remove('Subject');
  259:         $messageHeaders->remove('MIME-Version');
  260:         $messageHeaders->remove('To');
  261:         $messageHeaders->remove('From');
  262  
  263          return $mimeEntity;
  ...
  336      {
  337          $bufferLength = 78;
  338:         $headerData = '';
  339  
  340          $fromStream->setReadPointer(0);
  341  
  342          while (($buffer = $fromStream->read($bufferLength)) !== false) {
  343:             $headerData .= $buffer;
  344  
  345              if (false !== strpos($buffer, "\r\n\r\n")) {
  ...
  348          }
  349  
  350:         $headersPosEnd = strpos($headerData, "\r\n\r\n");
  351:         $headerData = trim($headerData);
  352:         $headerData = substr($headerData, 0, $headersPosEnd);
  353:         $headerLines = explode("\r\n", $headerData);
  354:         unset($headerData);
  355  
  356:         $headers = array();
  357:         $currentHeaderName = '';
  358  
  359:         foreach ($headerLines as $headerLine) {
  360              // Line separated
  361:             if (ctype_space($headerLines[0]) || false === strpos($headerLine, ':')) {
  362:                 $headers[$currentHeaderName] .= ' '.trim($headerLine);
  363                  continue;
  364              }
  365  
  366:             $header = explode(':', $headerLine, 2);
  367:             $currentHeaderName = strtolower($header[0]);
  368:             $headers[$currentHeaderName] = trim($header[1]);
  369          }
  370  
  ...
  373          $messageStream->addFilter($this->replacementFactory->createFilter("\n", "\r\n"), 'LF to CRLF');
  374  
  375:         $messageHeaders = $message->getHeaders();
  376  
  377          // No need to check for 'application/pkcs7-mime', as this is always base64
  378:         if ('multipart/signed;' === substr($headers['content-type'], 0, 17)) {
  379:             if (!preg_match('/boundary=("[^"]+"|(?:[^\s]+|$))/is', $headers['content-type'], $contentTypeData)) {
  380                  throw new Swift_SwiftException('Failed to find Boundary parameter');
  381              }
  ...
  383              $boundary = trim($contentTypeData['1'], '"');
  384  
  385:             // Skip the header and CRLF CRLF
  386:             $fromStream->setReadPointer($headersPosEnd + 4);
  387  
  388              while (false !== ($buffer = $fromStream->read($bufferLength))) {
  ...
  392              $messageStream->commit();
  393  
  394:             $messageHeaders->remove('Content-Transfer-Encoding');
  395:             $message->setContentType($headers['content-type']);
  396              $message->setBoundary($boundary);
  397              $message->setBody($messageStream);
  398          } else {
  399:             $fromStream->setReadPointer($headersPosEnd + 4);
  400  
  401:             if (null === $this->headerFactory) {
  402:                 $this->headerFactory = Swift_DependencyContainer::getInstance()->lookup('mime.headerfactory');
  403              }
  404  
  405:             $message->setContentType($headers['content-type']);
  406:             $messageHeaders->set($this->headerFactory->createTextHeader('Content-Transfer-Encoding', $headers['content-transfer-encoding']));
  407:             $messageHeaders->set($this->headerFactory->createTextHeader('Content-Disposition', $headers['content-disposition']));
  408  
  409              while (false !== ($buffer = $fromStream->read($bufferLength))) {

/home/genis/Proyectos/ProyectoXat/vendor/swiftmailer/swiftmailer/lib/classes/Swift/Transport/Esmtp/Auth/NTLMAuthenticator.php:
  252          return self::NTLMSIG
  253          .$this->createByte('03') // TYPE 3 message
  254: .$lmSec // LM response header
  255: .$ntlmSec // NTLM response header
  256: .$domainSec // Domain header
  257: .$userSec // User header
  258: .$workSec // Workstation header
  259: .$this->createByte('000000009a', 8) // session key header (empty)
  260  .$this->createByte('01020000') // FLAGS
  261  .$this->convertTo16bit($domain) // domain name

/home/genis/Proyectos/ProyectoXat/vendor/swiftmailer/swiftmailer/lib/dependency_maps/mime_deps.php:
   25      ->asNewInstanceOf('Swift_Mime_SimpleMessage')
   26      ->withDependencies(array(
   27:         'mime.headerset',
   28          'mime.qpcontentencoder',
   29          'cache',
   ..
   35      ->asNewInstanceOf('Swift_Mime_MimePart')
   36      ->withDependencies(array(
   37:         'mime.headerset',
   38          'mime.qpcontentencoder',
   39          'cache',
   ..
   45      ->asNewInstanceOf('Swift_Mime_Attachment')
   46      ->withDependencies(array(
   47:         'mime.headerset',
   48          'mime.base64contentencoder',
   49          'cache',
   ..
   55      ->asNewInstanceOf('Swift_Mime_EmbeddedFile')
   56      ->withDependencies(array(
   57:         'mime.headerset',
   58          'mime.base64contentencoder',
   59          'cache',
   ..
   62      ->addConstructorValue($swift_mime_types)
   63  
   64:     ->register('mime.headerfactory')
   65:     ->asNewInstanceOf('Swift_Mime_SimpleHeaderFactory')
   66      ->withDependencies(array(
   67:             'mime.qpheaderencoder',
   68              'mime.rfc2231encoder',
   69              'email.validator',
   ..
   71          ))
   72  
   73:     ->register('mime.headerset')
   74:     ->asNewInstanceOf('Swift_Mime_SimpleHeaderSet')
   75:     ->withDependencies(array('mime.headerfactory', 'properties.charset'))
   76  
   77:     ->register('mime.qpheaderencoder')
   78:     ->asNewInstanceOf('Swift_Mime_HeaderEncoder_QpHeaderEncoder')
   79      ->withDependencies(array('mime.charstream'))
   80  
   81:     ->register('mime.base64headerencoder')
   82:     ->asNewInstanceOf('Swift_Mime_HeaderEncoder_Base64HeaderEncoder')
   83      ->withDependencies(array('mime.charstream'))
   84  

/home/genis/Proyectos/ProyectoXat/vendor/swiftmailer/swiftmailer/lib/mime_types.php:
   38      'afm' => 'application/x-font-type1',
   39      'afp' => 'application/vnd.ibm.modcap',
   40:     'ahead' => 'application/vnd.ahead.space',
   41      'ai' => 'application/postscript',
   42      'aif' => 'audio/x-aiff',

/home/genis/Proyectos/ProyectoXat/vendor/swiftmailer/swiftmailer/tests/acceptance/Swift/Mime/AttachmentAcceptanceTest.php:
    7      private $contentEncoder;
    8      private $cache;
    9:     private $headers;
   10      private $emailValidator;
   11  
   ..
   18          $this->contentEncoder = new Swift_Mime_ContentEncoder_Base64ContentEncoder();
   19  
   20:         $headerEncoder = new Swift_Mime_HeaderEncoder_QpHeaderEncoder(
   21              new Swift_CharacterStream_ArrayCharacterStream($factory, 'utf-8')
   22              );
   ..
   26          $this->emailValidator = new EmailValidator();
   27          $this->idGenerator = new Swift_Mime_IdGenerator('example.com');
   28:         $this->headers = new Swift_Mime_SimpleHeaderSet(
   29:             new Swift_Mime_SimpleHeaderFactory($headerEncoder, $paramEncoder, $this->emailValidator)
   30              );
   31      }
   32  
   33:     public function testDispositionIsSetInHeader()
   34      {
   35          $attachment = $this->createAttachment();
   ..
   56      }
   57  
   58:     public function testFilenameIsSetInHeader()
   59      {
   60          $attachment = $this->createAttachment();
   ..
   69      }
   70  
   71:     public function testSizeIsSetInHeader()
   72      {
   73          $attachment = $this->createAttachment();
   ..
   82      }
   83  
   84:     public function testMultipleParametersInHeader()
   85      {
   86          $attachment = $this->createAttachment();
   ..
  116      {
  117          $entity = new Swift_Mime_Attachment(
  118:             $this->headers,
  119              $this->contentEncoder,
  120              $this->cache,

/home/genis/Proyectos/ProyectoXat/vendor/swiftmailer/swiftmailer/tests/acceptance/Swift/Mime/EmbeddedFileAcceptanceTest.php:
    7      private $contentEncoder;
    8      private $cache;
    9:     private $headers;
   10      private $emailValidator;
   11  
   ..
   18          $this->contentEncoder = new Swift_Mime_ContentEncoder_Base64ContentEncoder();
   19  
   20:         $headerEncoder = new Swift_Mime_HeaderEncoder_QpHeaderEncoder(
   21              new Swift_CharacterStream_ArrayCharacterStream($factory, 'utf-8')
   22              );
   ..
   26          $this->emailValidator = new EmailValidator();
   27          $this->idGenerator = new Swift_Mime_IdGenerator('example.com');
   28:         $this->headers = new Swift_Mime_SimpleHeaderSet(
   29:             new Swift_Mime_SimpleHeaderFactory($headerEncoder, $paramEncoder, $this->emailValidator)
   30              );
   31      }
   32  
   33:     public function testContentIdIsSetInHeader()
   34      {
   35          $file = $this->createEmbeddedFile();
   ..
   45      }
   46  
   47:     public function testDispositionIsSetInHeader()
   48      {
   49          $file = $this->createEmbeddedFile();
   ..
   60      }
   61  
   62:     public function testFilenameIsSetInHeader()
   63      {
   64          $file = $this->createEmbeddedFile();
   ..
   75      }
   76  
   77:     public function testSizeIsSetInHeader()
   78      {
   79          $file = $this->createEmbeddedFile();
   ..
   90      }
   91  
   92:     public function testMultipleParametersInHeader()
   93      {
   94          $file = $this->createEmbeddedFile();
   ..
  129      {
  130          $entity = new Swift_Mime_EmbeddedFile(
  131:             $this->headers,
  132              $this->contentEncoder,
  133              $this->cache,

/home/genis/Proyectos/ProyectoXat/vendor/swiftmailer/swiftmailer/tests/acceptance/Swift/Mime/HeaderEncoder/Base64HeaderEncoderAcceptanceTest.php:
    1  <?php
    2  
    3: class Swift_Mime_HeaderEncoder_Base64HeaderEncoderAcceptanceTest extends \PHPUnit\Framework\TestCase
    4  {
    5      private $encoder;
    .
    7      protected function setUp()
    8      {
    9:         $this->encoder = new Swift_Mime_HeaderEncoder_Base64HeaderEncoder();
   10      }
   11  
   ..
   20              $old = mb_internal_encoding();
   21              mb_internal_encoding('utf-8');
   22:             $newstring = mb_encode_mimeheader($subject, 'iso-2022-jp', 'B', "\r\n");
   23              mb_internal_encoding($old);
   24  

/home/genis/Proyectos/ProyectoXat/vendor/swiftmailer/swiftmailer/tests/acceptance/Swift/Mime/MimePartAcceptanceTest.php:
    7      private $contentEncoder;
    8      private $cache;
    9:     private $headers;
   10      private $emailValidator;
   11  
   ..
   24              );
   25  
   26:         $headerEncoder = new Swift_Mime_HeaderEncoder_QpHeaderEncoder(
   27              new Swift_CharacterStream_ArrayCharacterStream($factory, 'utf-8')
   28              );
   ..
   32          $this->emailValidator = new EmailValidator();
   33          $this->idGenerator = new Swift_Mime_IdGenerator('example.com');
   34:         $this->headers = new Swift_Mime_SimpleHeaderSet(
   35:             new Swift_Mime_SimpleHeaderFactory($headerEncoder, $paramEncoder, $this->emailValidator)
   36              );
   37      }
   38  
   39:     public function testCharsetIsSetInHeader()
   40      {
   41          $part = $this->createMimePart();
   ..
   52      }
   53  
   54:     public function testFormatIsSetInHeaders()
   55      {
   56          $part = $this->createMimePart();
   ..
   67      }
   68  
   69:     public function testDelSpIsSetInHeaders()
   70      {
   71          $part = $this->createMimePart();
   ..
   82      }
   83  
   84:     public function testAll3ParamsInHeaders()
   85      {
   86          $part = $this->createMimePart();
   ..
  120      {
  121          $entity = new Swift_Mime_MimePart(
  122:             $this->headers,
  123              $this->contentEncoder,
  124              $this->cache,

/home/genis/Proyectos/ProyectoXat/vendor/swiftmailer/swiftmailer/tests/acceptance/Swift/Mime/SimpleMessageAcceptanceTest.php:
    8      }
    9  
   10:     public function testBasicHeaders()
   11      {
   12          /* -- RFC 2822, 3.6.
   ..
   24              'Content-Transfer-Encoding: quoted-printable'."\r\n",
   25              $message->toString(),
   26:             '%s: Only required headers, and non-empty headers should be displayed'
   27              );
   28      }
   ..
  245      }
  246  
  247:     public function testEmptyReturnPathHeaderCanBeUsed()
  248      {
  249          $message = $this->createMessage();

/home/genis/Proyectos/ProyectoXat/vendor/swiftmailer/swiftmailer/tests/bug/Swift/Bug111Test.php:
    3  class Swift_Bug111Test extends \PHPUnit\Framework\TestCase
    4  {
    5:     public function testUnstructuredHeaderSlashesShouldNotBeEscaped()
    6      {
    7:         $complicated_header = array(
    8              'to' => array(
    9                  'email1@example.com',
   ..
   30              ),
   31          );
   32:         $json = json_encode($complicated_header);
   33  
   34          $message = new Swift_Message();
   35:         $headers = $message->getHeaders();
   36:         $headers->addTextHeader('X-SMTPAPI', $json);
   37:         $header = $headers->get('X-SMTPAPI');
   38  
   39:         $this->assertEquals('Swift_Mime_Headers_UnstructuredHeader', get_class($header));
   40:         $this->assertEquals($json, $header->getFieldBody());
   41      }
   42  }

/home/genis/Proyectos/ProyectoXat/vendor/swiftmailer/swiftmailer/tests/bug/Swift/Bug206Test.php:
   10      {
   11          $factory = new Swift_CharacterReaderFactory_SimpleCharacterReaderFactory();
   12:         $headerEncoder = new Swift_Mime_HeaderEncoder_QpHeaderEncoder(
   13              new Swift_CharacterStream_ArrayCharacterStream($factory, 'utf-8')
   14          );
   ..
   17          );
   18          $emailValidator = new EmailValidator();
   19:         $this->factory = new Swift_Mime_SimpleHeaderFactory($headerEncoder, $paramEncoder, $emailValidator);
   20      }
   21  
   22:     public function testMailboxHeaderEncoding()
   23      {
   24:         $this->doTestHeaderIsFullyEncoded('email@example.org', 'Family Name, Name', ' "Family Name, Name" <email@example.org>');
   25:         $this->doTestHeaderIsFullyEncoded('email@example.org', 'Family Namé, Name', ' Family =?utf-8?Q?Nam=C3=A9=2C?= Name');
   26:         $this->doTestHeaderIsFullyEncoded('email@example.org', 'Family Namé , Name', ' Family =?utf-8?Q?Nam=C3=A9_=2C?= Name');
   27:         $this->doTestHeaderIsFullyEncoded('email@example.org', 'Family Namé ;Name', ' Family =?utf-8?Q?Nam=C3=A9_=3BName?= ');
   28      }
   29  
   30:     private function doTestHeaderIsFullyEncoded($email, $name, $expected)
   31      {
   32:         $mailboxHeader = $this->factory->createMailboxHeader('To', array(
   33              $email => $name,
   34          ));
   35  
   36:         $headerBody = substr($mailboxHeader->toString(), 3, strlen($expected));
   37  
   38:         $this->assertEquals($expected, $headerBody);
   39      }
   40  }

/home/genis/Proyectos/ProyectoXat/vendor/swiftmailer/swiftmailer/tests/bug/Swift/Bug51Test.php:
   62      public function assertAttachmentFromSourceMatches($attachmentData, $source)
   63      {
   64:         $encHeader = 'Content-Transfer-Encoding: base64';
   65:         $base64declaration = strpos($source, $encHeader);
   66  
   67          $attachmentDataStart = strpos($source, "\r\n\r\n", $base64declaration);

/home/genis/Proyectos/ProyectoXat/vendor/swiftmailer/swiftmailer/tests/bug/Swift/Bug650Test.php:
   11       * @param string $expectedEncodedName
   12       */
   13:     public function testMailboxHeaderEncoding($name, $expectedEncodedName)
   14      {
   15          $factory = new Swift_CharacterReaderFactory_SimpleCharacterReaderFactory();
   16          $charStream = new Swift_CharacterStream_NgCharacterStream($factory, 'utf-8');
   17:         $encoder = new Swift_Mime_HeaderEncoder_QpHeaderEncoder($charStream);
   18:         $header = new Swift_Mime_Headers_MailboxHeader('To', $encoder, new EmailValidator());
   19:         $header->setCharset('utf-8');
   20  
   21:         $header->setNameAddresses(array(
   22              'test@example.com' => $name,
   23          ));
   24  
   25:         $this->assertSame('To: '.$expectedEncodedName." <test@example.com>\r\n", $header->toString());
   26      }
   27  

/home/genis/Proyectos/ProyectoXat/vendor/swiftmailer/swiftmailer/tests/fixtures/MimeEntityFixture.php:
   34      }
   35  
   36:     public function getHeaders()
   37      {
   38      }

/home/genis/Proyectos/ProyectoXat/vendor/swiftmailer/swiftmailer/tests/unit/Swift/MessageTest.php:
   33          $message1 = new Swift_Message('Test');
   34          $html = new Swift_MimePart('<html></html>', 'text/html');
   35:         $html->getHeaders()->addTextHeader('X-Test-Remove', 'Test-Value');
   36:         $html->getHeaders()->addTextHeader('X-Test-Alter', 'Test-Value');
   37          $message1->attach($html);
   38          $source = $message1->toString();
   ..
   41          foreach ($message2->getChildren() as $child) {
   42              $child->setBody('Test');
   43:             $child->getHeaders()->removeAll('X-Test-Remove');
   44:             $child->getHeaders()->get('X-Test-Alter')->setValue('Altered');
   45          }
   46          $final = $message1->toString();

/home/genis/Proyectos/ProyectoXat/vendor/swiftmailer/swiftmailer/tests/unit/Swift/Mime/AbstractMimeEntityTest.php:
    5  abstract class Swift_Mime_AbstractMimeEntityTest extends \SwiftMailerTestCase
    6  {
    7:     public function testGetHeadersReturnsHeaderSet()
    8      {
    9:         $headers = $this->createHeaderSet();
   10:         $entity = $this->createEntity($headers, $this->createEncoder(),
   11              $this->createCache()
   12              );
   13:         $this->assertSame($headers, $entity->getHeaders());
   14      }
   15  
   16:     public function testContentTypeIsReturnedFromHeader()
   17      {
   18:         $ctype = $this->createHeader('Content-Type', 'image/jpeg-test');
   19:         $headers = $this->createHeaderSet(array('Content-Type' => $ctype));
   20:         $entity = $this->createEntity($headers, $this->createEncoder(),
   21              $this->createCache()
   22              );
   ..
   24      }
   25  
   26:     public function testContentTypeIsSetInHeader()
   27      {
   28:         $ctype = $this->createHeader('Content-Type', 'text/plain', array(), false);
   29:         $headers = $this->createHeaderSet(array('Content-Type' => $ctype));
   30  
   31          $ctype->shouldReceive('setFieldBodyModel')
   ..
   36                ->with(\Mockery::not('image/jpeg'));
   37  
   38:         $entity = $this->createEntity($headers, $this->createEncoder(),
   39              $this->createCache()
   40              );
   ..
   42      }
   43  
   44:     public function testContentTypeHeaderIsAddedIfNoneSet()
   45      {
   46:         $headers = $this->createHeaderSet(array(), false);
   47:         $headers->shouldReceive('addParameterizedHeader')
   48                  ->once()
   49                  ->with('Content-Type', 'image/jpeg');
   50:         $headers->shouldReceive('addParameterizedHeader')
   51                  ->zeroOrMoreTimes();
   52  
   53:         $entity = $this->createEntity($headers, $this->createEncoder(),
   54              $this->createCache()
   55              );
   ..
   59      public function testContentTypeCanBeSetViaSetBody()
   60      {
   61:         $headers = $this->createHeaderSet(array(), false);
   62:         $headers->shouldReceive('addParameterizedHeader')
   63                  ->once()
   64                  ->with('Content-Type', 'text/html');
   65:         $headers->shouldReceive('addParameterizedHeader')
   66                  ->zeroOrMoreTimes();
   67  
   68:         $entity = $this->createEntity($headers, $this->createEncoder(),
   69              $this->createCache()
   70              );
   ..
   75      {
   76          $encoder = $this->createEncoder('base64');
   77:         $entity = $this->createEntity($this->createHeaderSet(), $encoder,
   78              $this->createCache()
   79              );
   ..
   84      {
   85          $encoder = $this->createEncoder('base64');
   86:         $headers = $this->createHeaderSet();
   87:         $entity = $this->createEntity($headers, $this->createEncoder(),
   88              $this->createCache()
   89              );
   ..
   95      {
   96          $encoder = $this->createEncoder('base64');
   97:         $encoding = $this->createHeader(
   98              'Content-Transfer-Encoding', '8bit', array(), false
   99              );
  100:         $headers = $this->createHeaderSet(array(
  101              'Content-Transfer-Encoding' => $encoding,
  102              ));
  ...
  107                   ->zeroOrMoreTimes();
  108  
  109:         $entity = $this->createEntity($headers, $this->createEncoder(),
  110              $this->createCache()
  111              );
  ...
  113      }
  114  
  115:     public function testSettingEncoderAddsEncodingHeaderIfNonePresent()
  116      {
  117:         $headers = $this->createHeaderSet(array(), false);
  118:         $headers->shouldReceive('addTextHeader')
  119                  ->once()
  120                  ->with('Content-Transfer-Encoding', 'something');
  121:         $headers->shouldReceive('addTextHeader')
  122                  ->zeroOrMoreTimes();
  123  
  124:         $entity = $this->createEntity($headers, $this->createEncoder(),
  125              $this->createCache()
  126              );
  ...
  128      }
  129  
  130:     public function testIdIsReturnedFromHeader()
  131      {
  132          /* -- RFC 2045, 7.
  133          In constructing a high-level user agent, it may be desirable to allow
  134          one body to make reference to another.  Accordingly, bodies may be
  135:         labelled using the "Content-ID" header field, which is syntactically
  136:         identical to the "Message-ID" header field
  137          */
  138  
  139:         $cid = $this->createHeader('Content-ID', 'zip@button');
  140:         $headers = $this->createHeaderSet(array('Content-ID' => $cid));
  141:         $entity = $this->createEntity($headers, $this->createEncoder(),
  142              $this->createCache()
  143              );
  ...
  145      }
  146  
  147:     public function testIdIsSetInHeader()
  148      {
  149:         $cid = $this->createHeader('Content-ID', 'zip@button', array(), false);
  150:         $headers = $this->createHeaderSet(array('Content-ID' => $cid));
  151  
  152          $cid->shouldReceive('setFieldBodyModel')
  ...
  156              ->zeroOrMoreTimes();
  157  
  158:         $entity = $this->createEntity($headers, $this->createEncoder(),
  159              $this->createCache()
  160              );
  ...
  164      public function testIdIsAutoGenerated()
  165      {
  166:         $entity = $this->createEntity($this->createHeaderSet(),
  167              $this->createEncoder(), $this->createCache()
  168              );
  ...
  172      public function testGenerateIdCreatesNewId()
  173      {
  174:         $headers = $this->createHeaderSet();
  175:         $entity = $this->createEntity($headers, $this->createEncoder(),
  176              $this->createCache()
  177              );
  ...
  183      public function testGenerateIdSetsNewId()
  184      {
  185:         $headers = $this->createHeaderSet();
  186:         $entity = $this->createEntity($headers, $this->createEncoder(),
  187              $this->createCache()
  188              );
  ...
  191      }
  192  
  193:     public function testDescriptionIsReadFromHeader()
  194      {
  195          /* -- RFC 2045, 8.
  ...
  197          body is often desirable.  For example, it may be useful to mark an
  198          "image" body as "a picture of the Space Shuttle Endeavor."  Such text
  199:         may be placed in the Content-Description header field.  This header
  200          field is always optional.
  201          */
  202  
  203:         $desc = $this->createHeader('Content-Description', 'something');
  204:         $headers = $this->createHeaderSet(array('Content-Description' => $desc));
  205:         $entity = $this->createEntity($headers, $this->createEncoder(),
  206              $this->createCache()
  207              );
  ...
  209      }
  210  
  211:     public function testDescriptionIsSetInHeader()
  212      {
  213:         $desc = $this->createHeader('Content-Description', '', array(), false);
  214          $desc->shouldReceive('setFieldBodyModel')->once()->with('whatever');
  215  
  216:         $headers = $this->createHeaderSet(array('Content-Description' => $desc));
  217  
  218:         $entity = $this->createEntity($headers, $this->createEncoder(),
  219              $this->createCache()
  220              );
  ...
  222      }
  223  
  224:     public function testDescriptionHeaderIsAddedIfNotPresent()
  225      {
  226:         $headers = $this->createHeaderSet(array(), false);
  227:         $headers->shouldReceive('addTextHeader')
  228                  ->once()
  229                  ->with('Content-Description', 'whatever');
  230:         $headers->shouldReceive('addTextHeader')
  231                  ->zeroOrMoreTimes();
  232  
  233:         $entity = $this->createEntity($headers, $this->createEncoder(),
  234              $this->createCache()
  235              );
  ...
  239      public function testSetAndGetMaxLineLength()
  240      {
  241:         $entity = $this->createEntity($this->createHeaderSet(),
  242              $this->createEncoder(), $this->createCache()
  243              );
  ...
  253                  ->with('blah');
  254  
  255:         $entity = $this->createEntity($this->createHeaderSet(),
  256              $encoder, $this->createCache()
  257              );
  ...
  267                  ->with('blah', 0, 65);
  268  
  269:         $entity = $this->createEntity($this->createHeaderSet(),
  270              $encoder, $this->createCache()
  271              );
  ...
  275      }
  276  
  277:     public function testHeadersAppearInString()
  278      {
  279:         $headers = $this->createHeaderSet(array(), false);
  280:         $headers->shouldReceive('toString')
  281                  ->once()
  282                  ->andReturn(
  283                      "Content-Type: text/plain; charset=utf-8\r\n".
  284:                     "X-MyHeader: foobar\r\n"
  285                  );
  286  
  287:         $entity = $this->createEntity($headers, $this->createEncoder(),
  288              $this->createCache()
  289              );
  290          $this->assertEquals(
  291              "Content-Type: text/plain; charset=utf-8\r\n".
  292:             "X-MyHeader: foobar\r\n",
  293              $entity->toString()
  294              );
  ...
  297      public function testSetAndGetBody()
  298      {
  299:         $entity = $this->createEntity($this->createHeaderSet(),
  300              $this->createEncoder(), $this->createCache()
  301              );
  ...
  306      public function testBodyIsAppended()
  307      {
  308:         $headers = $this->createHeaderSet(array(), false);
  309:         $headers->shouldReceive('toString')
  310                  ->once()
  311                  ->andReturn("Content-Type: text/plain; charset=utf-8\r\n");
  312  
  313:         $entity = $this->createEntity($headers, $this->createEncoder(),
  314              $this->createCache()
  315              );
  ...
  326      {
  327          $os = $this->createOutputStream('byte stream string');
  328:         $entity = $this->createEntity($this->createHeaderSet(),
  329              $this->createEncoder(), $this->createCache()
  330              );
  ...
  335      public function testByteStreamBodyIsAppended()
  336      {
  337:         $headers = $this->createHeaderSet(array(), false);
  338          $os = $this->createOutputStream('streamed');
  339:         $headers->shouldReceive('toString')
  340                  ->once()
  341                  ->andReturn("Content-Type: text/plain; charset=utf-8\r\n");
  342  
  343:         $entity = $this->createEntity($headers, $this->createEncoder(),
  344              $this->createCache()
  345              );
  ...
  365          */
  366  
  367:         $entity = $this->createEntity($this->createHeaderSet(),
  368              $this->createEncoder(), $this->createCache()
  369              );
  ...
  376      public function testBoundaryNeverChanges()
  377      {
  378:         $entity = $this->createEntity($this->createHeaderSet(),
  379              $this->createEncoder(), $this->createCache()
  380              );
  ...
  387      public function testBoundaryCanBeSet()
  388      {
  389:         $entity = $this->createEntity($this->createHeaderSet(),
  390              $this->createEncoder(), $this->createCache()
  391              );
  ...
  394      }
  395  
  396:     public function testAddingChildrenGeneratesBoundaryInHeaders()
  397      {
  398          $child = $this->createChild();
  399:         $cType = $this->createHeader('Content-Type', 'text/plain', array(), false);
  400          $cType->shouldReceive('setParameter')
  401                ->once()
  ...
  404                ->zeroOrMoreTimes();
  405  
  406:         $entity = $this->createEntity($this->createHeaderSet(array(
  407              'Content-Type' => $cType,
  408              )),
  ...
  417              $level > Swift_Mime_SimpleMimeEntity::LEVEL_TOP; $level /= 2) {
  418              $child = $this->createChild($level);
  419:             $cType = $this->createHeader(
  420                  'Content-Type', 'text/plain', array(), false
  421                  );
  ...
  426                    ->zeroOrMoreTimes();
  427  
  428:             $entity = $this->createEntity($this->createHeaderSet(array(
  429                  'Content-Type' => $cType, )),
  430                  $this->createEncoder(), $this->createCache()
  ...
  439              $level > Swift_Mime_SimpleMimeEntity::LEVEL_MIXED; $level /= 2) {
  440              $child = $this->createChild($level);
  441:             $cType = $this->createHeader(
  442                  'Content-Type', 'text/plain', array(), false
  443                  );
  ...
  448                    ->zeroOrMoreTimes();
  449  
  450:             $entity = $this->createEntity($this->createHeaderSet(array(
  451                  'Content-Type' => $cType, )),
  452                  $this->createEncoder(), $this->createCache()
  ...
  461              $level > Swift_Mime_SimpleMimeEntity::LEVEL_ALTERNATIVE; $level /= 2) {
  462              $child = $this->createChild($level);
  463:             $cType = $this->createHeader(
  464                  'Content-Type', 'text/plain', array(), false
  465                  );
  ...
  470                    ->zeroOrMoreTimes();
  471  
  472:             $entity = $this->createEntity($this->createHeaderSet(array(
  473                  'Content-Type' => $cType, )),
  474                  $this->createEncoder(), $this->createCache()
  ...
  510              }
  511  
  512:             $cType = $this->createHeader(
  513                  'Content-Type', 'text/plain', array(), false
  514                  );
  ...
  517                    ->with($combination['type']);
  518  
  519:             $headerSet = $this->createHeaderSet(array('Content-Type' => $cType));
  520:             $headerSet->shouldReceive('newInstance')
  521                        ->zeroOrMoreTimes()
  522:                       ->andReturnUsing(function () use ($headerSet) {
  523:                           return $headerSet;
  524                        });
  525:             $entity = $this->createEntity($headerSet,
  526                  $this->createEncoder(), $this->createCache()
  527                  );
  ...
  536       */
  537  
  538:         $headers = $this->createHeaderSet(array(), false);
  539  
  540          $child1 = new MimeEntityFixture(Swift_Mime_SimpleMimeEntity::LEVEL_ALTERNATIVE,
  ...
  550              );
  551  
  552:         $headers->shouldReceive('toString')
  553                ->zeroOrMoreTimes()
  554                ->andReturn("Content-Type: multipart/alternative; boundary=\"xxx\"\r\n");
  555  
  556:         $entity = $this->createEntity($headers, $this->createEncoder(),
  557              $this->createCache()
  558              );
  ...
  578      public function testMixingLevelsIsHierarchical()
  579      {
  580:         $headers = $this->createHeaderSet(array(), false);
  581:         $newHeaders = $this->createHeaderSet(array(), false);
  582  
  583          $part = $this->createChild(Swift_Mime_SimpleMimeEntity::LEVEL_ALTERNATIVE,
  ...
  593              );
  594  
  595:         $headers->shouldReceive('toString')
  596                ->zeroOrMoreTimes()
  597                ->andReturn("Content-Type: multipart/mixed; boundary=\"xxx\"\r\n");
  598:         $headers->shouldReceive('newInstance')
  599                ->zeroOrMoreTimes()
  600:               ->andReturn($newHeaders);
  601:         $newHeaders->shouldReceive('toString')
  602                ->zeroOrMoreTimes()
  603                ->andReturn("Content-Type: multipart/alternative; boundary=\"yyy\"\r\n");
  604  
  605:         $entity = $this->createEntity($headers, $this->createEncoder(),
  606              $this->createCache()
  607              );
  ...
  638                ->with($encoder);
  639  
  640:         $entity = $this->createEntity($this->createHeaderSet(),
  641              $this->createEncoder(), $this->createCache()
  642              );
  ...
  654                ->with($encoder);
  655  
  656:         $entity = $this->createEntity($this->createHeaderSet(),
  657              $this->createEncoder(), $this->createCache()
  658              );
  ...
  668                ->with('windows-874');
  669  
  670:         $entity = $this->createEntity($this->createHeaderSet(),
  671              $this->createEncoder(), $this->createCache()
  672              );
  ...
  677      public function testEntityIsWrittenToByteStream()
  678      {
  679:         $entity = $this->createEntity($this->createHeaderSet(),
  680              $this->createEncoder(), $this->createCache()
  681              );
  ...
  687      }
  688  
  689:     public function testEntityHeadersAreComittedToByteStream()
  690      {
  691:         $entity = $this->createEntity($this->createHeaderSet(),
  692              $this->createEncoder(), $this->createCache()
  693              );
  ...
  715              'text/plain'
  716              );
  717:         $headers = $this->createHeaderSet(array(), false);
  718:         $headers->shouldReceive('toString')
  719                  ->zeroOrMoreTimes()
  720                  ->andReturn("Content-Type: multipart/alternative; boundary=\"xxx\"\r\n");
  721  
  722:         $entity = $this->createEntity($headers, $this->createEncoder(),
  723              $this->createCache()
  724              );
  ...
  755              'text/plain'
  756          );
  757:         $headers = $this->createHeaderSet(array(), false);
  758:         $headers->shouldReceive('toString')
  759              ->zeroOrMoreTimes()
  760              ->andReturn("Content-Type: multipart/alternative; boundary=\"xxx\"\r\n");
  761  
  762:         $entity = $this->createEntity($headers, $this->createEncoder(),
  763              $this->createCache()
  764          );
  ...
  783      public function testUnsettingChildrenRestoresContentType()
  784      {
  785:         $cType = $this->createHeader('Content-Type', 'text/plain', array(), false);
  786          $child = $this->createChild(Swift_Mime_SimpleMimeEntity::LEVEL_ALTERNATIVE);
  787  
  ...
  796                ->with(\Mockery::not('multipart/alternative', 'image/jpeg'));
  797  
  798:         $entity = $this->createEntity($this->createHeaderSet(array(
  799              'Content-Type' => $cType,
  800              )),
  ...
  809      public function testBodyIsReadFromCacheWhenUsingToStringIfPresent()
  810      {
  811:         $headers = $this->createHeaderSet(array(), false);
  812:         $headers->shouldReceive('toString')
  813                  ->zeroOrMoreTimes()
  814                  ->andReturn("Content-Type: text/plain; charset=utf-8\r\n");
  ...
  824                ->andReturn("\r\ncache\r\ncache!");
  825  
  826:         $entity = $this->createEntity($headers, $this->createEncoder(),
  827              $cache
  828              );
  ...
  839      public function testBodyIsAddedToCacheWhenUsingToString()
  840      {
  841:         $headers = $this->createHeaderSet(array(), false);
  842:         $headers->shouldReceive('toString')
  843                  ->zeroOrMoreTimes()
  844                  ->andReturn("Content-Type: text/plain; charset=utf-8\r\n");
  ...
  853                ->with(\Mockery::any(), 'body', "\r\nblah\r\nblah!", Swift_KeyCache::MODE_WRITE);
  854  
  855:         $entity = $this->createEntity($headers, $this->createEncoder(),
  856              $cache
  857              );
  ...
  863      public function testBodyIsClearedFromCacheIfNewBodySet()
  864      {
  865:         $headers = $this->createHeaderSet(array(), false);
  866:         $headers->shouldReceive('toString')
  867                  ->zeroOrMoreTimes()
  868                  ->andReturn("Content-Type: text/plain; charset=utf-8\r\n");
  869  
  870          $cache = $this->createCache(false);
  871:         $entity = $this->createEntity($headers, $this->createEncoder(),
  872              $cache
  873              );
  ...
  886      public function testBodyIsNotClearedFromCacheIfSameBodySet()
  887      {
  888:         $headers = $this->createHeaderSet(array(), false);
  889:         $headers->shouldReceive('toString')
  890                  ->zeroOrMoreTimes()
  891                  ->andReturn("Content-Type: text/plain; charset=utf-8\r\n");
  892  
  893          $cache = $this->createCache(false);
  894:         $entity = $this->createEntity($headers, $this->createEncoder(),
  895              $cache
  896              );
  ...
  908      public function testBodyIsClearedFromCacheIfNewEncoderSet()
  909      {
  910:         $headers = $this->createHeaderSet(array(), false);
  911:         $headers->shouldReceive('toString')
  912                  ->zeroOrMoreTimes()
  913                  ->andReturn("Content-Type: text/plain; charset=utf-8\r\n");
  ...
  915          $cache = $this->createCache(false);
  916          $otherEncoder = $this->createEncoder();
  917:         $entity = $this->createEntity($headers, $this->createEncoder(),
  918              $cache
  919              );
  ...
  942                ->with(\Mockery::any(), 'body', $is);
  943  
  944:         $entity = $this->createEntity($this->createHeaderSet(),
  945              $this->createEncoder(), $cache
  946              );
  ...
  962                ->with(\Mockery::any(), 'body');
  963  
  964:         $entity = $this->createEntity($this->createHeaderSet(),
  965              $this->createEncoder(), $cache
  966              );
  ...
  972      public function testFluidInterface()
  973      {
  974:         $entity = $this->createEntity($this->createHeaderSet(),
  975              $this->createEncoder(), $this->createCache()
  976              );
  ...
  989      }
  990  
  991:     abstract protected function createEntity($headers, $encoder, $cache);
  992  
  993      protected function createChild($level = null, $string = '', $stub = true)
  ...
 1028      }
 1029  
 1030:     protected function createHeaderSet($headers = array(), $stub = true)
 1031      {
 1032:         $set = $this->getMockery('Swift_Mime_SimpleHeaderSet')->shouldIgnoreMissing();
 1033          $set->shouldReceive('get')
 1034              ->zeroOrMoreTimes()
 1035:             ->andReturnUsing(function ($key) use ($headers) {
 1036:                 return $headers[$key];
 1037              });
 1038          $set->shouldReceive('has')
 1039              ->zeroOrMoreTimes()
 1040:             ->andReturnUsing(function ($key) use ($headers) {
 1041:                 return array_key_exists($key, $headers);
 1042              });
 1043  
 ....
 1045      }
 1046  
 1047:     protected function createHeader($name, $model = null, $params = array(), $stub = true)
 1048      {
 1049:         $header = $this->getMockery('Swift_Mime_Headers_ParameterizedHeader')->shouldIgnoreMissing();
 1050:         $header->shouldReceive('getFieldName')
 1051                 ->zeroOrMoreTimes()
 1052                 ->andReturn($name);
 1053:         $header->shouldReceive('getFieldBodyModel')
 1054                 ->zeroOrMoreTimes()
 1055                 ->andReturn($model);
 1056:         $header->shouldReceive('getParameter')
 1057                 ->zeroOrMoreTimes()
 1058                 ->andReturnUsing(function ($key) use ($params) {
 ....
 1060                 });
 1061  
 1062:         return $header;
 1063      }
 1064  

/home/genis/Proyectos/ProyectoXat/vendor/swiftmailer/swiftmailer/tests/unit/Swift/Mime/AttachmentTest.php:
    6      public function testNestingLevelIsAttachment()
    7      {
    8:         $attachment = $this->createAttachment($this->createHeaderSet(),
    9              $this->createEncoder(), $this->createCache()
   10              );
   ..
   14      }
   15  
   16:     public function testDispositionIsReturnedFromHeader()
   17      {
   18          /* -- RFC 2183, 2.1, 2.2.
   19       */
   20  
   21:         $disposition = $this->createHeader('Content-Disposition', 'attachment');
   22:         $attachment = $this->createAttachment($this->createHeaderSet(array(
   23              'Content-Disposition' => $disposition, )),
   24              $this->createEncoder(), $this->createCache()
   ..
   27      }
   28  
   29:     public function testDispositionIsSetInHeader()
   30      {
   31:         $disposition = $this->createHeader('Content-Disposition', 'attachment',
   32              array(), false
   33              );
   ..
   38                      ->zeroOrMoreTimes();
   39  
   40:         $attachment = $this->createAttachment($this->createHeaderSet(array(
   41              'Content-Disposition' => $disposition, )),
   42              $this->createEncoder(), $this->createCache()
   ..
   47      public function testDispositionIsAddedIfNonePresent()
   48      {
   49:         $headers = $this->createHeaderSet(array(), false);
   50:         $headers->shouldReceive('addParameterizedHeader')
   51                  ->once()
   52                  ->with('Content-Disposition', 'inline');
   53:         $headers->shouldReceive('addParameterizedHeader')
   54                  ->zeroOrMoreTimes();
   55  
   56:         $attachment = $this->createAttachment($headers, $this->createEncoder(),
   57              $this->createCache()
   58              );
   ..
   62      public function testDispositionIsAutoDefaultedToAttachment()
   63      {
   64:         $headers = $this->createHeaderSet(array(), false);
   65:         $headers->shouldReceive('addParameterizedHeader')
   66                  ->once()
   67                  ->with('Content-Disposition', 'attachment');
   68:         $headers->shouldReceive('addParameterizedHeader')
   69                  ->zeroOrMoreTimes();
   70  
   71:         $attachment = $this->createAttachment($headers, $this->createEncoder(),
   72              $this->createCache()
   73              );
   ..
   76      public function testDefaultContentTypeInitializedToOctetStream()
   77      {
   78:         $cType = $this->createHeader('Content-Type', '',
   79              array(), false
   80              );
   ..
   85                ->zeroOrMoreTimes();
   86  
   87:         $attachment = $this->createAttachment($this->createHeaderSet(array(
   88              'Content-Type' => $cType, )),
   89              $this->createEncoder(), $this->createCache()
   ..
   91      }
   92  
   93:     public function testFilenameIsReturnedFromHeader()
   94      {
   95          /* -- RFC 2183, 2.3.
   96       */
   97  
   98:         $disposition = $this->createHeader('Content-Disposition', 'attachment',
   99              array('filename' => 'foo.txt')
  100              );
  101:         $attachment = $this->createAttachment($this->createHeaderSet(array(
  102              'Content-Disposition' => $disposition, )),
  103              $this->createEncoder(), $this->createCache()
  ...
  106      }
  107  
  108:     public function testFilenameIsSetInHeader()
  109      {
  110:         $disposition = $this->createHeader('Content-Disposition', 'attachment',
  111              array('filename' => 'foo.txt'), false
  112              );
  ...
  117                      ->zeroOrMoreTimes();
  118  
  119:         $attachment = $this->createAttachment($this->createHeaderSet(array(
  120              'Content-Disposition' => $disposition, )),
  121              $this->createEncoder(), $this->createCache()
  ...
  130       */
  131  
  132:         $cType = $this->createHeader('Content-Type', 'text/plain',
  133              array(), false
  134              );
  ...
  139                ->zeroOrMoreTimes();
  140  
  141:         $attachment = $this->createAttachment($this->createHeaderSet(array(
  142              'Content-Type' => $cType, )),
  143              $this->createEncoder(), $this->createCache()
  ...
  146      }
  147  
  148:     public function testSizeIsReturnedFromHeader()
  149      {
  150          /* -- RFC 2183, 2.7.
  151       */
  152  
  153:         $disposition = $this->createHeader('Content-Disposition', 'attachment',
  154              array('size' => 1234)
  155              );
  156:         $attachment = $this->createAttachment($this->createHeaderSet(array(
  157              'Content-Disposition' => $disposition, )),
  158              $this->createEncoder(), $this->createCache()
  ...
  161      }
  162  
  163:     public function testSizeIsSetInHeader()
  164      {
  165:         $disposition = $this->createHeader('Content-Disposition', 'attachment',
  166              array(), false
  167              );
  ...
  172                      ->zeroOrMoreTimes();
  173  
  174:         $attachment = $this->createAttachment($this->createHeaderSet(array(
  175              'Content-Disposition' => $disposition, )),
  176              $this->createEncoder(), $this->createCache()
  ...
  182      {
  183          $file = $this->createFileStream('/bar/file.ext', '');
  184:         $disposition = $this->createHeader('Content-Disposition', 'attachment',
  185              array('filename' => 'foo.txt'), false
  186              );
  ...
  189                      ->with('filename', 'file.ext');
  190  
  191:         $attachment = $this->createAttachment($this->createHeaderSet(array(
  192              'Content-Disposition' => $disposition, )),
  193              $this->createEncoder(), $this->createCache()
  ...
  199      {
  200          $file = $this->createFileStream('/bar/file.ext', '');
  201:         $disposition = $this->createHeader('Content-Disposition', 'attachment',
  202              array('filename' => 'foo.txt'), false
  203              );
  ...
  206                      ->with('filename', 'file.ext');
  207  
  208:         $ctype = $this->createHeader('Content-Type', 'text/plain', array(), false);
  209          $ctype->shouldReceive('setFieldBodyModel')
  210                ->once()
  ...
  213                ->zeroOrMoreTimes();
  214  
  215:         $headers = $this->createHeaderSet(array(
  216              'Content-Disposition' => $disposition,
  217              'Content-Type' => $ctype,
  218              ));
  219  
  220:         $attachment = $this->createAttachment($headers, $this->createEncoder(),
  221              $this->createCache()
  222              );
  ...
  227      {
  228          $file = $this->createFileStream('/bar/file.zip', '');
  229:         $disposition = $this->createHeader('Content-Disposition', 'attachment',
  230              array('filename' => 'foo.zip'), false
  231              );
  ...
  234                      ->with('filename', 'file.zip');
  235  
  236:         $ctype = $this->createHeader('Content-Type', 'text/plain', array(), false);
  237          $ctype->shouldReceive('setFieldBodyModel')
  238                ->once()
  ...
  241                ->zeroOrMoreTimes();
  242  
  243:         $headers = $this->createHeaderSet(array(
  244              'Content-Disposition' => $disposition,
  245              'Content-Type' => $ctype,
  246              ));
  247  
  248:         $attachment = $this->createAttachment($headers, $this->createEncoder(),
  249              $this->createCache(), array('zip' => 'application/zip', 'txt' => 'text/plain')
  250              );
  ...
  255      {
  256          $file = $this->createFileStream('/foo/file.ext', '<some data>');
  257:         $attachment = $this->createAttachment($this->createHeaderSet(),
  258              $this->createEncoder(), $this->createCache()
  259              );
  ...
  264      public function testFluidInterface()
  265      {
  266:         $attachment = $this->createAttachment($this->createHeaderSet(),
  267              $this->createEncoder(), $this->createCache()
  268              );
  ...
  284      }
  285  
  286:     protected function createEntity($headers, $encoder, $cache)
  287      {
  288:         return $this->createAttachment($headers, $encoder, $cache);
  289      }
  290  
  291:     protected function createAttachment($headers, $encoder, $cache, $mimeTypes = array())
  292      {
  293          $idGenerator = new Swift_Mime_IdGenerator('example.com');
  294  
  295:         return new Swift_Mime_Attachment($headers, $encoder, $cache, $idGenerator, $mimeTypes);
  296      }
  297  

/home/genis/Proyectos/ProyectoXat/vendor/swiftmailer/swiftmailer/tests/unit/Swift/Mime/EmbeddedFileTest.php:
   12      public function testNestingLevelIsEmbedded()
   13      {
   14:         $file = $this->createEmbeddedFile($this->createHeaderSet(),
   15              $this->createEncoder(), $this->createCache()
   16              );
   ..
   22      public function testIdIsAutoGenerated()
   23      {
   24:         $headers = $this->createHeaderSet(array(), false);
   25:         $headers->shouldReceive('addIdHeader')
   26                  ->once()
   27                  ->with('Content-ID', '/^.*?@.*?$/D');
   28  
   29:         $file = $this->createEmbeddedFile($headers, $this->createEncoder(),
   30              $this->createCache()
   31              );
   ..
   34      public function testDefaultDispositionIsInline()
   35      {
   36:         $headers = $this->createHeaderSet(array(), false);
   37:         $headers->shouldReceive('addParameterizedHeader')
   38                  ->once()
   39                  ->with('Content-Disposition', 'inline');
   40:         $headers->shouldReceive('addParameterizedHeader')
   41                  ->zeroOrMoreTimes();
   42  
   43:         $file = $this->createEmbeddedFile($headers, $this->createEncoder(),
   44              $this->createCache()
   45              );
   46      }
   47  
   48:     protected function createAttachment($headers, $encoder, $cache, $mimeTypes = array())
   49      {
   50:         return $this->createEmbeddedFile($headers, $encoder, $cache, $mimeTypes);
   51      }
   52  
   53:     private function createEmbeddedFile($headers, $encoder, $cache)
   54      {
   55          $idGenerator = new Swift_Mime_IdGenerator('example.com');
   56  
   57:         return new Swift_Mime_EmbeddedFile($headers, $encoder, $cache, $idGenerator);
   58      }
   59  }

/home/genis/Proyectos/ProyectoXat/vendor/swiftmailer/swiftmailer/tests/unit/Swift/Mime/HeaderEncoder/Base64HeaderEncoderTest.php:
    1  <?php
    2  
    3: class Swift_Mime_HeaderEncoder_Base64HeaderEncoderTest extends \PHPUnit\Framework\TestCase
    4  {
    5      //Most tests are already covered in Base64EncoderTest since this subclass only
    .
    8      public function testNameIsB()
    9      {
   10:         $encoder = new Swift_Mime_HeaderEncoder_Base64HeaderEncoder();
   11          $this->assertEquals('B', $encoder->getName());
   12      }

/home/genis/Proyectos/ProyectoXat/vendor/swiftmailer/swiftmailer/tests/unit/Swift/Mime/HeaderEncoder/QpHeaderEncoderTest.php:
    1  <?php
    2  
    3: class Swift_Mime_HeaderEncoder_QpHeaderEncoderTest extends \SwiftMailerTestCase
    4  {
    5      //Most tests are already covered in QpEncoderTest since this subclass only
    .
   29          $encoder = $this->createEncoder($charStream);
   30          $this->assertNotRegExp('~[ \t]~', $encoder->encodeString("a \t b"),
   31:             '%s: encoded-words in headers cannot contain LWSP as per RFC 2047.'
   32              );
   33      }
   ..
  124          /* -- RFC 2047, 5.
  125          (3) As a replacement for a 'word' entity within a 'phrase', for example,
  126:         one that precedes an address in a From, To, or Cc header.  The ABNF
  127          definition for 'phrase' from RFC 822 thus becomes:
  128  
  ...
  212      private function createEncoder($charStream)
  213      {
  214:         return new Swift_Mime_HeaderEncoder_QpHeaderEncoder($charStream);
  215      }
  216  

/home/genis/Proyectos/ProyectoXat/vendor/swiftmailer/swiftmailer/tests/unit/Swift/Mime/Headers/DateHeaderTest.php:
    1  <?php
    2  
    3: class Swift_Mime_Headers_DateHeaderTest extends \PHPUnit\Framework\TestCase
    4  {
    5      /* --
    .
    7      */
    8  
    9:     public function testTypeIsDateHeader()
   10      {
   11:         $header = $this->getHeader('Date');
   12:         $this->assertEquals(Swift_Mime_Header::TYPE_DATE, $header->getFieldType());
   13      }
   14  
   ..
   16      {
   17          $dateTime = new DateTimeImmutable();
   18:         $header = $this->getHeader('Date');
   19:         $header->setDateTime($dateTime);
   20:         $this->assertSame($dateTime, $header->getDateTime());
   21      }
   22  
   ..
   24      {
   25          $dateTime = new DateTimeImmutable();
   26:         $header = $this->getHeader('Date');
   27:         $header->setDateTime($dateTime);
   28:         $this->assertSame($dateTime, $header->getDateTime());
   29      }
   30  
   ..
   32      {
   33          $dateTime = new DateTime();
   34:         $header = $this->getHeader('Date');
   35:         $header->setDateTime($dateTime);
   36:         $this->assertInstanceOf('DateTimeImmutable', $header->getDateTime());
   37:         $this->assertEquals($dateTime->getTimestamp(), $header->getDateTime()->getTimestamp());
   38:         $this->assertEquals($dateTime->getTimezone(), $header->getDateTime()->getTimezone());
   39      }
   40  
   ..
   42      {
   43          $dateTime = new DateTime('2000-01-01 12:00:00 Europe/Berlin');
   44:         $header = $this->getHeader('Date');
   45:         $header->setDateTime($dateTime);
   46  
   47          $dateTime->setDate(2002, 2, 2);
   48:         $this->assertEquals('Sat, 01 Jan 2000 12:00:00 +0100', $header->getDateTime()->format('r'));
   49:         $this->assertEquals('Sat, 01 Jan 2000 12:00:00 +0100', $header->getFieldBody());
   50      }
   51  
   ..
   53      {
   54          $dateTime = new DateTimeImmutable('2000-01-01 12:00:00 Europe/Berlin');
   55:         $header = $this->getHeader('Date');
   56:         $header->setDateTime($dateTime);
   57:         $this->assertEquals('Sat, 01 Jan 2000 12:00:00 +0100', $header->getFieldBody());
   58      }
   59  
   ..
   61      {
   62          $dateTime = new DateTimeImmutable();
   63:         $header = $this->getHeader('Date');
   64:         $header->setFieldBodyModel($dateTime);
   65:         $this->assertEquals($dateTime->format('r'), $header->getFieldBody());
   66      }
   67  
   ..
   69      {
   70          $dateTime = new DateTimeImmutable();
   71:         $header = $this->getHeader('Date');
   72:         $header->setDateTime($dateTime);
   73:         $this->assertEquals($dateTime, $header->getFieldBodyModel());
   74      }
   75  
   ..
   77      {
   78          $dateTime = new DateTimeImmutable('2000-01-01 12:00:00 Europe/Berlin');
   79:         $header = $this->getHeader('Date');
   80:         $header->setDateTime($dateTime);
   81          $this->assertEquals("Date: Sat, 01 Jan 2000 12:00:00 +0100\r\n",
   82:             $header->toString()
   83              );
   84      }
   85  
   86:     private function getHeader($name)
   87      {
   88:         return new Swift_Mime_Headers_DateHeader($name);
   89      }
   90  }

/home/genis/Proyectos/ProyectoXat/vendor/swiftmailer/swiftmailer/tests/unit/Swift/Mime/Headers/IdentificationHeaderTest.php:
    3  use Egulias\EmailValidator\EmailValidator;
    4  
    5: class Swift_Mime_Headers_IdentificationHeaderTest extends \PHPUnit\Framework\TestCase
    6  {
    7:     public function testTypeIsIdHeader()
    8      {
    9:         $header = $this->getHeader('Message-ID');
   10:         $this->assertEquals(Swift_Mime_Header::TYPE_ID, $header->getFieldType());
   11      }
   12  
   ..
   31       */
   32  
   33:         $header = $this->getHeader('Message-ID');
   34:         $header->setId('id-left@id-right');
   35:         $this->assertEquals('<id-left@id-right>', $header->getFieldBody());
   36      }
   37  
   38      public function testIdCanBeRetrievedVerbatim()
   39      {
   40:         $header = $this->getHeader('Message-ID');
   41:         $header->setId('id-left@id-right');
   42:         $this->assertEquals('id-left@id-right', $header->getId());
   43      }
   44  
   45      public function testMultipleIdsCanBeSet()
   46      {
   47:         $header = $this->getHeader('References');
   48:         $header->setIds(array('a@b', 'x@y'));
   49:         $this->assertEquals(array('a@b', 'x@y'), $header->getIds());
   50      }
   51  
   ..
   63       */
   64  
   65:         $header = $this->getHeader('References');
   66:         $header->setIds(array('a@b', 'x@y'));
   67:         $this->assertEquals('<a@b> <x@y>', $header->getFieldBody());
   68      }
   69  
   ..
   74       */
   75  
   76:         $header = $this->getHeader('References');
   77:         $header->setId('"ab"@c');
   78:         $this->assertEquals('"ab"@c', $header->getId());
   79:         $this->assertEquals('<"ab"@c>', $header->getFieldBody());
   80      }
   81  
   ..
   86       */
   87  
   88:         $header = $this->getHeader('References');
   89:         $header->setId('"a\\<\\>b"@c');
   90:         $this->assertEquals('"a\\<\\>b"@c', $header->getId());
   91:         $this->assertEquals('<"a\\<\\>b"@c>', $header->getFieldBody());
   92      }
   93  
   94      public function testIdLeftCanBeDotAtom()
   95      {
   96:         $header = $this->getHeader('References');
   97:         $header->setId('a.b+&%$.c@d');
   98:         $this->assertEquals('a.b+&%$.c@d', $header->getId());
   99:         $this->assertEquals('<a.b+&%$.c@d>', $header->getFieldBody());
  100      }
  101  
  ...
  106      public function testInvalidIdLeftThrowsException()
  107      {
  108:         $header = $this->getHeader('References');
  109:         $header->setId('a b c@d');
  110      }
  111  
  ...
  116       */
  117  
  118:         $header = $this->getHeader('References');
  119:         $header->setId('a@b.c+&%$.d');
  120:         $this->assertEquals('a@b.c+&%$.d', $header->getId());
  121:         $this->assertEquals('<a@b.c+&%$.d>', $header->getFieldBody());
  122      }
  123  
  ...
  128       */
  129  
  130:         $header = $this->getHeader('References');
  131:         $header->setId('a@[1.2.3.4]');
  132:         $this->assertEquals('a@[1.2.3.4]', $header->getId());
  133:         $this->assertEquals('<a@[1.2.3.4]>', $header->getFieldBody());
  134      }
  135  
  ...
  140      public function testInvalidIdRightThrowsException()
  141      {
  142:         $header = $this->getHeader('References');
  143:         $header->setId('a@b c d');
  144      }
  145  
  ...
  153       msg-id          =       [CFWS] "<" id-left "@" id-right ">" [CFWS]
  154       */
  155:         $header = $this->getHeader('References');
  156:         $header->setId('abc');
  157      }
  158  
  159      public function testSetBodyModel()
  160      {
  161:         $header = $this->getHeader('Message-ID');
  162:         $header->setFieldBodyModel('a@b');
  163:         $this->assertEquals(array('a@b'), $header->getIds());
  164      }
  165  
  166      public function testGetBodyModel()
  167      {
  168:         $header = $this->getHeader('Message-ID');
  169:         $header->setId('a@b');
  170:         $this->assertEquals(array('a@b'), $header->getFieldBodyModel());
  171      }
  172  
  173      public function testStringValue()
  174      {
  175:         $header = $this->getHeader('References');
  176:         $header->setIds(array('a@b', 'x@y'));
  177:         $this->assertEquals('References: <a@b> <x@y>'."\r\n", $header->toString());
  178      }
  179  
  180:     private function getHeader($name)
  181      {
  182:         return new Swift_Mime_Headers_IdentificationHeader($name, new EmailValidator());
  183      }
  184  }

/home/genis/Proyectos/ProyectoXat/vendor/swiftmailer/swiftmailer/tests/unit/Swift/Mime/Headers/MailboxHeaderTest.php:
    3  use Egulias\EmailValidator\EmailValidator;
    4  
    5: class Swift_Mime_Headers_MailboxHeaderTest extends \SwiftMailerTestCase
    6  {
    7      /* -- RFC 2822, 3.6.2 for all tests.
    .
   10      private $charset = 'utf-8';
   11  
   12:     public function testTypeIsMailboxHeader()
   13      {
   14:         $header = $this->getHeader('To', $this->getEncoder('Q', true));
   15:         $this->assertEquals(Swift_Mime_Header::TYPE_MAILBOX, $header->getFieldType());
   16      }
   17  
   18      public function testMailboxIsSetForAddress()
   19      {
   20:         $header = $this->getHeader('From', $this->getEncoder('Q', true));
   21:         $header->setAddresses('chris@swiftmailer.org');
   22          $this->assertEquals(array('chris@swiftmailer.org'),
   23:             $header->getNameAddressStrings()
   24              );
   25      }
   ..
   27      public function testMailboxIsRenderedForNameAddress()
   28      {
   29:         $header = $this->getHeader('From', $this->getEncoder('Q', true));
   30:         $header->setNameAddresses(array('chris@swiftmailer.org' => 'Chris Corbyn'));
   31          $this->assertEquals(
   32:             array('Chris Corbyn <chris@swiftmailer.org>'), $header->getNameAddressStrings()
   33              );
   34      }
   ..
   36      public function testAddressCanBeReturnedForAddress()
   37      {
   38:         $header = $this->getHeader('From', $this->getEncoder('Q', true));
   39:         $header->setAddresses('chris@swiftmailer.org');
   40:         $this->assertEquals(array('chris@swiftmailer.org'), $header->getAddresses());
   41      }
   42  
   43      public function testAddressCanBeReturnedForNameAddress()
   44      {
   45:         $header = $this->getHeader('From', $this->getEncoder('Q', true));
   46:         $header->setNameAddresses(array('chris@swiftmailer.org' => 'Chris Corbyn'));
   47:         $this->assertEquals(array('chris@swiftmailer.org'), $header->getAddresses());
   48      }
   49  
   50      public function testQuotesInNameAreQuoted()
   51      {
   52:         $header = $this->getHeader('From', $this->getEncoder('Q', true));
   53:         $header->setNameAddresses(array(
   54              'chris@swiftmailer.org' => 'Chris Corbyn, "DHE"',
   55              ));
   56          $this->assertEquals(
   57              array('"Chris Corbyn, \"DHE\"" <chris@swiftmailer.org>'),
   58:             $header->getNameAddressStrings()
   59              );
   60      }
   ..
   62      public function testEscapeCharsInNameAreQuoted()
   63      {
   64:         $header = $this->getHeader('From', $this->getEncoder('Q', true));
   65:         $header->setNameAddresses(array(
   66              'chris@swiftmailer.org' => 'Chris Corbyn, \\escaped\\',
   67              ));
   68          $this->assertEquals(
   69              array('"Chris Corbyn, \\\\escaped\\\\" <chris@swiftmailer.org>'),
   70:             $header->getNameAddressStrings()
   71              );
   72      }
   ..
   74      public function testGetMailboxesReturnsNameValuePairs()
   75      {
   76:         $header = $this->getHeader('From', $this->getEncoder('Q', true));
   77:         $header->setNameAddresses(array(
   78              'chris@swiftmailer.org' => 'Chris Corbyn, DHE',
   79              ));
   80          $this->assertEquals(
   81:             array('chris@swiftmailer.org' => 'Chris Corbyn, DHE'), $header->getNameAddresses()
   82              );
   83      }
   ..
   85      public function testMultipleAddressesCanBeSetAndFetched()
   86      {
   87:         $header = $this->getHeader('From', $this->getEncoder('Q', true));
   88:         $header->setAddresses(array(
   89              'chris@swiftmailer.org', 'mark@swiftmailer.org',
   90              ));
   91          $this->assertEquals(
   92              array('chris@swiftmailer.org', 'mark@swiftmailer.org'),
   93:             $header->getAddresses()
   94              );
   95      }
   ..
   97      public function testMultipleAddressesAsMailboxes()
   98      {
   99:         $header = $this->getHeader('From', $this->getEncoder('Q', true));
  100:         $header->setAddresses(array(
  101              'chris@swiftmailer.org', 'mark@swiftmailer.org',
  102              ));
  103          $this->assertEquals(
  104              array('chris@swiftmailer.org' => null, 'mark@swiftmailer.org' => null),
  105:             $header->getNameAddresses()
  106              );
  107      }
  ...
  109      public function testMultipleAddressesAsMailboxStrings()
  110      {
  111:         $header = $this->getHeader('From', $this->getEncoder('Q', true));
  112:         $header->setAddresses(array(
  113              'chris@swiftmailer.org', 'mark@swiftmailer.org',
  114              ));
  115          $this->assertEquals(
  116              array('chris@swiftmailer.org', 'mark@swiftmailer.org'),
  117:             $header->getNameAddressStrings()
  118              );
  119      }
  ...
  121      public function testMultipleNamedMailboxesReturnsMultipleAddresses()
  122      {
  123:         $header = $this->getHeader('From', $this->getEncoder('Q', true));
  124:         $header->setNameAddresses(array(
  125              'chris@swiftmailer.org' => 'Chris Corbyn',
  126              'mark@swiftmailer.org' => 'Mark Corbyn',
  ...
  128          $this->assertEquals(
  129              array('chris@swiftmailer.org', 'mark@swiftmailer.org'),
  130:             $header->getAddresses()
  131              );
  132      }
  ...
  134      public function testMultipleNamedMailboxesReturnsMultipleMailboxes()
  135      {
  136:         $header = $this->getHeader('From', $this->getEncoder('Q', true));
  137:         $header->setNameAddresses(array(
  138              'chris@swiftmailer.org' => 'Chris Corbyn',
  139              'mark@swiftmailer.org' => 'Mark Corbyn',
  ...
  143                  'mark@swiftmailer.org' => 'Mark Corbyn',
  144                  ),
  145:             $header->getNameAddresses()
  146              );
  147      }
  ...
  149      public function testMultipleMailboxesProducesMultipleMailboxStrings()
  150      {
  151:         $header = $this->getHeader('From', $this->getEncoder('Q', true));
  152:         $header->setNameAddresses(array(
  153              'chris@swiftmailer.org' => 'Chris Corbyn',
  154              'mark@swiftmailer.org' => 'Mark Corbyn',
  ...
  158                  'Mark Corbyn <mark@swiftmailer.org>',
  159                  ),
  160:             $header->getNameAddressStrings()
  161              );
  162      }
  ...
  164      public function testSetAddressesOverwritesAnyMailboxes()
  165      {
  166:         $header = $this->getHeader('From', $this->getEncoder('Q', true));
  167:         $header->setNameAddresses(array(
  168              'chris@swiftmailer.org' => 'Chris Corbyn',
  169              'mark@swiftmailer.org' => 'Mark Corbyn',
  ...
  172              array('chris@swiftmailer.org' => 'Chris Corbyn',
  173              'mark@swiftmailer.org' => 'Mark Corbyn', ),
  174:             $header->getNameAddresses()
  175              );
  176          $this->assertEquals(
  177              array('chris@swiftmailer.org', 'mark@swiftmailer.org'),
  178:             $header->getAddresses()
  179              );
  180  
  181:         $header->setAddresses(array('chris@swiftmailer.org', 'mark@swiftmailer.org'));
  182  
  183          $this->assertEquals(
  184              array('chris@swiftmailer.org' => null, 'mark@swiftmailer.org' => null),
  185:             $header->getNameAddresses()
  186              );
  187          $this->assertEquals(
  188              array('chris@swiftmailer.org', 'mark@swiftmailer.org'),
  189:             $header->getAddresses()
  190              );
  191      }
  ...
  201                  ->andReturn('C=8Frbyn');
  202  
  203:         $header = $this->getHeader('From', $encoder);
  204:         $header->setNameAddresses(array('chris@swiftmailer.org' => 'Chris '.$name));
  205  
  206:         $addresses = $header->getNameAddressStrings();
  207          $this->assertEquals(
  208              'Chris =?'.$this->charset.'?Q?C=8Frbyn?= <chris@swiftmailer.org>',
  ...
  226                  ->andReturn('C=8Frbyn');
  227  
  228:         $header = $this->getHeader('From', $encoder);
  229:         $header->setNameAddresses(array('chris@swiftmailer.org' => 'Chris '.$name));
  230  
  231:         $header->getNameAddressStrings();
  232      }
  233  
  234      public function testGetValueReturnsMailboxStringValue()
  235      {
  236:         $header = $this->getHeader('From', $this->getEncoder('Q', true));
  237:         $header->setNameAddresses(array(
  238              'chris@swiftmailer.org' => 'Chris Corbyn',
  239              ));
  240          $this->assertEquals(
  241:             'Chris Corbyn <chris@swiftmailer.org>', $header->getFieldBody()
  242              );
  243      }
  ...
  245      public function testGetValueReturnsMailboxStringValueForMultipleMailboxes()
  246      {
  247:         $header = $this->getHeader('From', $this->getEncoder('Q', true));
  248:         $header->setNameAddresses(array(
  249              'chris@swiftmailer.org' => 'Chris Corbyn',
  250              'mark@swiftmailer.org' => 'Mark Corbyn',
  ...
  252          $this->assertEquals(
  253              'Chris Corbyn <chris@swiftmailer.org>, Mark Corbyn <mark@swiftmailer.org>',
  254:             $header->getFieldBody()
  255              );
  256      }
  ...
  258      public function testRemoveAddressesWithSingleValue()
  259      {
  260:         $header = $this->getHeader('From', $this->getEncoder('Q', true));
  261:         $header->setNameAddresses(array(
  262              'chris@swiftmailer.org' => 'Chris Corbyn',
  263              'mark@swiftmailer.org' => 'Mark Corbyn',
  264              ));
  265:         $header->removeAddresses('chris@swiftmailer.org');
  266          $this->assertEquals(array('mark@swiftmailer.org'),
  267:             $header->getAddresses()
  268              );
  269      }
  ...
  271      public function testRemoveAddressesWithList()
  272      {
  273:         $header = $this->getHeader('From', $this->getEncoder('Q', true));
  274:         $header->setNameAddresses(array(
  275              'chris@swiftmailer.org' => 'Chris Corbyn',
  276              'mark@swiftmailer.org' => 'Mark Corbyn',
  277              ));
  278:         $header->removeAddresses(
  279              array('chris@swiftmailer.org', 'mark@swiftmailer.org')
  280              );
  281:         $this->assertEquals(array(), $header->getAddresses());
  282      }
  283  
  284      public function testSetBodyModel()
  285      {
  286:         $header = $this->getHeader('From', $this->getEncoder('Q', true));
  287:         $header->setFieldBodyModel('chris@swiftmailer.org');
  288:         $this->assertEquals(array('chris@swiftmailer.org' => null), $header->getNameAddresses());
  289      }
  290  
  291      public function testGetBodyModel()
  292      {
  293:         $header = $this->getHeader('From', $this->getEncoder('Q', true));
  294:         $header->setAddresses(array('chris@swiftmailer.org'));
  295:         $this->assertEquals(array('chris@swiftmailer.org' => null), $header->getFieldBodyModel());
  296      }
  297  
  298      public function testToString()
  299      {
  300:         $header = $this->getHeader('From', $this->getEncoder('Q', true));
  301:         $header->setNameAddresses(array(
  302              'chris@swiftmailer.org' => 'Chris Corbyn',
  303              'mark@swiftmailer.org' => 'Mark Corbyn',
  ...
  306              'From: Chris Corbyn <chris@swiftmailer.org>, '.
  307              'Mark Corbyn <mark@swiftmailer.org>'."\r\n",
  308:             $header->toString()
  309              );
  310      }
  311  
  312:     private function getHeader($name, $encoder)
  313      {
  314:         $header = new Swift_Mime_Headers_MailboxHeader($name, $encoder, new EmailValidator());
  315:         $header->setCharset($this->charset);
  316  
  317:         return $header;
  318      }
  319  
  320      private function getEncoder($type, $stub = false)
  321      {
  322:         $encoder = $this->getMockery('Swift_Mime_HeaderEncoder')->shouldIgnoreMissing();
  323          $encoder->shouldReceive('getName')
  324                  ->zeroOrMoreTimes()

/home/genis/Proyectos/ProyectoXat/vendor/swiftmailer/swiftmailer/tests/unit/Swift/Mime/Headers/ParameterizedHeaderTest.php:
    1  <?php
    2  
    3: class Swift_Mime_Headers_ParameterizedHeaderTest extends \SwiftMailerTestCase
    4  {
    5      private $charset = 'utf-8';
    6      private $lang = 'en-us';
    7  
    8:     public function testTypeIsParameterizedHeader()
    9      {
   10:         $header = $this->getHeader('Content-Type',
   11:             $this->getHeaderEncoder('Q', true), $this->getParameterEncoder(true)
   12              );
   13:         $this->assertEquals(Swift_Mime_Header::TYPE_PARAMETERIZED, $header->getFieldType());
   14      }
   15  
   16      public function testValueIsReturnedVerbatim()
   17      {
   18:         $header = $this->getHeader('Content-Type',
   19:             $this->getHeaderEncoder('Q', true), $this->getParameterEncoder(true)
   20              );
   21:         $header->setValue('text/plain');
   22:         $this->assertEquals('text/plain', $header->getValue());
   23      }
   24  
   ..
   44          */
   45  
   46:         $header = $this->getHeader('Content-Type',
   47:             $this->getHeaderEncoder('Q', true), $this->getParameterEncoder(true)
   48              );
   49:         $header->setValue('text/plain');
   50:         $header->setParameters(array('charset' => 'utf-8'));
   51:         $this->assertEquals('text/plain; charset=utf-8', $header->getFieldBody());
   52      }
   53  
   54      public function testSpaceInParamResultsInQuotedString()
   55      {
   56:         $header = $this->getHeader('Content-Disposition',
   57:             $this->getHeaderEncoder('Q', true), $this->getParameterEncoder(true)
   58              );
   59:         $header->setValue('attachment');
   60:         $header->setParameters(array('filename' => 'my file.txt'));
   61          $this->assertEquals('attachment; filename="my file.txt"',
   62:             $header->getFieldBody()
   63              );
   64      }
   ..
  102                      str_repeat('a', 63)."\r\n".str_repeat('a', 54));
  103  
  104:         $header = $this->getHeader('Content-Disposition',
  105:             $this->getHeaderEncoder('Q', true), $encoder
  106              );
  107:         $header->setValue('attachment');
  108:         $header->setParameters(array('filename' => $value));
  109:         $header->setMaxLineLength(78);
  110          $this->assertEquals(
  111              'attachment; '.
  ...
  113              'filename*1*='.str_repeat('a', 63).";\r\n ".
  114              'filename*2*='.str_repeat('a', 54),
  115:             $header->getFieldBody()
  116              );
  117      }
  ...
  150                  ->andReturn(str_repeat('a', 20).'%8F'.str_repeat('a', 10));
  151  
  152:         $header = $this->getHeader('Content-Disposition',
  153:             $this->getHeaderEncoder('Q', true), $encoder
  154              );
  155:         $header->setValue('attachment');
  156:         $header->setParameters(array('filename' => $value));
  157:         $header->setMaxLineLength(78);
  158:         $header->setLanguage($this->lang);
  159          $this->assertEquals(
  160              'attachment; filename*='.$this->charset."'".$this->lang."'".
  161              str_repeat('a', 20).'%8F'.str_repeat('a', 10),
  162:             $header->getFieldBody()
  163              );
  164      }
  ...
  204                      str_repeat('a', 32));
  205  
  206:         $header = $this->getHeader('Content-Disposition',
  207:             $this->getHeaderEncoder('Q', true), $encoder
  208              );
  209:         $header->setValue('attachment');
  210:         $header->setParameters(array('filename' => $value));
  211:         $header->setMaxLineLength(78);
  212:         $header->setLanguage($this->lang);
  213          $this->assertEquals(
  214              'attachment; filename*0*='.$this->charset."'".$this->lang."'".
  215              str_repeat('a', 20).'%8F'.str_repeat('a', 28).";\r\n ".
  216              'filename*1*='.str_repeat('a', 32),
  217:             $header->getFieldBody()
  218              );
  219      }
  ...
  221      public function testToString()
  222      {
  223:         $header = $this->getHeader('Content-Type',
  224:             $this->getHeaderEncoder('Q', true), $this->getParameterEncoder(true)
  225              );
  226:         $header->setValue('text/html');
  227:         $header->setParameters(array('charset' => 'utf-8'));
  228          $this->assertEquals('Content-Type: text/html; charset=utf-8'."\r\n",
  229:             $header->toString()
  230              );
  231      }
  ...
  235          $value = 'fo'.pack('C', 0x8F).'bar';
  236  
  237:         $encoder = $this->getHeaderEncoder('Q');
  238          $encoder->shouldReceive('encodeString')
  239                  ->once()
  ...
  241                  ->andReturn('fo=8Fbar');
  242  
  243:         $header = $this->getHeader('X-Foo', $encoder, $this->getParameterEncoder(true));
  244:         $header->setValue($value);
  245:         $header->setParameters(array('lookslike' => 'foobar'));
  246          $this->assertEquals('X-Foo: =?utf-8?Q?fo=8Fbar?=; lookslike=foobar'."\r\n",
  247:             $header->toString()
  248              );
  249      }
  ...
  253          $value = 'fo'.pack('C', 0x8F).'bar';
  254  
  255:         $encoder = $this->getHeaderEncoder('Q');
  256          $encoder->shouldReceive('encodeString')
  257                  ->once()
  ...
  265                       ->andReturn('fo%8Fbar');
  266  
  267:         $header = $this->getHeader('X-Foo', $encoder, $paramEncoder);
  268:         $header->setValue($value);
  269:         $header->setParameters(array('says' => $value));
  270          $this->assertEquals("X-Foo: =?utf-8?Q?fo=8Fbar?=; says*=utf-8''fo%8Fbar\r\n",
  271:             $header->toString()
  272              );
  273      }
  ...
  277          $value = 'fo'.pack('C', 0x8F).'bar';
  278  
  279:         $encoder = $this->getHeaderEncoder('Q');
  280          $encoder->shouldReceive('encodeString')
  281                  ->once()
  ...
  283                  ->andReturn('fo=8Fbar');
  284  
  285:         $header = $this->getHeader('X-Foo', $encoder, null);
  286:         $header->setValue('bar');
  287:         $header->setParameters(array('says' => $value));
  288          $this->assertEquals("X-Foo: bar; says=\"=?utf-8?Q?fo=8Fbar?=\"\r\n",
  289:             $header->toString()
  290              );
  291      }
  ...
  297  
  298          RFC 2047 provides support for non-US-ASCII character sets in RFC 822
  299:         message header comments, phrases, and any unstructured text field.
  300          This is done by defining an encoded word construct which can appear
  301          in any of these places.  Given that these are fields intended for
  ...
  312          $value = 'fo'.pack('C', 0x8F).'bar';
  313  
  314:         $encoder = $this->getHeaderEncoder('Q');
  315          $encoder->shouldReceive('encodeString')
  316                  ->once()
  ...
  324                       ->andReturn('fo%8Fbar');
  325  
  326:         $header = $this->getHeader('X-Foo', $encoder, $paramEncoder);
  327:         $header->setLanguage('en');
  328:         $header->setValue($value);
  329:         $header->setParameters(array('says' => $value));
  330          $this->assertEquals("X-Foo: =?utf-8*en?Q?fo=8Fbar?=; says*=utf-8'en'fo%8Fbar\r\n",
  331:             $header->toString()
  332              );
  333      }
  ...
  335      public function testSetBodyModel()
  336      {
  337:         $header = $this->getHeader('Content-Type',
  338:             $this->getHeaderEncoder('Q', true), $this->getParameterEncoder(true)
  339              );
  340:         $header->setFieldBodyModel('text/html');
  341:         $this->assertEquals('text/html', $header->getValue());
  342      }
  343  
  344      public function testGetBodyModel()
  345      {
  346:         $header = $this->getHeader('Content-Type',
  347:             $this->getHeaderEncoder('Q', true), $this->getParameterEncoder(true)
  348              );
  349:         $header->setValue('text/plain');
  350:         $this->assertEquals('text/plain', $header->getFieldBodyModel());
  351      }
  352  
  353      public function testSetParameter()
  354      {
  355:         $header = $this->getHeader('Content-Type',
  356:             $this->getHeaderEncoder('Q', true), $this->getParameterEncoder(true)
  357              );
  358:         $header->setParameters(array('charset' => 'utf-8', 'delsp' => 'yes'));
  359:         $header->setParameter('delsp', 'no');
  360          $this->assertEquals(array('charset' => 'utf-8', 'delsp' => 'no'),
  361:             $header->getParameters()
  362              );
  363      }
  ...
  365      public function testGetParameter()
  366      {
  367:         $header = $this->getHeader('Content-Type',
  368:             $this->getHeaderEncoder('Q', true), $this->getParameterEncoder(true)
  369              );
  370:         $header->setParameters(array('charset' => 'utf-8', 'delsp' => 'yes'));
  371:         $this->assertEquals('utf-8', $header->getParameter('charset'));
  372      }
  373  
  374:     private function getHeader($name, $encoder, $paramEncoder)
  375      {
  376:         $header = new Swift_Mime_Headers_ParameterizedHeader($name, $encoder, $paramEncoder);
  377:         $header->setCharset($this->charset);
  378  
  379:         return $header;
  380      }
  381  
  382:     private function getHeaderEncoder($type, $stub = false)
  383      {
  384:         $encoder = $this->getMockery('Swift_Mime_HeaderEncoder')->shouldIgnoreMissing();
  385          $encoder->shouldReceive('getName')
  386                  ->zeroOrMoreTimes()

/home/genis/Proyectos/ProyectoXat/vendor/swiftmailer/swiftmailer/tests/unit/Swift/Mime/Headers/PathHeaderTest.php:
    3  use Egulias\EmailValidator\EmailValidator;
    4  
    5: class Swift_Mime_Headers_PathHeaderTest extends \PHPUnit\Framework\TestCase
    6  {
    7:     public function testTypeIsPathHeader()
    8      {
    9:         $header = $this->getHeader('Return-Path');
   10:         $this->assertEquals(Swift_Mime_Header::TYPE_PATH, $header->getFieldType());
   11      }
   12  
   13      public function testSingleAddressCanBeSetAndFetched()
   14      {
   15:         $header = $this->getHeader('Return-Path');
   16:         $header->setAddress('chris@swiftmailer.org');
   17:         $this->assertEquals('chris@swiftmailer.org', $header->getAddress());
   18      }
   19  
   ..
   23      public function testAddressMustComplyWithRfc2822()
   24      {
   25:         $header = $this->getHeader('Return-Path');
   26:         $header->setAddress('chr is@swiftmailer.org');
   27      }
   28  
   ..
   37       */
   38  
   39:         $header = $this->getHeader('Return-Path');
   40:         $header->setAddress('chris@swiftmailer.org');
   41:         $this->assertEquals('<chris@swiftmailer.org>', $header->getFieldBody());
   42      }
   43  
   44      public function testValueIsEmptyAngleBracketsIfEmptyAddressSet()
   45      {
   46:         $header = $this->getHeader('Return-Path');
   47:         $header->setAddress('');
   48:         $this->assertEquals('<>', $header->getFieldBody());
   49      }
   50  
   51      public function testSetBodyModel()
   52      {
   53:         $header = $this->getHeader('Return-Path');
   54:         $header->setFieldBodyModel('foo@bar.tld');
   55:         $this->assertEquals('foo@bar.tld', $header->getAddress());
   56      }
   57  
   58      public function testGetBodyModel()
   59      {
   60:         $header = $this->getHeader('Return-Path');
   61:         $header->setAddress('foo@bar.tld');
   62:         $this->assertEquals('foo@bar.tld', $header->getFieldBodyModel());
   63      }
   64  
   65      public function testToString()
   66      {
   67:         $header = $this->getHeader('Return-Path');
   68:         $header->setAddress('chris@swiftmailer.org');
   69          $this->assertEquals('Return-Path: <chris@swiftmailer.org>'."\r\n",
   70:             $header->toString()
   71              );
   72      }
   73  
   74:     private function getHeader($name)
   75      {
   76:         return new Swift_Mime_Headers_PathHeader($name, new EmailValidator());
   77      }
   78  }

/home/genis/Proyectos/ProyectoXat/vendor/swiftmailer/swiftmailer/tests/unit/Swift/Mime/Headers/UnstructuredHeaderTest.php:
    1  <?php
    2  
    3: class Swift_Mime_Headers_UnstructuredHeaderTest extends \SwiftMailerTestCase
    4  {
    5      private $charset = 'utf-8';
    6  
    7:     public function testTypeIsTextHeader()
    8      {
    9:         $header = $this->getHeader('Subject', $this->getEncoder('Q', true));
   10:         $this->assertEquals(Swift_Mime_Header::TYPE_TEXT, $header->getFieldType());
   11      }
   12  
   13      public function testGetNameReturnsNameVerbatim()
   14      {
   15:         $header = $this->getHeader('Subject', $this->getEncoder('Q', true));
   16:         $this->assertEquals('Subject', $header->getFieldName());
   17      }
   18  
   19      public function testGetValueReturnsValueVerbatim()
   20      {
   21:         $header = $this->getHeader('Subject', $this->getEncoder('Q', true));
   22:         $header->setValue('Test');
   23:         $this->assertEquals('Test', $header->getValue());
   24      }
   25  
   ..
   27      {
   28          /* -- RFC 2822, 2.2
   29:         Header fields are lines composed of a field name, followed by a colon
   30          (":"), followed by a field body, and terminated by CRLF.
   31          */
   32:         $header = $this->getHeader('Subject', $this->getEncoder('Q', true));
   33:         $header->setValue('Test');
   34:         $this->assertEquals('Subject: Test'."\r\n", $header->toString());
   35      }
   36  
   37:     public function testLongHeadersAreFoldedAtWordBoundary()
   38      {
   39          /* -- RFC 2822, 2.2.3
   40:         Each header field is logically a single line of characters comprising
   41          the field name, the colon, and the field body.  For convenience
   42          however, and to deal with the 998/78 character limitations per line,
   43:         the field body portion of a header field can be split into a multiple
   44          line representation; this is called "folding".  The general rule is
   45          that wherever this standard allows for folding white space (not
   ..
   49          $value = 'The quick brown fox jumped over the fence, he was a very very '.
   50              'scary brown fox with a bushy tail';
   51:         $header = $this->getHeader('X-Custom-Header',
   52              $this->getEncoder('Q', true)
   53              );
   54:         $header->setValue($value);
   55:         $header->setMaxLineLength(78); //A safe [RFC 2822, 2.2.3] default
   56          /*
   57:         X-Custom-Header: The quick brown fox jumped over the fence, he was a very very
   58       scary brown fox with a bushy tail
   59          */
   60          $this->assertEquals(
   61:             'X-Custom-Header: The quick brown fox jumped over the fence, he was a'.
   62              ' very very'."\r\n".//Folding
   63              ' scary brown fox with a bushy tail'."\r\n",
   64:             $header->toString(), '%s: The header should have been folded at 78th char'
   65              );
   66      }
   67  
   68:     public function testPrintableAsciiOnlyAppearsInHeaders()
   69      {
   70          /* -- RFC 2822, 2.2.
   ..
   76  
   77          $nonAsciiChar = pack('C', 0x8F);
   78:         $header = $this->getHeader('X-Test', $this->getEncoder('Q', true));
   79:         $header->setValue($nonAsciiChar);
   80          $this->assertRegExp(
   81              '~^[^:\x00-\x20\x80-\xFF]+: [^\x80-\xFF\r\n]+\r\n$~s',
   82:             $header->toString()
   83              );
   84      }
   ..
   93  
   94          $nonAsciiChar = pack('C', 0x8F);
   95:         $header = $this->getHeader('X-Test', $this->getEncoder('Q', true));
   96:         $header->setValue($nonAsciiChar);
   97          $this->assertRegExp(
   98              '~^X-Test: \=?.*?\?.*?\?.*?\?=\r\n$~s',
   99:             $header->toString()
  100              );
  101      }
  ...
  119                  ->andReturn('=8F');
  120  
  121:         $header = $this->getHeader('X-Test', $encoder);
  122:         $header->setValue($nonAsciiChar);
  123          $this->assertEquals(
  124              'X-Test: =?'.$this->charset.'?Q?=8F?='."\r\n",
  125:             $header->toString()
  126              );
  127      }
  ...
  144                  ->andReturn($encodedChar);
  145  
  146:             $header = $this->getHeader('X-A', $encoder);
  147:             $header->setValue($char);
  148  
  149              $this->assertEquals(
  150                  'X-A: =?'.$this->charset.'?Q?'.$encodedChar.'?='."\r\n",
  151:                 $header->toString(), '%s: Non-printable ascii should be encoded'
  152                  );
  153          }
  ...
  166                  ->andReturn($encodedChar);
  167  
  168:             $header = $this->getHeader('X-A', $encoder);
  169:             $header->setValue($char);
  170  
  171              $this->assertEquals(
  172                  'X-A: =?'.$this->charset.'?Q?'.$encodedChar.'?='."\r\n",
  173:                 $header->toString(), '%s: 8-bit octets should be encoded'
  174                  );
  175          }
  ...
  184          ... SNIP ...
  185  
  186:         While there is no limit to the length of a multiple-line header
  187:         field, each line of a header field that contains one or more
  188          'encoded-word's is limited to 76 characters.
  189          */
  ...
  196                  ->with($nonAsciiChar, \Mockery::any(), \Mockery::any(), \Mockery::any())
  197                  ->andReturn('=8F');
  198:         //Note that multi-line headers begin with LWSP which makes 75 + 1 = 76
  199          //Note also that =?utf-8?q??= is 12 chars which makes 75 - 12 = 63
  200  
  201          //* X-Test: is 8 chars
  202:         $header = $this->getHeader('X-Test', $encoder);
  203:         $header->setValue($nonAsciiChar);
  204  
  205          $this->assertEquals(
  206              'X-Test: =?'.$this->charset.'?Q?=8F?='."\r\n",
  207:             $header->toString()
  208              );
  209      }
  ...
  227                  ->andReturn('line_one_here'."\r\n".'line_two_here');
  228  
  229:         //Note that multi-line headers begin with LWSP which makes 75 + 1 = 76
  230          //Note also that =?utf-8?q??= is 12 chars which makes 75 - 12 = 63
  231  
  232          //* X-Test: is 8 chars
  233:         $header = $this->getHeader('X-Test', $encoder);
  234:         $header->setValue($nonAsciiChar);
  235  
  236          $this->assertEquals(
  237              'X-Test: =?'.$this->charset.'?Q?line_one_here?='."\r\n".
  238              ' =?'.$this->charset.'?Q?line_two_here?='."\r\n",
  239:             $header->toString()
  240              );
  241      }
  ...
  245          /* -- RFC 2047, 5 (1)
  246       Ordinary ASCII text and 'encoded-word's may appear together in the
  247:      same header field.  However, an 'encoded-word' that appears in a
  248:      header field defined as '*text' MUST be separated from any adjacent
  249       'encoded-word' or 'text' by 'linear-white-space'.
  250  
  ...
  273                  ->andReturn('w=8Frd');
  274  
  275:         $header = $this->getHeader('X-Test', $encoder);
  276:         $header->setValue($text);
  277  
  278:         $headerString = $header->toString();
  279  
  280          $this->assertEquals('X-Test: start =?'.$this->charset.'?Q?'.
  281              'w=8Frd_w=8Frd?= then end =?'.$this->charset.'?Q?'.
  282:             'w=8Frd?='."\r\n", $headerString,
  283              '%s: Adjacent encoded words should appear grouped with WSP encoded'
  284              );
  ...
  291  
  292          RFC 2047 provides support for non-US-ASCII character sets in RFC 822
  293:         message header comments, phrases, and any unstructured text field.
  294          This is done by defining an encoded word construct which can appear
  295          in any of these places.  Given that these are fields intended for
  ...
  312                  ->andReturn('fo=8Fbar');
  313  
  314:         $header = $this->getHeader('Subject', $encoder);
  315:         $header->setLanguage('en');
  316:         $header->setValue($value);
  317          $this->assertEquals("Subject: =?utf-8*en?Q?fo=8Fbar?=\r\n",
  318:             $header->toString()
  319              );
  320      }
  ...
  322      public function testSetBodyModel()
  323      {
  324:         $header = $this->getHeader('Subject', $this->getEncoder('Q', true));
  325:         $header->setFieldBodyModel('test');
  326:         $this->assertEquals('test', $header->getValue());
  327      }
  328  
  329      public function testGetBodyModel()
  330      {
  331:         $header = $this->getHeader('Subject', $this->getEncoder('Q', true));
  332:         $header->setValue('test');
  333:         $this->assertEquals('test', $header->getFieldBodyModel());
  334      }
  335  
  336:     private function getHeader($name, $encoder)
  337      {
  338:         $header = new Swift_Mime_Headers_UnstructuredHeader($name, $encoder);
  339:         $header->setCharset($this->charset);
  340  
  341:         return $header;
  342      }
  343  
  344      private function getEncoder($type, $stub = false)
  345      {
  346:         $encoder = $this->getMockery('Swift_Mime_HeaderEncoder')->shouldIgnoreMissing();
  347          $encoder->shouldReceive('getName')
  348                  ->zeroOrMoreTimes()

/home/genis/Proyectos/ProyectoXat/vendor/swiftmailer/swiftmailer/tests/unit/Swift/Mime/MimePartTest.php:
    6      public function testNestingLevelIsSubpart()
    7      {
    8:         $part = $this->createMimePart($this->createHeaderSet(),
    9              $this->createEncoder(), $this->createCache()
   10              );
   ..
   14      }
   15  
   16:     public function testCharsetIsReturnedFromHeader()
   17      {
   18          /* -- RFC 2046, 4.1.2.
   ..
   28          */
   29  
   30:         $cType = $this->createHeader('Content-Type', 'text/plain',
   31              array('charset' => 'iso-8859-1')
   32              );
   33:         $part = $this->createMimePart($this->createHeaderSet(array(
   34              'Content-Type' => $cType, )),
   35              $this->createEncoder(), $this->createCache()
   ..
   38      }
   39  
   40:     public function testCharsetIsSetInHeader()
   41      {
   42:         $cType = $this->createHeader('Content-Type', 'text/plain',
   43              array('charset' => 'iso-8859-1'), false
   44              );
   45          $cType->shouldReceive('setParameter')->once()->with('charset', 'utf-8');
   46  
   47:         $part = $this->createMimePart($this->createHeaderSet(array(
   48              'Content-Type' => $cType, )),
   49              $this->createEncoder(), $this->createCache()
   ..
   52      }
   53  
   54:     public function testCharsetIsSetInHeaderIfPassedToSetBody()
   55      {
   56:         $cType = $this->createHeader('Content-Type', 'text/plain',
   57              array('charset' => 'iso-8859-1'), false
   58              );
   59          $cType->shouldReceive('setParameter')->once()->with('charset', 'utf-8');
   60  
   61:         $part = $this->createMimePart($this->createHeaderSet(array(
   62              'Content-Type' => $cType, )),
   63              $this->createEncoder(), $this->createCache()
   ..
   73                  ->with('utf-8');
   74  
   75:         $part = $this->createMimePart($this->createHeaderSet(),
   76              $encoder, $this->createCache()
   77              );
   ..
   79      }
   80  
   81:     public function testSettingCharsetNotifiesHeaders()
   82      {
   83:         $headers = $this->createHeaderSet(array(), false);
   84:         $headers->shouldReceive('charsetChanged')
   85                  ->zeroOrMoreTimes()
   86                  ->with('utf-8');
   87  
   88:         $part = $this->createMimePart($headers, $this->createEncoder(),
   89              $this->createCache()
   90              );
   ..
   99                ->with('windows-874');
  100  
  101:         $part = $this->createMimePart($this->createHeaderSet(),
  102              $this->createEncoder(), $this->createCache()
  103              );
  ...
  108      public function testCharsetChangeUpdatesCharset()
  109      {
  110:         $cType = $this->createHeader('Content-Type', 'text/plain',
  111              array('charset' => 'iso-8859-1'), false
  112              );
  113          $cType->shouldReceive('setParameter')->once()->with('charset', 'utf-8');
  114  
  115:         $part = $this->createMimePart($this->createHeaderSet(array(
  116              'Content-Type' => $cType, )),
  117              $this->createEncoder(), $this->createCache()
  ...
  122      public function testSettingCharsetClearsCache()
  123      {
  124:         $headers = $this->createHeaderSet(array(), false);
  125:         $headers->shouldReceive('toString')
  126                  ->zeroOrMoreTimes()
  127                  ->andReturn("Content-Type: text/plain; charset=utf-8\r\n");
  ...
  129          $cache = $this->createCache(false);
  130  
  131:         $entity = $this->createEntity($headers, $this->createEncoder(),
  132              $cache
  133              );
  ...
  144      }
  145  
  146:     public function testFormatIsReturnedFromHeader()
  147      {
  148          /* -- RFC 3676.
  149       */
  150  
  151:         $cType = $this->createHeader('Content-Type', 'text/plain',
  152              array('format' => 'flowed')
  153              );
  154:         $part = $this->createMimePart($this->createHeaderSet(array(
  155              'Content-Type' => $cType, )),
  156              $this->createEncoder(), $this->createCache()
  ...
  159      }
  160  
  161:     public function testFormatIsSetInHeader()
  162      {
  163:         $cType = $this->createHeader('Content-Type', 'text/plain', array(), false);
  164          $cType->shouldReceive('setParameter')->once()->with('format', 'fixed');
  165  
  166:         $part = $this->createMimePart($this->createHeaderSet(array(
  167              'Content-Type' => $cType, )),
  168              $this->createEncoder(), $this->createCache()
  ...
  171      }
  172  
  173:     public function testDelSpIsReturnedFromHeader()
  174      {
  175          /* -- RFC 3676.
  176       */
  177  
  178:         $cType = $this->createHeader('Content-Type', 'text/plain',
  179              array('delsp' => 'no')
  180              );
  181:         $part = $this->createMimePart($this->createHeaderSet(array(
  182              'Content-Type' => $cType, )),
  183              $this->createEncoder(), $this->createCache()
  ...
  186      }
  187  
  188:     public function testDelSpIsSetInHeader()
  189      {
  190:         $cType = $this->createHeader('Content-Type', 'text/plain', array(), false);
  191          $cType->shouldReceive('setParameter')->once()->with('delsp', 'yes');
  192  
  193:         $part = $this->createMimePart($this->createHeaderSet(array(
  194              'Content-Type' => $cType, )),
  195              $this->createEncoder(), $this->createCache()
  ...
  200      public function testFluidInterface()
  201      {
  202:         $part = $this->createMimePart($this->createHeaderSet(),
  203              $this->createEncoder(), $this->createCache()
  204              );
  ...
  221  
  222      //abstract
  223:     protected function createEntity($headers, $encoder, $cache)
  224      {
  225:         return $this->createMimePart($headers, $encoder, $cache);
  226      }
  227  
  228:     protected function createMimePart($headers, $encoder, $cache)
  229      {
  230          $idGenerator = new Swift_Mime_IdGenerator('example.com');
  231  
  232:         return new Swift_Mime_MimePart($headers, $encoder, $cache, $idGenerator);
  233      }
  234  }

/home/genis/Proyectos/ProyectoXat/vendor/swiftmailer/swiftmailer/tests/unit/Swift/Mime/SimpleHeaderFactoryTest.php:
    3  use Egulias\EmailValidator\EmailValidator;
    4  
    5: class Swift_Mime_SimpleHeaderFactoryTest extends \PHPUnit\Framework\TestCase
    6  {
    7      private $factory;
    .
   12      }
   13  
   14:     public function testMailboxHeaderIsCorrectType()
   15      {
   16:         $header = $this->factory->createMailboxHeader('X-Foo');
   17:         $this->assertInstanceOf('Swift_Mime_Headers_MailboxHeader', $header);
   18      }
   19  
   20:     public function testMailboxHeaderHasCorrectName()
   21      {
   22:         $header = $this->factory->createMailboxHeader('X-Foo');
   23:         $this->assertEquals('X-Foo', $header->getFieldName());
   24      }
   25  
   26:     public function testMailboxHeaderHasCorrectModel()
   27      {
   28:         $header = $this->factory->createMailboxHeader('X-Foo',
   29              array('foo@bar' => 'FooBar')
   30              );
   31:         $this->assertEquals(array('foo@bar' => 'FooBar'), $header->getFieldBodyModel());
   32      }
   33  
   34:     public function testDateHeaderHasCorrectType()
   35      {
   36:         $header = $this->factory->createDateHeader('X-Date');
   37:         $this->assertInstanceOf('Swift_Mime_Headers_DateHeader', $header);
   38      }
   39  
   40:     public function testDateHeaderHasCorrectName()
   41      {
   42:         $header = $this->factory->createDateHeader('X-Date');
   43:         $this->assertEquals('X-Date', $header->getFieldName());
   44      }
   45  
   46:     public function testDateHeaderHasCorrectModel()
   47      {
   48          $dateTime = new \DateTimeImmutable();
   49:         $header = $this->factory->createDateHeader('X-Date', $dateTime);
   50:         $this->assertEquals($dateTime, $header->getFieldBodyModel());
   51      }
   52  
   53:     public function testTextHeaderHasCorrectType()
   54      {
   55:         $header = $this->factory->createTextHeader('X-Foo');
   56:         $this->assertInstanceOf('Swift_Mime_Headers_UnstructuredHeader', $header);
   57      }
   58  
   59:     public function testTextHeaderHasCorrectName()
   60      {
   61:         $header = $this->factory->createTextHeader('X-Foo');
   62:         $this->assertEquals('X-Foo', $header->getFieldName());
   63      }
   64  
   65:     public function testTextHeaderHasCorrectModel()
   66      {
   67:         $header = $this->factory->createTextHeader('X-Foo', 'bar');
   68:         $this->assertEquals('bar', $header->getFieldBodyModel());
   69      }
   70  
   71:     public function testParameterizedHeaderHasCorrectType()
   72      {
   73:         $header = $this->factory->createParameterizedHeader('X-Foo');
   74:         $this->assertInstanceOf('Swift_Mime_Headers_ParameterizedHeader', $header);
   75      }
   76  
   77:     public function testParameterizedHeaderHasCorrectName()
   78      {
   79:         $header = $this->factory->createParameterizedHeader('X-Foo');
   80:         $this->assertEquals('X-Foo', $header->getFieldName());
   81      }
   82  
   83:     public function testParameterizedHeaderHasCorrectModel()
   84      {
   85:         $header = $this->factory->createParameterizedHeader('X-Foo', 'bar');
   86:         $this->assertEquals('bar', $header->getFieldBodyModel());
   87      }
   88  
   89:     public function testParameterizedHeaderHasCorrectParams()
   90      {
   91:         $header = $this->factory->createParameterizedHeader('X-Foo', 'bar',
   92              array('zip' => 'button')
   93              );
   94:         $this->assertEquals(array('zip' => 'button'), $header->getParameters());
   95      }
   96  
   97:     public function testIdHeaderHasCorrectType()
   98      {
   99:         $header = $this->factory->createIdHeader('X-ID');
  100:         $this->assertInstanceOf('Swift_Mime_Headers_IdentificationHeader', $header);
  101      }
  102  
  103:     public function testIdHeaderHasCorrectName()
  104      {
  105:         $header = $this->factory->createIdHeader('X-ID');
  106:         $this->assertEquals('X-ID', $header->getFieldName());
  107      }
  108  
  109:     public function testIdHeaderHasCorrectModel()
  110      {
  111:         $header = $this->factory->createIdHeader('X-ID', 'xyz@abc');
  112:         $this->assertEquals(array('xyz@abc'), $header->getFieldBodyModel());
  113      }
  114  
  115:     public function testPathHeaderHasCorrectType()
  116      {
  117:         $header = $this->factory->createPathHeader('X-Path');
  118:         $this->assertInstanceOf('Swift_Mime_Headers_PathHeader', $header);
  119      }
  120  
  121:     public function testPathHeaderHasCorrectName()
  122      {
  123:         $header = $this->factory->createPathHeader('X-Path');
  124:         $this->assertEquals('X-Path', $header->getFieldName());
  125      }
  126  
  127:     public function testPathHeaderHasCorrectModel()
  128      {
  129:         $header = $this->factory->createPathHeader('X-Path', 'foo@bar');
  130:         $this->assertEquals('foo@bar', $header->getFieldBodyModel());
  131      }
  132  
  133      public function testCharsetChangeNotificationNotifiesEncoders()
  134      {
  135:         $encoder = $this->createHeaderEncoder();
  136          $encoder->expects($this->once())
  137                  ->method('charsetChanged')
  ...
  149      private function createFactory($encoder = null, $paramEncoder = null)
  150      {
  151:         return new Swift_Mime_SimpleHeaderFactory(
  152              $encoder
  153:                 ? $encoder : $this->createHeaderEncoder(),
  154              $paramEncoder
  155                  ? $paramEncoder : $this->createParamEncoder(),
  ...
  158      }
  159  
  160:     private function createHeaderEncoder()
  161      {
  162:         return $this->getMockBuilder('Swift_Mime_HeaderEncoder')->getMock();
  163      }
  164  

/home/genis/Proyectos/ProyectoXat/vendor/swiftmailer/swiftmailer/tests/unit/Swift/Mime/SimpleHeaderSetTest.php:
    1  <?php
    2  
    3: class Swift_Mime_SimpleHeaderSetTest extends \PHPUnit\Framework\TestCase
    4  {
    5:     public function testAddMailboxHeaderDelegatesToFactory()
    6      {
    7          $factory = $this->createFactory();
    8          $factory->expects($this->once())
    9:                 ->method('createMailboxHeader')
   10                  ->with('From', array('person@domain' => 'Person'))
   11:                 ->will($this->returnValue($this->createHeader('From')));
   12  
   13          $set = $this->createSet($factory);
   14:         $set->addMailboxHeader('From', array('person@domain' => 'Person'));
   15      }
   16  
   17:     public function testAddDateHeaderDelegatesToFactory()
   18      {
   19          $dateTime = new DateTimeImmutable();
   ..
   21          $factory = $this->createFactory();
   22          $factory->expects($this->once())
   23:                 ->method('createDateHeader')
   24                  ->with('Date', $dateTime)
   25:                 ->will($this->returnValue($this->createHeader('Date')));
   26  
   27          $set = $this->createSet($factory);
   28:         $set->addDateHeader('Date', $dateTime);
   29      }
   30  
   31:     public function testAddTextHeaderDelegatesToFactory()
   32      {
   33          $factory = $this->createFactory();
   34          $factory->expects($this->once())
   35:                 ->method('createTextHeader')
   36                  ->with('Subject', 'some text')
   37:                 ->will($this->returnValue($this->createHeader('Subject')));
   38  
   39          $set = $this->createSet($factory);
   40:         $set->addTextHeader('Subject', 'some text');
   41      }
   42  
   43:     public function testAddParameterizedHeaderDelegatesToFactory()
   44      {
   45          $factory = $this->createFactory();
   46          $factory->expects($this->once())
   47:                 ->method('createParameterizedHeader')
   48                  ->with('Content-Type', 'text/plain', array('charset' => 'utf-8'))
   49:                 ->will($this->returnValue($this->createHeader('Content-Type')));
   50  
   51          $set = $this->createSet($factory);
   52:         $set->addParameterizedHeader('Content-Type', 'text/plain',
   53              array('charset' => 'utf-8')
   54              );
   55      }
   56  
   57:     public function testAddIdHeaderDelegatesToFactory()
   58      {
   59          $factory = $this->createFactory();
   60          $factory->expects($this->once())
   61:                 ->method('createIdHeader')
   62                  ->with('Message-ID', 'some@id')
   63:                 ->will($this->returnValue($this->createHeader('Message-ID')));
   64  
   65          $set = $this->createSet($factory);
   66:         $set->addIdHeader('Message-ID', 'some@id');
   67      }
   68  
   69:     public function testAddPathHeaderDelegatesToFactory()
   70      {
   71          $factory = $this->createFactory();
   72          $factory->expects($this->once())
   73:                 ->method('createPathHeader')
   74                  ->with('Return-Path', 'some@path')
   75:                 ->will($this->returnValue($this->createHeader('Return-Path')));
   76  
   77          $set = $this->createSet($factory);
   78:         $set->addPathHeader('Return-Path', 'some@path');
   79      }
   80  
   81:     public function testHasReturnsFalseWhenNoHeaders()
   82      {
   83          $set = $this->createSet($this->createFactory());
   84:         $this->assertFalse($set->has('Some-Header'));
   85      }
   86  
   87:     public function testAddedMailboxHeaderIsSeenByHas()
   88      {
   89          $factory = $this->createFactory();
   90          $factory->expects($this->once())
   91:                 ->method('createMailboxHeader')
   92                  ->with('From', array('person@domain' => 'Person'))
   93:                 ->will($this->returnValue($this->createHeader('From')));
   94  
   95          $set = $this->createSet($factory);
   96:         $set->addMailboxHeader('From', array('person@domain' => 'Person'));
   97          $this->assertTrue($set->has('From'));
   98      }
   99  
  100:     public function testAddedDateHeaderIsSeenByHas()
  101      {
  102          $dateTime = new DateTimeImmutable();
  ...
  104          $factory = $this->createFactory();
  105          $factory->expects($this->once())
  106:                 ->method('createDateHeader')
  107                  ->with('Date', $dateTime)
  108:                 ->will($this->returnValue($this->createHeader('Date')));
  109  
  110          $set = $this->createSet($factory);
  111:         $set->addDateHeader('Date', $dateTime);
  112          $this->assertTrue($set->has('Date'));
  113      }
  114  
  115:     public function testAddedTextHeaderIsSeenByHas()
  116      {
  117          $factory = $this->createFactory();
  118          $factory->expects($this->once())
  119:                 ->method('createTextHeader')
  120                  ->with('Subject', 'some text')
  121:                 ->will($this->returnValue($this->createHeader('Subject')));
  122  
  123          $set = $this->createSet($factory);
  124:         $set->addTextHeader('Subject', 'some text');
  125          $this->assertTrue($set->has('Subject'));
  126      }
  127  
  128:     public function testAddedParameterizedHeaderIsSeenByHas()
  129      {
  130          $factory = $this->createFactory();
  131          $factory->expects($this->once())
  132:                 ->method('createParameterizedHeader')
  133                  ->with('Content-Type', 'text/plain', array('charset' => 'utf-8'))
  134:                 ->will($this->returnValue($this->createHeader('Content-Type')));
  135  
  136          $set = $this->createSet($factory);
  137:         $set->addParameterizedHeader('Content-Type', 'text/plain',
  138              array('charset' => 'utf-8')
  139              );
  ...
  141      }
  142  
  143:     public function testAddedIdHeaderIsSeenByHas()
  144      {
  145          $factory = $this->createFactory();
  146          $factory->expects($this->once())
  147:                 ->method('createIdHeader')
  148                  ->with('Message-ID', 'some@id')
  149:                 ->will($this->returnValue($this->createHeader('Message-ID')));
  150  
  151          $set = $this->createSet($factory);
  152:         $set->addIdHeader('Message-ID', 'some@id');
  153          $this->assertTrue($set->has('Message-ID'));
  154      }
  155  
  156:     public function testAddedPathHeaderIsSeenByHas()
  157      {
  158          $factory = $this->createFactory();
  159          $factory->expects($this->once())
  160:                 ->method('createPathHeader')
  161                  ->with('Return-Path', 'some@path')
  162:                 ->will($this->returnValue($this->createHeader('Return-Path')));
  163  
  164          $set = $this->createSet($factory);
  165:         $set->addPathHeader('Return-Path', 'some@path');
  166          $this->assertTrue($set->has('Return-Path'));
  167      }
  168  
  169:     public function testNewlySetHeaderIsSeenByHas()
  170      {
  171          $factory = $this->createFactory();
  172:         $header = $this->createHeader('X-Foo', 'bar');
  173          $set = $this->createSet($factory);
  174:         $set->set($header);
  175          $this->assertTrue($set->has('X-Foo'));
  176      }
  ...
  180          $factory = $this->createFactory();
  181          $factory->expects($this->once())
  182:                 ->method('createIdHeader')
  183                  ->with('Message-ID', 'some@id')
  184:                 ->will($this->returnValue($this->createHeader('Message-ID')));
  185  
  186          $set = $this->createSet($factory);
  187:         $set->addIdHeader('Message-ID', 'some@id');
  188          $this->assertTrue($set->has('Message-ID', 0));
  189      }
  ...
  193          $factory = $this->createFactory();
  194          $factory->expects($this->once())
  195:                 ->method('createIdHeader')
  196                  ->with('Message-ID', 'some@id')
  197:                 ->will($this->returnValue($this->createHeader('Message-ID')));
  198  
  199          $set = $this->createSet($factory);
  200:         $set->addIdHeader('Message-ID', 'some@id');
  201          $this->assertFalse($set->has('Message-ID', 1));
  202      }
  203  
  204:     public function testHasCanDistinguishMultipleHeaders()
  205      {
  206          $factory = $this->createFactory();
  207          $factory->expects($this->at(0))
  208:                 ->method('createIdHeader')
  209                  ->with('Message-ID', 'some@id')
  210:                 ->will($this->returnValue($this->createHeader('Message-ID')));
  211          $factory->expects($this->at(1))
  212:                 ->method('createIdHeader')
  213                  ->with('Message-ID', 'other@id')
  214:                 ->will($this->returnValue($this->createHeader('Message-ID')));
  215  
  216          $set = $this->createSet($factory);
  217:         $set->addIdHeader('Message-ID', 'some@id');
  218:         $set->addIdHeader('Message-ID', 'other@id');
  219          $this->assertTrue($set->has('Message-ID', 1));
  220      }
  ...
  222      public function testGetWithUnspecifiedOffset()
  223      {
  224:         $header = $this->createHeader('Message-ID');
  225          $factory = $this->createFactory();
  226          $factory->expects($this->once())
  227:                 ->method('createIdHeader')
  228                  ->with('Message-ID', 'some@id')
  229:                 ->will($this->returnValue($header));
  230  
  231          $set = $this->createSet($factory);
  232:         $set->addIdHeader('Message-ID', 'some@id');
  233:         $this->assertSame($header, $set->get('Message-ID'));
  234      }
  235  
  236      public function testGetWithSpeiciedOffset()
  237      {
  238:         $header0 = $this->createHeader('Message-ID');
  239:         $header1 = $this->createHeader('Message-ID');
  240:         $header2 = $this->createHeader('Message-ID');
  241          $factory = $this->createFactory();
  242          $factory->expects($this->at(0))
  243:                 ->method('createIdHeader')
  244                  ->with('Message-ID', 'some@id')
  245:                 ->will($this->returnValue($header0));
  246          $factory->expects($this->at(1))
  247:                 ->method('createIdHeader')
  248                  ->with('Message-ID', 'other@id')
  249:                 ->will($this->returnValue($header1));
  250          $factory->expects($this->at(2))
  251:                 ->method('createIdHeader')
  252                  ->with('Message-ID', 'more@id')
  253:                 ->will($this->returnValue($header2));
  254  
  255          $set = $this->createSet($factory);
  256:         $set->addIdHeader('Message-ID', 'some@id');
  257:         $set->addIdHeader('Message-ID', 'other@id');
  258:         $set->addIdHeader('Message-ID', 'more@id');
  259:         $this->assertSame($header1, $set->get('Message-ID', 1));
  260      }
  261  
  262:     public function testGetReturnsNullIfHeaderNotSet()
  263      {
  264          $set = $this->createSet($this->createFactory());
  ...
  266      }
  267  
  268:     public function testGetAllReturnsAllHeadersMatchingName()
  269      {
  270:         $header0 = $this->createHeader('Message-ID');
  271:         $header1 = $this->createHeader('Message-ID');
  272:         $header2 = $this->createHeader('Message-ID');
  273          $factory = $this->createFactory();
  274          $factory->expects($this->at(0))
  275:                 ->method('createIdHeader')
  276                  ->with('Message-ID', 'some@id')
  277:                 ->will($this->returnValue($header0));
  278          $factory->expects($this->at(1))
  279:                 ->method('createIdHeader')
  280                  ->with('Message-ID', 'other@id')
  281:                 ->will($this->returnValue($header1));
  282          $factory->expects($this->at(2))
  283:                 ->method('createIdHeader')
  284                  ->with('Message-ID', 'more@id')
  285:                 ->will($this->returnValue($header2));
  286  
  287          $set = $this->createSet($factory);
  288:         $set->addIdHeader('Message-ID', 'some@id');
  289:         $set->addIdHeader('Message-ID', 'other@id');
  290:         $set->addIdHeader('Message-ID', 'more@id');
  291  
  292:         $this->assertEquals(array($header0, $header1, $header2),
  293              $set->getAll('Message-ID')
  294              );
  295      }
  296  
  297:     public function testGetAllReturnsAllHeadersIfNoArguments()
  298      {
  299:         $header0 = $this->createHeader('Message-ID');
  300:         $header1 = $this->createHeader('Subject');
  301:         $header2 = $this->createHeader('To');
  302          $factory = $this->createFactory();
  303          $factory->expects($this->at(0))
  304:                 ->method('createIdHeader')
  305                  ->with('Message-ID', 'some@id')
  306:                 ->will($this->returnValue($header0));
  307          $factory->expects($this->at(1))
  308:                 ->method('createIdHeader')
  309                  ->with('Subject', 'thing')
  310:                 ->will($this->returnValue($header1));
  311          $factory->expects($this->at(2))
  312:                 ->method('createIdHeader')
  313                  ->with('To', 'person@example.org')
  314:                 ->will($this->returnValue($header2));
  315  
  316          $set = $this->createSet($factory);
  317:         $set->addIdHeader('Message-ID', 'some@id');
  318:         $set->addIdHeader('Subject', 'thing');
  319:         $set->addIdHeader('To', 'person@example.org');
  320  
  321:         $this->assertEquals(array($header0, $header1, $header2),
  322              $set->getAll()
  323              );
  ...
  332      public function testRemoveWithUnspecifiedOffset()
  333      {
  334:         $header = $this->createHeader('Message-ID');
  335          $factory = $this->createFactory();
  336          $factory->expects($this->at(0))
  337:                 ->method('createIdHeader')
  338                  ->with('Message-ID', 'some@id')
  339:                 ->will($this->returnValue($header));
  340  
  341          $set = $this->createSet($factory);
  342:         $set->addIdHeader('Message-ID', 'some@id');
  343          $set->remove('Message-ID');
  344          $this->assertFalse($set->has('Message-ID'));
  345      }
  346  
  347:     public function testRemoveWithSpecifiedIndexRemovesHeader()
  348      {
  349:         $header0 = $this->createHeader('Message-ID');
  350:         $header1 = $this->createHeader('Message-ID');
  351          $factory = $this->createFactory();
  352          $factory->expects($this->at(0))
  353:                 ->method('createIdHeader')
  354                  ->with('Message-ID', 'some@id')
  355:                 ->will($this->returnValue($header0));
  356          $factory->expects($this->at(1))
  357:                 ->method('createIdHeader')
  358                  ->with('Message-ID', 'other@id')
  359:                 ->will($this->returnValue($header1));
  360  
  361          $set = $this->createSet($factory);
  362:         $set->addIdHeader('Message-ID', 'some@id');
  363:         $set->addIdHeader('Message-ID', 'other@id');
  364          $set->remove('Message-ID', 0);
  365          $this->assertFalse($set->has('Message-ID', 0));
  ...
  371      }
  372  
  373:     public function testRemoveWithSpecifiedIndexLeavesOtherHeaders()
  374      {
  375:         $header0 = $this->createHeader('Message-ID');
  376:         $header1 = $this->createHeader('Message-ID');
  377          $factory = $this->createFactory();
  378          $factory->expects($this->at(0))
  379:                 ->method('createIdHeader')
  380                  ->with('Message-ID', 'some@id')
  381:                 ->will($this->returnValue($header0));
  382          $factory->expects($this->at(1))
  383:                 ->method('createIdHeader')
  384                  ->with('Message-ID', 'other@id')
  385:                 ->will($this->returnValue($header1));
  386  
  387          $set = $this->createSet($factory);
  388:         $set->addIdHeader('Message-ID', 'some@id');
  389:         $set->addIdHeader('Message-ID', 'other@id');
  390          $set->remove('Message-ID', 1);
  391          $this->assertTrue($set->has('Message-ID', 0));
  ...
  394      public function testRemoveWithInvalidOffsetDoesNothing()
  395      {
  396:         $header = $this->createHeader('Message-ID');
  397          $factory = $this->createFactory();
  398          $factory->expects($this->at(0))
  399:                 ->method('createIdHeader')
  400                  ->with('Message-ID', 'some@id')
  401:                 ->will($this->returnValue($header));
  402  
  403          $set = $this->createSet($factory);
  404:         $set->addIdHeader('Message-ID', 'some@id');
  405          $set->remove('Message-ID', 50);
  406          $this->assertTrue($set->has('Message-ID'));
  407      }
  408  
  409:     public function testRemoveAllRemovesAllHeadersWithName()
  410      {
  411:         $header0 = $this->createHeader('Message-ID');
  412:         $header1 = $this->createHeader('Message-ID');
  413          $factory = $this->createFactory();
  414          $factory->expects($this->at(0))
  415:                 ->method('createIdHeader')
  416                  ->with('Message-ID', 'some@id')
  417:                 ->will($this->returnValue($header0));
  418          $factory->expects($this->at(1))
  419:                 ->method('createIdHeader')
  420                  ->with('Message-ID', 'other@id')
  421:                 ->will($this->returnValue($header1));
  422  
  423          $set = $this->createSet($factory);
  424:         $set->addIdHeader('Message-ID', 'some@id');
  425:         $set->addIdHeader('Message-ID', 'other@id');
  426          $set->removeAll('Message-ID');
  427          $this->assertFalse($set->has('Message-ID', 0));
  ...
  431      public function testHasIsNotCaseSensitive()
  432      {
  433:         $header = $this->createHeader('Message-ID');
  434          $factory = $this->createFactory();
  435          $factory->expects($this->at(0))
  436:                 ->method('createIdHeader')
  437                  ->with('Message-ID', 'some@id')
  438:                 ->will($this->returnValue($header));
  439  
  440          $set = $this->createSet($factory);
  441:         $set->addIdHeader('Message-ID', 'some@id');
  442          $this->assertTrue($set->has('message-id'));
  443      }
  ...
  445      public function testGetIsNotCaseSensitive()
  446      {
  447:         $header = $this->createHeader('Message-ID');
  448          $factory = $this->createFactory();
  449          $factory->expects($this->at(0))
  450:                 ->method('createIdHeader')
  451                  ->with('Message-ID', 'some@id')
  452:                 ->will($this->returnValue($header));
  453  
  454          $set = $this->createSet($factory);
  455:         $set->addIdHeader('Message-ID', 'some@id');
  456:         $this->assertSame($header, $set->get('message-id'));
  457      }
  458  
  459      public function testGetAllIsNotCaseSensitive()
  460      {
  461:         $header = $this->createHeader('Message-ID');
  462          $factory = $this->createFactory();
  463          $factory->expects($this->at(0))
  464:                 ->method('createIdHeader')
  465                  ->with('Message-ID', 'some@id')
  466:                 ->will($this->returnValue($header));
  467  
  468          $set = $this->createSet($factory);
  469:         $set->addIdHeader('Message-ID', 'some@id');
  470:         $this->assertEquals(array($header), $set->getAll('message-id'));
  471      }
  472  
  473      public function testRemoveIsNotCaseSensitive()
  474      {
  475:         $header = $this->createHeader('Message-ID');
  476          $factory = $this->createFactory();
  477          $factory->expects($this->at(0))
  478:                 ->method('createIdHeader')
  479                  ->with('Message-ID', 'some@id')
  480:                 ->will($this->returnValue($header));
  481  
  482          $set = $this->createSet($factory);
  483:         $set->addIdHeader('Message-ID', 'some@id');
  484          $set->remove('message-id');
  485          $this->assertFalse($set->has('Message-ID'));
  ...
  488      public function testRemoveAllIsNotCaseSensitive()
  489      {
  490:         $header = $this->createHeader('Message-ID');
  491          $factory = $this->createFactory();
  492          $factory->expects($this->at(0))
  493:                 ->method('createIdHeader')
  494                  ->with('Message-ID', 'some@id')
  495:                 ->will($this->returnValue($header));
  496  
  497          $set = $this->createSet($factory);
  498:         $set->addIdHeader('Message-ID', 'some@id');
  499          $set->removeAll('message-id');
  500          $this->assertFalse($set->has('Message-ID'));
  501      }
  502  
  503:     public function testToStringJoinsHeadersTogether()
  504      {
  505          $factory = $this->createFactory();
  506          $factory->expects($this->at(0))
  507:                 ->method('createTextHeader')
  508                  ->with('Foo', 'bar')
  509:                 ->will($this->returnValue($this->createHeader('Foo', 'bar')));
  510          $factory->expects($this->at(1))
  511:                 ->method('createTextHeader')
  512                  ->with('Zip', 'buttons')
  513:                 ->will($this->returnValue($this->createHeader('Zip', 'buttons')));
  514  
  515          $set = $this->createSet($factory);
  516:         $set->addTextHeader('Foo', 'bar');
  517:         $set->addTextHeader('Zip', 'buttons');
  518          $this->assertEquals(
  519              "Foo: bar\r\n".
  ...
  523      }
  524  
  525:     public function testHeadersWithoutBodiesAreNotDisplayed()
  526      {
  527          $factory = $this->createFactory();
  528          $factory->expects($this->at(0))
  529:                 ->method('createTextHeader')
  530                  ->with('Foo', 'bar')
  531:                 ->will($this->returnValue($this->createHeader('Foo', 'bar')));
  532          $factory->expects($this->at(1))
  533:                 ->method('createTextHeader')
  534                  ->with('Zip', '')
  535:                 ->will($this->returnValue($this->createHeader('Zip', '')));
  536  
  537          $set = $this->createSet($factory);
  538:         $set->addTextHeader('Foo', 'bar');
  539:         $set->addTextHeader('Zip', '');
  540          $this->assertEquals(
  541              "Foo: bar\r\n",
  ...
  544      }
  545  
  546:     public function testHeadersWithoutBodiesCanBeForcedToDisplay()
  547      {
  548          $factory = $this->createFactory();
  549          $factory->expects($this->at(0))
  550:                 ->method('createTextHeader')
  551                  ->with('Foo', '')
  552:                 ->will($this->returnValue($this->createHeader('Foo', '')));
  553          $factory->expects($this->at(1))
  554:                 ->method('createTextHeader')
  555                  ->with('Zip', '')
  556:                 ->will($this->returnValue($this->createHeader('Zip', '')));
  557  
  558          $set = $this->createSet($factory);
  559:         $set->addTextHeader('Foo', '');
  560:         $set->addTextHeader('Zip', '');
  561          $set->setAlwaysDisplayed(array('Foo', 'Zip'));
  562          $this->assertEquals(
  ...
  567      }
  568  
  569:     public function testHeaderSequencesCanBeSpecified()
  570      {
  571          $factory = $this->createFactory();
  572          $factory->expects($this->at(0))
  573:                 ->method('createTextHeader')
  574                  ->with('Third', 'three')
  575:                 ->will($this->returnValue($this->createHeader('Third', 'three')));
  576          $factory->expects($this->at(1))
  577:                 ->method('createTextHeader')
  578                  ->with('First', 'one')
  579:                 ->will($this->returnValue($this->createHeader('First', 'one')));
  580          $factory->expects($this->at(2))
  581:                 ->method('createTextHeader')
  582                  ->with('Second', 'two')
  583:                 ->will($this->returnValue($this->createHeader('Second', 'two')));
  584  
  585          $set = $this->createSet($factory);
  586:         $set->addTextHeader('Third', 'three');
  587:         $set->addTextHeader('First', 'one');
  588:         $set->addTextHeader('Second', 'two');
  589  
  590          $set->defineOrdering(array('First', 'Second', 'Third'));
  ...
  598      }
  599  
  600:     public function testUnsortedHeadersAppearAtEnd()
  601      {
  602          $factory = $this->createFactory();
  603          $factory->expects($this->at(0))
  604:                 ->method('createTextHeader')
  605                  ->with('Fourth', 'four')
  606:                 ->will($this->returnValue($this->createHeader('Fourth', 'four')));
  607          $factory->expects($this->at(1))
  608:                 ->method('createTextHeader')
  609                  ->with('Fifth', 'five')
  610:                 ->will($this->returnValue($this->createHeader('Fifth', 'five')));
  611          $factory->expects($this->at(2))
  612:                 ->method('createTextHeader')
  613                  ->with('Third', 'three')
  614:                 ->will($this->returnValue($this->createHeader('Third', 'three')));
  615          $factory->expects($this->at(3))
  616:                 ->method('createTextHeader')
  617                  ->with('First', 'one')
  618:                 ->will($this->returnValue($this->createHeader('First', 'one')));
  619          $factory->expects($this->at(4))
  620:                 ->method('createTextHeader')
  621                  ->with('Second', 'two')
  622:                 ->will($this->returnValue($this->createHeader('Second', 'two')));
  623  
  624          $set = $this->createSet($factory);
  625:         $set->addTextHeader('Fourth', 'four');
  626:         $set->addTextHeader('Fifth', 'five');
  627:         $set->addTextHeader('Third', 'three');
  628:         $set->addTextHeader('First', 'one');
  629:         $set->addTextHeader('Second', 'two');
  630  
  631          $set->defineOrdering(array('First', 'Second', 'Third'));
  ...
  641      }
  642  
  643:     public function testSettingCharsetNotifiesAlreadyExistingHeaders()
  644      {
  645:         $subject = $this->createHeader('Subject', 'some text');
  646:         $xHeader = $this->createHeader('X-Header', 'some text');
  647          $factory = $this->createFactory();
  648          $factory->expects($this->at(0))
  649:                 ->method('createTextHeader')
  650                  ->with('Subject', 'some text')
  651                  ->will($this->returnValue($subject));
  652          $factory->expects($this->at(1))
  653:                 ->method('createTextHeader')
  654:                 ->with('X-Header', 'some text')
  655:                 ->will($this->returnValue($xHeader));
  656          $subject->expects($this->once())
  657                  ->method('setCharset')
  658                  ->with('utf-8');
  659:         $xHeader->expects($this->once())
  660                  ->method('setCharset')
  661                  ->with('utf-8');
  662  
  663          $set = $this->createSet($factory);
  664:         $set->addTextHeader('Subject', 'some text');
  665:         $set->addTextHeader('X-Header', 'some text');
  666  
  667          $set->setCharset('utf-8');
  668      }
  669  
  670:     public function testCharsetChangeNotifiesAlreadyExistingHeaders()
  671      {
  672:         $subject = $this->createHeader('Subject', 'some text');
  673:         $xHeader = $this->createHeader('X-Header', 'some text');
  674          $factory = $this->createFactory();
  675          $factory->expects($this->at(0))
  676:                 ->method('createTextHeader')
  677                  ->with('Subject', 'some text')
  678                  ->will($this->returnValue($subject));
  679          $factory->expects($this->at(1))
  680:                 ->method('createTextHeader')
  681:                 ->with('X-Header', 'some text')
  682:                 ->will($this->returnValue($xHeader));
  683          $subject->expects($this->once())
  684                  ->method('setCharset')
  685                  ->with('utf-8');
  686:         $xHeader->expects($this->once())
  687                  ->method('setCharset')
  688                  ->with('utf-8');
  689  
  690          $set = $this->createSet($factory);
  691:         $set->addTextHeader('Subject', 'some text');
  692:         $set->addTextHeader('X-Header', 'some text');
  693  
  694          $set->charsetChanged('utf-8');
  ...
  709      private function createSet($factory)
  710      {
  711:         return new Swift_Mime_SimpleHeaderSet($factory);
  712      }
  713  
  714      private function createFactory()
  715      {
  716:         return $this->getMockBuilder('Swift_Mime_SimpleHeaderFactory')->disableOriginalConstructor()->getMock();
  717      }
  718  
  719:     private function createHeader($name, $body = '')
  720      {
  721:         $header = $this->getMockBuilder('Swift_Mime_Header')->getMock();
  722:         $header->expects($this->any())
  723                 ->method('getFieldName')
  724                 ->will($this->returnValue($name));
  725:         $header->expects($this->any())
  726                 ->method('toString')
  727                 ->will($this->returnValue(sprintf("%s: %s\r\n", $name, $body)));
  728:         $header->expects($this->any())
  729                 ->method('getFieldBody')
  730                 ->will($this->returnValue($body));
  731  
  732:         return $header;
  733      }
  734  }

/home/genis/Proyectos/ProyectoXat/vendor/swiftmailer/swiftmailer/tests/unit/Swift/Mime/SimpleMessageTest.php:
   12      public function testNestingLevelIsTop()
   13      {
   14:         $message = $this->createMessage($this->createHeaderSet(),
   15              $this->createEncoder(), $this->createCache()
   16              );
   ..
   20      }
   21  
   22:     public function testDateIsReturnedFromHeader()
   23      {
   24          $dateTime = new DateTimeImmutable();
   25  
   26:         $date = $this->createHeader('Date', $dateTime);
   27          $message = $this->createMessage(
   28:             $this->createHeaderSet(array('Date' => $date)),
   29              $this->createEncoder(), $this->createCache()
   30              );
   ..
   32      }
   33  
   34:     public function testDateIsSetInHeader()
   35      {
   36          $dateTime = new DateTimeImmutable();
   37  
   38:         $date = $this->createHeader('Date', new DateTimeImmutable(), array(), false);
   39          $date->shouldReceive('setFieldBodyModel')
   40               ->once()
   ..
   44  
   45          $message = $this->createMessage(
   46:             $this->createHeaderSet(array('Date' => $date)),
   47              $this->createEncoder(), $this->createCache()
   48              );
   ..
   50      }
   51  
   52:     public function testDateHeaderIsCreatedIfNonePresent()
   53      {
   54          $dateTime = new DateTimeImmutable();
   55  
   56:         $headers = $this->createHeaderSet(array(), false);
   57:         $headers->shouldReceive('addDateHeader')
   58                  ->once()
   59                  ->with('Date', $dateTime);
   60:         $headers->shouldReceive('addDateHeader')
   61                  ->zeroOrMoreTimes();
   62  
   63:         $message = $this->createMessage($headers, $this->createEncoder(),
   64              $this->createCache()
   65              );
   ..
   67      }
   68  
   69:     public function testDateHeaderIsAddedDuringConstruction()
   70      {
   71:         $headers = $this->createHeaderSet(array(), false);
   72:         $headers->shouldReceive('addDateHeader')
   73                  ->once()
   74                  ->with('Date', Mockery::type('DateTimeImmutable'));
   75  
   76:         $message = $this->createMessage($headers, $this->createEncoder(),
   77              $this->createCache()
   78              );
   79      }
   80  
   81:     public function testIdIsReturnedFromHeader()
   82      {
   83          /* -- RFC 2045, 7.
   84          In constructing a high-level user agent, it may be desirable to allow
   85          one body to make reference to another.  Accordingly, bodies may be
   86:         labelled using the "Content-ID" header field, which is syntactically
   87:         identical to the "Message-ID" header field
   88          */
   89  
   90:         $messageId = $this->createHeader('Message-ID', 'a@b');
   91          $message = $this->createMessage(
   92:             $this->createHeaderSet(array('Message-ID' => $messageId)),
   93              $this->createEncoder(), $this->createCache()
   94              );
   ..
   96      }
   97  
   98:     public function testIdIsSetInHeader()
   99      {
  100:         $messageId = $this->createHeader('Message-ID', 'a@b', array(), false);
  101          $messageId->shouldReceive('setFieldBodyModel')
  102                    ->once()
  ...
  106  
  107          $message = $this->createMessage(
  108:             $this->createHeaderSet(array('Message-ID' => $messageId)),
  109              $this->createEncoder(), $this->createCache()
  110              );
  ...
  114      public function testIdIsAutoGenerated()
  115      {
  116:         $headers = $this->createHeaderSet(array(), false);
  117:         $headers->shouldReceive('addIdHeader')
  118                  ->once()
  119                  ->with('Message-ID', '/^.*?@.*?$/D');
  120  
  121:         $message = $this->createMessage($headers, $this->createEncoder(),
  122              $this->createCache()
  123              );
  124      }
  125  
  126:     public function testSubjectIsReturnedFromHeader()
  127      {
  128          /* -- RFC 2822, 3.6.5.
  129       */
  130  
  131:         $subject = $this->createHeader('Subject', 'example subject');
  132          $message = $this->createMessage(
  133:             $this->createHeaderSet(array('Subject' => $subject)),
  134              $this->createEncoder(), $this->createCache()
  135              );
  ...
  137      }
  138  
  139:     public function testSubjectIsSetInHeader()
  140      {
  141:         $subject = $this->createHeader('Subject', '', array(), false);
  142          $subject->shouldReceive('setFieldBodyModel')
  143                  ->once()
  ...
  145  
  146          $message = $this->createMessage(
  147:             $this->createHeaderSet(array('Subject' => $subject)),
  148              $this->createEncoder(), $this->createCache()
  149              );
  ...
  151      }
  152  
  153:     public function testSubjectHeaderIsCreatedIfNotPresent()
  154      {
  155:         $headers = $this->createHeaderSet(array(), false);
  156:         $headers->shouldReceive('addTextHeader')
  157                  ->once()
  158                  ->with('Subject', 'example subject');
  159:         $headers->shouldReceive('addTextHeader')
  160                  ->zeroOrMoreTimes();
  161  
  162:         $message = $this->createMessage($headers, $this->createEncoder(),
  163              $this->createCache()
  164              );
  ...
  166      }
  167  
  168:     public function testReturnPathIsReturnedFromHeader()
  169      {
  170          /* -- RFC 2822, 3.6.7.
  171       */
  172  
  173:         $path = $this->createHeader('Return-Path', 'bounces@domain');
  174          $message = $this->createMessage(
  175:             $this->createHeaderSet(array('Return-Path' => $path)),
  176              $this->createEncoder(), $this->createCache()
  177              );
  ...
  179      }
  180  
  181:     public function testReturnPathIsSetInHeader()
  182      {
  183:         $path = $this->createHeader('Return-Path', '', array(), false);
  184          $path->shouldReceive('setFieldBodyModel')
  185               ->once()
  ...
  187  
  188          $message = $this->createMessage(
  189:             $this->createHeaderSet(array('Return-Path' => $path)),
  190              $this->createEncoder(), $this->createCache()
  191              );
  ...
  193      }
  194  
  195:     public function testReturnPathHeaderIsAddedIfNoneSet()
  196      {
  197:         $headers = $this->createHeaderSet(array(), false);
  198:         $headers->shouldReceive('addPathHeader')
  199                  ->once()
  200                  ->with('Return-Path', 'bounces@domain');
  201  
  202:         $message = $this->createMessage($headers, $this->createEncoder(),
  203              $this->createCache()
  204              );
  ...
  206      }
  207  
  208:     public function testSenderIsReturnedFromHeader()
  209      {
  210          /* -- RFC 2822, 3.6.2.
  211       */
  212  
  213:         $sender = $this->createHeader('Sender', array('sender@domain' => 'Name'));
  214          $message = $this->createMessage(
  215:             $this->createHeaderSet(array('Sender' => $sender)),
  216              $this->createEncoder(), $this->createCache()
  217              );
  ...
  219      }
  220  
  221:     public function testSenderIsSetInHeader()
  222      {
  223:         $sender = $this->createHeader('Sender', array('sender@domain' => 'Name'),
  224              array(), false
  225              );
  ...
  229  
  230          $message = $this->createMessage(
  231:             $this->createHeaderSet(array('Sender' => $sender)),
  232              $this->createEncoder(), $this->createCache()
  233              );
  ...
  235      }
  236  
  237:     public function testSenderHeaderIsAddedIfNoneSet()
  238      {
  239:         $headers = $this->createHeaderSet(array(), false);
  240:         $headers->shouldReceive('addMailboxHeader')
  241                  ->once()
  242                  ->with('Sender', (array) 'sender@domain');
  243:         $headers->shouldReceive('addMailboxHeader')
  244                  ->zeroOrMoreTimes();
  245  
  246:         $message = $this->createMessage($headers, $this->createEncoder(),
  247              $this->createCache()
  248              );
  ...
  250      }
  251  
  252:     public function testNameCanBeUsedInSenderHeader()
  253      {
  254:         $headers = $this->createHeaderSet(array(), false);
  255:         $headers->shouldReceive('addMailboxHeader')
  256                  ->once()
  257                  ->with('Sender', array('sender@domain' => 'Name'));
  258:         $headers->shouldReceive('addMailboxHeader')
  259                  ->zeroOrMoreTimes();
  260  
  261:         $message = $this->createMessage($headers, $this->createEncoder(),
  262              $this->createCache()
  263              );
  ...
  265      }
  266  
  267:     public function testFromIsReturnedFromHeader()
  268      {
  269          /* -- RFC 2822, 3.6.2.
  270       */
  271  
  272:         $from = $this->createHeader('From', array('from@domain' => 'Name'));
  273          $message = $this->createMessage(
  274:             $this->createHeaderSet(array('From' => $from)),
  275              $this->createEncoder(), $this->createCache()
  276              );
  ...
  278      }
  279  
  280:     public function testFromIsSetInHeader()
  281      {
  282:         $from = $this->createHeader('From', array('from@domain' => 'Name'),
  283              array(), false
  284              );
  ...
  288  
  289          $message = $this->createMessage(
  290:             $this->createHeaderSet(array('From' => $from)),
  291              $this->createEncoder(), $this->createCache()
  292              );
  ...
  294      }
  295  
  296:     public function testFromIsAddedToHeadersDuringAddFrom()
  297      {
  298:         $from = $this->createHeader('From', array('from@domain' => 'Name'),
  299              array(), false
  300              );
  ...
  304  
  305          $message = $this->createMessage(
  306:             $this->createHeaderSet(array('From' => $from)),
  307              $this->createEncoder(), $this->createCache()
  308              );
  ...
  310      }
  311  
  312:     public function testFromHeaderIsAddedIfNoneSet()
  313      {
  314:         $headers = $this->createHeaderSet(array(), false);
  315:         $headers->shouldReceive('addMailboxHeader')
  316                  ->once()
  317                  ->with('From', (array) 'from@domain');
  318:         $headers->shouldReceive('addMailboxHeader')
  319                  ->zeroOrMoreTimes();
  320  
  321:         $message = $this->createMessage($headers, $this->createEncoder(),
  322              $this->createCache()
  323              );
  ...
  327      public function testPersonalNameCanBeUsedInFromAddress()
  328      {
  329:         $headers = $this->createHeaderSet(array(), false);
  330:         $headers->shouldReceive('addMailboxHeader')
  331                  ->once()
  332                  ->with('From', array('from@domain' => 'Name'));
  333:         $headers->shouldReceive('addMailboxHeader')
  334                  ->zeroOrMoreTimes();
  335  
  336:         $message = $this->createMessage($headers, $this->createEncoder(),
  337              $this->createCache()
  338              );
  ...
  340      }
  341  
  342:     public function testReplyToIsReturnedFromHeader()
  343      {
  344          /* -- RFC 2822, 3.6.2.
  345       */
  346  
  347:         $reply = $this->createHeader('Reply-To', array('reply@domain' => 'Name'));
  348          $message = $this->createMessage(
  349:             $this->createHeaderSet(array('Reply-To' => $reply)),
  350              $this->createEncoder(), $this->createCache()
  351              );
  ...
  353      }
  354  
  355:     public function testReplyToIsSetInHeader()
  356      {
  357:         $reply = $this->createHeader('Reply-To', array('reply@domain' => 'Name'),
  358              array(), false
  359              );
  ...
  363  
  364          $message = $this->createMessage(
  365:             $this->createHeaderSet(array('Reply-To' => $reply)),
  366              $this->createEncoder(), $this->createCache()
  367              );
  ...
  369      }
  370  
  371:     public function testReplyToIsAddedToHeadersDuringAddReplyTo()
  372      {
  373:         $replyTo = $this->createHeader('Reply-To', array('from@domain' => 'Name'),
  374              array(), false
  375              );
  ...
  379  
  380          $message = $this->createMessage(
  381:             $this->createHeaderSet(array('Reply-To' => $replyTo)),
  382              $this->createEncoder(), $this->createCache()
  383              );
  ...
  385      }
  386  
  387:     public function testReplyToHeaderIsAddedIfNoneSet()
  388      {
  389:         $headers = $this->createHeaderSet(array(), false);
  390:         $headers->shouldReceive('addMailboxHeader')
  391                  ->once()
  392                  ->with('Reply-To', (array) 'reply@domain');
  393:         $headers->shouldReceive('addMailboxHeader')
  394                  ->zeroOrMoreTimes();
  395  
  396:         $message = $this->createMessage($headers, $this->createEncoder(),
  397              $this->createCache()
  398              );
  ...
  402      public function testNameCanBeUsedInReplyTo()
  403      {
  404:         $headers = $this->createHeaderSet(array(), false);
  405:         $headers->shouldReceive('addMailboxHeader')
  406                  ->once()
  407                  ->with('Reply-To', array('reply@domain' => 'Name'));
  408:         $headers->shouldReceive('addMailboxHeader')
  409                  ->zeroOrMoreTimes();
  410  
  411:         $message = $this->createMessage($headers, $this->createEncoder(),
  412              $this->createCache()
  413              );
  ...
  415      }
  416  
  417:     public function testToIsReturnedFromHeader()
  418      {
  419          /* -- RFC 2822, 3.6.3.
  420       */
  421  
  422:         $to = $this->createHeader('To', array('to@domain' => 'Name'));
  423          $message = $this->createMessage(
  424:             $this->createHeaderSet(array('To' => $to)),
  425              $this->createEncoder(), $this->createCache()
  426              );
  ...
  428      }
  429  
  430:     public function testToIsSetInHeader()
  431      {
  432:         $to = $this->createHeader('To', array('to@domain' => 'Name'),
  433              array(), false
  434              );
  ...
  438  
  439          $message = $this->createMessage(
  440:             $this->createHeaderSet(array('To' => $to)),
  441              $this->createEncoder(), $this->createCache()
  442              );
  ...
  444      }
  445  
  446:     public function testToIsAddedToHeadersDuringAddTo()
  447      {
  448:         $to = $this->createHeader('To', array('from@domain' => 'Name'),
  449              array(), false
  450              );
  ...
  454  
  455          $message = $this->createMessage(
  456:             $this->createHeaderSet(array('To' => $to)),
  457              $this->createEncoder(), $this->createCache()
  458              );
  ...
  460      }
  461  
  462:     public function testToHeaderIsAddedIfNoneSet()
  463      {
  464:         $headers = $this->createHeaderSet(array(), false);
  465:         $headers->shouldReceive('addMailboxHeader')
  466                  ->once()
  467                  ->with('To', (array) 'to@domain');
  468:         $headers->shouldReceive('addMailboxHeader')
  469                  ->zeroOrMoreTimes();
  470  
  471:         $message = $this->createMessage($headers, $this->createEncoder(),
  472              $this->createCache()
  473              );
  ...
  475      }
  476  
  477:     public function testNameCanBeUsedInToHeader()
  478      {
  479:         $headers = $this->createHeaderSet(array(), false);
  480:         $headers->shouldReceive('addMailboxHeader')
  481                  ->once()
  482                  ->with('To', array('to@domain' => 'Name'));
  483:         $headers->shouldReceive('addMailboxHeader')
  484                  ->zeroOrMoreTimes();
  485  
  486:         $message = $this->createMessage($headers, $this->createEncoder(),
  487              $this->createCache()
  488              );
  ...
  490      }
  491  
  492:     public function testCcIsReturnedFromHeader()
  493      {
  494          /* -- RFC 2822, 3.6.3.
  495       */
  496  
  497:         $cc = $this->createHeader('Cc', array('cc@domain' => 'Name'));
  498          $message = $this->createMessage(
  499:             $this->createHeaderSet(array('Cc' => $cc)),
  500              $this->createEncoder(), $this->createCache()
  501              );
  ...
  503      }
  504  
  505:     public function testCcIsSetInHeader()
  506      {
  507:         $cc = $this->createHeader('Cc', array('cc@domain' => 'Name'),
  508              array(), false
  509              );
  ...
  513  
  514          $message = $this->createMessage(
  515:             $this->createHeaderSet(array('Cc' => $cc)),
  516              $this->createEncoder(), $this->createCache()
  517              );
  ...
  519      }
  520  
  521:     public function testCcIsAddedToHeadersDuringAddCc()
  522      {
  523:         $cc = $this->createHeader('Cc', array('from@domain' => 'Name'),
  524              array(), false
  525              );
  ...
  529  
  530          $message = $this->createMessage(
  531:             $this->createHeaderSet(array('Cc' => $cc)),
  532              $this->createEncoder(), $this->createCache()
  533              );
  ...
  535      }
  536  
  537:     public function testCcHeaderIsAddedIfNoneSet()
  538      {
  539:         $headers = $this->createHeaderSet(array(), false);
  540:         $headers->shouldReceive('addMailboxHeader')
  541                  ->once()
  542                  ->with('Cc', (array) 'cc@domain');
  543:         $headers->shouldReceive('addMailboxHeader')
  544                  ->zeroOrMoreTimes();
  545  
  546:         $message = $this->createMessage($headers, $this->createEncoder(),
  547              $this->createCache()
  548              );
  ...
  550      }
  551  
  552:     public function testNameCanBeUsedInCcHeader()
  553      {
  554:         $headers = $this->createHeaderSet(array(), false);
  555:         $headers->shouldReceive('addMailboxHeader')
  556                  ->once()
  557                  ->with('Cc', array('cc@domain' => 'Name'));
  558:         $headers->shouldReceive('addMailboxHeader')
  559                  ->zeroOrMoreTimes();
  560  
  561:         $message = $this->createMessage($headers, $this->createEncoder(),
  562              $this->createCache()
  563              );
  ...
  565      }
  566  
  567:     public function testBccIsReturnedFromHeader()
  568      {
  569          /* -- RFC 2822, 3.6.3.
  570       */
  571  
  572:         $bcc = $this->createHeader('Bcc', array('bcc@domain' => 'Name'));
  573          $message = $this->createMessage(
  574:             $this->createHeaderSet(array('Bcc' => $bcc)),
  575              $this->createEncoder(), $this->createCache()
  576              );
  ...
  578      }
  579  
  580:     public function testBccIsSetInHeader()
  581      {
  582:         $bcc = $this->createHeader('Bcc', array('bcc@domain' => 'Name'),
  583              array(), false
  584              );
  ...
  588  
  589          $message = $this->createMessage(
  590:             $this->createHeaderSet(array('Bcc' => $bcc)),
  591              $this->createEncoder(), $this->createCache()
  592              );
  ...
  594      }
  595  
  596:     public function testBccIsAddedToHeadersDuringAddBcc()
  597      {
  598:         $bcc = $this->createHeader('Bcc', array('from@domain' => 'Name'),
  599              array(), false
  600              );
  ...
  604  
  605          $message = $this->createMessage(
  606:             $this->createHeaderSet(array('Bcc' => $bcc)),
  607              $this->createEncoder(), $this->createCache()
  608              );
  ...
  610      }
  611  
  612:     public function testBccHeaderIsAddedIfNoneSet()
  613      {
  614:         $headers = $this->createHeaderSet(array(), false);
  615:         $headers->shouldReceive('addMailboxHeader')
  616                  ->once()
  617                  ->with('Bcc', (array) 'bcc@domain');
  618:         $headers->shouldReceive('addMailboxHeader')
  619                  ->zeroOrMoreTimes();
  620  
  621:         $message = $this->createMessage($headers, $this->createEncoder(),
  622              $this->createCache()
  623              );
  ...
  627      public function testNameCanBeUsedInBcc()
  628      {
  629:         $headers = $this->createHeaderSet(array(), false);
  630:         $headers->shouldReceive('addMailboxHeader')
  631                  ->once()
  632                  ->with('Bcc', array('bcc@domain' => 'Name'));
  633:         $headers->shouldReceive('addMailboxHeader')
  634                  ->zeroOrMoreTimes();
  635  
  636:         $message = $this->createMessage($headers, $this->createEncoder(),
  637              $this->createCache()
  638              );
  ...
  640      }
  641  
  642:     public function testPriorityIsReadFromHeader()
  643      {
  644:         $prio = $this->createHeader('X-Priority', '2 (High)');
  645          $message = $this->createMessage(
  646:             $this->createHeaderSet(array('X-Priority' => $prio)),
  647              $this->createEncoder(), $this->createCache()
  648              );
  ...
  650      }
  651  
  652:     public function testPriorityIsSetInHeader()
  653      {
  654:         $prio = $this->createHeader('X-Priority', '2 (High)', array(), false);
  655          $prio->shouldReceive('setFieldBodyModel')
  656               ->once()
  ...
  658  
  659          $message = $this->createMessage(
  660:             $this->createHeaderSet(array('X-Priority' => $prio)),
  661              $this->createEncoder(), $this->createCache()
  662              );
  ...
  664      }
  665  
  666:     public function testPriorityHeaderIsAddedIfNoneSet()
  667      {
  668:         $headers = $this->createHeaderSet(array(), false);
  669:         $headers->shouldReceive('addTextHeader')
  670                  ->once()
  671                  ->with('X-Priority', '4 (Low)');
  672:         $headers->shouldReceive('addTextHeader')
  673                  ->zeroOrMoreTimes();
  674  
  675:         $message = $this->createMessage($headers, $this->createEncoder(),
  676              $this->createCache()
  677              );
  ...
  679      }
  680  
  681:     public function testReadReceiptAddressReadFromHeader()
  682      {
  683:         $rcpt = $this->createHeader('Disposition-Notification-To',
  684              array('chris@swiftmailer.org' => 'Chris')
  685              );
  686          $message = $this->createMessage(
  687:             $this->createHeaderSet(array('Disposition-Notification-To' => $rcpt)),
  688              $this->createEncoder(), $this->createCache()
  689              );
  ...
  693      }
  694  
  695:     public function testReadReceiptIsSetInHeader()
  696      {
  697:         $rcpt = $this->createHeader('Disposition-Notification-To', array(), array(), false);
  698          $rcpt->shouldReceive('setFieldBodyModel')
  699               ->once()
  ...
  701  
  702          $message = $this->createMessage(
  703:             $this->createHeaderSet(array('Disposition-Notification-To' => $rcpt)),
  704              $this->createEncoder(), $this->createCache()
  705              );
  ...
  707      }
  708  
  709:     public function testReadReceiptHeaderIsAddedIfNoneSet()
  710      {
  711:         $headers = $this->createHeaderSet(array(), false);
  712:         $headers->shouldReceive('addMailboxHeader')
  713                  ->once()
  714                  ->with('Disposition-Notification-To', 'mark@swiftmailer.org');
  715:         $headers->shouldReceive('addMailboxHeader')
  716                  ->zeroOrMoreTimes();
  717  
  718:         $message = $this->createMessage($headers, $this->createEncoder(),
  719              $this->createCache()
  720              );
  ...
  727          $child2 = $this->createChild();
  728  
  729:         $message = $this->createMessage($this->createHeaderSet(),
  730              $this->createEncoder(), $this->createCache()
  731              );
  ...
  742          $child2 = $this->createChild();
  743  
  744:         $message = $this->createMessage($this->createHeaderSet(),
  745              $this->createEncoder(), $this->createCache()
  746              );
  ...
  758          $child = $this->createChild();
  759  
  760:         $message = $this->createMessage($this->createHeaderSet(),
  761              $this->createEncoder(), $this->createCache()
  762              );
  ...
  776                ->andReturn('foo@bar');
  777  
  778:         $message = $this->createMessage($this->createHeaderSet(),
  779              $this->createEncoder(), $this->createCache()
  780              );
  ...
  786      {
  787          $child = $this->createChild();
  788:         $message = $this->createMessage($this->createHeaderSet(),
  789              $this->createEncoder(), $this->createCache()
  790              );
  ...
  819  
  820      //abstract
  821:     protected function createEntity($headers, $encoder, $cache)
  822      {
  823:         return $this->createMessage($headers, $encoder, $cache);
  824      }
  825  
  826:     protected function createMimePart($headers, $encoder, $cache)
  827      {
  828:         return $this->createMessage($headers, $encoder, $cache);
  829      }
  830  
  831:     private function createMessage($headers, $encoder, $cache)
  832      {
  833          $idGenerator = new Swift_Mime_IdGenerator('example.com');
  834  
  835:         return new Swift_Mime_SimpleMessage($headers, $encoder, $cache, $idGenerator);
  836      }
  837  }

/home/genis/Proyectos/ProyectoXat/vendor/swiftmailer/swiftmailer/tests/unit/Swift/Mime/SimpleMimeEntityTest.php:
    4  class Swift_Mime_SimpleMimeEntityTest extends Swift_Mime_AbstractMimeEntityTest
    5  {
    6:     protected function createEntity($headerFactory, $encoder, $cache)
    7      {
    8          $idGenerator = new Swift_Mime_IdGenerator('example.com');
    9  
   10:         return new Swift_Mime_SimpleMimeEntity($headerFactory, $encoder, $cache, $idGenerator);
   11      }
   12  }

/home/genis/Proyectos/ProyectoXat/vendor/swiftmailer/swiftmailer/tests/unit/Swift/Plugins/DecoratorPluginTest.php:
    6      {
    7          $message = $this->createMessage(
    8:             $this->createHeaders(),
    9              array('zip@button.tld' => 'Zipathon'),
   10              array('chris.corbyn@swiftmailer.org' => 'Chris'),
   ..
   31      {
   32          $message = $this->createMessage(
   33:             $this->createHeaders(),
   34              array('zip@button.tld' => 'Zipathon', 'foo@bar.tld' => 'Foo'),
   35              array('chris.corbyn@swiftmailer.org' => 'Chris'),
   ..
   64      }
   65  
   66:     public function testReplacementsCanBeMadeInHeaders()
   67      {
   68:         $headers = $this->createHeaders(array(
   69:             $returnPathHeader = $this->createHeader('Return-Path', 'foo-{id}@swiftmailer.org'),
   70:             $toHeader = $this->createHeader('Subject', 'A message for {name}!'),
   71          ));
   72  
   73          $message = $this->createMessage(
   74:             $headers,
   75              array('zip@button.tld' => 'Zipathon'),
   76              array('chris.corbyn@swiftmailer.org' => 'Chris'),
   ..
   82                  ->once()
   83                  ->with('Hello Zip, you are customer #456');
   84:         $toHeader->shouldReceive('setFieldBodyModel')
   85                   ->once()
   86                   ->with('A message for Zip!');
   87:         $returnPathHeader->shouldReceive('setFieldBodyModel')
   88                           ->once()
   89                           ->with('foo-456@swiftmailer.org');
   90          $message->shouldReceive('setBody')
   91                  ->zeroOrMoreTimes();
   92:         $toHeader->shouldReceive('setFieldBodyModel')
   93                   ->zeroOrMoreTimes();
   94:         $returnPathHeader->shouldReceive('setFieldBodyModel')
   95                           ->zeroOrMoreTimes();
   96  
   ..
  109          $part2 = $this->createPart('text/html', 'Your <em>name</em> is {name}?', '2@x');
  110          $message = $this->createMessage(
  111:             $this->createHeaders(),
  112              array('zip@button.tld' => 'Zipathon'),
  113              array('chris.corbyn@swiftmailer.org' => 'Chris'),
  ...
  142      {
  143          $message = $this->createMessage(
  144:             $this->createHeaders(),
  145              array('foo@bar' => 'Foobar', 'zip@zap' => 'Zip zap'),
  146              array('chris.corbyn@swiftmailer.org' => 'Chris'),
  ...
  195      }
  196  
  197:     private function createMessage($headers, $to = array(), $from = null, $subject = null,
  198          $body = null)
  199      {
  ...
  204                      ->andReturn(array($addr => $name));
  205          }
  206:         $message->shouldReceive('getHeaders')
  207                  ->zeroOrMoreTimes()
  208:                 ->andReturn($headers);
  209          $message->shouldReceive('getFrom')
  210                  ->zeroOrMoreTimes()
  ...
  256      }
  257  
  258:     private function createHeaders($headers = array())
  259      {
  260:         $set = $this->getMockery('Swift_Mime_SimpleHeaderSet')->shouldIgnoreMissing();
  261          $set->shouldReceive('getAll')
  262              ->zeroOrMoreTimes()
  263:             ->andReturn($headers);
  264  
  265:         foreach ($headers as $header) {
  266:             $set->set($header);
  267          }
  268  
  ...
  270      }
  271  
  272:     private function createHeader($name, $body = '')
  273      {
  274:         $header = $this->getMockery('Swift_Mime_Header')->shouldIgnoreMissing();
  275:         $header->shouldReceive('getFieldName')
  276                 ->zeroOrMoreTimes()
  277                 ->andReturn($name);
  278:         $header->shouldReceive('getFieldBodyModel')
  279                 ->zeroOrMoreTimes()
  280                 ->andReturn($body);
  281  
  282:         return $header;
  283      }
  284  }

/home/genis/Proyectos/ProyectoXat/vendor/swiftmailer/swiftmailer/tests/unit/Swift/Plugins/LoggerPluginTest.php:
   49      public function testResponseIsSentToLogger()
   50      {
   51:         $evt = $this->createResponseEvent("354 Go ahead\r\n");
   52          $logger = $this->createLogger();
   53          $logger->expects($this->once())
   54                 ->method('add')
   55:                ->with(static::regExp('~354 Go ahead\r\n~'));
   56  
   57          $plugin = $this->createPlugin($logger);

/home/genis/Proyectos/ProyectoXat/vendor/swiftmailer/swiftmailer/tests/unit/Swift/Signers/DKIMSignerTest.php:
    5  class Swift_Signers_DKIMSignerTest extends \SwiftMailerTestCase
    6  {
    7:     public function testBasicSigningHeaderManipulation()
    8      {
    9:         $headers = $this->createHeaders();
   10          $messageContent = 'Hello World';
   11          $signer = new Swift_Signers_DKIMSigner(file_get_contents(dirname(dirname(dirname(__DIR__))).'/_samples/dkim/dkim.test.priv'), 'dummy.nxdomain.be', 'dummySelector');
   12:         /* @var $signer Swift_Signers_HeaderSigner */
   13:         $altered = $signer->getAlteredHeaders();
   14          $signer->reset();
   15:         // Headers
   16:         $signer->setHeaders($headers);
   17          // Body
   18          $signer->startBody();
   ..
   20          $signer->endBody();
   21          // Signing
   22:         $signer->addSignature($headers);
   23      }
   24  
   ..
   26      public function testSigningSHA1()
   27      {
   28:         $headerSet = $this->createHeaderSet();
   29          $messageContent = 'Hello World';
   30          $signer = new Swift_Signers_DKIMSigner(file_get_contents(dirname(dirname(dirname(__DIR__))).'/_samples/dkim/dkim.test.priv'), 'dummy.nxdomain.be', 'dummySelector');
   31          $signer->setHashAlgorithm('rsa-sha1');
   32          $signer->setSignatureTimestamp('1299879181');
   33:         $altered = $signer->getAlteredHeaders();
   34          $this->assertEquals(array('DKIM-Signature'), $altered);
   35          $signer->reset();
   36:         $signer->setHeaders($headerSet);
   37:         $this->assertFalse($headerSet->has('DKIM-Signature'));
   38          $signer->startBody();
   39          $signer->write($messageContent);
   40          $signer->endBody();
   41:         $signer->addSignature($headerSet);
   42:         $this->assertTrue($headerSet->has('DKIM-Signature'));
   43:         $dkim = $headerSet->getAll('DKIM-Signature');
   44          $sig = reset($dkim);
   45          $this->assertEquals($sig->getValue(), 'v=1; a=rsa-sha1; bh=wlbYcY9O9OPInGJ4D0E/rGsvMLE=; d=dummy.nxdomain.be; h=; i=@dummy.nxdomain.be; s=dummySelector; t=1299879181; b=RMSNelzM2O5MAAnMjT3G3/VF36S3DGJXoPCXR001F1WDReu0prGphWjuzK/m6V1pwqQL8cCNg Hi74mTx2bvyAvmkjvQtJf1VMUOCc9WHGcm1Yec66I3ZWoNMGSWZ1EKAm2CtTzyG0IFw4ml9DI wSkyAFxlgicckDD6FibhqwX4w=');
   ..
   49      public function testSigning256()
   50      {
   51:         $headerSet = $this->createHeaderSet();
   52          $messageContent = 'Hello World';
   53          $signer = new Swift_Signers_DKIMSigner(file_get_contents(dirname(dirname(dirname(__DIR__))).'/_samples/dkim/dkim.test.priv'), 'dummy.nxdomain.be', 'dummySelector');
   54          $signer->setHashAlgorithm('rsa-sha256');
   55          $signer->setSignatureTimestamp('1299879181');
   56:         $altered = $signer->getAlteredHeaders();
   57          $this->assertEquals(array('DKIM-Signature'), $altered);
   58          $signer->reset();
   59:         $signer->setHeaders($headerSet);
   60:         $this->assertFalse($headerSet->has('DKIM-Signature'));
   61          $signer->startBody();
   62          $signer->write($messageContent);
   63          $signer->endBody();
   64:         $signer->addSignature($headerSet);
   65:         $this->assertTrue($headerSet->has('DKIM-Signature'));
   66:         $dkim = $headerSet->getAll('DKIM-Signature');
   67          $sig = reset($dkim);
   68          $this->assertEquals($sig->getValue(), 'v=1; a=rsa-sha256; bh=f+W+hu8dIhf2VAni89o8lF6WKTXi7nViA4RrMdpD5/U=; d=dummy.nxdomain.be; h=; i=@dummy.nxdomain.be; s=dummySelector; t=1299879181; b=jqPmieHzF5vR9F4mXCAkowuphpO4iJ8IAVuioh1BFZ3VITXZj5jlOFxULJMBiiApm2keJirnh u4mzogj444QkpT3lJg8/TBGAYQPdcvkG3KC0jdyN6QpSgpITBJG2BwWa+keXsv2bkQgLRAzNx qRhP45vpHCKun0Tg9LrwW/KCg=');
   ..
   72      public function testSigningRelaxedRelaxed256()
   73      {
   74:         $headerSet = $this->createHeaderSet();
   75          $messageContent = 'Hello World';
   76          $signer = new Swift_Signers_DKIMSigner(file_get_contents(dirname(dirname(dirname(__DIR__))).'/_samples/dkim/dkim.test.priv'), 'dummy.nxdomain.be', 'dummySelector');
   ..
   78          $signer->setSignatureTimestamp('1299879181');
   79          $signer->setBodyCanon('relaxed');
   80:         $signer->setHeaderCanon('relaxed');
   81:         $altered = $signer->getAlteredHeaders();
   82          $this->assertEquals(array('DKIM-Signature'), $altered);
   83          $signer->reset();
   84:         $signer->setHeaders($headerSet);
   85:         $this->assertFalse($headerSet->has('DKIM-Signature'));
   86          $signer->startBody();
   87          $signer->write($messageContent);
   88          $signer->endBody();
   89:         $signer->addSignature($headerSet);
   90:         $this->assertTrue($headerSet->has('DKIM-Signature'));
   91:         $dkim = $headerSet->getAll('DKIM-Signature');
   92          $sig = reset($dkim);
   93          $this->assertEquals($sig->getValue(), 'v=1; a=rsa-sha256; bh=f+W+hu8dIhf2VAni89o8lF6WKTXi7nViA4RrMdpD5/U=; d=dummy.nxdomain.be; h=; i=@dummy.nxdomain.be; s=dummySelector; c=relaxed/relaxed; t=1299879181; b=gzOI+PX6HpZKQFzwwmxzcVJsyirdLXOS+4pgfCpVHQIdqYusKLrhlLeFBTNoz75HrhNvGH6T0 Rt3w5aTqkrWfUuAEYt0Ns14GowLM7JojaFN+pZ4eYnRB3CBBgW6fee4NEMD5WPca3uS09tr1E 10RYh9ILlRtl+84sovhx5id3Y=');
   ..
   97      public function testSigningRelaxedSimple256()
   98      {
   99:         $headerSet = $this->createHeaderSet();
  100          $messageContent = 'Hello World';
  101          $signer = new Swift_Signers_DKIMSigner(file_get_contents(dirname(dirname(dirname(__DIR__))).'/_samples/dkim/dkim.test.priv'), 'dummy.nxdomain.be', 'dummySelector');
  102          $signer->setHashAlgorithm('rsa-sha256');
  103          $signer->setSignatureTimestamp('1299879181');
  104:         $signer->setHeaderCanon('relaxed');
  105:         $altered = $signer->getAlteredHeaders();
  106          $this->assertEquals(array('DKIM-Signature'), $altered);
  107          $signer->reset();
  108:         $signer->setHeaders($headerSet);
  109:         $this->assertFalse($headerSet->has('DKIM-Signature'));
  110          $signer->startBody();
  111          $signer->write($messageContent);
  112          $signer->endBody();
  113:         $signer->addSignature($headerSet);
  114:         $this->assertTrue($headerSet->has('DKIM-Signature'));
  115:         $dkim = $headerSet->getAll('DKIM-Signature');
  116          $sig = reset($dkim);
  117          $this->assertEquals($sig->getValue(), 'v=1; a=rsa-sha256; bh=f+W+hu8dIhf2VAni89o8lF6WKTXi7nViA4RrMdpD5/U=; d=dummy.nxdomain.be; h=; i=@dummy.nxdomain.be; s=dummySelector; c=relaxed; t=1299879181; b=dLPJNec5v81oelyzGOY0qPqTlGnQeNfUNBOrV/JKbStr3NqWGI9jH4JAe2YvO2V32lfPNoby1 4MMzZ6EPkaZkZDDSPa+53YbCPQAlqiD9QZZIUe2UNM33HN8yAMgiWEF5aP7MbQnxeVZMfVLEl 9S8qOImu+K5JZqhQQTL0dgLwA=');
  ...
  121      public function testSigningSimpleRelaxed256()
  122      {
  123:         $headerSet = $this->createHeaderSet();
  124          $messageContent = 'Hello World';
  125          $signer = new Swift_Signers_DKIMSigner(file_get_contents(dirname(dirname(dirname(__DIR__))).'/_samples/dkim/dkim.test.priv'), 'dummy.nxdomain.be', 'dummySelector');
  ...
  127          $signer->setSignatureTimestamp('1299879181');
  128          $signer->setBodyCanon('relaxed');
  129:         $altered = $signer->getAlteredHeaders();
  130          $this->assertEquals(array('DKIM-Signature'), $altered);
  131          $signer->reset();
  132:         $signer->setHeaders($headerSet);
  133:         $this->assertFalse($headerSet->has('DKIM-Signature'));
  134          $signer->startBody();
  135          $signer->write($messageContent);
  136          $signer->endBody();
  137:         $signer->addSignature($headerSet);
  138:         $this->assertTrue($headerSet->has('DKIM-Signature'));
  139:         $dkim = $headerSet->getAll('DKIM-Signature');
  140          $sig = reset($dkim);
  141          $this->assertEquals($sig->getValue(), 'v=1; a=rsa-sha256; bh=f+W+hu8dIhf2VAni89o8lF6WKTXi7nViA4RrMdpD5/U=; d=dummy.nxdomain.be; h=; i=@dummy.nxdomain.be; s=dummySelector; c=simple/relaxed; t=1299879181; b=M5eomH/zamyzix9kOes+6YLzQZxuJdBP4x3nP9zF2N26eMLG2/cBKbnNyqiOTDhJdYfWPbLIa 1CWnjST0j5p4CpeOkGYuiE+M4TWEZwhRmRWootlPO3Ii6XpbBJKFk1o9zviS7OmXblUUE4aqb yRSIMDhtLdCK5GlaCneFLN7RQ=');
  142      }
  143  
  144:     private function createHeaderSet()
  145      {
  146          $cache = new Swift_KeyCache_ArrayKeyCache(new Swift_KeyCache_SimpleKeyCacheInputStream());
  ...
  148          $contentEncoder = new Swift_Mime_ContentEncoder_Base64ContentEncoder();
  149  
  150:         $headerEncoder = new Swift_Mime_HeaderEncoder_QpHeaderEncoder(new Swift_CharacterStream_ArrayCharacterStream($factory, 'utf-8'));
  151          $paramEncoder = new Swift_Encoder_Rfc2231Encoder(new Swift_CharacterStream_ArrayCharacterStream($factory, 'utf-8'));
  152          $emailValidator = new EmailValidator();
  153:         $headers = new Swift_Mime_SimpleHeaderSet(new Swift_Mime_SimpleHeaderFactory($headerEncoder, $paramEncoder, $emailValidator));
  154  
  155:         return $headers;
  156      }
  157  
  158      /**
  159:      * @return Swift_Mime_Headers
  160       */
  161:     private function createHeaders()
  162      {
  163          $x = 0;
  ...
  166          $contentEncoder = new Swift_Mime_ContentEncoder_Base64ContentEncoder();
  167  
  168:         $headerEncoder = new Swift_Mime_HeaderEncoder_QpHeaderEncoder(new Swift_CharacterStream_ArrayCharacterStream($factory, 'utf-8'));
  169          $paramEncoder = new Swift_Encoder_Rfc2231Encoder(new Swift_CharacterStream_ArrayCharacterStream($factory, 'utf-8'));
  170          $emailValidator = new EmailValidator();
  171:         $headerFactory = new Swift_Mime_SimpleHeaderFactory($headerEncoder, $paramEncoder, $emailValidator);
  172:         $headers = $this->getMockery('Swift_Mime_SimpleHeaderSet');
  173  
  174:         $headers->shouldReceive('listAll')
  175                  ->zeroOrMoreTimes()
  176                  ->andReturn(array('From', 'To', 'Date', 'Subject'));
  177:         $headers->shouldReceive('has')
  178                  ->zeroOrMoreTimes()
  179                  ->with('From')
  180                  ->andReturn(true);
  181:         $headers->shouldReceive('getAll')
  182                  ->zeroOrMoreTimes()
  183                  ->with('From')
  184:                 ->andReturn(array($headerFactory->createMailboxHeader('From', 'test@test.test')));
  185:         $headers->shouldReceive('has')
  186                  ->zeroOrMoreTimes()
  187                  ->with('To')
  188                  ->andReturn(true);
  189:         $headers->shouldReceive('getAll')
  190                  ->zeroOrMoreTimes()
  191                  ->with('To')
  192:                 ->andReturn(array($headerFactory->createMailboxHeader('To', 'test@test.test')));
  193:         $headers->shouldReceive('has')
  194                  ->zeroOrMoreTimes()
  195                  ->with('Date')
  196                  ->andReturn(true);
  197:         $headers->shouldReceive('getAll')
  198                  ->zeroOrMoreTimes()
  199                  ->with('Date')
  200:                 ->andReturn(array($headerFactory->createTextHeader('Date', 'Fri, 11 Mar 2011 20:56:12 +0000 (GMT)')));
  201:         $headers->shouldReceive('has')
  202                  ->zeroOrMoreTimes()
  203                  ->with('Subject')
  204                  ->andReturn(true);
  205:         $headers->shouldReceive('getAll')
  206                  ->zeroOrMoreTimes()
  207                  ->with('Subject')
  208:                 ->andReturn(array($headerFactory->createTextHeader('Subject', 'Foo Bar Text Message')));
  209:         $headers->shouldReceive('addTextHeader')
  210                  ->zeroOrMoreTimes()
  211                  ->with('DKIM-Signature', \Mockery::any())
  212                  ->andReturn(true);
  213:         $headers->shouldReceive('getAll')
  214                  ->zeroOrMoreTimes()
  215                  ->with('DKIM-Signature')
  216:                 ->andReturn(array($headerFactory->createTextHeader('DKIM-Signature', 'Foo Bar Text Message')));
  217  
  218:         return $headers;
  219      }
  220  }

/home/genis/Proyectos/ProyectoXat/vendor/swiftmailer/swiftmailer/tests/unit/Swift/Signers/OpenDKIMSignerTest.php:
   15      }
   16  
   17:     public function testBasicSigningHeaderManipulation()
   18      {
   19      }

/home/genis/Proyectos/ProyectoXat/vendor/swiftmailer/swiftmailer/tests/unit/Swift/Signers/SMimeSignerTest.php:
   44  
   45          $entityString = $messageStream->getContent();
   46:         $headers = self::getHeadersOfMessage($entityString);
   47  
   48:         if (!($boundary = $this->getBoundary($headers['content-type']))) {
   49              return false;
   50          }
   ..
   87  
   88          $entityString = $messageStream->getContent();
   89:         $headers = self::getHeadersOfMessage($entityString);
   90  
   91:         if (!($boundary = $this->getBoundary($headers['content-type']))) {
   92              return false;
   93          }
   ..
  130  
  131          $entityString = $messageStream->getContent();
  132:         $headers = self::getHeadersOfMessage($entityString);
  133  
  134:         if (!preg_match('#^application/(x\-)?pkcs7-mime; smime-type=signed\-data;#', $headers['content-type'])) {
  135              $this->fail('Content-type does not match.');
  136  
  ...
  138          }
  139  
  140:         $this->assertEquals($headers['content-transfer-encoding'], 'base64');
  141:         $this->assertEquals($headers['content-disposition'], 'attachment; filename="smime.p7m"');
  142  
  143          $expectedBody = '(?:^[a-zA-Z0-9\/\\r\\n+]*={0,2})';
  ...
  167  
  168          $entityString = $messageStream->getContent();
  169:         $headers = self::getHeadersOfMessage($entityString);
  170  
  171:         if (!($boundary = $this->getBoundary($headers['content-type']))) {
  172              return false;
  173          }
  ...
  231  
  232          $entityString = $messageStream->getContent();
  233:         $headers = self::getHeadersOfMessage($entityString);
  234  
  235:         if (!preg_match('#^application/(x\-)?pkcs7-mime; smime-type=enveloped\-data;#', $headers['content-type'])) {
  236              $this->fail('Content-type does not match.');
  237  
  ...
  269  
  270          $entityString = $messageStream->getContent();
  271:         $headers = self::getHeadersOfMessage($entityString);
  272  
  273:         if (!preg_match('#^application/(x\-)?pkcs7-mime; smime-type=enveloped\-data;#', $headers['content-type'])) {
  274              $this->fail('Content-type does not match.');
  275  
  ...
  315  
  316          $entityString = $messageStream->getContent();
  317:         $headers = self::getHeadersOfMessage($entityString);
  318  
  319:         if (!preg_match('#^application/(x\-)?pkcs7-mime; smime-type=enveloped\-data;#', $headers['content-type'])) {
  320              $this->fail('Content-type does not match.');
  321  
  ...
  332  
  333          $entityString = $decryptedMessageStream->getContent();
  334:         $headers = self::getHeadersOfMessage($entityString);
  335  
  336:         if (!($boundary = $this->getBoundary($headers['content-type']))) {
  337              return false;
  338          }
  ...
  383  
  384          $entityString = $messageStream->getContent();
  385:         $headers = self::getHeadersOfMessage($entityString);
  386  
  387:         if (!($boundary = $this->getBoundary($headers['content-type']))) {
  388              return false;
  389          }
  ...
  489  
  490      /**
  491:      * Strips of the sender headers and Mime-Version.
  492       */
  493      protected function cleanMessage($content)
  ...
  495          $newContent = '';
  496  
  497:         $headers = self::getHeadersOfMessage($content);
  498:         foreach ($headers as $headerName => $value) {
  499:             if (!in_array($headerName, array('content-type', 'content-transfer-encoding', 'content-disposition'))) {
  500                  continue;
  501              }
  502  
  503:             $headerName = explode('-', $headerName);
  504:             $headerName = array_map('ucfirst', $headerName);
  505:             $headerName = implode('-', $headerName);
  506  
  507              if (strlen($value) > 62) {
  ...
  509              }
  510  
  511:             $newContent .= "$headerName: $value\r\n";
  512          }
  513  
  ...
  516  
  517      /**
  518:      * Returns the headers of the message.
  519       *
  520:      * Header-names are lowercase.
  521       *
  522       * @param string $message
  ...
  524       * @return array
  525       */
  526:     protected static function getHeadersOfMessage($message)
  527      {
  528:         $headersPosEnd = strpos($message, "\r\n\r\n");
  529:         $headerData = substr($message, 0, $headersPosEnd);
  530:         $headerLines = explode("\r\n", $headerData);
  531  
  532:         if (empty($headerLines)) {
  533              return array();
  534          }
  535  
  536:         $headers = array();
  537  
  538:         foreach ($headerLines as $headerLine) {
  539:             if (ctype_space($headerLines[0]) || false === strpos($headerLine, ':')) {
  540:                 $headers[$currentHeaderName] .= ' '.trim($headerLine);
  541                  continue;
  542              }
  543  
  544:             $header = explode(':', $headerLine, 2);
  545:             $currentHeaderName = strtolower($header[0]);
  546:             $headers[$currentHeaderName] = trim($header[1]);
  547          }
  548  
  549:         return $headers;
  550      }
  551  }

/home/genis/Proyectos/ProyectoXat/vendor/swiftmailer/swiftmailer/tests/unit/Swift/Transport/AbstractSmtpTest.php:
  708              ->once()
  709              ->with(1)
  710:             ->andReturn('354 Go ahead'."\r\n");
  711  
  712          $this->finishBuffer($buf);
  ...
  821      }
  822  
  823:     public function testBccRecipientsAreRemovedFromHeaders()
  824      {
  825          /* -- RFC 2821, 7.2.
  826  
  827:      Addresses that do not appear in the message headers may appear in the
  828       RCPT commands to an SMTP server for a number of reasons.  The two
  829       most common involve the use of a mailing address as a "list exploder"
  ...
  832       command is present, and in order to avoid defeating some of the
  833       purpose of these mechanisms, SMTP clients and servers SHOULD NOT copy
  834:      the full set of RCPT command arguments into the headers, either as
  835:      part of trace headers or as informational or private-extension
  836:      headers.  Since this rule is often violated in practice, and cannot
  837       be enforced, sending SMTP systems that are aware of "bcc" use MAY
  838       find it helpful to send each blind copy as a separate message

/home/genis/Proyectos/ProyectoXat/vendor/symfony/console/Helper/Table.php:
   26  {
   27      /**
   28:      * Table headers.
   29       */
   30:     private $headers = array();
   31  
   32      /**
   ..
  208      }
  209  
  210:     public function setHeaders(array $headers)
  211      {
  212:         $headers = array_values($headers);
  213:         if (!empty($headers) && !is_array($headers[0])) {
  214:             $headers = array($headers);
  215          }
  216  
  217:         $this->headers = $headers;
  218  
  219          return $this;
  ...
  278          $this->calculateNumberOfColumns();
  279          $rows = $this->buildTableRows($this->rows);
  280:         $headers = $this->buildTableRows($this->headers);
  281  
  282:         $this->calculateColumnsWidth(array_merge($headers, $rows));
  283  
  284          $this->renderRowSeparator();
  285:         if (!empty($headers)) {
  286:             foreach ($headers as $header) {
  287:                 $this->renderRow($header, $this->style->getCellHeaderFormat());
  288                  $this->renderRowSeparator();
  289              }
  ...
  304  
  305      /**
  306:      * Renders horizontal header separator.
  307       *
  308       * Example: <code>+-----+-----------+-------+</code>
  ...
  401  
  402          $columns = array(0);
  403:         foreach (array_merge($this->headers, $this->rows) as $row) {
  404              if ($row instanceof TableSeparator) {
  405                  continue;
  ...
  677              ->setVerticalBorderChar(' ')
  678              ->setCrossingChar(' ')
  679:             ->setCellHeaderFormat('%s')
  680          ;
  681  

/home/genis/Proyectos/ProyectoXat/vendor/symfony/console/Helper/TableStyle.php:
   27      private $verticalBorderChar = '|';
   28      private $crossingChar = '+';
   29:     private $cellHeaderFormat = '<info>%s</info>';
   30      private $cellRowFormat = '%s';
   31      private $cellRowContentFormat = ' %s ';
   ..
  134  
  135      /**
  136:      * Sets header cell format.
  137       *
  138:      * @param string $cellHeaderFormat
  139       *
  140       * @return $this
  141       */
  142:     public function setCellHeaderFormat($cellHeaderFormat)
  143      {
  144:         $this->cellHeaderFormat = $cellHeaderFormat;
  145  
  146          return $this;
  ...
  148  
  149      /**
  150:      * Gets header cell format.
  151       *
  152       * @return string
  153       */
  154:     public function getCellHeaderFormat()
  155      {
  156:         return $this->cellHeaderFormat;
  157      }
  158  

/home/genis/Proyectos/ProyectoXat/vendor/symfony/console/Style/StyleInterface.php:
   83       * Formats a table.
   84       */
   85:     public function table(array $headers, array $rows);
   86  
   87      /**

/home/genis/Proyectos/ProyectoXat/vendor/symfony/console/Style/SymfonyStyle.php:
  177       * {@inheritdoc}
  178       */
  179:     public function table(array $headers, array $rows)
  180      {
  181          $style = clone Table::getStyleDefinition('symfony-style-guide');
  182:         $style->setCellHeaderFormat('<info>%s</info>');
  183  
  184          $table = new Table($this);
  185:         $table->setHeaders($headers);
  186          $table->setRows($rows);
  187          $table->setStyle($style);

/home/genis/Proyectos/ProyectoXat/vendor/symfony/console/Tests/Fixtures/Style/SymfonyStyle/command/command_8.php:
    6  use Symfony\Component\Console\Helper\TableCell;
    7  
    8: //Ensure formatting tables when using multiple headers with TableCell
    9  return function (InputInterface $input, OutputInterface $output) {
   10:     $headers = array(
   11          array(new TableCell('Main table title', array('colspan' => 3))),
   12          array('ISBN', 'Title', 'Author'),
   ..
   23  
   24      $output = new SymfonyStyle($input, $output);
   25:     $output->table($headers, $rows);
   26  };
   27  

/home/genis/Proyectos/ProyectoXat/vendor/symfony/console/Tests/Helper/TableTest.php:
    <binary>

/home/genis/Proyectos/ProyectoXat/vendor/symfony/css-selector/Tests/XPath/Fixtures/ids.html:
    1: <html id="html"><head>
    2    <link id="link-href" href="foo" />
    3    <link id="link-nohref" />
    4: </head><body>
    5  <div id="outer-div">
    6   <a id="name-anchor" name="foo"></a>

/home/genis/Proyectos/ProyectoXat/vendor/symfony/css-selector/Tests/XPath/Fixtures/shakespear.html:
    2  	"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
    3  <html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en" debug="true">
    4: <head>
    5  	<meta http-equiv="Content-Type" content="text/html; charset=utf-8"/>
    6: </head>
    7  <body>
    8  	<div id="test">

/home/genis/Proyectos/ProyectoXat/vendor/symfony/debug/Exception/FlattenException.php:
   30      private $class;
   31      private $statusCode;
   32:     private $headers;
   33      private $file;
   34      private $line;
   35  
   36:     public static function create(\Exception $exception, $statusCode = null, array $headers = array())
   37      {
   38          $e = new static();
   ..
   42          if ($exception instanceof HttpExceptionInterface) {
   43              $statusCode = $exception->getStatusCode();
   44:             $headers = array_merge($headers, $exception->getHeaders());
   45          } elseif ($exception instanceof RequestExceptionInterface) {
   46              $statusCode = 400;
   ..
   52  
   53          $e->setStatusCode($statusCode);
   54:         $e->setHeaders($headers);
   55          $e->setTraceFromException($exception);
   56          $e->setClass(get_class($exception));
   ..
   93      }
   94  
   95:     public function getHeaders()
   96      {
   97:         return $this->headers;
   98      }
   99  
  100:     public function setHeaders(array $headers)
  101      {
  102:         $this->headers = $headers;
  103      }
  104  

/home/genis/Proyectos/ProyectoXat/vendor/symfony/debug/ExceptionHandler.php:
  156       * Sends the error associated with the given Exception as a plain PHP response.
  157       *
  158:      * This method uses plain PHP functions like header() and echo to output
  159       * the response.
  160       *
  ...
  167          }
  168  
  169:         if (!headers_sent()) {
  170:             header(sprintf('HTTP/1.0 %s', $exception->getStatusCode()));
  171:             foreach ($exception->getHeaders() as $name => $value) {
  172:                 header($name.': '.$value, false);
  173              }
  174:             header('Content-Type: text/html; charset='.$this->charset);
  175          }
  176  
  ...
  221                          <div class="trace trace-as-html">
  222                              <table class="trace-details">
  223:                                 <thead class="trace-head"><tr><th>
  224                                      <h3 class="trace-class">
  225                                          <span class="text-muted">(%d/%d)</span>
  ...
  227                                      </h3>
  228                                      <p class="break-long-words trace-message">%s</p>
  229:                                 </th></tr></thead>
  230                                  <tbody>
  231  EOF
  ...
  313  
  314              .trace + .trace { margin-top: 30px; }
  315:             .trace-head .trace-class { color: #222; font-size: 18px; font-weight: bold; line-height: 1.3; margin: 0; position: relative; }
  316  
  317              .trace-message { font-size: 14px; font-weight: normal; margin: .5em 0 0; }
  ...
  334  <!DOCTYPE html>
  335  <html>
  336:     <head>
  337          <meta charset="{$this->charset}" />
  338          <meta name="robots" content="noindex,nofollow" />
  339          <style>$css</style>
  340:     </head>
  341      <body>
  342          $content

/home/genis/Proyectos/ProyectoXat/vendor/symfony/debug/Resources/ext/symfony_debug.c:
  220  
  221  zend_module_entry symfony_debug_module_entry = {
  222: 	STANDARD_MODULE_HEADER,
  223  	"symfony_debug",
  224  	symfony_debug_functions,
  ...
  278  {
  279  	php_info_print_table_start();
  280: 	php_info_print_table_header(2, "Symfony Debug support", "enabled");
  281: 	php_info_print_table_header(2, "Symfony Debug version", PHP_SYMFONY_DEBUG_VERSION);
  282  	php_info_print_table_end();
  283  }

/home/genis/Proyectos/ProyectoXat/vendor/symfony/debug/Tests/Exception/FlattenExceptionTest.php:
   88      }
   89  
   90:     public function testHeadersForHttpException()
   91      {
   92          $flattened = FlattenException::create(new MethodNotAllowedHttpException(array('POST')));
   93:         $this->assertEquals(array('Allow' => 'POST'), $flattened->getHeaders());
   94  
   95          $flattened = FlattenException::create(new UnauthorizedHttpException('Basic realm="My Realm"'));
   96:         $this->assertEquals(array('WWW-Authenticate' => 'Basic realm="My Realm"'), $flattened->getHeaders());
   97  
   98          $flattened = FlattenException::create(new ServiceUnavailableHttpException('Fri, 31 Dec 1999 23:59:59 GMT'));
   99:         $this->assertEquals(array('Retry-After' => 'Fri, 31 Dec 1999 23:59:59 GMT'), $flattened->getHeaders());
  100  
  101          $flattened = FlattenException::create(new ServiceUnavailableHttpException(120));
  102:         $this->assertEquals(array('Retry-After' => 120), $flattened->getHeaders());
  103  
  104          $flattened = FlattenException::create(new TooManyRequestsHttpException('Fri, 31 Dec 1999 23:59:59 GMT'));
  105:         $this->assertEquals(array('Retry-After' => 'Fri, 31 Dec 1999 23:59:59 GMT'), $flattened->getHeaders());
  106  
  107          $flattened = FlattenException::create(new TooManyRequestsHttpException(120));
  108:         $this->assertEquals(array('Retry-After' => 120), $flattened->getHeaders());
  109      }
  110  

/home/genis/Proyectos/ProyectoXat/vendor/symfony/debug/Tests/ExceptionHandlerTest.php:
   18  use Symfony\Component\HttpKernel\Exception\MethodNotAllowedHttpException;
   19  
   20: require_once __DIR__.'/HeaderMock.php';
   21  
   22  class ExceptionHandlerTest extends TestCase
   ..
   24      protected function setUp()
   25      {
   26:         testHeader();
   27      }
   28  
   29      protected function tearDown()
   30      {
   31:         testHeader();
   32      }
   33  
   ..
   63          $this->assertContains('Sorry, the page you are looking for could not be found.', $response);
   64  
   65:         $expectedHeaders = array(
   66              array('HTTP/1.0 404', true, null),
   67              array('Content-Type: text/html; charset=iso8859-1', true, null),
   68          );
   69  
   70:         $this->assertSame($expectedHeaders, testHeader());
   71      }
   72  
   73:     public function testHeaders()
   74      {
   75          $handler = new ExceptionHandler(false, 'iso8859-1');
   ..
   79          $response = ob_get_clean();
   80  
   81:         $expectedHeaders = array(
   82              array('HTTP/1.0 405', true, null),
   83              array('Allow: POST', false, null),
   ..
   85          );
   86  
   87:         $this->assertSame($expectedHeaders, testHeader());
   88      }
   89  

/home/genis/Proyectos/ProyectoXat/vendor/symfony/debug/Tests/HeaderMock.php:
   12  namespace Symfony\Component\Debug;
   13  
   14: function headers_sent()
   15  {
   16      return false;
   17  }
   18  
   19: function header($str, $replace = true, $status = null)
   20  {
   21:     Tests\testHeader($str, $replace, $status);
   22  }
   23  
   24  namespace Symfony\Component\Debug\Tests;
   25  
   26: function testHeader()
   27  {
   28:     static $headers = array();
   29  
   30      if (!$h = func_get_args()) {
   31:         $h = $headers;
   32:         $headers = array();
   33  
   34          return $h;
   35      }
   36  
   37:     $headers[] = func_get_args();
   38  }
   39  

/home/genis/Proyectos/ProyectoXat/vendor/symfony/http-foundation/AcceptHeader.php:
   13  
   14  /**
   15:  * Represents an Accept-* header.
   16   *
   17:  * An accept header is compound with a list of items,
   18   * sorted by descending quality.
   19   *
   20   * @author Jean-François Simon <contact@jfsimon.fr>
   21   */
   22: class AcceptHeader
   23  {
   24      /**
   25:      * @var AcceptHeaderItem[]
   26       */
   27      private $items = array();
   ..
   33  
   34      /**
   35:      * @param AcceptHeaderItem[] $items
   36       */
   37      public function __construct(array $items)
   ..
   43  
   44      /**
   45:      * Builds an AcceptHeader instance from a string.
   46       *
   47:      * @param string $headerValue
   48       *
   49       * @return self
   50       */
   51:     public static function fromString($headerValue)
   52      {
   53          $index = 0;
   54  
   55          return new self(array_map(function ($itemValue) use (&$index) {
   56:             $item = AcceptHeaderItem::fromString($itemValue);
   57              $item->setIndex($index++);
   58  
   59              return $item;
   60:         }, preg_split('/\s*(?:,*("[^"]+"),*|,*(\'[^\']+\'),*|,+)\s*/', $headerValue, 0, PREG_SPLIT_NO_EMPTY | PREG_SPLIT_DELIM_CAPTURE)));
   61      }
   62  
   63      /**
   64:      * Returns header value's string representation.
   65       *
   66       * @return string
   ..
   72  
   73      /**
   74:      * Tests if header has given value.
   75       *
   76       * @param string $value
   ..
   88       * @param string $value
   89       *
   90:      * @return AcceptHeaderItem|null
   91       */
   92      public function get($value)
   ..
  100       * @return $this
  101       */
  102:     public function add(AcceptHeaderItem $item)
  103      {
  104          $this->items[$item->getValue()] = $item;
  ...
  111       * Returns all items.
  112       *
  113:      * @return AcceptHeaderItem[]
  114       */
  115      public function all()
  ...
  129      public function filter($pattern)
  130      {
  131:         return new self(array_filter($this->items, function (AcceptHeaderItem $item) use ($pattern) {
  132              return preg_match($pattern, $item->getValue());
  133          }));
  ...
  137       * Returns first item.
  138       *
  139:      * @return AcceptHeaderItem|null
  140       */
  141      public function first()
  ...
  152      {
  153          if (!$this->sorted) {
  154:             uasort($this->items, function (AcceptHeaderItem $a, AcceptHeaderItem $b) {
  155                  $qA = $a->getQuality();
  156                  $qB = $b->getQuality();

/home/genis/Proyectos/ProyectoXat/vendor/symfony/http-foundation/AcceptHeaderItem.php:
   13  
   14  /**
   15:  * Represents an Accept-* header item.
   16   *
   17   * @author Jean-François Simon <contact@jfsimon.fr>
   18   */
   19: class AcceptHeaderItem
   20  {
   21      private $value;
   ..
   37  
   38      /**
   39:      * Builds an AcceptHeaderInstance instance from a string.
   40       *
   41       * @param string $itemValue
   ..
   66  
   67      /**
   68:      * Returns header  value's string representation.
   69       *
   70       * @return string

/home/genis/Proyectos/ProyectoXat/vendor/symfony/http-foundation/BinaryFileResponse.php:
   26  class BinaryFileResponse extends Response
   27  {
   28:     protected static $trustXSendfileTypeHeader = false;
   29  
   30      /**
   ..
   39       * @param \SplFileInfo|string $file               The file to stream
   40       * @param int                 $status             The response status code
   41:      * @param array               $headers            An array of response headers
   42       * @param bool                $public             Files are public by default
   43       * @param null|string         $contentDisposition The type of Content-Disposition to set automatically with the filename
   44:      * @param bool                $autoEtag           Whether the ETag header should be automatically set
   45:      * @param bool                $autoLastModified   Whether the Last-Modified header should be automatically set
   46       */
   47:     public function __construct($file, $status = 200, $headers = array(), $public = true, $contentDisposition = null, $autoEtag = false, $autoLastModified = true)
   48      {
   49:         parent::__construct(null, $status, $headers);
   50  
   51          $this->setFile($file, $contentDisposition, $autoEtag, $autoLastModified);
   ..
   59       * @param \SplFileInfo|string $file               The file to stream
   60       * @param int                 $status             The response status code
   61:      * @param array               $headers            An array of response headers
   62       * @param bool                $public             Files are public by default
   63       * @param null|string         $contentDisposition The type of Content-Disposition to set automatically with the filename
   64:      * @param bool                $autoEtag           Whether the ETag header should be automatically set
   65:      * @param bool                $autoLastModified   Whether the Last-Modified header should be automatically set
   66       *
   67       * @return static
   68       */
   69:     public static function create($file = null, $status = 200, $headers = array(), $public = true, $contentDisposition = null, $autoEtag = false, $autoLastModified = true)
   70      {
   71:         return new static($file, $status, $headers, $public, $contentDisposition, $autoEtag, $autoLastModified);
   72      }
   73  
   ..
  126  
  127      /**
  128:      * Automatically sets the Last-Modified header according the file modification date.
  129       */
  130      public function setAutoLastModified()
  ...
  136  
  137      /**
  138:      * Automatically sets the ETag header according to the checksum of the file.
  139       */
  140      public function setAutoEtag()
  ...
  146  
  147      /**
  148:      * Sets the Content-Disposition header with the given filename.
  149       *
  150:      * @param string $disposition      ResponseHeaderBag::DISPOSITION_INLINE or ResponseHeaderBag::DISPOSITION_ATTACHMENT
  151       * @param string $filename         Optionally use this UTF-8 encoded filename instead of the real name of the file
  152       * @param string $filenameFallback A fallback filename, containing only ASCII characters. Defaults to an automatically encoded filename
  ...
  174          }
  175  
  176:         $dispositionHeader = $this->headers->makeDisposition($disposition, $filename, $filenameFallback);
  177:         $this->headers->set('Content-Disposition', $dispositionHeader);
  178  
  179          return $this;
  ...
  185      public function prepare(Request $request)
  186      {
  187:         if (!$this->headers->has('Content-Type')) {
  188:             $this->headers->set('Content-Type', $this->file->getMimeType() ?: 'application/octet-stream');
  189          }
  190  
  ...
  201              return $this;
  202          }
  203:         $this->headers->set('Content-Length', $fileSize);
  204  
  205:         if (!$this->headers->has('Accept-Ranges')) {
  206              // Only accept ranges on safe HTTP methods
  207:             $this->headers->set('Accept-Ranges', $request->isMethodSafe(false) ? 'bytes' : 'none');
  208          }
  209  
  210:         if (self::$trustXSendfileTypeHeader && $request->headers->has('X-Sendfile-Type')) {
  211              // Use X-Sendfile, do not send any content.
  212:             $type = $request->headers->get('X-Sendfile-Type');
  213              $path = $this->file->getRealPath();
  214              // Fall back to scheme://path for stream wrapped locations.
  ...
  219                  // Do X-Accel-Mapping substitutions.
  220                  // @link http://wiki.nginx.org/X-accel#X-Accel-Redirect
  221:                 foreach (explode(',', $request->headers->get('X-Accel-Mapping', '')) as $mapping) {
  222                      $mapping = explode('=', $mapping, 2);
  223  
  ...
  233                  }
  234              }
  235:             $this->headers->set($type, $path);
  236              $this->maxlen = 0;
  237:         } elseif ($request->headers->has('Range')) {
  238:             // Process the range headers.
  239:             if (!$request->headers->has('If-Range') || $this->hasValidIfRangeHeader($request->headers->get('If-Range'))) {
  240:                 $range = $request->headers->get('Range');
  241  
  242                  list($start, $end) = explode('-', substr($range, 6), 2) + array(0);
  ...
  254                      if ($start < 0 || $end > $fileSize - 1) {
  255                          $this->setStatusCode(416);
  256:                         $this->headers->set('Content-Range', sprintf('bytes */%s', $fileSize));
  257                      } elseif (0 !== $start || $end !== $fileSize - 1) {
  258                          $this->maxlen = $end < $fileSize ? $end - $start + 1 : -1;
  ...
  260  
  261                          $this->setStatusCode(206);
  262:                         $this->headers->set('Content-Range', sprintf('bytes %s-%s/%s', $start, $end, $fileSize));
  263:                         $this->headers->set('Content-Length', $end - $start + 1);
  264                      }
  265                  }
  ...
  270      }
  271  
  272:     private function hasValidIfRangeHeader($header)
  273      {
  274:         if ($this->getEtag() === $header) {
  275              return true;
  276          }
  ...
  280          }
  281  
  282:         return $lastModified->format('D, d M Y H:i:s').' GMT' === $header;
  283      }
  284  
  ...
  336  
  337      /**
  338:      * Trust X-Sendfile-Type header.
  339       */
  340:     public static function trustXSendfileTypeHeader()
  341      {
  342:         self::$trustXSendfileTypeHeader = true;
  343      }
  344  
  345      /**
  346       * If this is set to true, the file will be unlinked after the request is send
  347:      * Note: If the X-Sendfile header is used, the deleteFileAfterSend setting will not be used.
  348       *
  349       * @param bool $shouldDelete

/home/genis/Proyectos/ProyectoXat/vendor/symfony/http-foundation/CHANGELOG.md:
   15  -----
   16  
   17:  * the `Request::setTrustedProxies()` method takes a new `$trustedHeaderSet` argument,
   18     see http://symfony.com/doc/current/components/http_foundation/trusting_proxies.html for more info,
   19:  * deprecated the `Request::setTrustedHeaderName()` and `Request::getTrustedHeaderName()` methods,
   20   * added `File\Stream`, to be passed to `BinaryFileResponse` when the size of the served file is unknown,
   21     disabling `Range` and `Content-Length` handling, switching to chunked encoding instead
   22   * added the `Cookie::fromString()` method that allows to create a cookie from a
   23:    raw header string
   24  
   25  3.1.0
   ..
   83   * disabled _method request parameter support by default (call Request::enableHttpMethodParameterOverride() to
   84     enable it, and Request::getHttpMethodParameterOverride() to check if it is supported)
   85:  * Request::splitHttpAcceptHeader() method is deprecated and will be removed in 2.3
   86   * Deprecated Flashbag::count() and \Countable interface, will be removed in 2.3
   87  
   ..
  102   * added support for the PATCH method in Request
  103   * removed the ContentTypeMimeTypeGuesser class as it is deprecated and never used on PHP 5.3
  104:  * added ResponseHeaderBag::makeDisposition() (implements RFC 6266)
  105   * made mimetype to extension conversion configurable
  106   * [BC BREAK] Moved all session related classes and interfaces into own namespace, as

/home/genis/Proyectos/ProyectoXat/vendor/symfony/http-foundation/Cookie.php:
   33  
   34      /**
   35:      * Creates cookie from raw header string.
   36       *
   37       * @param string $cookie

/home/genis/Proyectos/ProyectoXat/vendor/symfony/http-foundation/Exception/ConflictingHeadersException.php:
   13  
   14  /**
   15:  * The HTTP request contains headers with conflicting information.
   16   *
   17   * @author Magnus Nordlander <magnus@fervo.se>
   18   */
   19: class ConflictingHeadersException extends \UnexpectedValueException implements RequestExceptionInterface
   20  {
   21  }

/home/genis/Proyectos/ProyectoXat/vendor/symfony/http-foundation/File/MimeType/MimeTypeExtensionGuesser.php:
  148          'application/vnd.adobe.xdp+xml' => 'xdp',
  149          'application/vnd.adobe.xfdf' => 'xfdf',
  150:         'application/vnd.ahead.space' => 'ahead',
  151          'application/vnd.airzip.filesecure.azf' => 'azf',
  152          'application/vnd.airzip.filesecure.azs' => 'azs',

/home/genis/Proyectos/ProyectoXat/vendor/symfony/http-foundation/HeaderBag.php:
   13  
   14  /**
   15:  * HeaderBag is a container for HTTP headers.
   16   *
   17   * @author Fabien Potencier <fabien@symfony.com>
   18   */
   19: class HeaderBag implements \IteratorAggregate, \Countable
   20  {
   21:     protected $headers = array();
   22      protected $cacheControl = array();
   23  
   24      /**
   25:      * @param array $headers An array of HTTP headers
   26       */
   27:     public function __construct(array $headers = array())
   28      {
   29:         foreach ($headers as $key => $values) {
   30              $this->set($key, $values);
   31          }
   ..
   33  
   34      /**
   35:      * Returns the headers as a string.
   36       *
   37:      * @return string The headers
   38       */
   39      public function __toString()
   40      {
   41:         if (!$headers = $this->all()) {
   42              return '';
   43          }
   44  
   45:         ksort($headers);
   46:         $max = max(array_map('strlen', array_keys($headers))) + 1;
   47          $content = '';
   48:         foreach ($headers as $name => $values) {
   49              $name = implode('-', array_map('ucfirst', explode('-', $name)));
   50              foreach ($values as $value) {
   ..
   57  
   58      /**
   59:      * Returns the headers.
   60       *
   61:      * @return array An array of headers
   62       */
   63      public function all()
   64      {
   65:         return $this->headers;
   66      }
   67  
   ..
   77  
   78      /**
   79:      * Replaces the current HTTP headers by a new set.
   80       *
   81:      * @param array $headers An array of HTTP headers
   82       */
   83:     public function replace(array $headers = array())
   84      {
   85:         $this->headers = array();
   86:         $this->add($headers);
   87      }
   88  
   89      /**
   90:      * Adds new headers the current HTTP headers set.
   91       *
   92:      * @param array $headers An array of HTTP headers
   93       */
   94:     public function add(array $headers)
   95      {
   96:         foreach ($headers as $key => $values) {
   97              $this->set($key, $values);
   98          }
   ..
  100  
  101      /**
  102:      * Returns a header value by name.
  103       *
  104:      * @param string          $key     The header name
  105       * @param string|string[] $default The default value
  106:      * @param bool            $first   Whether to return the first value or all header values
  107       *
  108:      * @return string|string[] The first header value or default value if $first is true, an array of values otherwise
  109       */
  110      public function get($key, $default = null, $first = true)
  111      {
  112          $key = str_replace('_', '-', strtolower($key));
  113:         $headers = $this->all();
  114  
  115:         if (!array_key_exists($key, $headers)) {
  116              if (null === $default) {
  117                  return $first ? null : array();
  ...
  122  
  123          if ($first) {
  124:             return \count($headers[$key]) ? $headers[$key][0] : $default;
  125          }
  126  
  127:         return $headers[$key];
  128      }
  129  
  130      /**
  131:      * Sets a header by name.
  132       *
  133       * @param string          $key     The key
  ...
  142              $values = array_values($values);
  143  
  144:             if (true === $replace || !isset($this->headers[$key])) {
  145:                 $this->headers[$key] = $values;
  146              } else {
  147:                 $this->headers[$key] = array_merge($this->headers[$key], $values);
  148              }
  149          } else {
  150:             if (true === $replace || !isset($this->headers[$key])) {
  151:                 $this->headers[$key] = array($values);
  152              } else {
  153:                 $this->headers[$key][] = $values;
  154              }
  155          }
  156  
  157          if ('cache-control' === $key) {
  158:             $this->cacheControl = $this->parseCacheControl(implode(', ', $this->headers[$key]));
  159          }
  160      }
  161  
  162      /**
  163:      * Returns true if the HTTP header is defined.
  164       *
  165:      * @param string $key The HTTP header
  166       *
  167       * @return bool true if the parameter exists, false otherwise
  ...
  173  
  174      /**
  175:      * Returns true if the given HTTP header contains the given value.
  176       *
  177:      * @param string $key   The HTTP header name
  178       * @param string $value The HTTP value
  179       *
  180:      * @return bool true if the value is contained in the header, false otherwise
  181       */
  182      public function contains($key, $value)
  ...
  186  
  187      /**
  188:      * Removes a header.
  189       *
  190:      * @param string $key The HTTP header name
  191       */
  192      public function remove($key)
  ...
  194          $key = str_replace('_', '-', strtolower($key));
  195  
  196:         unset($this->headers[$key]);
  197  
  198          if ('cache-control' === $key) {
  ...
  202  
  203      /**
  204:      * Returns the HTTP header value converted to a date.
  205       *
  206       * @param string    $key     The parameter key
  207       * @param \DateTime $default The default value
  208       *
  209:      * @return null|\DateTime The parsed DateTime or the default value if the header does not exist
  210       *
  211:      * @throws \RuntimeException When the HTTP header is not parseable
  212       */
  213      public function getDate($key, \DateTime $default = null)
  ...
  218  
  219          if (false === $date = \DateTime::createFromFormat(DATE_RFC2822, $value)) {
  220:             throw new \RuntimeException(sprintf('The %s HTTP header is not parseable (%s).', $key, $value));
  221          }
  222  
  ...
  234          $this->cacheControl[$key] = $value;
  235  
  236:         $this->set('Cache-Control', $this->getCacheControlHeader());
  237      }
  238  
  ...
  270          unset($this->cacheControl[$key]);
  271  
  272:         $this->set('Cache-Control', $this->getCacheControlHeader());
  273      }
  274  
  275      /**
  276:      * Returns an iterator for headers.
  277       *
  278       * @return \ArrayIterator An \ArrayIterator instance
  ...
  280      public function getIterator()
  281      {
  282:         return new \ArrayIterator($this->headers);
  283      }
  284  
  285      /**
  286:      * Returns the number of headers.
  287       *
  288:      * @return int The number of headers
  289       */
  290      public function count()
  291      {
  292:         return count($this->headers);
  293      }
  294  
  295:     protected function getCacheControlHeader()
  296      {
  297          $parts = array();
  ...
  313  
  314      /**
  315:      * Parses a Cache-Control HTTP header.
  316       *
  317:      * @param string $header The value of the Cache-Control HTTP header
  318       *
  319       * @return array An array representing the attribute values
  320       */
  321:     protected function parseCacheControl($header)
  322      {
  323          $cacheControl = array();
  324:         preg_match_all('#([a-zA-Z][a-zA-Z_-]*)\s*(?:=(?:"([^"]*)"|([^ \t",;]*)))?#', $header, $matches, PREG_SET_ORDER);
  325          foreach ($matches as $match) {
  326              $cacheControl[strtolower($match[1])] = isset($match[3]) ? $match[3] : (isset($match[2]) ? $match[2] : true);

/home/genis/Proyectos/ProyectoXat/vendor/symfony/http-foundation/JsonResponse.php:
   37       * @param mixed $data    The response data
   38       * @param int   $status  The response status code
   39:      * @param array $headers An array of response headers
   40       * @param bool  $json    If the data is already a JSON string
   41       */
   42:     public function __construct($data = null, $status = 200, $headers = array(), $json = false)
   43      {
   44:         parent::__construct('', $status, $headers);
   45  
   46          if (null === $data) {
   ..
   61       * @param mixed $data    The json response data
   62       * @param int   $status  The response status code
   63:      * @param array $headers An array of response headers
   64       *
   65       * @return static
   66       */
   67:     public static function create($data = null, $status = 200, $headers = array())
   68      {
   69:         return new static($data, $status, $headers);
   70      }
   71  
   ..
   73       * Make easier the creation of JsonResponse from raw json.
   74       */
   75:     public static function fromJsonString($data = null, $status = 200, $headers = array())
   76      {
   77:         return new static($data, $status, $headers, true);
   78      }
   79  
   ..
  197  
  198      /**
  199:      * Updates the content and headers according to the JSON data and callback.
  200       *
  201       * @return $this
  ...
  205          if (null !== $this->callback) {
  206              // Not using application/javascript for compatibility reasons with older browsers.
  207:             $this->headers->set('Content-Type', 'text/javascript');
  208  
  209              return $this->setContent(sprintf('/**/%s(%s);', $this->callback, $this->data));
  210          }
  211  
  212:         // Only set the header when there is none or when it equals 'text/javascript' (from a previous update with callback)
  213          // in order to not overwrite a custom definition.
  214:         if (!$this->headers->has('Content-Type') || 'text/javascript' === $this->headers->get('Content-Type')) {
  215:             $this->headers->set('Content-Type', 'application/json');
  216          }
  217  

/home/genis/Proyectos/ProyectoXat/vendor/symfony/http-foundation/RedirectResponse.php:
   27       *                        but practically every browser redirects on paths only as well
   28       * @param int    $status  The status code (302 by default)
   29:      * @param array  $headers The headers (Location is always set to the given URL)
   30       *
   31       * @throws \InvalidArgumentException
   ..
   33       * @see http://tools.ietf.org/html/rfc2616#section-10.3
   34       */
   35:     public function __construct($url, $status = 302, $headers = array())
   36      {
   37:         parent::__construct('', $status, $headers);
   38  
   39          $this->setTargetUrl($url);
   ..
   43          }
   44  
   45:         if (301 == $status && !array_key_exists('cache-control', $headers)) {
   46:             $this->headers->remove('cache-control');
   47          }
   48      }
   ..
   53       * @param string $url     The url to redirect to
   54       * @param int    $status  The response status code
   55:      * @param array  $headers An array of response headers
   56       *
   57       * @return static
   58       */
   59:     public static function create($url = '', $status = 302, $headers = array())
   60      {
   61:         return new static($url, $status, $headers);
   62      }
   63  
   ..
   92              sprintf('<!DOCTYPE html>
   93  <html>
   94:     <head>
   95          <meta charset="UTF-8" />
   96          <meta http-equiv="refresh" content="0;url=%1$s" />
   97  
   98          <title>Redirecting to %1$s</title>
   99:     </head>
  100      <body>
  101          Redirecting to <a href="%1$s">%1$s</a>.
  ...
  103  </html>', htmlspecialchars($url, ENT_QUOTES, 'UTF-8')));
  104  
  105:         $this->headers->set('Location', $url);
  106  
  107          return $this;

/home/genis/Proyectos/ProyectoXat/vendor/symfony/http-foundation/Request.php:
   12  namespace Symfony\Component\HttpFoundation;
   13  
   14: use Symfony\Component\HttpFoundation\Exception\ConflictingHeadersException;
   15  use Symfony\Component\HttpFoundation\Exception\SuspiciousOperationException;
   16  use Symfony\Component\HttpFoundation\Session\SessionInterface;
   ..
   31  class Request
   32  {
   33:     const HEADER_FORWARDED = 0b00001; // When using RFC 7239
   34:     const HEADER_X_FORWARDED_FOR = 0b00010;
   35:     const HEADER_X_FORWARDED_HOST = 0b00100;
   36:     const HEADER_X_FORWARDED_PROTO = 0b01000;
   37:     const HEADER_X_FORWARDED_PORT = 0b10000;
   38:     const HEADER_X_FORWARDED_ALL = 0b11110; // All "X-Forwarded-*" headers
   39:     const HEADER_X_FORWARDED_AWS_ELB = 0b11010; // AWS ELB doesn't send X-Forwarded-Host
   40  
   41      /** @deprecated since version 3.3, to be removed in 4.0 */
   42:     const HEADER_CLIENT_IP = self::HEADER_X_FORWARDED_FOR;
   43      /** @deprecated since version 3.3, to be removed in 4.0 */
   44:     const HEADER_CLIENT_HOST = self::HEADER_X_FORWARDED_HOST;
   45      /** @deprecated since version 3.3, to be removed in 4.0 */
   46:     const HEADER_CLIENT_PROTO = self::HEADER_X_FORWARDED_PROTO;
   47      /** @deprecated since version 3.3, to be removed in 4.0 */
   48:     const HEADER_CLIENT_PORT = self::HEADER_X_FORWARDED_PORT;
   49  
   50:     const METHOD_HEAD = 'HEAD';
   51      const METHOD_GET = 'GET';
   52      const METHOD_POST = 'POST';
   ..
   75  
   76      /**
   77:      * Names for headers that can be trusted when
   78       * using trusted proxies.
   79       *
   80:      * The FORWARDED header is the standard as of rfc7239.
   81       *
   82:      * The other headers are non-standard, but widely used
   83       * by popular reverse proxies (like Apache mod_proxy or Amazon EC2).
   84       *
   85       * @deprecated since version 3.3, to be removed in 4.0
   86       */
   87:     protected static $trustedHeaders = array(
   88:         self::HEADER_FORWARDED => 'FORWARDED',
   89:         self::HEADER_CLIENT_IP => 'X_FORWARDED_FOR',
   90:         self::HEADER_CLIENT_HOST => 'X_FORWARDED_HOST',
   91:         self::HEADER_CLIENT_PROTO => 'X_FORWARDED_PROTO',
   92:         self::HEADER_CLIENT_PORT => 'X_FORWARDED_PORT',
   93      );
   94  
   ..
  138  
  139      /**
  140:      * Headers (taken from the $_SERVER).
  141       *
  142:      * @var \Symfony\Component\HttpFoundation\HeaderBag
  143       */
  144:     public $headers;
  145  
  146      /**
  ...
  224      private $isForwardedValid = true;
  225  
  226:     private static $trustedHeaderSet = -1;
  227  
  228      /** @deprecated since version 3.3, to be removed in 4.0 */
  229:     private static $trustedHeaderNames = array(
  230:         self::HEADER_FORWARDED => 'FORWARDED',
  231:         self::HEADER_CLIENT_IP => 'X_FORWARDED_FOR',
  232:         self::HEADER_CLIENT_HOST => 'X_FORWARDED_HOST',
  233:         self::HEADER_CLIENT_PROTO => 'X_FORWARDED_PROTO',
  234:         self::HEADER_CLIENT_PORT => 'X_FORWARDED_PORT',
  235      );
  236  
  237      private static $forwardedParams = array(
  238:         self::HEADER_X_FORWARDED_FOR => 'for',
  239:         self::HEADER_X_FORWARDED_HOST => 'host',
  240:         self::HEADER_X_FORWARDED_PROTO => 'proto',
  241:         self::HEADER_X_FORWARDED_PORT => 'host',
  242      );
  243  
  ...
  277          $this->files = new FileBag($files);
  278          $this->server = new ServerBag($server);
  279:         $this->headers = new HeaderBag($this->server->getHeaders());
  280  
  281          $this->content = $content;
  ...
  300      {
  301          // With the php's bug #66606, the php's built-in web server
  302:         // stores the Content-Type and Content-Length header values in
  303          // HTTP_CONTENT_TYPE and HTTP_CONTENT_LENGTH fields.
  304          $server = $_SERVER;
  ...
  314          $request = self::createRequestFromFactory($_GET, $_POST, array(), $_COOKIE, $_FILES, $server);
  315  
  316:         if (0 === strpos($request->headers->get('CONTENT_TYPE'), 'application/x-www-form-urlencoded')
  317              && in_array(strtoupper($request->server->get('REQUEST_METHOD', 'GET')), array('PUT', 'DELETE', 'PATCH'))
  318          ) {
  ...
  478          if (null !== $server) {
  479              $dup->server = new ServerBag($server);
  480:             $dup->headers = new HeaderBag($dup->server->getHeaders());
  481          }
  482          $dup->languages = null;
  ...
  516          $this->files = clone $this->files;
  517          $this->server = clone $this->server;
  518:         $this->headers = clone $this->headers;
  519      }
  520  
  ...
  532          }
  533  
  534:         $cookieHeader = '';
  535          $cookies = array();
  536  
  ...
  540  
  541          if (!empty($cookies)) {
  542:             $cookieHeader = 'Cookie: '.implode('; ', $cookies)."\r\n";
  543          }
  544  
  545          return
  546              sprintf('%s %s %s', $this->getMethod(), $this->getRequestUri(), $this->server->get('SERVER_PROTOCOL'))."\r\n".
  547:             $this->headers.
  548:             $cookieHeader."\r\n".
  549              $content;
  550      }
  ...
  565          $_COOKIE = $this->cookies->all();
  566  
  567:         foreach ($this->headers->all() as $key => $value) {
  568              $key = strtoupper(str_replace('-', '_', $key));
  569              if (in_array($key, array('CONTENT_TYPE', 'CONTENT_LENGTH'))) {
  ...
  591       *
  592       * @param array $proxies          A list of trusted proxies
  593:      * @param int   $trustedHeaderSet A bit field of Request::HEADER_*, to set which headers to trust from your proxies
  594       *
  595:      * @throws \InvalidArgumentException When $trustedHeaderSet is invalid
  596       */
  597:     public static function setTrustedProxies(array $proxies/*, int $trustedHeaderSet*/)
  598      {
  599          self::$trustedProxies = $proxies;
  600  
  601          if (2 > func_num_args()) {
  602:             @trigger_error(sprintf('The %s() method expects a bit field of Request::HEADER_* as second argument since Symfony 3.3. Defining it will be required in 4.0. ', __METHOD__), E_USER_DEPRECATED);
  603  
  604              return;
  605          }
  606:         $trustedHeaderSet = (int) func_get_arg(1);
  607  
  608:         foreach (self::$trustedHeaderNames as $header => $name) {
  609:             self::$trustedHeaders[$header] = $header & $trustedHeaderSet ? $name : null;
  610          }
  611:         self::$trustedHeaderSet = $trustedHeaderSet;
  612      }
  613  
  ...
  623  
  624      /**
  625:      * Gets the set of trusted headers from trusted proxies.
  626       *
  627:      * @return int A bit field of Request::HEADER_* that defines which headers are trusted from your proxies
  628       */
  629:     public static function getTrustedHeaderSet()
  630      {
  631:         return self::$trustedHeaderSet;
  632      }
  633  
  ...
  659  
  660      /**
  661:      * Sets the name for trusted headers.
  662       *
  663:      * The following header keys are supported:
  664       *
  665:      *  * Request::HEADER_CLIENT_IP:    defaults to X-Forwarded-For   (see getClientIp())
  666:      *  * Request::HEADER_CLIENT_HOST:  defaults to X-Forwarded-Host  (see getHost())
  667:      *  * Request::HEADER_CLIENT_PORT:  defaults to X-Forwarded-Port  (see getPort())
  668:      *  * Request::HEADER_CLIENT_PROTO: defaults to X-Forwarded-Proto (see getScheme() and isSecure())
  669:      *  * Request::HEADER_FORWARDED:    defaults to Forwarded         (see RFC 7239)
  670       *
  671:      * Setting an empty value allows to disable the trusted header for the given key.
  672       *
  673:      * @param string $key   The header key
  674:      * @param string $value The header name
  675       *
  676       * @throws \InvalidArgumentException
  677       *
  678:      * @deprecated since version 3.3, to be removed in 4.0. Use the $trustedHeaderSet argument of the Request::setTrustedProxies() method instead.
  679       */
  680:     public static function setTrustedHeaderName($key, $value)
  681      {
  682:         @trigger_error(sprintf('The "%s()" method is deprecated since Symfony 3.3 and will be removed in 4.0. Use the $trustedHeaderSet argument of the Request::setTrustedProxies() method instead.', __METHOD__), E_USER_DEPRECATED);
  683  
  684          if ('forwarded' === $key) {
  685:             $key = self::HEADER_FORWARDED;
  686          } elseif ('client_ip' === $key) {
  687:             $key = self::HEADER_CLIENT_IP;
  688          } elseif ('client_host' === $key) {
  689:             $key = self::HEADER_CLIENT_HOST;
  690          } elseif ('client_proto' === $key) {
  691:             $key = self::HEADER_CLIENT_PROTO;
  692          } elseif ('client_port' === $key) {
  693:             $key = self::HEADER_CLIENT_PORT;
  694:         } elseif (!array_key_exists($key, self::$trustedHeaders)) {
  695:             throw new \InvalidArgumentException(sprintf('Unable to set the trusted header name for key "%s".', $key));
  696          }
  697  
  698:         self::$trustedHeaders[$key] = $value;
  699  
  700          if (null !== $value) {
  701:             self::$trustedHeaderNames[$key] = $value;
  702:             self::$trustedHeaderSet |= $key;
  703          } else {
  704:             self::$trustedHeaderSet &= ~$key;
  705          }
  706      }
  707  
  708      /**
  709:      * Gets the trusted proxy header name.
  710       *
  711:      * @param string $key The header key
  712       *
  713:      * @return string The header name
  714       *
  715       * @throws \InvalidArgumentException
  716       *
  717:      * @deprecated since version 3.3, to be removed in 4.0. Use the Request::getTrustedHeaderSet() method instead.
  718       */
  719:     public static function getTrustedHeaderName($key)
  720      {
  721          if (2 > func_num_args() || func_get_arg(1)) {
  722:             @trigger_error(sprintf('The "%s()" method is deprecated since Symfony 3.3 and will be removed in 4.0. Use the Request::getTrustedHeaderSet() method instead.', __METHOD__), E_USER_DEPRECATED);
  723          }
  724  
  725:         if (!array_key_exists($key, self::$trustedHeaders)) {
  726:             throw new \InvalidArgumentException(sprintf('Unable to get the trusted header name for key "%s".', $key));
  727          }
  728  
  729:         return self::$trustedHeaders[$key];
  730      }
  731  
  ...
  897          }
  898  
  899:         return $this->getTrustedValues(self::HEADER_CLIENT_IP, $ip) ?: array($ip);
  900      }
  901  
  ...
  903       * Returns the client IP address.
  904       *
  905:      * This method can read the client IP address from the "X-Forwarded-For" header
  906       * when trusted proxies were set via "setTrustedProxies()". The "X-Forwarded-For"
  907:      * header value is a comma+space separated list of IP addresses, the left-most
  908       * being the original client, and each successive proxy that passed the request
  909       * adding the IP address where it received the request from.
  910       *
  911:      * If your reverse proxy uses a different header name than "X-Forwarded-For",
  912:      * ("Client-Ip" for instance), configure it via the $trustedHeaderSet
  913       * argument of the Request::setTrustedProxies() method instead.
  914       *
  ...
 1011       * Returns the port on which the request is made.
 1012       *
 1013:      * This method can read the client port from the "X-Forwarded-Port" header
 1014       * when trusted proxies were set via "setTrustedProxies()".
 1015       *
 1016:      * The "X-Forwarded-Port" header must contain the client port.
 1017       *
 1018:      * If your reverse proxy uses a different header name than "X-Forwarded-Port",
 1019:      * configure it via via the $trustedHeaderSet argument of the
 1020       * Request::setTrustedProxies() method instead.
 1021       *
 ....
 1024      public function getPort()
 1025      {
 1026:         if ($this->isFromTrustedProxy() && $host = $this->getTrustedValues(self::HEADER_CLIENT_PORT)) {
 1027              $host = $host[0];
 1028:         } elseif ($this->isFromTrustedProxy() && $host = $this->getTrustedValues(self::HEADER_CLIENT_HOST)) {
 1029              $host = $host[0];
 1030:         } elseif (!$host = $this->headers->get('HOST')) {
 1031              return $this->server->get('SERVER_PORT');
 1032          }
 ....
 1052      public function getUser()
 1053      {
 1054:         return $this->headers->get('PHP_AUTH_USER');
 1055      }
 1056  
 ....
 1062      public function getPassword()
 1063      {
 1064:         return $this->headers->get('PHP_AUTH_PW');
 1065      }
 1066  
 ....
 1229       * Checks whether the request is secure or not.
 1230       *
 1231:      * This method can read the client protocol from the "X-Forwarded-Proto" header
 1232       * when trusted proxies were set via "setTrustedProxies()".
 1233       *
 1234:      * The "X-Forwarded-Proto" header must contain the protocol: "https" or "http".
 1235       *
 1236:      * If your reverse proxy uses a different header name than "X-Forwarded-Proto"
 1237:      * ("SSL_HTTPS" for instance), configure it via the $trustedHeaderSet
 1238       * argument of the Request::setTrustedProxies() method instead.
 1239       *
 ....
 1242      public function isSecure()
 1243      {
 1244:         if ($this->isFromTrustedProxy() && $proto = $this->getTrustedValues(self::HEADER_CLIENT_PROTO)) {
 1245              return in_array(strtolower($proto[0]), array('https', 'on', 'ssl', '1'), true);
 1246          }
 ....
 1254       * Returns the host name.
 1255       *
 1256:      * This method can read the client host name from the "X-Forwarded-Host" header
 1257       * when trusted proxies were set via "setTrustedProxies()".
 1258       *
 1259:      * The "X-Forwarded-Host" header must contain the client host name.
 1260       *
 1261:      * If your reverse proxy uses a different header name than "X-Forwarded-Host",
 1262:      * configure it via the $trustedHeaderSet argument of the
 1263       * Request::setTrustedProxies() method instead.
 1264       *
 ....
 1269      public function getHost()
 1270      {
 1271:         if ($this->isFromTrustedProxy() && $host = $this->getTrustedValues(self::HEADER_CLIENT_HOST)) {
 1272              $host = $host[0];
 1273:         } elseif (!$host = $this->headers->get('HOST')) {
 1274              if (!$host = $this->server->get('SERVER_NAME')) {
 1275                  $host = $this->server->get('SERVER_ADDR', '');
 ....
 1294  
 1295          if (count(self::$trustedHostPatterns) > 0) {
 1296:             // to avoid host header injection attacks, you should provide a list of trusted host patterns
 1297  
 1298              if (in_array($host, self::$trustedHosts)) {
 ....
 1333       * Gets the request "intended" method.
 1334       *
 1335:      * If the X-HTTP-Method-Override header is set, and if the method is a POST,
 1336       * then it is used to determine the "real" intended HTTP method.
 1337       *
 ....
 1351  
 1352              if ('POST' === $this->method) {
 1353:                 if ($method = $this->headers->get('X-HTTP-METHOD-OVERRIDE')) {
 1354                      $this->method = strtoupper($method);
 1355                  } elseif (self::$httpMethodParameterOverride) {
 ....
 1488      public function getContentType()
 1489      {
 1490:         return $this->getFormat($this->headers->get('CONTENT_TYPE'));
 1491      }
 1492  
 ....
 1563              @trigger_error('Checking only for cacheable HTTP methods with Symfony\Component\HttpFoundation\Request::isMethodSafe() is deprecated since Symfony 3.2 and will throw an exception in 4.0. Disable checking only for cacheable methods by calling the method with `false` as first argument or use the Request::isMethodCacheable() instead.', E_USER_DEPRECATED);
 1564  
 1565:             return in_array($this->getMethod(), array('GET', 'HEAD'));
 1566          }
 1567  
 1568:         return in_array($this->getMethod(), array('GET', 'HEAD', 'OPTIONS', 'TRACE'));
 1569      }
 1570  
 ....
 1576      public function isMethodIdempotent()
 1577      {
 1578:         return in_array($this->getMethod(), array('HEAD', 'GET', 'PUT', 'DELETE', 'TRACE', 'OPTIONS', 'PURGE'));
 1579      }
 1580  
 ....
 1588      public function isMethodCacheable()
 1589      {
 1590:         return in_array($this->getMethod(), array('GET', 'HEAD'));
 1591      }
 1592  
 ....
 1596       * If the application is behind a proxy, the protocol version used in the
 1597       * requests between the client and the proxy and between the proxy and the
 1598:      * server might be different. This returns the former (from the "Via" header)
 1599       * if the proxy is trusted (see "setTrustedProxies()"), otherwise it returns
 1600       * the latter (from the "SERVER_PROTOCOL" server parameter).
 ....
 1605      {
 1606          if ($this->isFromTrustedProxy()) {
 1607:             preg_match('~^(HTTP/)?([1-9]\.[0-9]) ~', $this->headers->get('Via'), $matches);
 1608  
 1609              if ($matches) {
 ....
 1672      public function getETags()
 1673      {
 1674:         return preg_split('/\s*,\s*/', $this->headers->get('if_none_match'), null, PREG_SPLIT_NO_EMPTY);
 1675      }
 1676  
 ....
 1680      public function isNoCache()
 1681      {
 1682:         return $this->headers->hasCacheControlDirective('no-cache') || 'no-cache' == $this->headers->get('Pragma');
 1683      }
 1684  
 ....
 1729          }
 1730  
 1731:         $languages = AcceptHeader::fromString($this->headers->get('Accept-Language'))->all();
 1732          $this->languages = array();
 1733:         foreach ($languages as $lang => $acceptHeaderItem) {
 1734              if (false !== strpos($lang, '-')) {
 1735                  $codes = explode('-', $lang);
 ....
 1769          }
 1770  
 1771:         return $this->charsets = array_keys(AcceptHeader::fromString($this->headers->get('Accept-Charset'))->all());
 1772      }
 1773  
 ....
 1783          }
 1784  
 1785:         return $this->encodings = array_keys(AcceptHeader::fromString($this->headers->get('Accept-Encoding'))->all());
 1786      }
 1787  
 ....
 1797          }
 1798  
 1799:         return $this->acceptableContentTypes = array_keys(AcceptHeader::fromString($this->headers->get('Accept'))->all());
 1800      }
 1801  
 ....
 1803       * Returns true if the request is a XMLHttpRequest.
 1804       *
 1805:      * It works if your JavaScript library sets an X-Requested-With HTTP header.
 1806       * It is known to work with common JavaScript frameworks:
 1807       *
 ....
 1812      public function isXmlHttpRequest()
 1813      {
 1814:         return 'XMLHttpRequest' == $this->headers->get('X-Requested-With');
 1815      }
 1816  
 ....
 1827          $requestUri = '';
 1828  
 1829:         if ($this->headers->has('X_ORIGINAL_URL')) {
 1830              // IIS with Microsoft Rewrite Module
 1831:             $requestUri = $this->headers->get('X_ORIGINAL_URL');
 1832:             $this->headers->remove('X_ORIGINAL_URL');
 1833              $this->server->remove('HTTP_X_ORIGINAL_URL');
 1834              $this->server->remove('UNENCODED_URL');
 1835              $this->server->remove('IIS_WasUrlRewritten');
 1836:         } elseif ($this->headers->has('X_REWRITE_URL')) {
 1837              // IIS with ISAPI_Rewrite
 1838:             $requestUri = $this->headers->get('X_REWRITE_URL');
 1839:             $this->headers->remove('X_REWRITE_URL');
 1840          } elseif ('1' == $this->server->get('IIS_WasUrlRewritten') && '' != $this->server->get('UNENCODED_URL')) {
 1841              // IIS7 with URL Rewrite: make sure we get the unencoded URL (double slash problem)
 ....
 2073       *
 2074       * This can be useful to determine whether or not to trust the
 2075:      * contents of a proxy-specific header.
 2076       *
 2077       * @return bool true if the request came from a trusted proxy, false otherwise
 ....
 2087          $forwardedValues = array();
 2088  
 2089:         if (self::$trustedHeaders[$type] && $this->headers->has(self::$trustedHeaders[$type])) {
 2090:             foreach (explode(',', $this->headers->get(self::$trustedHeaders[$type])) as $v) {
 2091:                 $clientValues[] = (self::HEADER_CLIENT_PORT === $type ? '0.0.0.0:' : '').trim($v);
 2092              }
 2093          }
 2094  
 2095:         if (self::$trustedHeaders[self::HEADER_FORWARDED] && $this->headers->has(self::$trustedHeaders[self::HEADER_FORWARDED])) {
 2096:             $forwardedValues = $this->headers->get(self::$trustedHeaders[self::HEADER_FORWARDED]);
 2097              $forwardedValues = preg_match_all(sprintf('{(?:%s)=(?:"?\[?)([a-zA-Z0-9\.:_\-/]*+)}', self::$forwardedParams[$type]), $forwardedValues, $matches) ? $matches[1] : array();
 2098          }
 ....
 2116          $this->isForwardedValid = false;
 2117  
 2118:         throw new ConflictingHeadersException(sprintf('The request has both a trusted "%s" header and a trusted "%s" header, conflicting with each other. You should either configure your proxy to remove one of them, or configure your project to distrust the offending one.', self::$trustedHeaders[self::HEADER_FORWARDED], self::$trustedHeaders[$type]));
 2119      }
 2120  

/home/genis/Proyectos/ProyectoXat/vendor/symfony/http-foundation/Response.php:
   68      const HTTP_PRECONDITION_REQUIRED = 428;                                       // RFC6585
   69      const HTTP_TOO_MANY_REQUESTS = 429;                                           // RFC6585
   70:     const HTTP_REQUEST_HEADER_FIELDS_TOO_LARGE = 431;                             // RFC6585
   71      const HTTP_UNAVAILABLE_FOR_LEGAL_REASONS = 451;
   72      const HTTP_INTERNAL_SERVER_ERROR = 500;
   ..
   83  
   84      /**
   85:      * @var \Symfony\Component\HttpFoundation\ResponseHeaderBag
   86       */
   87:     public $headers;
   88  
   89      /**
   ..
  173          428 => 'Precondition Required',                                       // RFC6585
  174          429 => 'Too Many Requests',                                           // RFC6585
  175:         431 => 'Request Header Fields Too Large',                             // RFC6585
  176          451 => 'Unavailable For Legal Reasons',                               // RFC7725
  177          500 => 'Internal Server Error',
  ...
  191       * @param mixed $content The response content, see setContent()
  192       * @param int   $status  The response status code
  193:      * @param array $headers An array of response headers
  194       *
  195       * @throws \InvalidArgumentException When the HTTP status code is not valid
  196       */
  197:     public function __construct($content = '', $status = 200, $headers = array())
  198      {
  199:         $this->headers = new ResponseHeaderBag($headers);
  200          $this->setContent($content);
  201          $this->setStatusCode($status);
  ...
  213       * @param mixed $content The response content, see setContent()
  214       * @param int   $status  The response status code
  215:      * @param array $headers An array of response headers
  216       *
  217       * @return static
  218       */
  219:     public static function create($content = '', $status = 200, $headers = array())
  220      {
  221:         return new static($content, $status, $headers);
  222      }
  223  
  ...
  237          return
  238              sprintf('HTTP/%s %s %s', $this->version, $this->statusCode, $this->statusText)."\r\n".
  239:             $this->headers."\r\n".
  240              $this->getContent();
  241      }
  ...
  246      public function __clone()
  247      {
  248:         $this->headers = clone $this->headers;
  249      }
  250  
  ...
  260      public function prepare(Request $request)
  261      {
  262:         $headers = $this->headers;
  263  
  264          if ($this->isInformational() || $this->isEmpty()) {
  265              $this->setContent(null);
  266:             $headers->remove('Content-Type');
  267:             $headers->remove('Content-Length');
  268          } else {
  269              // Content-type based on the Request
  270:             if (!$headers->has('Content-Type')) {
  271                  $format = $request->getRequestFormat();
  272                  if (null !== $format && $mimeType = $request->getMimeType($format)) {
  273:                     $headers->set('Content-Type', $mimeType);
  274                  }
  275              }
  ...
  277              // Fix Content-Type
  278              $charset = $this->charset ?: 'UTF-8';
  279:             if (!$headers->has('Content-Type')) {
  280:                 $headers->set('Content-Type', 'text/html; charset='.$charset);
  281:             } elseif (0 === stripos($headers->get('Content-Type'), 'text/') && false === stripos($headers->get('Content-Type'), 'charset')) {
  282                  // add the charset
  283:                 $headers->set('Content-Type', $headers->get('Content-Type').'; charset='.$charset);
  284              }
  285  
  286              // Fix Content-Length
  287:             if ($headers->has('Transfer-Encoding')) {
  288:                 $headers->remove('Content-Length');
  289              }
  290  
  291:             if ($request->isMethod('HEAD')) {
  292                  // cf. RFC2616 14.13
  293:                 $length = $headers->get('Content-Length');
  294                  $this->setContent(null);
  295                  if ($length) {
  296:                     $headers->set('Content-Length', $length);
  297                  }
  298              }
  ...
  304          }
  305  
  306:         // Check if we need to send extra expire info headers
  307:         if ('1.0' == $this->getProtocolVersion() && false !== strpos($this->headers->get('Cache-Control'), 'no-cache')) {
  308:             $this->headers->set('pragma', 'no-cache');
  309:             $this->headers->set('expires', -1);
  310          }
  311  
  ...
  316  
  317      /**
  318:      * Sends HTTP headers.
  319       *
  320       * @return $this
  321       */
  322:     public function sendHeaders()
  323      {
  324:         // headers have already been sent by the developer
  325:         if (headers_sent()) {
  326              return $this;
  327          }
  328  
  329:         // headers
  330:         foreach ($this->headers->allPreserveCaseWithoutCookies() as $name => $values) {
  331              foreach ($values as $value) {
  332:                 header($name.': '.$value, false, $this->statusCode);
  333              }
  334          }
  335  
  336          // status
  337:         header(sprintf('HTTP/%s %s %s', $this->version, $this->statusCode, $this->statusText), true, $this->statusCode);
  338  
  339          // cookies
  340:         foreach ($this->headers->getCookies() as $cookie) {
  341              if ($cookie->isRaw()) {
  342                  setrawcookie($cookie->getName(), $cookie->getValue(), $cookie->getExpiresTime(), $cookie->getPath(), $cookie->getDomain(), $cookie->isSecure(), $cookie->isHttpOnly());
  ...
  362  
  363      /**
  364:      * Sends HTTP headers and content.
  365       *
  366       * @return $this
  ...
  368      public function send()
  369      {
  370:         $this->sendHeaders();
  371          $this->sendContent();
  372  
  ...
  538          }
  539  
  540:         if ($this->headers->hasCacheControlDirective('no-store') || $this->headers->getCacheControlDirective('private')) {
  541              return false;
  542          }
  ...
  550       * Fresh responses may be served from cache without any interaction with the
  551       * origin. A response is considered fresh when it includes a Cache-Control/max-age
  552:      * indicator or Expires header and the calculated age is less than the freshness lifetime.
  553       *
  554       * @return bool true if the response is fresh, false otherwise
  ...
  562  
  563      /**
  564:      * Returns true if the response includes headers that can be used to validate
  565       * the response with the origin server using a conditional GET request.
  566       *
  ...
  571      public function isValidateable()
  572      {
  573:         return $this->headers->has('Last-Modified') || $this->headers->has('ETag');
  574      }
  575  
  ...
  585      public function setPrivate()
  586      {
  587:         $this->headers->removeCacheControlDirective('public');
  588:         $this->headers->addCacheControlDirective('private');
  589  
  590          return $this;
  ...
  602      public function setPublic()
  603      {
  604:         $this->headers->addCacheControlDirective('public');
  605:         $this->headers->removeCacheControlDirective('private');
  606  
  607          return $this;
  ...
  620      {
  621          if ($immutable) {
  622:             $this->headers->addCacheControlDirective('immutable');
  623          } else {
  624:             $this->headers->removeCacheControlDirective('immutable');
  625          }
  626  
  ...
  637      public function isImmutable()
  638      {
  639:         return $this->headers->hasCacheControlDirective('immutable');
  640      }
  641  
  ...
  654      public function mustRevalidate()
  655      {
  656:         return $this->headers->hasCacheControlDirective('must-revalidate') || $this->headers->hasCacheControlDirective('proxy-revalidate');
  657      }
  658  
  659      /**
  660:      * Returns the Date header as a DateTime instance.
  661       *
  662       * @return \DateTime A \DateTime instance
  663       *
  664:      * @throws \RuntimeException When the header is not parseable
  665       *
  666       * @final since version 3.2
  ...
  668      public function getDate()
  669      {
  670:         return $this->headers->getDate('Date');
  671      }
  672  
  673      /**
  674:      * Sets the Date header.
  675       *
  676       * @return $this
  ...
  681      {
  682          $date->setTimezone(new \DateTimeZone('UTC'));
  683:         $this->headers->set('Date', $date->format('D, d M Y H:i:s').' GMT');
  684  
  685          return $this;
  ...
  695      public function getAge()
  696      {
  697:         if (null !== $age = $this->headers->get('Age')) {
  698              return (int) $age;
  699          }
  ...
  703  
  704      /**
  705:      * Marks the response stale by setting the Age header to be equal to the maximum age of the response.
  706       *
  707       * @return $this
  ...
  710      {
  711          if ($this->isFresh()) {
  712:             $this->headers->set('Age', $this->getMaxAge());
  713          }
  714  
  ...
  717  
  718      /**
  719:      * Returns the value of the Expires header as a DateTime instance.
  720       *
  721:      * @return \DateTime|null A DateTime instance or null if the header does not exist
  722       *
  723       * @final since version 3.2
  ...
  726      {
  727          try {
  728:             return $this->headers->getDate('Expires');
  729          } catch (\RuntimeException $e) {
  730              // according to RFC 2616 invalid date formats (e.g. "0" and "-1") must be treated as in the past
  ...
  734  
  735      /**
  736:      * Sets the Expires HTTP header with a DateTime instance.
  737       *
  738:      * Passing null as value will remove the header.
  739       *
  740:      * @param \DateTime|null $date A \DateTime instance or null to remove the header
  741       *
  742       * @return $this
  ...
  747      {
  748          if (null === $date) {
  749:             $this->headers->remove('Expires');
  750          } else {
  751              $date = clone $date;
  752              $date->setTimezone(new \DateTimeZone('UTC'));
  753:             $this->headers->set('Expires', $date->format('D, d M Y H:i:s').' GMT');
  754          }
  755  
  ...
  759      /**
  760       * Returns the number of seconds after the time specified in the response's Date
  761:      * header when the response should no longer be considered fresh.
  762       *
  763       * First, it checks for a s-maxage directive, then a max-age directive, and then it falls
  764:      * back on an expires header. It returns null when no maximum age can be established.
  765       *
  766       * @return int|null Number of seconds
  ...
  770      public function getMaxAge()
  771      {
  772:         if ($this->headers->hasCacheControlDirective('s-maxage')) {
  773:             return (int) $this->headers->getCacheControlDirective('s-maxage');
  774          }
  775  
  776:         if ($this->headers->hasCacheControlDirective('max-age')) {
  777:             return (int) $this->headers->getCacheControlDirective('max-age');
  778          }
  779  
  ...
  796      public function setMaxAge($value)
  797      {
  798:         $this->headers->addCacheControlDirective('max-age', $value);
  799  
  800          return $this;
  ...
  815      {
  816          $this->setPublic();
  817:         $this->headers->addCacheControlDirective('s-maxage', $value);
  818  
  819          return $this;
  ...
  876  
  877      /**
  878:      * Returns the Last-Modified HTTP header as a DateTime instance.
  879       *
  880:      * @return \DateTime|null A DateTime instance or null if the header does not exist
  881       *
  882:      * @throws \RuntimeException When the HTTP header is not parseable
  883       *
  884       * @final since version 3.2
  ...
  886      public function getLastModified()
  887      {
  888:         return $this->headers->getDate('Last-Modified');
  889      }
  890  
  891      /**
  892:      * Sets the Last-Modified HTTP header with a DateTime instance.
  893       *
  894:      * Passing null as value will remove the header.
  895       *
  896:      * @param \DateTime|null $date A \DateTime instance or null to remove the header
  897       *
  898       * @return $this
  ...
  903      {
  904          if (null === $date) {
  905:             $this->headers->remove('Last-Modified');
  906          } else {
  907              $date = clone $date;
  908              $date->setTimezone(new \DateTimeZone('UTC'));
  909:             $this->headers->set('Last-Modified', $date->format('D, d M Y H:i:s').' GMT');
  910          }
  911  
  ...
  914  
  915      /**
  916:      * Returns the literal value of the ETag HTTP header.
  917       *
  918:      * @return string|null The ETag HTTP header or null if it does not exist
  919       *
  920       * @final since version 3.2
  ...
  922      public function getEtag()
  923      {
  924:         return $this->headers->get('ETag');
  925      }
  926  
  ...
  928       * Sets the ETag value.
  929       *
  930:      * @param string|null $etag The ETag unique identifier or null to remove the header
  931       * @param bool        $weak Whether you want a weak ETag or not
  932       *
  ...
  938      {
  939          if (null === $etag) {
  940:             $this->headers->remove('Etag');
  941          } else {
  942              if (0 !== strpos($etag, '"')) {
  ...
  944              }
  945  
  946:             $this->headers->set('ETag', (true === $weak ? 'W/' : '').$etag);
  947          }
  948  
  ...
  951  
  952      /**
  953:      * Sets the response's cache headers (validation and/or expiration).
  954       *
  955       * Available options are: etag, last_modified, max_age, s_maxage, private, public and immutable.
  ...
 1011       * Modifies the response so that it conforms to the rules defined for a 304 status code.
 1012       *
 1013:      * This sets the status, removes the body, and discards any headers
 1014       * that MUST NOT be included in 304 responses.
 1015       *
 ....
 1025          $this->setContent(null);
 1026  
 1027:         // remove headers that MUST NOT be included with 304 Not Modified responses
 1028:         foreach (array('Allow', 'Content-Encoding', 'Content-Language', 'Content-Length', 'Content-MD5', 'Content-Type', 'Last-Modified') as $header) {
 1029:             $this->headers->remove($header);
 1030          }
 1031  
 ....
 1034  
 1035      /**
 1036:      * Returns true if the response includes a Vary header.
 1037       *
 1038:      * @return bool true if the response includes a Vary header, false otherwise
 1039       *
 1040       * @final since version 3.2
 ....
 1042      public function hasVary()
 1043      {
 1044:         return null !== $this->headers->get('Vary');
 1045      }
 1046  
 1047      /**
 1048:      * Returns an array of header names given in the Vary header.
 1049       *
 1050       * @return array An array of Vary names
 ....
 1054      public function getVary()
 1055      {
 1056:         if (!$vary = $this->headers->get('Vary', null, false)) {
 1057              return array();
 1058          }
 ....
 1067  
 1068      /**
 1069:      * Sets the Vary header.
 1070       *
 1071:      * @param string|array $headers
 1072       * @param bool         $replace Whether to replace the actual value or not (true by default)
 1073       *
 ....
 1076       * @final since version 3.2
 1077       */
 1078:     public function setVary($headers, $replace = true)
 1079      {
 1080:         $this->headers->set('Vary', $headers, $replace);
 1081  
 1082          return $this;
 ....
 1101  
 1102          $notModified = false;
 1103:         $lastModified = $this->headers->get('Last-Modified');
 1104:         $modifiedSince = $request->headers->get('If-Modified-Since');
 1105  
 1106          if ($etags = $request->getETags()) {
 ....
 1240      public function isRedirect($location = null)
 1241      {
 1242:         return in_array($this->statusCode, array(201, 301, 302, 303, 307, 308)) && (null === $location ?: $location == $this->headers->get('Location'));
 1243      }
 1244  
 ....
 1290      protected function ensureIEOverSSLCompatibility(Request $request)
 1291      {
 1292:         if (false !== stripos($this->headers->get('Content-Disposition'), 'attachment') && 1 == preg_match('/MSIE (.*?);/i', $request->server->get('HTTP_USER_AGENT'), $match) && true === $request->isSecure()) {
 1293              if ((int) preg_replace('/(MSIE )(.*?);/', '$2', $match[0]) < 9) {
 1294:                 $this->headers->remove('Cache-Control');
 1295              }
 1296          }

/home/genis/Proyectos/ProyectoXat/vendor/symfony/http-foundation/ResponseHeaderBag.php:
   13  
   14  /**
   15:  * ResponseHeaderBag is a container for Response HTTP headers.
   16   *
   17   * @author Fabien Potencier <fabien@symfony.com>
   18   */
   19: class ResponseHeaderBag extends HeaderBag
   20  {
   21      const COOKIES_FLAT = 'flat';
   ..
   27      protected $computedCacheControl = array();
   28      protected $cookies = array();
   29:     protected $headerNames = array();
   30  
   31:     public function __construct(array $headers = array())
   32      {
   33:         parent::__construct($headers);
   34  
   35:         if (!isset($this->headers['cache-control'])) {
   36              $this->set('Cache-Control', '');
   37          }
   38  
   39          /* RFC2616 - 14.18 says all Responses need to have a Date */
   40:         if (!isset($this->headers['date'])) {
   41              $this->initDate();
   42          }
   ..
   44  
   45      /**
   46:      * Returns the headers, with original capitalizations.
   47       *
   48:      * @return array An array of headers
   49       */
   50      public function allPreserveCase()
   51      {
   52:         $headers = array();
   53          foreach ($this->all() as $name => $value) {
   54:             $headers[isset($this->headerNames[$name]) ? $this->headerNames[$name] : $name] = $value;
   55          }
   56  
   57:         return $headers;
   58      }
   59  
   60      public function allPreserveCaseWithoutCookies()
   61      {
   62:         $headers = $this->allPreserveCase();
   63:         if (isset($this->headerNames['set-cookie'])) {
   64:             unset($headers[$this->headerNames['set-cookie']]);
   65          }
   66  
   67:         return $headers;
   68      }
   69  
   ..
   71       * {@inheritdoc}
   72       */
   73:     public function replace(array $headers = array())
   74      {
   75:         $this->headerNames = array();
   76  
   77:         parent::replace($headers);
   78  
   79:         if (!isset($this->headers['cache-control'])) {
   80              $this->set('Cache-Control', '');
   81          }
   82  
   83:         if (!isset($this->headers['date'])) {
   84              $this->initDate();
   85          }
   ..
   91      public function all()
   92      {
   93:         $headers = parent::all();
   94          foreach ($this->getCookies() as $cookie) {
   95:             $headers['set-cookie'][] = (string) $cookie;
   96          }
   97  
   98:         return $headers;
   99      }
  100  
  ...
  113                  $this->setCookie(Cookie::fromString($cookie));
  114              }
  115:             $this->headerNames[$uniqueKey] = $key;
  116  
  117              return;
  118          }
  119  
  120:         $this->headerNames[$uniqueKey] = $key;
  121  
  122          parent::set($key, $values, $replace);
  123  
  124:         // ensure the cache-control header has sensible defaults
  125          if (\in_array($uniqueKey, array('cache-control', 'etag', 'last-modified', 'expires'), true)) {
  126              $computed = $this->computeCacheControlValue();
  127:             $this->headers['cache-control'] = array($computed);
  128:             $this->headerNames['cache-control'] = 'Cache-Control';
  129              $this->computedCacheControl = $this->parseCacheControl($computed);
  130          }
  ...
  137      {
  138          $uniqueKey = str_replace('_', '-', strtolower($key));
  139:         unset($this->headerNames[$uniqueKey]);
  140  
  141          if ('set-cookie' === $uniqueKey) {
  ...
  175      {
  176          $this->cookies[$cookie->getDomain()][$cookie->getPath()][$cookie->getName()] = $cookie;
  177:         $this->headerNames['set-cookie'] = 'Set-Cookie';
  178      }
  179  
  ...
  202  
  203          if (empty($this->cookies)) {
  204:             unset($this->headerNames['set-cookie']);
  205          }
  206      }
  ...
  301  
  302      /**
  303:      * Returns the calculated value of the cache-control header.
  304       *
  305:      * This considers several other headers and calculates or modifies the
  306:      * cache-control header to a sensible, conservative value.
  307       *
  308       * @return string
  ...
  319          }
  320  
  321:         $header = $this->getCacheControlHeader();
  322          if (isset($this->cacheControl['public']) || isset($this->cacheControl['private'])) {
  323:             return $header;
  324          }
  325  
  326          // public if s-maxage is defined, private otherwise
  327          if (!isset($this->cacheControl['s-maxage'])) {
  328:             return $header.', private';
  329          }
  330  
  331:         return $header;
  332      }
  333  

/home/genis/Proyectos/ProyectoXat/vendor/symfony/http-foundation/ServerBag.php:
   13  
   14  /**
   15:  * ServerBag is a container for HTTP headers from the $_SERVER variable.
   16   *
   17   * @author Fabien Potencier <fabien@symfony.com>
   ..
   22  {
   23      /**
   24:      * Gets the HTTP headers.
   25       *
   26       * @return array
   27       */
   28:     public function getHeaders()
   29      {
   30:         $headers = array();
   31:         $contentHeaders = array('CONTENT_LENGTH' => true, 'CONTENT_MD5' => true, 'CONTENT_TYPE' => true);
   32          foreach ($this->parameters as $key => $value) {
   33              if (0 === strpos($key, 'HTTP_')) {
   34:                 $headers[substr($key, 5)] = $value;
   35              }
   36              // CONTENT_* are not prefixed with HTTP_
   37:             elseif (isset($contentHeaders[$key])) {
   38:                 $headers[$key] = $value;
   39              }
   40          }
   41  
   42          if (isset($this->parameters['PHP_AUTH_USER'])) {
   43:             $headers['PHP_AUTH_USER'] = $this->parameters['PHP_AUTH_USER'];
   44:             $headers['PHP_AUTH_PW'] = isset($this->parameters['PHP_AUTH_PW']) ? $this->parameters['PHP_AUTH_PW'] : '';
   45          } else {
   46              /*
   ..
   58               */
   59  
   60:             $authorizationHeader = null;
   61              if (isset($this->parameters['HTTP_AUTHORIZATION'])) {
   62:                 $authorizationHeader = $this->parameters['HTTP_AUTHORIZATION'];
   63              } elseif (isset($this->parameters['REDIRECT_HTTP_AUTHORIZATION'])) {
   64:                 $authorizationHeader = $this->parameters['REDIRECT_HTTP_AUTHORIZATION'];
   65              }
   66  
   67:             if (null !== $authorizationHeader) {
   68:                 if (0 === stripos($authorizationHeader, 'basic ')) {
   69:                     // Decode AUTHORIZATION header into PHP_AUTH_USER and PHP_AUTH_PW when authorization header is basic
   70:                     $exploded = explode(':', base64_decode(substr($authorizationHeader, 6)), 2);
   71                      if (2 == count($exploded)) {
   72:                         list($headers['PHP_AUTH_USER'], $headers['PHP_AUTH_PW']) = $exploded;
   73                      }
   74:                 } elseif (empty($this->parameters['PHP_AUTH_DIGEST']) && (0 === stripos($authorizationHeader, 'digest '))) {
   75                      // In some circumstances PHP_AUTH_DIGEST needs to be set
   76:                     $headers['PHP_AUTH_DIGEST'] = $authorizationHeader;
   77:                     $this->parameters['PHP_AUTH_DIGEST'] = $authorizationHeader;
   78:                 } elseif (0 === stripos($authorizationHeader, 'bearer ')) {
   79                      /*
   80                       * XXX: Since there is no PHP_AUTH_BEARER in PHP predefined variables,
   81:                      *      I'll just set $headers['AUTHORIZATION'] here.
   82                       *      http://php.net/manual/en/reserved.variables.server.php
   83                       */
   84:                     $headers['AUTHORIZATION'] = $authorizationHeader;
   85                  }
   86              }
   87          }
   88  
   89:         if (isset($headers['AUTHORIZATION'])) {
   90:             return $headers;
   91          }
   92  
   93          // PHP_AUTH_USER/PHP_AUTH_PW
   94:         if (isset($headers['PHP_AUTH_USER'])) {
   95:             $headers['AUTHORIZATION'] = 'Basic '.base64_encode($headers['PHP_AUTH_USER'].':'.$headers['PHP_AUTH_PW']);
   96:         } elseif (isset($headers['PHP_AUTH_DIGEST'])) {
   97:             $headers['AUTHORIZATION'] = $headers['PHP_AUTH_DIGEST'];
   98          }
   99  
  100:         return $headers;
  101      }
  102  }

/home/genis/Proyectos/ProyectoXat/vendor/symfony/http-foundation/Session/Storage/Handler/AbstractSessionHandler.php:
   33      {
   34          $this->sessionName = $sessionName;
   35:         if (!headers_sent() && !ini_get('session.cache_limiter') && '0' !== ini_get('session.cache_limiter')) {
   36:             header(sprintf('Cache-Control: max-age=%d, private, must-revalidate', 60 * (int) ini_get('session.cache_expire')));
   37          }
   38  
   ..
  132              $this->prefetchData = null;
  133          }
  134:         if (!headers_sent() && ini_get('session.use_cookies')) {
  135              if (!$this->sessionName) {
  136                  throw new \LogicException(sprintf('Session name cannot be empty, did you forget to call "parent::open()" in "%s"?.', get_class($this)));
  ...
  140              $sessionCookieFound = false;
  141              $otherCookies = array();
  142:             foreach (headers_list() as $h) {
  143                  if (0 !== stripos($h, 'Set-Cookie:')) {
  144                      continue;
  ...
  155              }
  156              if ($sessionCookieFound) {
  157:                 header_remove('Set-Cookie');
  158                  foreach ($otherCookies as $h) {
  159:                     header($h, false);
  160                  }
  161              } else {

/home/genis/Proyectos/ProyectoXat/vendor/symfony/http-foundation/Session/Storage/Handler/PdoSessionHandler.php:
  339              // duplicate key errors when the same session is written simultaneously (given the LOCK_NONE behavior).
  340              // We can just catch such an error and re-execute the update. This is similar to a serializable
  341:             // transaction with retry logic on serialization failures but without the overhead and without possible
  342              // false positives due to longer gap locking.
  343              if (!$updateStmt->rowCount()) {

/home/genis/Proyectos/ProyectoXat/vendor/symfony/http-foundation/Session/Storage/NativeSessionStorage.php:
   61       * PHP starts to execute user-land code. Setting during runtime has no effect).
   62       *
   63:      * cache_limiter, "" (use "0" to prevent headers from being sent entirely).
   64       * cache_expire, "0"
   65       * cookie_domain, ""
   ..
  138          }
  139  
  140:         if (ini_get('session.use_cookies') && headers_sent($file, $line)) {
  141:             throw new \RuntimeException(sprintf('Failed to start the session because headers have already been sent by "%s" at line %d.', $file, $line));
  142          }
  143  
  ...
  194          }
  195  
  196:         if (headers_sent()) {
  197              return false;
  198          }
  ...
  345      public function setOptions(array $options)
  346      {
  347:         if (headers_sent() || \PHP_SESSION_ACTIVE === session_status()) {
  348              return;
  349          }
  ...
  407          $this->saveHandler = $saveHandler;
  408  
  409:         if (headers_sent() || \PHP_SESSION_ACTIVE === session_status()) {
  410              return;
  411          }

/home/genis/Proyectos/ProyectoXat/vendor/symfony/http-foundation/Session/Storage/SessionStorageInterface.php:
   80       * session design. See https://bugs.php.net/bug.php?id=61470 for a discussion.
   81       * So you must make sure the regenerated session is saved BEFORE sending the
   82:      * headers with the new ID. Symfony's HttpKernel offers a listener for this.
   83       * See Symfony\Component\HttpKernel\EventListener\SaveSessionListener.
   84       * Otherwise session data could get lost again for concurrent requests with the

/home/genis/Proyectos/ProyectoXat/vendor/symfony/http-foundation/StreamedResponse.php:
   29      protected $callback;
   30      protected $streamed;
   31:     private $headersSent;
   32  
   33      /**
   34       * @param callable|null $callback A valid PHP callback or null to set it later
   35       * @param int           $status   The response status code
   36:      * @param array         $headers  An array of response headers
   37       */
   38:     public function __construct(callable $callback = null, $status = 200, $headers = array())
   39      {
   40:         parent::__construct(null, $status, $headers);
   41  
   42          if (null !== $callback) {
   ..
   44          }
   45          $this->streamed = false;
   46:         $this->headersSent = false;
   47      }
   48  
   ..
   52       * @param callable|null $callback A valid PHP callback or null to set it later
   53       * @param int           $status   The response status code
   54:      * @param array         $headers  An array of response headers
   55       *
   56       * @return static
   57       */
   58:     public static function create($callback = null, $status = 200, $headers = array())
   59      {
   60:         return new static($callback, $status, $headers);
   61      }
   62  
   ..
   78       * {@inheritdoc}
   79       *
   80:      * This method only sends the headers once.
   81       *
   82       * @return $this
   83       */
   84:     public function sendHeaders()
   85      {
   86:         if ($this->headersSent) {
   87              return $this;
   88          }
   89  
   90:         $this->headersSent = true;
   91  
   92:         return parent::sendHeaders();
   93      }
   94  

/home/genis/Proyectos/ProyectoXat/vendor/symfony/http-foundation/Tests/AcceptHeaderItemTest.php:
   13  
   14  use PHPUnit\Framework\TestCase;
   15: use Symfony\Component\HttpFoundation\AcceptHeaderItem;
   16  
   17: class AcceptHeaderItemTest extends TestCase
   18  {
   19      /**
   ..
   22      public function testFromString($string, $value, array $attributes)
   23      {
   24:         $item = AcceptHeaderItem::fromString($string);
   25          $this->assertEquals($value, $item->getValue());
   26          $this->assertEquals($attributes, $item->getAttributes());
   ..
   54      public function testToString($value, array $attributes, $string)
   55      {
   56:         $item = new AcceptHeaderItem($value, $attributes);
   57          $this->assertEquals($string, (string) $item);
   58      }
   ..
   74      public function testValue()
   75      {
   76:         $item = new AcceptHeaderItem('value', array());
   77          $this->assertEquals('value', $item->getValue());
   78  
   ..
   86      public function testQuality()
   87      {
   88:         $item = new AcceptHeaderItem('value', array());
   89          $this->assertEquals(1.0, $item->getQuality());
   90  
   ..
   99      public function testAttribute()
  100      {
  101:         $item = new AcceptHeaderItem('value', array());
  102          $this->assertEquals(array(), $item->getAttributes());
  103          $this->assertFalse($item->hasAttribute('test'));

/home/genis/Proyectos/ProyectoXat/vendor/symfony/http-foundation/Tests/AcceptHeaderTest.php:
   13  
   14  use PHPUnit\Framework\TestCase;
   15: use Symfony\Component\HttpFoundation\AcceptHeader;
   16: use Symfony\Component\HttpFoundation\AcceptHeaderItem;
   17  
   18: class AcceptHeaderTest extends TestCase
   19  {
   20      public function testFirst()
   21      {
   22:         $header = AcceptHeader::fromString('text/plain; q=0.5, text/html, text/x-dvi; q=0.8, text/x-c');
   23:         $this->assertSame('text/html', $header->first()->getValue());
   24      }
   25  
   ..
   29      public function testFromString($string, array $items)
   30      {
   31:         $header = AcceptHeader::fromString($string);
   32:         $parsed = array_values($header->all());
   33          // reset index since the fixtures don't have them set
   34          foreach ($parsed as $item) {
   ..
   42          return array(
   43              array('', array()),
   44:             array('gzip', array(new AcceptHeaderItem('gzip'))),
   45:             array('gzip,deflate,sdch', array(new AcceptHeaderItem('gzip'), new AcceptHeaderItem('deflate'), new AcceptHeaderItem('sdch'))),
   46:             array("gzip, deflate\t,sdch", array(new AcceptHeaderItem('gzip'), new AcceptHeaderItem('deflate'), new AcceptHeaderItem('sdch'))),
   47:             array('"this;should,not=matter"', array(new AcceptHeaderItem('this;should,not=matter'))),
   48          );
   49      }
   ..
   54      public function testToString(array $items, $string)
   55      {
   56:         $header = new AcceptHeader($items);
   57:         $this->assertEquals($string, (string) $header);
   58      }
   59  
   ..
   62          return array(
   63              array(array(), ''),
   64:             array(array(new AcceptHeaderItem('gzip')), 'gzip'),
   65:             array(array(new AcceptHeaderItem('gzip'), new AcceptHeaderItem('deflate'), new AcceptHeaderItem('sdch')), 'gzip,deflate,sdch'),
   66:             array(array(new AcceptHeaderItem('this;should,not=matter')), 'this;should,not=matter'),
   67          );
   68      }
   ..
   73      public function testFilter($string, $filter, array $values)
   74      {
   75:         $header = AcceptHeader::fromString($string)->filter($filter);
   76:         $this->assertEquals($values, array_keys($header->all()));
   77      }
   78  
   ..
   89      public function testSorting($string, array $values)
   90      {
   91:         $header = AcceptHeader::fromString($string);
   92:         $this->assertEquals($values, array_keys($header->all()));
   93      }
   94  

/home/genis/Proyectos/ProyectoXat/vendor/symfony/http-foundation/Tests/BinaryFileResponseTest.php:
   15  use Symfony\Component\HttpFoundation\File\Stream;
   16  use Symfony\Component\HttpFoundation\Request;
   17: use Symfony\Component\HttpFoundation\ResponseHeaderBag;
   18  use Symfony\Component\HttpFoundation\Tests\File\FakeFile;
   19  
   ..
   23      {
   24          $file = __DIR__.'/../README.md';
   25:         $response = new BinaryFileResponse($file, 404, array('X-Header' => 'Foo'), true, null, true, true);
   26          $this->assertEquals(404, $response->getStatusCode());
   27:         $this->assertEquals('Foo', $response->headers->get('X-Header'));
   28:         $this->assertTrue($response->headers->has('ETag'));
   29:         $this->assertTrue($response->headers->has('Last-Modified'));
   30:         $this->assertFalse($response->headers->has('Content-Disposition'));
   31  
   32:         $response = BinaryFileResponse::create($file, 404, array(), true, ResponseHeaderBag::DISPOSITION_INLINE);
   33          $this->assertEquals(404, $response->getStatusCode());
   34:         $this->assertFalse($response->headers->has('ETag'));
   35:         $this->assertEquals('inline; filename="README.md"', $response->headers->get('Content-Disposition'));
   36      }
   37  
   ..
   65      {
   66          $response = new BinaryFileResponse(__FILE__);
   67:         $response->setContentDisposition(ResponseHeaderBag::DISPOSITION_ATTACHMENT, 'föö.html');
   68  
   69:         $this->assertSame('attachment; filename="f__.html"; filename*=utf-8\'\'f%C3%B6%C3%B6.html', $response->headers->get('Content-Disposition'));
   70      }
   71  
   ..
   75  
   76          $iso88591EncodedFilename = utf8_decode('föö.html');
   77:         $response->setContentDisposition(ResponseHeaderBag::DISPOSITION_ATTACHMENT, $iso88591EncodedFilename);
   78  
   79          // the parameter filename* is invalid in this case (rawurldecode('f%F6%F6') does not provide a UTF-8 string but an ISO-8859-1 encoded one)
   80:         $this->assertSame('attachment; filename="f__.html"; filename*=utf-8\'\'f%F6%F6.html', $response->headers->get('Content-Disposition'));
   81      }
   82  
   ..
   91          $request = Request::create('/');
   92          $response->prepare($request);
   93:         $etag = $response->headers->get('ETag');
   94  
   95          // prepare a request for a range of the testing file
   96          $request = Request::create('/');
   97:         $request->headers->set('If-Range', $etag);
   98:         $request->headers->set('Range', $requestRange);
   99  
  100          $file = fopen(__DIR__.'/File/Fixtures/test.gif', 'r');
  ...
  109  
  110          $this->assertEquals(206, $response->getStatusCode());
  111:         $this->assertEquals($responseRange, $response->headers->get('Content-Range'));
  112:         $this->assertSame($length, $response->headers->get('Content-Length'));
  113      }
  114  
  ...
  123          $request = Request::create('/');
  124          $response->prepare($request);
  125:         $lastModified = $response->headers->get('Last-Modified');
  126  
  127          // prepare a request for a range of the testing file
  128          $request = Request::create('/');
  129:         $request->headers->set('If-Range', $lastModified);
  130:         $request->headers->set('Range', $requestRange);
  131  
  132          $file = fopen(__DIR__.'/File/Fixtures/test.gif', 'r');
  ...
  141  
  142          $this->assertEquals(206, $response->getStatusCode());
  143:         $this->assertEquals($responseRange, $response->headers->get('Content-Range'));
  144      }
  145  
  ...
  162          // prepare a request for a range of the testing file
  163          $request = Request::create('/');
  164:         $request->headers->set('If-Range', date('D, d M Y H:i:s').' GMT');
  165:         $request->headers->set('Range', 'bytes=1-4');
  166  
  167          $this->expectOutputString(file_get_contents(__DIR__.'/File/Fixtures/test.gif'));
  ...
  171  
  172          $this->assertEquals(200, $response->getStatusCode());
  173:         $this->assertNull($response->headers->get('Content-Range'));
  174      }
  175  
  ...
  183          // prepare a request for a range of the testing file
  184          $request = Request::create('/');
  185:         $request->headers->set('Range', $requestRange);
  186  
  187          $file = fopen(__DIR__.'/File/Fixtures/test.gif', 'r');
  ...
  218          // prepare a request for a range of the testing file
  219          $request = Request::create('/');
  220:         $request->headers->set('Range', $requestRange);
  221  
  222          $response = clone $response;
  ...
  225  
  226          $this->assertEquals(416, $response->getStatusCode());
  227:         $this->assertEquals('bytes */35', $response->headers->get('Content-Range'));
  228      }
  229  
  ...
  242      {
  243          $request = Request::create('/');
  244:         $request->headers->set('X-Sendfile-Type', 'X-Sendfile');
  245  
  246:         BinaryFileResponse::trustXSendfileTypeHeader();
  247          $response = BinaryFileResponse::create($file, 200, array('Content-Type' => 'application/octet-stream'));
  248          $response->prepare($request);
  ...
  251          $response->sendContent();
  252  
  253:         $this->assertContains('README.md', $response->headers->get('X-Sendfile'));
  254      }
  255  
  ...
  268      {
  269          $request = Request::create('/');
  270:         $request->headers->set('X-Sendfile-Type', 'X-Accel-Redirect');
  271:         $request->headers->set('X-Accel-Mapping', $mapping);
  272  
  273          $file = new FakeFile($realpath, __DIR__.'/File/Fixtures/test');
  274  
  275:         BinaryFileResponse::trustXSendfileTypeHeader();
  276          $response = new BinaryFileResponse($file, 200, array('Content-Type' => 'application/octet-stream'));
  277          $reflection = new \ReflectionObject($response);
  ...
  281  
  282          $response->prepare($request);
  283:         $this->assertEquals($virtual, $response->headers->get('X-Accel-Redirect'));
  284      }
  285  
  ...
  308          $response->prepare($request);
  309  
  310:         $this->assertEquals('none', $response->headers->get('Accept-Ranges'));
  311      }
  312  
  ...
  315          $request = Request::create('/', 'POST');
  316          $response = BinaryFileResponse::create(__DIR__.'/File/Fixtures/test.gif', 200, array('Content-Type' => 'application/octet-stream'));
  317:         $response->headers->set('Accept-Ranges', 'foo');
  318          $response->prepare($request);
  319  
  320:         $this->assertEquals('foo', $response->headers->get('Accept-Ranges'));
  321      }
  322  
  ...
  335          $response->prepare($request);
  336  
  337:         $this->assertNull($response->headers->get('Content-Length'));
  338      }
  339  

/home/genis/Proyectos/ProyectoXat/vendor/symfony/http-foundation/Tests/HeaderBagTest.php:
   13  
   14  use PHPUnit\Framework\TestCase;
   15: use Symfony\Component\HttpFoundation\HeaderBag;
   16  
   17: class HeaderBagTest extends TestCase
   18  {
   19      public function testConstructor()
   20      {
   21:         $bag = new HeaderBag(array('foo' => 'bar'));
   22          $this->assertTrue($bag->has('foo'));
   23      }
   ..
   25      public function testToStringNull()
   26      {
   27:         $bag = new HeaderBag();
   28          $this->assertEquals('', $bag->__toString());
   29      }
   ..
   31      public function testToStringNotNull()
   32      {
   33:         $bag = new HeaderBag(array('foo' => 'bar'));
   34          $this->assertEquals("Foo: bar\r\n", $bag->__toString());
   35      }
   ..
   37      public function testKeys()
   38      {
   39:         $bag = new HeaderBag(array('foo' => 'bar'));
   40          $keys = $bag->keys();
   41          $this->assertEquals('foo', $keys[0]);
   ..
   44      public function testGetDate()
   45      {
   46:         $bag = new HeaderBag(array('foo' => 'Tue, 4 Sep 2012 20:00:00 +0200'));
   47:         $headerDate = $bag->getDate('foo');
   48:         $this->assertInstanceOf('DateTime', $headerDate);
   49      }
   50  
   ..
   54      public function testGetDateException()
   55      {
   56:         $bag = new HeaderBag(array('foo' => 'Tue'));
   57:         $headerDate = $bag->getDate('foo');
   58      }
   59  
   60:     public function testGetCacheControlHeader()
   61      {
   62:         $bag = new HeaderBag();
   63          $bag->addCacheControlDirective('public', '#a');
   64          $this->assertTrue($bag->hasCacheControlDirective('public'));
   ..
   68      public function testAll()
   69      {
   70:         $bag = new HeaderBag(array('foo' => 'bar'));
   71          $this->assertEquals(array('foo' => array('bar')), $bag->all(), '->all() gets all the input');
   72  
   73:         $bag = new HeaderBag(array('FOO' => 'BAR'));
   74          $this->assertEquals(array('foo' => array('BAR')), $bag->all(), '->all() gets all the input key are lower case');
   75      }
   ..
   77      public function testReplace()
   78      {
   79:         $bag = new HeaderBag(array('foo' => 'bar'));
   80  
   81          $bag->replace(array('NOPE' => 'BAR'));
   ..
   86      public function testGet()
   87      {
   88:         $bag = new HeaderBag(array('foo' => 'bar', 'fuzz' => 'bizz'));
   89          $this->assertEquals('bar', $bag->get('foo'), '->get return current value');
   90          $this->assertEquals('bar', $bag->get('FoO'), '->get key in case insensitive');
   ..
  103      public function testSetAssociativeArray()
  104      {
  105:         $bag = new HeaderBag();
  106          $bag->set('foo', array('bad-assoc-index' => 'value'));
  107          $this->assertSame('value', $bag->get('foo'));
  108:         $this->assertEquals(array('value'), $bag->get('foo', 'nope', false), 'assoc indices of multi-valued headers are ignored');
  109      }
  110  
  111      public function testContains()
  112      {
  113:         $bag = new HeaderBag(array('foo' => 'bar', 'fuzz' => 'bizz'));
  114          $this->assertTrue($bag->contains('foo', 'bar'), '->contains first value');
  115          $this->assertTrue($bag->contains('fuzz', 'bizz'), '->contains second value');
  ...
  126      public function testCacheControlDirectiveAccessors()
  127      {
  128:         $bag = new HeaderBag();
  129          $bag->addCacheControlDirective('public');
  130  
  ...
  144      public function testCacheControlDirectiveParsing()
  145      {
  146:         $bag = new HeaderBag(array('cache-control' => 'public, max-age=10'));
  147          $this->assertTrue($bag->hasCacheControlDirective('public'));
  148          $this->assertTrue($bag->getCacheControlDirective('public'));
  ...
  157      public function testCacheControlDirectiveParsingQuotedZero()
  158      {
  159:         $bag = new HeaderBag(array('cache-control' => 'max-age="0"'));
  160          $this->assertTrue($bag->hasCacheControlDirective('max-age'));
  161          $this->assertEquals(0, $bag->getCacheControlDirective('max-age'));
  ...
  164      public function testCacheControlDirectiveOverrideWithReplace()
  165      {
  166:         $bag = new HeaderBag(array('cache-control' => 'private, max-age=100'));
  167          $bag->replace(array('cache-control' => 'public, max-age=10'));
  168          $this->assertTrue($bag->hasCacheControlDirective('public'));
  ...
  175      public function testCacheControlClone()
  176      {
  177:         $headers = array('foo' => 'bar');
  178:         $bag1 = new HeaderBag($headers);
  179:         $bag2 = new HeaderBag($bag1->all());
  180  
  181          $this->assertEquals($bag1->all(), $bag2->all());
  ...
  184      public function testGetIterator()
  185      {
  186:         $headers = array('foo' => 'bar', 'hello' => 'world', 'third' => 'charm');
  187:         $headerBag = new HeaderBag($headers);
  188  
  189          $i = 0;
  190:         foreach ($headerBag as $key => $val) {
  191              ++$i;
  192:             $this->assertEquals(array($headers[$key]), $val);
  193          }
  194  
  195:         $this->assertEquals(count($headers), $i);
  196      }
  197  
  198      public function testCount()
  199      {
  200:         $headers = array('foo' => 'bar', 'HELLO' => 'WORLD');
  201:         $headerBag = new HeaderBag($headers);
  202  
  203:         $this->assertCount(count($headers), $headerBag);
  204      }
  205  }

/home/genis/Proyectos/ProyectoXat/vendor/symfony/http-foundation/Tests/JsonResponseTest.php:
   56      }
   57  
   58:     public function testConstructorAddsContentTypeHeader()
   59      {
   60          $response = new JsonResponse();
   61:         $this->assertSame('application/json', $response->headers->get('Content-Type'));
   62      }
   63  
   64:     public function testConstructorWithCustomHeaders()
   65      {
   66          $response = new JsonResponse(array(), 200, array('ETag' => 'foo'));
   67:         $this->assertSame('application/json', $response->headers->get('Content-Type'));
   68:         $this->assertSame('foo', $response->headers->get('ETag'));
   69      }
   70  
   71      public function testConstructorWithCustomContentType()
   72      {
   73:         $headers = array('Content-Type' => 'application/vnd.acme.blog-v1+json');
   74  
   75:         $response = new JsonResponse(array(), 200, $headers);
   76:         $this->assertSame('application/vnd.acme.blog-v1+json', $response->headers->get('Content-Type'));
   77      }
   78  
   ..
  145      }
  146  
  147:     public function testStaticCreateAddsContentTypeHeader()
  148      {
  149          $response = JsonResponse::create();
  150:         $this->assertSame('application/json', $response->headers->get('Content-Type'));
  151      }
  152  
  153:     public function testStaticCreateWithCustomHeaders()
  154      {
  155          $response = JsonResponse::create(array(), 200, array('ETag' => 'foo'));
  156:         $this->assertSame('application/json', $response->headers->get('Content-Type'));
  157:         $this->assertSame('foo', $response->headers->get('ETag'));
  158      }
  159  
  160      public function testStaticCreateWithCustomContentType()
  161      {
  162:         $headers = array('Content-Type' => 'application/vnd.acme.blog-v1+json');
  163  
  164:         $response = JsonResponse::create(array(), 200, $headers);
  165:         $this->assertSame('application/vnd.acme.blog-v1+json', $response->headers->get('Content-Type'));
  166      }
  167  
  ...
  171  
  172          $this->assertEquals('/**/callback({"foo":"bar"});', $response->getContent());
  173:         $this->assertEquals('text/javascript', $response->headers->get('Content-Type'));
  174      }
  175  

/home/genis/Proyectos/ProyectoXat/vendor/symfony/http-foundation/Tests/RedirectResponseTest.php:
   43      }
   44  
   45:     public function testGenerateLocationHeader()
   46      {
   47          $response = new RedirectResponse('foo.bar');
   48  
   49:         $this->assertTrue($response->headers->has('Location'));
   50:         $this->assertEquals('foo.bar', $response->headers->get('Location'));
   51      }
   52  
   ..
   83      }
   84  
   85:     public function testCacheHeaders()
   86      {
   87          $response = new RedirectResponse('foo.bar', 301);
   88:         $this->assertFalse($response->headers->hasCacheControlDirective('no-cache'));
   89  
   90          $response = new RedirectResponse('foo.bar', 301, array('cache-control' => 'max-age=86400'));
   91:         $this->assertFalse($response->headers->hasCacheControlDirective('no-cache'));
   92:         $this->assertTrue($response->headers->hasCacheControlDirective('max-age'));
   93  
   94          $response = new RedirectResponse('foo.bar', 302);
   95:         $this->assertTrue($response->headers->hasCacheControlDirective('no-cache'));
   96      }
   97  }

/home/genis/Proyectos/ProyectoXat/vendor/symfony/http-foundation/Tests/RequestTest.php:
   40  
   41          $request->initialize(array(), array(), array(), array(), array(), array('HTTP_FOO' => 'bar'));
   42:         $this->assertEquals('bar', $request->headers->get('FOO'), '->initialize() takes an array of HTTP headers as its sixth argument');
   43      }
   44  
   ..
  253          $this->assertEquals('pa$$', $request->getPassword());
  254          $this->assertEquals('', $request->getQueryString());
  255:         $this->assertEquals('application/json', $request->headers->get('CONTENT_TYPE'));
  256  
  257          // URI has precedence over server
  ...
  277          $this->assertEquals($request->request->all(), $dup->request->all(), '->duplicate() duplicates a request an copy the current request parameters');
  278          $this->assertEquals($request->attributes->all(), $dup->attributes->all(), '->duplicate() duplicates a request an copy the current attributes');
  279:         $this->assertEquals($request->headers->all(), $dup->headers->all(), '->duplicate() duplicates a request an copy the current HTTP headers');
  280  
  281          $dup = $request->duplicate(array('foo' => 'foobar'), array('foo' => 'foobar'), array('foo' => 'foobar'), array(), array(), array('HTTP_FOO' => 'foobar'));
  ...
  284          $this->assertEquals(array('foo' => 'foobar'), $dup->request->all(), '->duplicate() overrides the request parameters if provided');
  285          $this->assertEquals(array('foo' => 'foobar'), $dup->attributes->all(), '->duplicate() overrides the attributes if provided');
  286:         $this->assertEquals(array('foo' => array('foobar')), $dup->headers->all(), '->duplicate() overrides the HTTP header if provided');
  287      }
  288  
  ...
  414          $this->assertEquals('http://host/index.php/path/info?query=string', $request->getUri(), '->getUri() with default port');
  415  
  416:         // Without HOST HEADER
  417          unset($server['HTTP_HOST']);
  418          $server['SERVER_NAME'] = 'servername';
  ...
  421          $request->initialize(array(), array(), array(), array(), array(), $server);
  422  
  423:         $this->assertEquals('http://servername/index.php/path/info?query=string', $request->getUri(), '->getUri() with default port without HOST_HEADER');
  424  
  425          // Request with URL REWRITING (hide index.php)
  ...
  454          $this->assertEquals('http://host/path/info?query=string', $request->getUri(), '->getUri() with rewrite and default port');
  455  
  456:         // Without HOST HEADER
  457          unset($server['HTTP_HOST']);
  458          $server['SERVER_NAME'] = 'servername';
  ...
  461          $request->initialize(array(), array(), array(), array(), array(), $server);
  462  
  463:         $this->assertEquals('http://servername/path/info?query=string', $request->getUri(), '->getUri() with rewrite, default port without HOST_HEADER');
  464  
  465          // With encoded characters
  ...
  541          $this->assertEquals('http://host/index.php/some/path', $request->getUriForPath('/some/path'), '->getUriForPath() with default port');
  542  
  543:         // Without HOST HEADER
  544          unset($server['HTTP_HOST']);
  545          $server['SERVER_NAME'] = 'servername';
  ...
  548          $request->initialize(array(), array(), array(), array(), array(), $server);
  549  
  550:         $this->assertEquals('http://servername/index.php/some/path', $request->getUriForPath('/some/path'), '->getUriForPath() with default port without HOST_HEADER');
  551  
  552          // Request with URL REWRITING (hide index.php)
  ...
  581          $this->assertEquals('http://host/some/path', $request->getUriForPath('/some/path'), '->getUriForPath() with rewrite and default port');
  582  
  583:         // Without HOST HEADER
  584          unset($server['HTTP_HOST']);
  585          $server['SERVER_NAME'] = 'servername';
  ...
  588          $request->initialize(array(), array(), array(), array(), array(), $server);
  589  
  590:         $this->assertEquals('http://servername/some/path', $request->getUriForPath('/some/path'), '->getUriForPath() with rewrite, default port without HOST_HEADER');
  591          $this->assertEquals('servername', $request->getHttpHost());
  592  
  ...
  718  
  719          $request->initialize(array(), array(), array(), array(), array(), array('HTTP_HOST' => 'www.example.com'));
  720:         $this->assertEquals('www.example.com', $request->getHost(), '->getHost() from Host Header');
  721  
  722:         // Host header with port number
  723          $request->initialize(array(), array(), array(), array(), array(), array('HTTP_HOST' => 'www.example.com:8080'));
  724:         $this->assertEquals('www.example.com', $request->getHost(), '->getHost() from Host Header with port number');
  725  
  726          // Server values
  ...
  729  
  730          $request->initialize(array(), array(), array(), array(), array(), array('SERVER_NAME' => 'www.example.com', 'HTTP_HOST' => 'www.host.com'));
  731:         $this->assertEquals('www.host.com', $request->getHost(), '->getHost() value from Host header has priority over SERVER_NAME ');
  732      }
  733  
  ...
  742          $this->assertEquals(80, $port, 'Without trusted proxies FORWARDED_PROTO and FORWARDED_PORT are ignored.');
  743  
  744:         Request::setTrustedProxies(array('1.1.1.1'), Request::HEADER_X_FORWARDED_ALL);
  745          $request = Request::create('http://example.com', 'GET', array(), array(), array(), array(
  746              'HTTP_X_FORWARDED_PROTO' => 'https',
  ...
  754              'HTTP_X_FORWARDED_PROTO' => 'https',
  755          ));
  756:         $this->assertEquals(80, $request->getPort(), 'With only PROTO set getPort() ignores trusted headers on untrusted connection.');
  757          $request->server->set('REMOTE_ADDR', '1.1.1.1');
  758          $this->assertEquals(443, $request->getPort(), 'With only PROTO set getPort() defaults to 443.');
  ...
  761              'HTTP_X_FORWARDED_PROTO' => 'http',
  762          ));
  763:         $this->assertEquals(80, $request->getPort(), 'If X_FORWARDED_PROTO is set to HTTP getPort() ignores trusted headers on untrusted connection.');
  764          $request->server->set('REMOTE_ADDR', '1.1.1.1');
  765          $this->assertEquals(80, $request->getPort(), 'If X_FORWARDED_PROTO is set to HTTP getPort() returns port of the original request.');
  ...
  768              'HTTP_X_FORWARDED_PROTO' => 'On',
  769          ));
  770:         $this->assertEquals(80, $request->getPort(), 'With only PROTO set and value is On, getPort() ignores trusted headers on untrusted connection.');
  771          $request->server->set('REMOTE_ADDR', '1.1.1.1');
  772          $this->assertEquals(443, $request->getPort(), 'With only PROTO set and value is On, getPort() defaults to 443.');
  ...
  775              'HTTP_X_FORWARDED_PROTO' => '1',
  776          ));
  777:         $this->assertEquals(80, $request->getPort(), 'With only PROTO set and value is 1, getPort() ignores trusted headers on untrusted connection.');
  778          $request->server->set('REMOTE_ADDR', '1.1.1.1');
  779          $this->assertEquals(443, $request->getPort(), 'With only PROTO set and value is 1, getPort() defaults to 443.');
  ...
  842          $request = new Request();
  843          $request->setMethod('POST');
  844:         $request->headers->set('X-HTTP-METHOD-OVERRIDE', 'delete');
  845          $this->assertEquals('DELETE', $request->getMethod(), '->getMethod() returns the method from X-HTTP-Method-Override even though _method is set if defined and POST');
  846  
  847          $request = new Request();
  848          $request->setMethod('POST');
  849:         $request->headers->set('X-HTTP-METHOD-OVERRIDE', 'delete');
  850          $this->assertEquals('DELETE', $request->getMethod(), '->getMethod() returns the method from X-HTTP-Method-Override if defined and POST');
  851      }
  ...
  950  
  951      /**
  952:      * @expectedException \Symfony\Component\HttpFoundation\Exception\ConflictingHeadersException
  953:      * @dataProvider getClientIpsWithConflictingHeadersProvider
  954       */
  955:     public function testGetClientIpsWithConflictingHeaders($httpForwarded, $httpXForwardedFor)
  956      {
  957          $request = new Request();
  ...
  963          );
  964  
  965:         Request::setTrustedProxies(array('88.88.88.88'), Request::HEADER_X_FORWARDED_ALL | Request::HEADER_FORWARDED);
  966  
  967          $request->initialize(array(), array(), array(), array(), array(), $server);
  ...
  971  
  972      /**
  973:      * @dataProvider getClientIpsWithConflictingHeadersProvider
  974       */
  975      public function testGetClientIpsOnlyXHttpForwardedForTrusted($httpForwarded, $httpXForwardedFor)
  ...
  983          );
  984  
  985:         Request::setTrustedProxies(array('88.88.88.88'), Request::HEADER_X_FORWARDED_FOR);
  986  
  987          $request->initialize(array(), array(), array(), array(), array(), $server);
  ...
  990      }
  991  
  992:     public function getClientIpsWithConflictingHeadersProvider()
  993      {
  994          //        $httpForwarded                   $httpXForwardedFor
  ...
 1003  
 1004      /**
 1005:      * @dataProvider getClientIpsWithAgreeingHeadersProvider
 1006       */
 1007:     public function testGetClientIpsWithAgreeingHeaders($httpForwarded, $httpXForwardedFor, $expectedIps)
 1008      {
 1009          $request = new Request();
 ....
 1015          );
 1016  
 1017:         Request::setTrustedProxies(array('88.88.88.88'), Request::HEADER_X_FORWARDED_ALL);
 1018  
 1019          $request->initialize(array(), array(), array(), array(), array(), $server);
 ....
 1024      }
 1025  
 1026:     public function getClientIpsWithAgreeingHeadersProvider()
 1027      {
 1028          //        $httpForwarded                               $httpXForwardedFor
 ....
 1202          $this->assertArrayNotHasKey('HTTP_X_FORWARDED_PROTO', $_SERVER);
 1203  
 1204:         $request->headers->set('X_FORWARDED_PROTO', 'https');
 1205  
 1206:         Request::setTrustedProxies(array('1.1.1.1'), Request::HEADER_X_FORWARDED_ALL);
 1207          $this->assertFalse($request->isSecure());
 1208          $request->server->set('REMOTE_ADDR', '1.1.1.1');
 ....
 1213          $this->assertArrayHasKey('HTTP_X_FORWARDED_PROTO', $_SERVER);
 1214  
 1215:         $request->headers->set('CONTENT_TYPE', 'multipart/form-data');
 1216:         $request->headers->set('CONTENT_LENGTH', 12345);
 1217  
 1218          $request->overrideGlobals();
 ....
 1346  
 1347          $request = new Request();
 1348:         $request->headers->set('Accept-language', 'zh, en-us; q=0.8, en; q=0.6');
 1349          $this->assertEquals('en', $request->getPreferredLanguage(array('en', 'en-us')));
 1350  
 1351          $request = new Request();
 1352:         $request->headers->set('Accept-language', 'zh, en-us; q=0.8, en; q=0.6');
 1353          $this->assertEquals('en', $request->getPreferredLanguage(array('fr', 'en')));
 1354  
 1355          $request = new Request();
 1356:         $request->headers->set('Accept-language', 'zh, en-us; q=0.8');
 1357          $this->assertEquals('en', $request->getPreferredLanguage(array('fr', 'en')));
 1358  
 1359          $request = new Request();
 1360:         $request->headers->set('Accept-language', 'zh, en-us; q=0.8, fr-fr; q=0.6, fr; q=0.5');
 1361          $this->assertEquals('en', $request->getPreferredLanguage(array('fr', 'en')));
 1362      }
 ....
 1367          $this->assertFalse($request->isXmlHttpRequest());
 1368  
 1369:         $request->headers->set('X-Requested-With', 'XMLHttpRequest');
 1370          $this->assertTrue($request->isXmlHttpRequest());
 1371  
 1372:         $request->headers->remove('X-Requested-With');
 1373          $this->assertFalse($request->isXmlHttpRequest());
 1374      }
 ....
 1398          $request = new Request();
 1399          $this->assertEquals(array(), $request->getCharsets());
 1400:         $request->headers->set('Accept-Charset', 'ISO-8859-1, US-ASCII, UTF-8; q=0.8, ISO-10646-UCS-2; q=0.6');
 1401          $this->assertEquals(array(), $request->getCharsets()); // testing caching
 1402  
 1403          $request = new Request();
 1404:         $request->headers->set('Accept-Charset', 'ISO-8859-1, US-ASCII, UTF-8; q=0.8, ISO-10646-UCS-2; q=0.6');
 1405          $this->assertEquals(array('ISO-8859-1', 'US-ASCII', 'UTF-8', 'ISO-10646-UCS-2'), $request->getCharsets());
 1406  
 1407          $request = new Request();
 1408:         $request->headers->set('Accept-Charset', 'ISO-8859-1,utf-8;q=0.7,*;q=0.7');
 1409          $this->assertEquals(array('ISO-8859-1', 'utf-8', '*'), $request->getCharsets());
 1410      }
 ....
 1414          $request = new Request();
 1415          $this->assertEquals(array(), $request->getEncodings());
 1416:         $request->headers->set('Accept-Encoding', 'gzip,deflate,sdch');
 1417          $this->assertEquals(array(), $request->getEncodings()); // testing caching
 1418  
 1419          $request = new Request();
 1420:         $request->headers->set('Accept-Encoding', 'gzip,deflate,sdch');
 1421          $this->assertEquals(array('gzip', 'deflate', 'sdch'), $request->getEncodings());
 1422  
 1423          $request = new Request();
 1424:         $request->headers->set('Accept-Encoding', 'gzip;q=0.4,deflate;q=0.9,compress;q=0.7');
 1425          $this->assertEquals(array('deflate', 'compress', 'gzip'), $request->getEncodings());
 1426      }
 ....
 1430          $request = new Request();
 1431          $this->assertEquals(array(), $request->getAcceptableContentTypes());
 1432:         $request->headers->set('Accept', 'application/vnd.wap.wmlscriptc, text/vnd.wap.wml, application/vnd.wap.xhtml+xml, application/xhtml+xml, text/html, multipart/mixed, */*');
 1433          $this->assertEquals(array(), $request->getAcceptableContentTypes()); // testing caching
 1434  
 1435          $request = new Request();
 1436:         $request->headers->set('Accept', 'application/vnd.wap.wmlscriptc, text/vnd.wap.wml, application/vnd.wap.xhtml+xml, application/xhtml+xml, text/html, multipart/mixed, */*');
 1437          $this->assertEquals(array('application/vnd.wap.wmlscriptc', 'text/vnd.wap.wml', 'application/vnd.wap.xhtml+xml', 'application/xhtml+xml', 'text/html', 'multipart/mixed', '*/*'), $request->getAcceptableContentTypes());
 1438      }
 ....
 1444  
 1445          $request = new Request();
 1446:         $request->headers->set('Accept-language', 'zh, en-us; q=0.8, en; q=0.6');
 1447          $this->assertEquals(array('zh', 'en_US', 'en'), $request->getLanguages());
 1448          $this->assertEquals(array('zh', 'en_US', 'en'), $request->getLanguages());
 1449  
 1450          $request = new Request();
 1451:         $request->headers->set('Accept-language', 'zh, en-us; q=0.6, en; q=0.8');
 1452          $this->assertEquals(array('zh', 'en', 'en_US'), $request->getLanguages()); // Test out of order qvalues
 1453  
 1454          $request = new Request();
 1455:         $request->headers->set('Accept-language', 'zh, en, en-us');
 1456          $this->assertEquals(array('zh', 'en', 'en_US'), $request->getLanguages()); // Test equal weighting without qvalues
 1457  
 1458          $request = new Request();
 1459:         $request->headers->set('Accept-language', 'zh; q=0.6, en, en-us; q=0.6');
 1460          $this->assertEquals(array('en', 'zh', 'en_US'), $request->getLanguages()); // Test equal weighting with qvalues
 1461  
 1462          $request = new Request();
 1463:         $request->headers->set('Accept-language', 'zh, i-cherokee; q=0.6');
 1464          $this->assertEquals(array('zh', 'cherokee'), $request->getLanguages());
 1465      }
 ....
 1523          $request = new Request();
 1524  
 1525:         $request->headers->set('Accept-language', 'zh, en-us; q=0.8, en; q=0.6');
 1526          $request->cookies->set('Foo', 'Bar');
 1527  
 ....
 1686  
 1687          if ($trustedProxies) {
 1688:             Request::setTrustedProxies($trustedProxies, Request::HEADER_X_FORWARDED_ALL);
 1689          }
 1690  
 ....
 1705  
 1706          if ($trustedProxies) {
 1707:             Request::setTrustedProxies($trustedProxies, Request::HEADER_FORWARDED);
 1708          }
 1709  
 ....
 1717          $request = Request::create('http://example.com/');
 1718          $request->server->set('REMOTE_ADDR', '3.3.3.3');
 1719:         $request->headers->set('X_FORWARDED_FOR', '1.1.1.1, 2.2.2.2');
 1720:         $request->headers->set('X_FORWARDED_HOST', 'foo.example.com:1234, real.example.com:8080');
 1721:         $request->headers->set('X_FORWARDED_PROTO', 'https');
 1722:         $request->headers->set('X_FORWARDED_PORT', 443);
 1723  
 1724          // no trusted proxies
 ....
 1729  
 1730          // disabling proxy trusting
 1731:         Request::setTrustedProxies(array(), Request::HEADER_X_FORWARDED_ALL);
 1732          $this->assertEquals('3.3.3.3', $request->getClientIp());
 1733          $this->assertEquals('example.com', $request->getHost());
 ....
 1736  
 1737          // request is forwarded by a non-trusted proxy
 1738:         Request::setTrustedProxies(array('2.2.2.2'), Request::HEADER_X_FORWARDED_ALL);
 1739          $this->assertEquals('3.3.3.3', $request->getClientIp());
 1740          $this->assertEquals('example.com', $request->getHost());
 ....
 1743  
 1744          // trusted proxy via setTrustedProxies()
 1745:         Request::setTrustedProxies(array('3.3.3.3', '2.2.2.2'), Request::HEADER_X_FORWARDED_ALL);
 1746          $this->assertEquals('1.1.1.1', $request->getClientIp());
 1747          $this->assertEquals('foo.example.com', $request->getHost());
 ....
 1750  
 1751          // trusted proxy via setTrustedProxies()
 1752:         Request::setTrustedProxies(array('3.3.3.4', '2.2.2.2'), Request::HEADER_X_FORWARDED_ALL);
 1753          $this->assertEquals('3.3.3.3', $request->getClientIp());
 1754          $this->assertEquals('example.com', $request->getHost());
 ....
 1756          $this->assertFalse($request->isSecure());
 1757  
 1758:         // check various X_FORWARDED_PROTO header values
 1759:         Request::setTrustedProxies(array('3.3.3.3', '2.2.2.2'), Request::HEADER_X_FORWARDED_ALL);
 1760:         $request->headers->set('X_FORWARDED_PROTO', 'ssl');
 1761          $this->assertTrue($request->isSecure());
 1762  
 1763:         $request->headers->set('X_FORWARDED_PROTO', 'https, http');
 1764          $this->assertTrue($request->isSecure());
 1765      }
 ....
 1767      /**
 1768       * @group legacy
 1769:      * @expectedDeprecation The "Symfony\Component\HttpFoundation\Request::setTrustedHeaderName()" method is deprecated since Symfony 3.3 and will be removed in 4.0. Use the $trustedHeaderSet argument of the Request::setTrustedProxies() method instead.
 1770       */
 1771      public function testLegacyTrustedProxies()
 ....
 1773          $request = Request::create('http://example.com/');
 1774          $request->server->set('REMOTE_ADDR', '3.3.3.3');
 1775:         $request->headers->set('X_FORWARDED_FOR', '1.1.1.1, 2.2.2.2');
 1776:         $request->headers->set('X_FORWARDED_HOST', 'foo.example.com, real.example.com:8080');
 1777:         $request->headers->set('X_FORWARDED_PROTO', 'https');
 1778:         $request->headers->set('X_FORWARDED_PORT', 443);
 1779:         $request->headers->set('X_MY_FOR', '3.3.3.3, 4.4.4.4');
 1780:         $request->headers->set('X_MY_HOST', 'my.example.com');
 1781:         $request->headers->set('X_MY_PROTO', 'http');
 1782:         $request->headers->set('X_MY_PORT', 81);
 1783  
 1784:         Request::setTrustedProxies(array('3.3.3.3', '2.2.2.2'), Request::HEADER_X_FORWARDED_ALL);
 1785  
 1786:         // custom header names
 1787:         Request::setTrustedHeaderName(Request::HEADER_CLIENT_IP, 'X_MY_FOR');
 1788:         Request::setTrustedHeaderName(Request::HEADER_CLIENT_HOST, 'X_MY_HOST');
 1789:         Request::setTrustedHeaderName(Request::HEADER_CLIENT_PORT, 'X_MY_PORT');
 1790:         Request::setTrustedHeaderName(Request::HEADER_CLIENT_PROTO, 'X_MY_PROTO');
 1791          $this->assertEquals('4.4.4.4', $request->getClientIp());
 1792          $this->assertEquals('my.example.com', $request->getHost());
 ....
 1794          $this->assertFalse($request->isSecure());
 1795  
 1796:         // disabling via empty header names
 1797:         Request::setTrustedHeaderName(Request::HEADER_CLIENT_IP, null);
 1798:         Request::setTrustedHeaderName(Request::HEADER_CLIENT_HOST, null);
 1799:         Request::setTrustedHeaderName(Request::HEADER_CLIENT_PORT, null);
 1800:         Request::setTrustedHeaderName(Request::HEADER_CLIENT_PROTO, null);
 1801          $this->assertEquals('3.3.3.3', $request->getClientIp());
 1802          $this->assertEquals('example.com', $request->getHost());
 ....
 1805  
 1806          //reset
 1807:         Request::setTrustedHeaderName(Request::HEADER_FORWARDED, 'FORWARDED');
 1808:         Request::setTrustedHeaderName(Request::HEADER_CLIENT_IP, 'X_FORWARDED_FOR');
 1809:         Request::setTrustedHeaderName(Request::HEADER_CLIENT_HOST, 'X_FORWARDED_HOST');
 1810:         Request::setTrustedHeaderName(Request::HEADER_CLIENT_PORT, 'X_FORWARDED_PORT');
 1811:         Request::setTrustedHeaderName(Request::HEADER_CLIENT_PROTO, 'X_FORWARDED_PROTO');
 1812      }
 1813  
 ....
 1816          $request = Request::create('http://example.com/');
 1817          $request->server->set('REMOTE_ADDR', '3.3.3.3');
 1818:         $request->headers->set('FORWARDED', 'for=1.1.1.1, host=foo.example.com:8080, proto=https, for=2.2.2.2, host=real.example.com:8080');
 1819  
 1820          // no trusted proxies
 ....
 1825  
 1826          // disabling proxy trusting
 1827:         Request::setTrustedProxies(array(), Request::HEADER_FORWARDED);
 1828          $this->assertEquals('3.3.3.3', $request->getClientIp());
 1829          $this->assertEquals('example.com', $request->getHost());
 ....
 1832  
 1833          // request is forwarded by a non-trusted proxy
 1834:         Request::setTrustedProxies(array('2.2.2.2'), Request::HEADER_FORWARDED);
 1835          $this->assertEquals('3.3.3.3', $request->getClientIp());
 1836          $this->assertEquals('example.com', $request->getHost());
 ....
 1839  
 1840          // trusted proxy via setTrustedProxies()
 1841:         Request::setTrustedProxies(array('3.3.3.3', '2.2.2.2'), Request::HEADER_FORWARDED);
 1842          $this->assertEquals('1.1.1.1', $request->getClientIp());
 1843          $this->assertEquals('foo.example.com', $request->getHost());
 ....
 1846  
 1847          // trusted proxy via setTrustedProxies()
 1848:         Request::setTrustedProxies(array('3.3.3.4', '2.2.2.2'), Request::HEADER_FORWARDED);
 1849          $this->assertEquals('3.3.3.3', $request->getClientIp());
 1850          $this->assertEquals('example.com', $request->getHost());
 ....
 1852          $this->assertFalse($request->isSecure());
 1853  
 1854:         // check various X_FORWARDED_PROTO header values
 1855:         Request::setTrustedProxies(array('3.3.3.3', '2.2.2.2'), Request::HEADER_FORWARDED);
 1856:         $request->headers->set('FORWARDED', 'proto=ssl');
 1857          $this->assertTrue($request->isSecure());
 1858  
 1859:         $request->headers->set('FORWARDED', 'proto=https, proto=http');
 1860          $this->assertTrue($request->isSecure());
 1861      }
 ....
 1865       * @expectedException \InvalidArgumentException
 1866       */
 1867:     public function testSetTrustedProxiesInvalidHeaderName()
 1868      {
 1869          Request::create('http://example.com/');
 1870:         Request::setTrustedHeaderName('bogus name', 'X_MY_FOR');
 1871      }
 1872  
 ....
 1875       * @expectedException \InvalidArgumentException
 1876       */
 1877:     public function testGetTrustedProxiesInvalidHeaderName()
 1878      {
 1879          Request::create('http://example.com/');
 1880:         Request::getTrustedHeaderName('bogus name');
 1881      }
 1882  
 ....
 1884       * @dataProvider iisRequestUriProvider
 1885       */
 1886:     public function testIISRequestUri($headers, $server, $expectedRequestUri)
 1887      {
 1888          $request = new Request();
 1889:         $request->headers->replace($headers);
 1890          $request->server->replace($server);
 1891  
 ....
 1976  
 1977          // no trusted host set -> no host check
 1978:         $request->headers->set('host', 'evil.com');
 1979          $this->assertEquals('evil.com', $request->getHost());
 1980  
 ....
 1983  
 1984          // untrusted host
 1985:         $request->headers->set('host', 'evil.com');
 1986          try {
 1987              $request->getHost();
 ....
 1992  
 1993          // trusted hosts
 1994:         $request->headers->set('host', 'trusted.com');
 1995          $this->assertEquals('trusted.com', $request->getHost());
 1996          $this->assertEquals(80, $request->getPort());
 1997  
 1998          $request->server->set('HTTPS', true);
 1999:         $request->headers->set('host', 'trusted.com');
 2000          $this->assertEquals('trusted.com', $request->getHost());
 2001          $this->assertEquals(443, $request->getPort());
 2002          $request->server->set('HTTPS', false);
 2003  
 2004:         $request->headers->set('host', 'trusted.com:8000');
 2005          $this->assertEquals('trusted.com', $request->getHost());
 2006          $this->assertEquals(8000, $request->getPort());
 2007  
 2008:         $request->headers->set('host', 'subdomain.trusted.com');
 2009          $this->assertEquals('subdomain.trusted.com', $request->getHost());
 2010  
 ....
 2032  
 2033          $request = Request::create('/');
 2034:         $request->headers->set('host', $host);
 2035          $this->assertEquals($host, $request->getHost());
 2036          $this->assertLessThan(5, microtime(true) - $start);
 ....
 2043      {
 2044          $request = Request::create('/');
 2045:         $request->headers->set('host', $host);
 2046  
 2047          if ($isValid) {
 ....
 2096      {
 2097          return array(
 2098:             array('HEAD', true),
 2099              array('GET', true),
 2100              array('POST', false),
 ....
 2122      {
 2123          return array(
 2124:             array('HEAD', true),
 2125              array('GET', true),
 2126              array('POST', false),
 ....
 2159      {
 2160          return array(
 2161:             array('HEAD', true),
 2162              array('GET', true),
 2163              array('POST', false),
 ....
 2175       * @group legacy
 2176       */
 2177:     public function testGetTrustedHeaderName()
 2178      {
 2179:         Request::setTrustedProxies(array('8.8.8.8'), Request::HEADER_X_FORWARDED_ALL);
 2180  
 2181:         $this->assertNull(Request::getTrustedHeaderName(Request::HEADER_FORWARDED));
 2182:         $this->assertSame('X_FORWARDED_FOR', Request::getTrustedHeaderName(Request::HEADER_CLIENT_IP));
 2183:         $this->assertSame('X_FORWARDED_HOST', Request::getTrustedHeaderName(Request::HEADER_CLIENT_HOST));
 2184:         $this->assertSame('X_FORWARDED_PORT', Request::getTrustedHeaderName(Request::HEADER_CLIENT_PORT));
 2185:         $this->assertSame('X_FORWARDED_PROTO', Request::getTrustedHeaderName(Request::HEADER_CLIENT_PROTO));
 2186  
 2187:         Request::setTrustedProxies(array('8.8.8.8'), Request::HEADER_FORWARDED);
 2188  
 2189:         $this->assertSame('FORWARDED', Request::getTrustedHeaderName(Request::HEADER_FORWARDED));
 2190:         $this->assertNull(Request::getTrustedHeaderName(Request::HEADER_CLIENT_IP));
 2191:         $this->assertNull(Request::getTrustedHeaderName(Request::HEADER_CLIENT_HOST));
 2192:         $this->assertNull(Request::getTrustedHeaderName(Request::HEADER_CLIENT_PORT));
 2193:         $this->assertNull(Request::getTrustedHeaderName(Request::HEADER_CLIENT_PROTO));
 2194  
 2195:         Request::setTrustedHeaderName(Request::HEADER_FORWARDED, 'A');
 2196:         Request::setTrustedHeaderName(Request::HEADER_CLIENT_IP, 'B');
 2197:         Request::setTrustedHeaderName(Request::HEADER_CLIENT_HOST, 'C');
 2198:         Request::setTrustedHeaderName(Request::HEADER_CLIENT_PORT, 'D');
 2199:         Request::setTrustedHeaderName(Request::HEADER_CLIENT_PROTO, 'E');
 2200  
 2201:         Request::setTrustedProxies(array('8.8.8.8'), Request::HEADER_FORWARDED);
 2202  
 2203:         $this->assertSame('A', Request::getTrustedHeaderName(Request::HEADER_FORWARDED));
 2204:         $this->assertNull(Request::getTrustedHeaderName(Request::HEADER_CLIENT_IP));
 2205:         $this->assertNull(Request::getTrustedHeaderName(Request::HEADER_CLIENT_HOST));
 2206:         $this->assertNull(Request::getTrustedHeaderName(Request::HEADER_CLIENT_PORT));
 2207:         $this->assertNull(Request::getTrustedHeaderName(Request::HEADER_CLIENT_PROTO));
 2208  
 2209:         Request::setTrustedProxies(array('8.8.8.8'), Request::HEADER_X_FORWARDED_ALL);
 2210  
 2211:         $this->assertNull(Request::getTrustedHeaderName(Request::HEADER_FORWARDED));
 2212:         $this->assertSame('B', Request::getTrustedHeaderName(Request::HEADER_CLIENT_IP));
 2213:         $this->assertSame('C', Request::getTrustedHeaderName(Request::HEADER_CLIENT_HOST));
 2214:         $this->assertSame('D', Request::getTrustedHeaderName(Request::HEADER_CLIENT_PORT));
 2215:         $this->assertSame('E', Request::getTrustedHeaderName(Request::HEADER_CLIENT_PROTO));
 2216  
 2217:         Request::setTrustedProxies(array('8.8.8.8'), Request::HEADER_FORWARDED);
 2218  
 2219:         $this->assertSame('A', Request::getTrustedHeaderName(Request::HEADER_FORWARDED));
 2220  
 2221          //reset
 2222:         Request::setTrustedHeaderName(Request::HEADER_FORWARDED, 'FORWARDED');
 2223:         Request::setTrustedHeaderName(Request::HEADER_CLIENT_IP, 'X_FORWARDED_FOR');
 2224:         Request::setTrustedHeaderName(Request::HEADER_CLIENT_HOST, 'X_FORWARDED_HOST');
 2225:         Request::setTrustedHeaderName(Request::HEADER_CLIENT_PORT, 'X_FORWARDED_PORT');
 2226:         Request::setTrustedHeaderName(Request::HEADER_CLIENT_PROTO, 'X_FORWARDED_PROTO');
 2227      }
 2228  
 ....
 2239          $request->server->set('SERVER_PROTOCOL', $serverProtocol);
 2240          $request->server->set('REMOTE_ADDR', '1.1.1.1');
 2241:         $request->headers->set('Via', $via);
 2242  
 2243          $this->assertSame($expected, $request->getProtocolVersion());

/home/genis/Proyectos/ProyectoXat/vendor/symfony/http-foundation/Tests/ResponseHeaderBagTest.php:
   13  
   14  use PHPUnit\Framework\TestCase;
   15: use Symfony\Component\HttpFoundation\ResponseHeaderBag;
   16  use Symfony\Component\HttpFoundation\Cookie;
   17  
   ..
   19   * @group time-sensitive
   20   */
   21: class ResponseHeaderBagTest extends TestCase
   22  {
   23      public function testAllPreserveCase()
   24      {
   25:         $headers = array(
   26              'fOo' => 'BAR',
   27              'ETag' => 'xyzzy',
   ..
   33          );
   34  
   35:         $bag = new ResponseHeaderBag($headers);
   36          $allPreservedCase = $bag->allPreserveCase();
   37  
   38:         foreach (array_keys($headers) as $headerName) {
   39:             $this->assertArrayHasKey($headerName, $allPreservedCase, '->allPreserveCase() gets all input keys in original case');
   40          }
   41      }
   42  
   43:     public function testCacheControlHeader()
   44      {
   45:         $bag = new ResponseHeaderBag(array());
   46          $this->assertEquals('no-cache, private', $bag->get('Cache-Control'));
   47          $this->assertTrue($bag->hasCacheControlDirective('no-cache'));
   48  
   49:         $bag = new ResponseHeaderBag(array('Cache-Control' => 'public'));
   50          $this->assertEquals('public', $bag->get('Cache-Control'));
   51          $this->assertTrue($bag->hasCacheControlDirective('public'));
   52  
   53:         $bag = new ResponseHeaderBag(array('ETag' => 'abcde'));
   54          $this->assertEquals('private, must-revalidate', $bag->get('Cache-Control'));
   55          $this->assertTrue($bag->hasCacheControlDirective('private'));
   ..
   57          $this->assertFalse($bag->hasCacheControlDirective('max-age'));
   58  
   59:         $bag = new ResponseHeaderBag(array('Expires' => 'Wed, 16 Feb 2011 14:17:43 GMT'));
   60          $this->assertEquals('private, must-revalidate', $bag->get('Cache-Control'));
   61  
   62:         $bag = new ResponseHeaderBag(array(
   63              'Expires' => 'Wed, 16 Feb 2011 14:17:43 GMT',
   64              'Cache-Control' => 'max-age=3600',
   ..
   66          $this->assertEquals('max-age=3600, private', $bag->get('Cache-Control'));
   67  
   68:         $bag = new ResponseHeaderBag(array('Last-Modified' => 'abcde'));
   69          $this->assertEquals('private, must-revalidate', $bag->get('Cache-Control'));
   70  
   71:         $bag = new ResponseHeaderBag(array('Etag' => 'abcde', 'Last-Modified' => 'abcde'));
   72          $this->assertEquals('private, must-revalidate', $bag->get('Cache-Control'));
   73  
   74:         $bag = new ResponseHeaderBag(array('cache-control' => 'max-age=100'));
   75          $this->assertEquals('max-age=100, private', $bag->get('Cache-Control'));
   76  
   77:         $bag = new ResponseHeaderBag(array('cache-control' => 's-maxage=100'));
   78          $this->assertEquals('s-maxage=100', $bag->get('Cache-Control'));
   79  
   80:         $bag = new ResponseHeaderBag(array('cache-control' => 'private, max-age=100'));
   81          $this->assertEquals('max-age=100, private', $bag->get('Cache-Control'));
   82  
   83:         $bag = new ResponseHeaderBag(array('cache-control' => 'public, max-age=100'));
   84          $this->assertEquals('max-age=100, public', $bag->get('Cache-Control'));
   85  
   86:         $bag = new ResponseHeaderBag();
   87          $bag->set('Last-Modified', 'abcde');
   88          $this->assertEquals('private, must-revalidate', $bag->get('Cache-Control'));
   89  
   90:         $bag = new ResponseHeaderBag();
   91          $bag->set('Cache-Control', array('public', 'must-revalidate'));
   92          $this->assertCount(1, $bag->get('Cache-Control', null, false));
   93          $this->assertEquals('must-revalidate, public', $bag->get('Cache-Control'));
   94  
   95:         $bag = new ResponseHeaderBag();
   96          $bag->set('Cache-Control', 'public');
   97          $bag->set('Cache-Control', 'must-revalidate', false);
   ..
  102      public function testCacheControlClone()
  103      {
  104:         $headers = array('foo' => 'bar');
  105:         $bag1 = new ResponseHeaderBag($headers);
  106:         $bag2 = new ResponseHeaderBag($bag1->allPreserveCase());
  107          $this->assertEquals($bag1->allPreserveCase(), $bag2->allPreserveCase());
  108      }
  109  
  110:     public function testToStringIncludesCookieHeaders()
  111      {
  112:         $bag = new ResponseHeaderBag(array());
  113          $bag->setCookie(new Cookie('foo', 'bar'));
  114  
  115:         $this->assertSetCookieHeader('foo=bar; path=/; httponly', $bag);
  116  
  117          $bag->clearCookie('foo');
  118  
  119:         $this->assertSetCookieHeader('foo=deleted; expires='.gmdate('D, d-M-Y H:i:s T', time() - 31536001).'; max-age=-31536001; path=/; httponly', $bag);
  120      }
  121  
  122      public function testClearCookieSecureNotHttpOnly()
  123      {
  124:         $bag = new ResponseHeaderBag(array());
  125  
  126          $bag->clearCookie('foo', '/', null, true, false);
  127  
  128:         $this->assertSetCookieHeader('foo=deleted; expires='.gmdate('D, d-M-Y H:i:s T', time() - 31536001).'; max-age=-31536001; path=/; secure', $bag);
  129      }
  130  
  131      public function testReplace()
  132      {
  133:         $bag = new ResponseHeaderBag(array());
  134          $this->assertEquals('no-cache, private', $bag->get('Cache-Control'));
  135          $this->assertTrue($bag->hasCacheControlDirective('no-cache'));
  ...
  142      public function testReplaceWithRemove()
  143      {
  144:         $bag = new ResponseHeaderBag(array());
  145          $this->assertEquals('no-cache, private', $bag->get('Cache-Control'));
  146          $this->assertTrue($bag->hasCacheControlDirective('no-cache'));
  ...
  154      public function testCookiesWithSameNames()
  155      {
  156:         $bag = new ResponseHeaderBag();
  157          $bag->setCookie(new Cookie('foo', 'bar', 0, '/path/foo', 'foo.bar'));
  158          $bag->setCookie(new Cookie('foo', 'bar', 0, '/path/bar', 'foo.bar'));
  ...
  169          ), $bag->get('set-cookie', null, false));
  170  
  171:         $this->assertSetCookieHeader('foo=bar; path=/path/foo; domain=foo.bar; httponly', $bag);
  172:         $this->assertSetCookieHeader('foo=bar; path=/path/bar; domain=foo.bar; httponly', $bag);
  173:         $this->assertSetCookieHeader('foo=bar; path=/path/bar; domain=bar.foo; httponly', $bag);
  174:         $this->assertSetCookieHeader('foo=bar; path=/; httponly', $bag);
  175  
  176:         $cookies = $bag->getCookies(ResponseHeaderBag::COOKIES_ARRAY);
  177  
  178          $this->assertArrayHasKey('foo', $cookies['foo.bar']['/path/foo']);
  ...
  184      public function testRemoveCookie()
  185      {
  186:         $bag = new ResponseHeaderBag();
  187          $this->assertFalse($bag->has('set-cookie'));
  188  
  ...
  191          $this->assertTrue($bag->has('set-cookie'));
  192  
  193:         $cookies = $bag->getCookies(ResponseHeaderBag::COOKIES_ARRAY);
  194          $this->assertArrayHasKey('/path/foo', $cookies['foo.bar']);
  195  
  ...
  197          $this->assertTrue($bag->has('set-cookie'));
  198  
  199:         $cookies = $bag->getCookies(ResponseHeaderBag::COOKIES_ARRAY);
  200          $this->assertArrayNotHasKey('/path/foo', $cookies['foo.bar']);
  201  
  ...
  203          $this->assertFalse($bag->has('set-cookie'));
  204  
  205:         $cookies = $bag->getCookies(ResponseHeaderBag::COOKIES_ARRAY);
  206          $this->assertArrayNotHasKey('foo.bar', $cookies);
  207      }
  ...
  209      public function testRemoveCookieWithNullRemove()
  210      {
  211:         $bag = new ResponseHeaderBag();
  212          $bag->setCookie(new Cookie('foo', 'bar', 0));
  213          $bag->setCookie(new Cookie('bar', 'foo', 0));
  214  
  215:         $cookies = $bag->getCookies(ResponseHeaderBag::COOKIES_ARRAY);
  216          $this->assertArrayHasKey('/', $cookies['']);
  217  
  218          $bag->removeCookie('foo', null);
  219:         $cookies = $bag->getCookies(ResponseHeaderBag::COOKIES_ARRAY);
  220          $this->assertArrayNotHasKey('foo', $cookies['']['/']);
  221  
  222          $bag->removeCookie('bar', null);
  223:         $cookies = $bag->getCookies(ResponseHeaderBag::COOKIES_ARRAY);
  224          $this->assertFalse(isset($cookies['']['/']['bar']));
  225      }
  226  
  227:     public function testSetCookieHeader()
  228      {
  229:         $bag = new ResponseHeaderBag();
  230          $bag->set('set-cookie', 'foo=bar');
  231          $this->assertEquals(array(new Cookie('foo', 'bar', 0, '/', null, false, false, true)), $bag->getCookies());
  ...
  246      public function testGetCookiesWithInvalidArgument()
  247      {
  248:         $bag = new ResponseHeaderBag();
  249  
  250          $bag->getCookies('invalid_argument');
  ...
  256      public function testMakeDispositionInvalidDisposition()
  257      {
  258:         $headers = new ResponseHeaderBag();
  259  
  260:         $headers->makeDisposition('invalid', 'foo.html');
  261      }
  262  
  ...
  266      public function testMakeDisposition($disposition, $filename, $filenameFallback, $expected)
  267      {
  268:         $headers = new ResponseHeaderBag();
  269  
  270:         $this->assertEquals($expected, $headers->makeDisposition($disposition, $filename, $filenameFallback));
  271      }
  272  
  273:     public function testToStringDoesntMessUpHeaders()
  274      {
  275:         $headers = new ResponseHeaderBag();
  276  
  277:         $headers->set('Location', 'http://www.symfony.com');
  278:         $headers->set('Content-type', 'text/html');
  279  
  280:         (string) $headers;
  281  
  282:         $allHeaders = $headers->allPreserveCase();
  283:         $this->assertEquals(array('http://www.symfony.com'), $allHeaders['Location']);
  284:         $this->assertEquals(array('text/html'), $allHeaders['Content-type']);
  285      }
  286  
  ...
  303      public function testMakeDispositionFail($disposition, $filename)
  304      {
  305:         $headers = new ResponseHeaderBag();
  306  
  307:         $headers->makeDisposition($disposition, $filename);
  308      }
  309  
  ...
  320      }
  321  
  322:     public function testDateHeaderAddedOnCreation()
  323      {
  324          $now = time();
  325  
  326:         $bag = new ResponseHeaderBag();
  327          $this->assertTrue($bag->has('Date'));
  328  
  ...
  330      }
  331  
  332:     public function testDateHeaderCanBeSetOnCreation()
  333      {
  334          $someDate = 'Thu, 23 Mar 2017 09:15:12 GMT';
  335:         $bag = new ResponseHeaderBag(array('Date' => $someDate));
  336  
  337          $this->assertEquals($someDate, $bag->get('Date'));
  338      }
  339  
  340:     public function testDateHeaderWillBeRecreatedWhenRemoved()
  341      {
  342          $someDate = 'Thu, 23 Mar 2017 09:15:12 GMT';
  343:         $bag = new ResponseHeaderBag(array('Date' => $someDate));
  344          $bag->remove('Date');
  345  
  346:         // a (new) Date header is still present
  347          $this->assertTrue($bag->has('Date'));
  348          $this->assertNotEquals($someDate, $bag->get('Date'));
  349      }
  350  
  351:     public function testDateHeaderWillBeRecreatedWhenHeadersAreReplaced()
  352      {
  353:         $bag = new ResponseHeaderBag();
  354          $bag->replace(array());
  355  
  ...
  357      }
  358  
  359:     private function assertSetCookieHeader($expected, ResponseHeaderBag $actual)
  360      {
  361          $this->assertRegExp('#^Set-Cookie:\s+'.preg_quote($expected, '#').'$#m', str_replace("\r\n", "\n", (string) $actual));

/home/genis/Proyectos/ProyectoXat/vendor/symfony/http-foundation/Tests/ResponseTest.php:
   26          $this->assertInstanceOf('Symfony\Component\HttpFoundation\Response', $response);
   27          $this->assertEquals(301, $response->getStatusCode());
   28:         $this->assertEquals('bar', $response->headers->get('foo'));
   29      }
   30  
   ..
   44      }
   45  
   46:     public function testSendHeaders()
   47      {
   48          $response = new Response();
   49:         $headers = $response->sendHeaders();
   50:         $this->assertObjectHasAttribute('headers', $headers);
   51:         $this->assertObjectHasAttribute('content', $headers);
   52:         $this->assertObjectHasAttribute('version', $headers);
   53:         $this->assertObjectHasAttribute('statusCode', $headers);
   54:         $this->assertObjectHasAttribute('statusText', $headers);
   55:         $this->assertObjectHasAttribute('charset', $headers);
   56      }
   57  
   ..
   60          $response = new Response();
   61          $responseSend = $response->send();
   62:         $this->assertObjectHasAttribute('headers', $responseSend);
   63          $this->assertObjectHasAttribute('content', $responseSend);
   64          $this->assertObjectHasAttribute('version', $responseSend);
   ..
   92      {
   93          $response = new Response();
   94:         $response->headers->set('cache-control', 'private');
   95          $this->assertFalse($response->isCacheable());
   96      }
   ..
  109      }
  110  
  111:     public function testMustRevalidateWithMustRevalidateCacheControlHeader()
  112      {
  113          $response = new Response();
  114:         $response->headers->set('cache-control', 'must-revalidate');
  115  
  116          $this->assertTrue($response->mustRevalidate());
  117      }
  118  
  119:     public function testMustRevalidateWithProxyRevalidateCacheControlHeader()
  120      {
  121          $response = new Response();
  122:         $response->headers->set('cache-control', 'proxy-revalidate');
  123  
  124          $this->assertTrue($response->mustRevalidate());
  ...
  129          $response = new Response();
  130          $modified = $response->setNotModified();
  131:         $this->assertObjectHasAttribute('headers', $modified);
  132          $this->assertObjectHasAttribute('content', $modified);
  133          $this->assertObjectHasAttribute('version', $modified);
  ...
  166  
  167          $request = new Request();
  168:         $request->headers->set('If-Modified-Since', $modified);
  169  
  170          $response = new Response();
  171  
  172:         $response->headers->set('Last-Modified', $modified);
  173          $this->assertTrue($response->isNotModified($request));
  174  
  175:         $response->headers->set('Last-Modified', $before);
  176          $this->assertTrue($response->isNotModified($request));
  177  
  178:         $response->headers->set('Last-Modified', $after);
  179          $this->assertFalse($response->isNotModified($request));
  180  
  181:         $response->headers->set('Last-Modified', '');
  182          $this->assertFalse($response->isNotModified($request));
  183      }
  ...
  189  
  190          $request = new Request();
  191:         $request->headers->set('if_none_match', sprintf('%s, %s, %s', $etagOne, $etagTwo, 'etagThree'));
  192  
  193          $response = new Response();
  194  
  195:         $response->headers->set('ETag', $etagOne);
  196          $this->assertTrue($response->isNotModified($request));
  197  
  198:         $response->headers->set('ETag', $etagTwo);
  199          $this->assertTrue($response->isNotModified($request));
  200  
  201:         $response->headers->set('ETag', '');
  202          $this->assertFalse($response->isNotModified($request));
  203      }
  ...
  211  
  212          $request = new Request();
  213:         $request->headers->set('if_none_match', sprintf('%s, %s', $etag, 'etagThree'));
  214:         $request->headers->set('If-Modified-Since', $modified);
  215  
  216          $response = new Response();
  217  
  218:         $response->headers->set('ETag', $etag);
  219:         $response->headers->set('Last-Modified', $after);
  220          $this->assertFalse($response->isNotModified($request));
  221  
  222:         $response->headers->set('ETag', 'non-existent-etag');
  223:         $response->headers->set('Last-Modified', $before);
  224          $this->assertFalse($response->isNotModified($request));
  225  
  226:         $response->headers->set('ETag', $etag);
  227:         $response->headers->set('Last-Modified', $modified);
  228          $this->assertTrue($response->isNotModified($request));
  229      }
  ...
  235  
  236          $request = new Request();
  237:         $request->headers->set('if_none_match', sprintf('%s, %s', $etag, 'etagThree'));
  238:         $request->headers->set('If-Modified-Since', $modified);
  239  
  240          $response = new Response();
  241  
  242:         $response->headers->set('ETag', $etag);
  243          $this->assertTrue($response->isNotModified($request));
  244  
  245:         $response->headers->set('ETag', 'non-existent-etag');
  246          $this->assertFalse($response->isNotModified($request));
  247      }
  ...
  264          $response = new Response('', 200, array('Date' => $oneHourAgo->format(DATE_RFC2822)));
  265          $date = $response->getDate();
  266:         $this->assertEquals($oneHourAgo->getTimestamp(), $date->getTimestamp(), '->getDate() returns the Date header if present');
  267  
  268          $response = new Response();
  269          $date = $response->getDate();
  270:         $this->assertEquals(time(), $date->getTimestamp(), '->getDate() returns the current Date if no Date header present');
  271  
  272          $response = new Response('', 200, array('Date' => $this->createDateTimeOneHourAgo()->format(DATE_RFC2822)));
  273          $now = $this->createDateTimeNow();
  274:         $response->headers->set('Date', $now->format(DATE_RFC2822));
  275          $date = $response->getDate();
  276:         $this->assertEquals($now->getTimestamp(), $date->getTimestamp(), '->getDate() returns the date when the header has been modified');
  277  
  278          $response = new Response('', 200);
  279          $now = $this->createDateTimeNow();
  280:         $response->headers->remove('Date');
  281          $date = $response->getDate();
  282:         $this->assertEquals($now->getTimestamp(), $date->getTimestamp(), '->getDate() returns the current Date when the header has previously been removed');
  283      }
  284  
  ...
  286      {
  287          $response = new Response();
  288:         $response->headers->set('Cache-Control', 's-maxage=600, max-age=0');
  289          $this->assertEquals(600, $response->getMaxAge(), '->getMaxAge() uses s-maxage cache control directive when present');
  290  
  291          $response = new Response();
  292:         $response->headers->set('Cache-Control', 'max-age=600');
  293          $this->assertEquals(600, $response->getMaxAge(), '->getMaxAge() falls back to max-age when no s-maxage directive present');
  294  
  295          $response = new Response();
  296:         $response->headers->set('Cache-Control', 'must-revalidate');
  297:         $response->headers->set('Expires', $this->createDateTimeOneHourLater()->format(DATE_RFC2822));
  298          $this->assertEquals(3600, $response->getMaxAge(), '->getMaxAge() falls back to Expires when no max-age or s-maxage directive present');
  299  
  300          $response = new Response();
  301:         $response->headers->set('Cache-Control', 'must-revalidate');
  302:         $response->headers->set('Expires', -1);
  303          $this->assertEquals('Sat, 01 Jan 00 00:00:00 +0000', $response->getExpires()->format(DATE_RFC822));
  304  
  ...
  312          $response->setSharedMaxAge(20);
  313  
  314:         $cacheControl = $response->headers->get('Cache-Control');
  315          $this->assertEquals('public, s-maxage=20', $cacheControl);
  316      }
  ...
  319      {
  320          $response = new Response();
  321:         $response->headers->set('Cache-Control', 'max-age=100');
  322          $response->setPrivate();
  323:         $this->assertEquals(100, $response->headers->getCacheControlDirective('max-age'), '->isPrivate() adds the private Cache-Control directive when set to true');
  324:         $this->assertTrue($response->headers->getCacheControlDirective('private'), '->isPrivate() adds the private Cache-Control directive when set to true');
  325  
  326          $response = new Response();
  327:         $response->headers->set('Cache-Control', 'public, max-age=100');
  328          $response->setPrivate();
  329:         $this->assertEquals(100, $response->headers->getCacheControlDirective('max-age'), '->isPrivate() adds the private Cache-Control directive when set to true');
  330:         $this->assertTrue($response->headers->getCacheControlDirective('private'), '->isPrivate() adds the private Cache-Control directive when set to true');
  331:         $this->assertFalse($response->headers->hasCacheControlDirective('public'), '->isPrivate() removes the public Cache-Control directive');
  332      }
  333  
  ...
  335      {
  336          $response = new Response();
  337:         $response->headers->set('Cache-Control', 'max-age=100');
  338          $response->expire();
  339:         $this->assertEquals(100, $response->headers->get('Age'), '->expire() sets the Age to max-age when present');
  340  
  341          $response = new Response();
  342:         $response->headers->set('Cache-Control', 'max-age=100, s-maxage=500');
  343          $response->expire();
  344:         $this->assertEquals(500, $response->headers->get('Age'), '->expire() sets the Age to s-maxage when both max-age and s-maxage are present');
  345  
  346          $response = new Response();
  347:         $response->headers->set('Cache-Control', 'max-age=5, s-maxage=500');
  348:         $response->headers->set('Age', '1000');
  349          $response->expire();
  350:         $this->assertEquals(1000, $response->headers->get('Age'), '->expire() does nothing when the response is already stale/expired');
  351  
  352          $response = new Response();
  353          $response->expire();
  354:         $this->assertFalse($response->headers->has('Age'), '->expire() does nothing when the response does not include freshness information');
  355  
  356          $response = new Response();
  357:         $response->headers->set('Expires', -1);
  358          $response->expire();
  359:         $this->assertNull($response->headers->get('Age'), '->expire() does not set the Age when the response is expired');
  360      }
  361  
  ...
  363      {
  364          $response = new Response();
  365:         $this->assertNull($response->getTtl(), '->getTtl() returns null when no Expires or Cache-Control headers are present');
  366  
  367          $response = new Response();
  368:         $response->headers->set('Expires', $this->createDateTimeOneHourLater()->format(DATE_RFC2822));
  369:         $this->assertEquals(3600, $response->getTtl(), '->getTtl() uses the Expires header when no max-age is present');
  370  
  371          $response = new Response();
  372:         $response->headers->set('Expires', $this->createDateTimeOneHourAgo()->format(DATE_RFC2822));
  373          $this->assertLessThan(0, $response->getTtl(), '->getTtl() returns negative values when Expires is in past');
  374  
  375          $response = new Response();
  376:         $response->headers->set('Expires', $response->getDate()->format(DATE_RFC2822));
  377:         $response->headers->set('Age', 0);
  378          $this->assertSame(0, $response->getTtl(), '->getTtl() correctly handles zero');
  379  
  380          $response = new Response();
  381:         $response->headers->set('Cache-Control', 'max-age=60');
  382          $this->assertEquals(60, $response->getTtl(), '->getTtl() uses Cache-Control max-age when present');
  383      }
  ...
  405      {
  406          $response = new Response();
  407:         $this->assertEquals(array(), $response->getVary(), '->getVary() returns an empty array if no Vary header is present');
  408  
  409          $response = new Response();
  410:         $response->headers->set('Vary', 'Accept-Language');
  411:         $this->assertEquals(array('Accept-Language'), $response->getVary(), '->getVary() parses a single header name value');
  412  
  413          $response = new Response();
  414:         $response->headers->set('Vary', 'Accept-Language User-Agent    X-Foo');
  415:         $this->assertEquals(array('Accept-Language', 'User-Agent', 'X-Foo'), $response->getVary(), '->getVary() parses multiple header name values separated by spaces');
  416  
  417          $response = new Response();
  418:         $response->headers->set('Vary', 'Accept-Language,User-Agent,    X-Foo');
  419:         $this->assertEquals(array('Accept-Language', 'User-Agent', 'X-Foo'), $response->getVary(), '->getVary() parses multiple header name values separated by commas');
  420  
  421          $vary = array('Accept-Language', 'User-Agent', 'X-foo');
  422  
  423          $response = new Response();
  424:         $response->headers->set('Vary', $vary);
  425:         $this->assertEquals($vary, $response->getVary(), '->getVary() parses multiple header name values in arrays');
  426  
  427          $response = new Response();
  428:         $response->headers->set('Vary', 'Accept-Language, User-Agent, X-foo');
  429:         $this->assertEquals($vary, $response->getVary(), '->getVary() parses multiple header name values in arrays');
  430      }
  431  
  ...
  437  
  438          $response->setVary('Accept-Language, User-Agent');
  439:         $this->assertEquals(array('Accept-Language', 'User-Agent'), $response->getVary(), '->setVary() replace the vary header by default');
  440  
  441          $response->setVary('X-Foo', false);
  442:         $this->assertEquals(array('Accept-Language', 'User-Agent', 'X-Foo'), $response->getVary(), '->setVary() doesn\'t wipe out earlier Vary headers if replace is set to false');
  443      }
  444  
  445      public function testDefaultContentType()
  446      {
  447:         $headerMock = $this->getMockBuilder('Symfony\Component\HttpFoundation\ResponseHeaderBag')->setMethods(array('set'))->getMock();
  448:         $headerMock->expects($this->at(0))
  449              ->method('set')
  450              ->with('Content-Type', 'text/html');
  451:         $headerMock->expects($this->at(1))
  452              ->method('set')
  453              ->with('Content-Type', 'text/html; charset=UTF-8');
  454  
  455          $response = new Response('foo');
  456:         $response->headers = $headerMock;
  457  
  458          $response->prepare(new Request());
  ...
  462      {
  463          $response = new Response();
  464:         $response->headers->set('Content-Type', 'text/css');
  465  
  466          // force fixContentType() to be called
  467          $response->prepare(new Request());
  468  
  469:         $this->assertEquals('text/css; charset=UTF-8', $response->headers->get('Content-Type'));
  470      }
  471  
  ...
  473      {
  474          $response = new Response('foo');
  475:         $response->headers->set('Content-Type', 'text/plain');
  476  
  477          $response->prepare(new Request());
  478  
  479:         $this->assertEquals('text/plain; charset=UTF-8', $response->headers->get('content-type'));
  480      }
  481  
  ...
  486          $response->prepare(new Request());
  487  
  488:         $this->assertEquals('text/html; charset=UTF-8', $response->headers->get('content-type'));
  489      }
  490  
  ...
  497          $response->prepare($request);
  498  
  499:         $this->assertEquals('application/json', $response->headers->get('content-type'));
  500      }
  501  
  502:     public function testPrepareRemovesContentForHeadRequests()
  503      {
  504          $response = new Response('foo');
  505:         $request = Request::create('/', 'HEAD');
  506  
  507          $length = 12345;
  508:         $response->headers->set('Content-Length', $length);
  509          $response->prepare($request);
  510  
  511          $this->assertEquals('', $response->getContent());
  512:         $this->assertEquals($length, $response->headers->get('Content-Length'), 'Content-Length should be as if it was GET; see RFC2616 14.13');
  513      }
  514  
  ...
  522          $response->prepare($request);
  523          $this->assertEquals('', $response->getContent());
  524:         $this->assertFalse($response->headers->has('Content-Type'));
  525:         $this->assertFalse($response->headers->has('Content-Type'));
  526  
  527          $response->setContent('content');
  ...
  529          $response->prepare($request);
  530          $this->assertEquals('', $response->getContent());
  531:         $this->assertFalse($response->headers->has('Content-Type'));
  532:         $this->assertFalse($response->headers->has('Content-Length'));
  533      }
  534  
  ...
  538          $request = Request::create('/');
  539  
  540:         $response->headers->set('Content-Length', 12345);
  541          $response->prepare($request);
  542:         $this->assertEquals(12345, $response->headers->get('Content-Length'));
  543  
  544:         $response->headers->set('Transfer-Encoding', 'chunked');
  545          $response->prepare($request);
  546:         $this->assertFalse($response->headers->has('Content-Length'));
  547      }
  548  
  ...
  554          $response = new Response('foo');
  555          $response->prepare($request);
  556:         $this->assertEquals('no-cache', $response->headers->get('pragma'));
  557:         $this->assertEquals('-1', $response->headers->get('expires'));
  558  
  559          $request->server->set('SERVER_PROTOCOL', 'HTTP/1.1');
  560          $response = new Response('foo');
  561          $response->prepare($request);
  562:         $this->assertFalse($response->headers->has('pragma'));
  563:         $this->assertFalse($response->headers->has('expires'));
  564      }
  565  
  ...
  593          $this->assertEquals($response->getMaxAge(), 200);
  594  
  595:         $this->assertTrue($response->headers->hasCacheControlDirective('public'));
  596:         $this->assertFalse($response->headers->hasCacheControlDirective('private'));
  597  
  598          $response->setCache(array('public' => true));
  599:         $this->assertTrue($response->headers->hasCacheControlDirective('public'));
  600:         $this->assertFalse($response->headers->hasCacheControlDirective('private'));
  601  
  602          $response->setCache(array('public' => false));
  603:         $this->assertFalse($response->headers->hasCacheControlDirective('public'));
  604:         $this->assertTrue($response->headers->hasCacheControlDirective('private'));
  605  
  606          $response->setCache(array('private' => true));
  607:         $this->assertFalse($response->headers->hasCacheControlDirective('public'));
  608:         $this->assertTrue($response->headers->hasCacheControlDirective('private'));
  609  
  610          $response->setCache(array('private' => false));
  611:         $this->assertTrue($response->headers->hasCacheControlDirective('public'));
  612:         $this->assertFalse($response->headers->hasCacheControlDirective('private'));
  613  
  614          $response->setCache(array('immutable' => true));
  615:         $this->assertTrue($response->headers->hasCacheControlDirective('immutable'));
  616  
  617          $response->setCache(array('immutable' => false));
  618:         $this->assertFalse($response->headers->hasCacheControlDirective('immutable'));
  619      }
  620  
  ...
  634          $response->setPublic();
  635  
  636:         $this->assertTrue($response->headers->hasCacheControlDirective('public'));
  637:         $this->assertFalse($response->headers->hasCacheControlDirective('private'));
  638      }
  639  
  ...
  643          $response->setImmutable();
  644  
  645:         $this->assertTrue($response->headers->hasCacheControlDirective('immutable'));
  646      }
  647  
  ...
  659          $response->setExpires(null);
  660  
  661:         $this->assertNull($response->getExpires(), '->setExpires() remove the header when passed null');
  662  
  663          $now = $this->createDateTimeNow();
  ...
  823          $response->setEtag();
  824  
  825:         $this->assertNull($response->headers->get('Etag'), '->setEtag() removes Etags when call with null');
  826      }
  827  

/home/genis/Proyectos/ProyectoXat/vendor/symfony/http-foundation/Tests/ResponseTestCase.php:
   17  abstract class ResponseTestCase extends TestCase
   18  {
   19:     public function testNoCacheControlHeaderOnAttachmentUsingHTTPSAndMSIE()
   20      {
   21          // Check for HTTPS and IE 8
   ..
   25  
   26          $response = $this->provideResponse();
   27:         $response->headers->set('Content-Disposition', 'attachment; filename="fname.ext"');
   28          $response->prepare($request);
   29  
   30:         $this->assertFalse($response->headers->has('Cache-Control'));
   31  
   32          // Check for IE 10 and HTTPS
   ..
   34  
   35          $response = $this->provideResponse();
   36:         $response->headers->set('Content-Disposition', 'attachment; filename="fname.ext"');
   37          $response->prepare($request);
   38  
   39:         $this->assertTrue($response->headers->has('Cache-Control'));
   40  
   41          // Check for IE 9 and HTTPS
   ..
   43  
   44          $response = $this->provideResponse();
   45:         $response->headers->set('Content-Disposition', 'attachment; filename="fname.ext"');
   46          $response->prepare($request);
   47  
   48:         $this->assertTrue($response->headers->has('Cache-Control'));
   49  
   50          // Check for IE 9 and HTTP
   ..
   52  
   53          $response = $this->provideResponse();
   54:         $response->headers->set('Content-Disposition', 'attachment; filename="fname.ext"');
   55          $response->prepare($request);
   56  
   57:         $this->assertTrue($response->headers->has('Cache-Control'));
   58  
   59          // Check for IE 8 and HTTP
   ..
   61  
   62          $response = $this->provideResponse();
   63:         $response->headers->set('Content-Disposition', 'attachment; filename="fname.ext"');
   64          $response->prepare($request);
   65  
   66:         $this->assertTrue($response->headers->has('Cache-Control'));
   67  
   68          // Check for non-IE and HTTPS
   ..
   71  
   72          $response = $this->provideResponse();
   73:         $response->headers->set('Content-Disposition', 'attachment; filename="fname.ext"');
   74          $response->prepare($request);
   75  
   76:         $this->assertTrue($response->headers->has('Cache-Control'));
   77  
   78          // Check for non-IE and HTTP
   ..
   80  
   81          $response = $this->provideResponse();
   82:         $response->headers->set('Content-Disposition', 'attachment; filename="fname.ext"');
   83          $response->prepare($request);
   84  
   85:         $this->assertTrue($response->headers->has('Cache-Control'));
   86      }
   87  

/home/genis/Proyectos/ProyectoXat/vendor/symfony/http-foundation/Tests/ServerBagTest.php:
   22  class ServerBagTest extends TestCase
   23  {
   24:     public function testShouldExtractHeadersFromServerArray()
   25      {
   26          $server = array(
   ..
   44              'PHP_AUTH_USER' => 'foo',
   45              'PHP_AUTH_PW' => 'bar',
   46:         ), $bag->getHeaders());
   47      }
   48  
   ..
   55              'PHP_AUTH_USER' => 'foo',
   56              'PHP_AUTH_PW' => '',
   57:         ), $bag->getHeaders());
   58      }
   59  
   ..
   66              'PHP_AUTH_USER' => 'foo',
   67              'PHP_AUTH_PW' => 'bar',
   68:         ), $bag->getHeaders());
   69      }
   70  
   ..
   73          $bag = new ServerBag(array('HTTP_AUTHORIZATION' => 'Basic_'.base64_encode('foo:bar')));
   74  
   75:         // Username and passwords should not be set as the header is bogus
   76:         $headers = $bag->getHeaders();
   77:         $this->assertArrayNotHasKey('PHP_AUTH_USER', $headers);
   78:         $this->assertArrayNotHasKey('PHP_AUTH_PW', $headers);
   79      }
   80  
   ..
   87              'PHP_AUTH_USER' => 'username',
   88              'PHP_AUTH_PW' => 'pass:word',
   89:         ), $bag->getHeaders());
   90      }
   91  
   ..
   98              'PHP_AUTH_USER' => 'foo',
   99              'PHP_AUTH_PW' => '',
  100:         ), $bag->getHeaders());
  101      }
  102  
  ...
  109              'AUTHORIZATION' => $digest,
  110              'PHP_AUTH_DIGEST' => $digest,
  111:         ), $bag->getHeaders());
  112      }
  113  
  ...
  117          $bag = new ServerBag(array('HTTP_AUTHORIZATION' => $digest));
  118  
  119:         // Username and passwords should not be set as the header is bogus
  120:         $headers = $bag->getHeaders();
  121:         $this->assertArrayNotHasKey('PHP_AUTH_USER', $headers);
  122:         $this->assertArrayNotHasKey('PHP_AUTH_PW', $headers);
  123      }
  124  
  ...
  131              'AUTHORIZATION' => $digest,
  132              'PHP_AUTH_DIGEST' => $digest,
  133:         ), $bag->getHeaders());
  134      }
  135  
  136      public function testOAuthBearerAuth()
  137      {
  138:         $headerContent = 'Bearer L-yLEOr9zhmUYRkzN1jwwxwQ-PBNiKDc8dgfB4hTfvo';
  139:         $bag = new ServerBag(array('HTTP_AUTHORIZATION' => $headerContent));
  140  
  141          $this->assertEquals(array(
  142:             'AUTHORIZATION' => $headerContent,
  143:         ), $bag->getHeaders());
  144      }
  145  
  146      public function testOAuthBearerAuthWithRedirect()
  147      {
  148:         $headerContent = 'Bearer L-yLEOr9zhmUYRkzN1jwwxwQ-PBNiKDc8dgfB4hTfvo';
  149:         $bag = new ServerBag(array('REDIRECT_HTTP_AUTHORIZATION' => $headerContent));
  150  
  151          $this->assertEquals(array(
  152:             'AUTHORIZATION' => $headerContent,
  153:         ), $bag->getHeaders());
  154      }
  155  
  ...
  157       * @see https://github.com/symfony/symfony/issues/17345
  158       */
  159:     public function testItDoesNotOverwriteTheAuthorizationHeaderIfItIsAlreadySet()
  160      {
  161:         $headerContent = 'Bearer L-yLEOr9zhmUYRkzN1jwwxwQ-PBNiKDc8dgfB4hTfvo';
  162:         $bag = new ServerBag(array('PHP_AUTH_USER' => 'foo', 'HTTP_AUTHORIZATION' => $headerContent));
  163  
  164          $this->assertEquals(array(
  165:             'AUTHORIZATION' => $headerContent,
  166              'PHP_AUTH_USER' => 'foo',
  167              'PHP_AUTH_PW' => '',
  168:         ), $bag->getHeaders());
  169      }
  170  }

/home/genis/Proyectos/ProyectoXat/vendor/symfony/http-foundation/Tests/Session/Storage/Handler/AbstractSessionHandlerTest.php:
   46      public function testSession($fixture)
   47      {
   48:         $context = array('http' => array('header' => "Cookie: sid=123abc\r\n"));
   49          $context = stream_context_create($context);
   50          $result = file_get_contents(sprintf('http://localhost:8053/%s.php', $fixture), false, $context);

/home/genis/Proyectos/ProyectoXat/vendor/symfony/http-foundation/Tests/Session/Storage/Handler/Fixtures/common.inc:
   41  ini_set('session.cache_limiter', '');
   42  
   43: header_remove('X-Powered-By');
   44: header('Content-Type: text/plain; charset=utf-8');
   45  
   46  register_shutdown_function(function () {
   47      echo "\n";
   48      session_write_close();
   49:     print_r(headers_list());
   50      echo "shutdown\n";
   51  });

/home/genis/Proyectos/ProyectoXat/vendor/symfony/http-foundation/Tests/StreamedResponseTest.php:
   23  
   24          $this->assertEquals(404, $response->getStatusCode());
   25:         $this->assertEquals('text/plain', $response->headers->get('Content-Type'));
   26      }
   27  
   ..
   35  
   36          $this->assertEquals('1.1', $response->getProtocolVersion());
   37:         $this->assertNotEquals('chunked', $response->headers->get('Transfer-Encoding'), 'Apache assumes responses with a Transfer-Encoding header set to chunked to already be encoded.');
   38      }
   39  
   ..
   47  
   48          $this->assertEquals('1.0', $response->getProtocolVersion());
   49:         $this->assertNull($response->headers->get('Transfer-Encoding'));
   50      }
   51  
   52:     public function testPrepareWithHeadRequest()
   53      {
   54          $response = new StreamedResponse(function () { echo 'foo'; }, 200, array('Content-Length' => '123'));
   55:         $request = Request::create('/', 'HEAD');
   56  
   57          $response->prepare($request);
   58  
   59:         $this->assertSame('123', $response->headers->get('Content-Length'));
   60      }
   61  
   62:     public function testPrepareWithCacheHeaders()
   63      {
   64          $response = new StreamedResponse(function () { echo 'foo'; }, 200, array('Cache-Control' => 'max-age=600, public'));
   ..
   66  
   67          $response->prepare($request);
   68:         $this->assertEquals('max-age=600, public', $response->headers->get('Cache-Control'));
   69      }
   70  
   ..
  121  
  122          $response = new StreamedResponse(function () {});
  123:         $this->assertInstanceOf('Symfony\Component\HttpFoundation\StreamedResponse', $response->sendHeaders());
  124:         $this->assertInstanceOf('Symfony\Component\HttpFoundation\StreamedResponse', $response->sendHeaders());
  125      }
  126  }

/home/genis/Proyectos/ProyectoXat/vendor/symfony/http-kernel/Client.php:
  201          $content = ob_get_clean();
  202  
  203:         return new DomResponse($content, $response->getStatusCode(), $response->headers->all());
  204      }
  205  }

/home/genis/Proyectos/ProyectoXat/vendor/symfony/http-kernel/DataCollector/ConfigDataCollector.php:
   58              'app_name' => $this->name,
   59              'app_version' => $this->version,
   60:             'token' => $response->headers->get('X-Debug-Token'),
   61              'symfony_version' => Kernel::VERSION,
   62              'symfony_state' => 'unknown',

/home/genis/Proyectos/ProyectoXat/vendor/symfony/http-kernel/DataCollector/DumpDataCollector.php:
  140      {
  141          // Sub-requests and programmatic calls stay in the collected profile.
  142:         if ($this->dumper || ($this->requestStack && $this->requestStack->getMasterRequest() !== $request) || $request->isXmlHttpRequest() || $request->headers->has('Origin')) {
  143              return;
  144          }
  ...
  146          // In all other conditions that remove the web debug toolbar, dumps are written on the output.
  147          if (!$this->requestStack
  148:             || !$response->headers->has('X-Debug-Token')
  149              || $response->isRedirection()
  150:             || ($response->headers->has('Content-Type') && false === strpos($response->headers->get('Content-Type'), 'html'))
  151              || 'html' !== $request->getRequestFormat()
  152              || false === strripos($response->getContent(), '</body>')
  153          ) {
  154:             if ($response->headers->has('Content-Type') && false !== strpos($response->headers->get('Content-Type'), 'html')) {
  155                  $this->dumper = new HtmlDumper('php://output', $this->charset);
  156                  $this->dumper->setDisplayOptions(array('fileLinkFormat' => $this->fileLinkFormat));
  ...
  244              $this->isCollected = true;
  245  
  246:             $h = headers_list();
  247              $i = count($h);
  248              array_unshift($h, 'Content-Type: '.ini_get('default_mimetype'));
  ...
  305  
  306          $dumper = new HtmlDumper(function ($line) use (&$html) { $html .= $line; }, $this->charset);
  307:         $dumper->setDumpHeader('');
  308          $dumper->setDumpBoundaries('', '');
  309  

/home/genis/Proyectos/ProyectoXat/vendor/symfony/http-kernel/DataCollector/RequestDataCollector.php:
   76  
   77          $responseCookies = array();
   78:         foreach ($response->headers->getCookies() as $cookie) {
   79              $responseCookies[$cookie->getName()] = $cookie;
   80          }
   ..
   84              'format' => $request->getRequestFormat(),
   85              'content' => $content,
   86:             'content_type' => $response->headers->get('Content-Type', 'text/html'),
   87              'status_text' => isset(Response::$statusTexts[$statusCode]) ? Response::$statusTexts[$statusCode] : '',
   88              'status_code' => $statusCode,
   89              'request_query' => $request->query->all(),
   90              'request_request' => $request->request->all(),
   91:             'request_headers' => $request->headers->all(),
   92              'request_server' => $request->server->all(),
   93              'request_cookies' => $request->cookies->all(),
   94              'request_attributes' => $attributes,
   95              'route' => $route,
   96:             'response_headers' => $response->headers->all(),
   97              'response_cookies' => $responseCookies,
   98              'session_metadata' => $sessionMetadata,
   ..
  104          );
  105  
  106:         if (isset($this->data['request_headers']['php-auth-pw'])) {
  107:             $this->data['request_headers']['php-auth-pw'] = '******';
  108          }
  109  
  ...
  120                  continue;
  121              }
  122:             if ('request_headers' === $key || 'response_headers' === $key) {
  123                  $this->data[$key] = array_map(function ($v) { return isset($v[0]) && !isset($v[1]) ? $v[0] : $v; }, $value);
  124              }
  ...
  133              $this->data['redirect'] = json_decode($redirectCookie, true);
  134  
  135:             $response->headers->clearCookie('sf_redirect');
  136          }
  137  
  138          if ($response->isRedirect()) {
  139:             $response->headers->setCookie(new Cookie(
  140                  'sf_redirect',
  141                  json_encode(array(
  142:                     'token' => $response->headers->get('x-debug-token'),
  143                      'route' => $request->attributes->get('_route', 'n/a'),
  144                      'method' => $request->getMethod(),
  ...
  184      }
  185  
  186:     public function getRequestHeaders()
  187      {
  188:         return new ParameterBag($this->data['request_headers']->getValue());
  189      }
  190  
  ...
  204      }
  205  
  206:     public function getResponseHeaders()
  207      {
  208:         return new ParameterBag($this->data['response_headers']->getValue());
  209      }
  210  

/home/genis/Proyectos/ProyectoXat/vendor/symfony/http-kernel/DataCollector/TimeDataCollector.php:
   45  
   46          $this->data = array(
   47:             'token' => $response->headers->get('X-Debug-Token'),
   48              'start_time' => $startTime * 1000,
   49              'events' => array(),

/home/genis/Proyectos/ProyectoXat/vendor/symfony/http-kernel/Debug/TraceableEventDispatcher.php:
   42                  break;
   43              case KernelEvents::TERMINATE:
   44:                 $token = $event->getResponse()->headers->get('X-Debug-Token');
   45                  // There is a very special case when using built-in AppCache class as kernel wrapper, in the case
   46                  // of an ESI request leading to a `stale` response [B]  inside a `fresh` cached response [A].
   ..
   66                  break;
   67              case KernelEvents::RESPONSE:
   68:                 $token = $event->getResponse()->headers->get('X-Debug-Token');
   69                  $this->stopwatch->stopSection($token);
   70                  break;
   ..
   72                  // In the special case described in the `preDispatch` method above, the `$token` section
   73                  // does not exist, then closing it throws an exception which must be caught.
   74:                 $token = $event->getResponse()->headers->get('X-Debug-Token');
   75                  try {
   76                      $this->stopwatch->stopSection($token);

/home/genis/Proyectos/ProyectoXat/vendor/symfony/http-kernel/EventListener/AbstractSessionListener.php:
   55                  ->setPrivate()
   56                  ->setMaxAge(0)
   57:                 ->headers->addCacheControlDirective('must-revalidate');
   58          }
   59      }

/home/genis/Proyectos/ProyectoXat/vendor/symfony/http-kernel/EventListener/AbstractTestSessionListener.php:
   69          if ($session instanceof Session ? !$session->isEmpty() : $wasStarted) {
   70              $params = session_get_cookie_params();
   71:             $event->getResponse()->headers->setCookie(new Cookie($session->getName(), $session->getId(), 0 === $params['lifetime'] ? 0 : time() + $params['lifetime'], $params['path'], $params['domain'], $params['secure'], $params['httponly']));
   72          }
   73      }

/home/genis/Proyectos/ProyectoXat/vendor/symfony/http-kernel/EventListener/ExceptionListener.php:
   76          if ($this->debug && $eventDispatcher instanceof EventDispatcherInterface) {
   77              $cspRemovalListener = function (FilterResponseEvent $event) use (&$cspRemovalListener, $eventDispatcher) {
   78:                 $event->getResponse()->headers->remove('Content-Security-Policy');
   79                  $eventDispatcher->removeListener(KernelEvents::RESPONSE, $cspRemovalListener);
   80              };

/home/genis/Proyectos/ProyectoXat/vendor/symfony/http-kernel/EventListener/ResponseListener.php:
   17  
   18  /**
   19:  * ResponseListener fixes the Response headers based on the Request.
   20   *
   21   * @author Fabien Potencier <fabien@symfony.com>

/home/genis/Proyectos/ProyectoXat/vendor/symfony/http-kernel/EventListener/RouterListener.php:
  138              $message = sprintf('No route found for "%s %s"', $request->getMethod(), $request->getPathInfo());
  139  
  140:             if ($referer = $request->headers->get('referer')) {
  141                  $message .= sprintf(' (from "%s")', $referer);
  142              }

/home/genis/Proyectos/ProyectoXat/vendor/symfony/http-kernel/EventListener/SaveSessionListener.php:
   17  
   18  /**
   19:  * Saves the session, in case it is still open, before sending the response/headers.
   20   *
   21   * This ensures several things in case the developer did not save the session explicitly:
   ..
   31   *  * When regenerating the session ID no locking is involved in PHPs session design. See
   32   *    https://bugs.php.net/bug.php?id=61470 for a discussion. So in this case, the session must
   33:  *    be saved anyway before sending the headers with the new session ID. Otherwise session
   34   *    data could get lost again for concurrent requests with the new ID. One result could be
   35   *    that you get logged out after just logging in.
   36   *
   37   * This listener should be executed as one of the last listeners, so that previous listeners
   38:  * can still operate on the open session. This prevents the overhead of restarting it.
   39   * Listeners after closing the session can still work with the session as usual because
   40   * Symfonys session implementation starts the session on demand. So writing to it after

/home/genis/Proyectos/ProyectoXat/vendor/symfony/http-kernel/EventListener/SurrogateListener.php:
   19  
   20  /**
   21:  * SurrogateListener adds a Surrogate-Control HTTP header when the Response needs to be parsed for Surrogates.
   22   *
   23   * @author Fabien Potencier <fabien@symfony.com>

/home/genis/Proyectos/ProyectoXat/vendor/symfony/http-kernel/Exception/HttpException.php:
   20  {
   21      private $statusCode;
   22:     private $headers;
   23  
   24:     public function __construct($statusCode, $message = null, \Exception $previous = null, array $headers = array(), $code = 0)
   25      {
   26          $this->statusCode = $statusCode;
   27:         $this->headers = $headers;
   28  
   29          parent::__construct($message, $code, $previous);
   ..
   35      }
   36  
   37:     public function getHeaders()
   38      {
   39:         return $this->headers;
   40      }
   41  
   42      /**
   43:      * Set response headers.
   44       *
   45:      * @param array $headers Response headers
   46       */
   47:     public function setHeaders(array $headers)
   48      {
   49:         $this->headers = $headers;
   50      }
   51  }

/home/genis/Proyectos/ProyectoXat/vendor/symfony/http-kernel/Exception/HttpExceptionInterface.php:
   27  
   28      /**
   29:      * Returns response headers.
   30       *
   31:      * @return array Response headers
   32       */
   33:     public function getHeaders();
   34  }
   35  

/home/genis/Proyectos/ProyectoXat/vendor/symfony/http-kernel/Exception/MethodNotAllowedHttpException.php:
   25      public function __construct(array $allow, $message = null, \Exception $previous = null, $code = 0)
   26      {
   27:         $headers = array('Allow' => strtoupper(implode(', ', $allow)));
   28  
   29:         parent::__construct(405, $message, $previous, $headers, $code);
   30      }
   31  }

/home/genis/Proyectos/ProyectoXat/vendor/symfony/http-kernel/Exception/ServiceUnavailableHttpException.php:
   25      public function __construct($retryAfter = null, $message = null, \Exception $previous = null, $code = 0)
   26      {
   27:         $headers = array();
   28          if ($retryAfter) {
   29:             $headers = array('Retry-After' => $retryAfter);
   30          }
   31  
   32:         parent::__construct(503, $message, $previous, $headers, $code);
   33      }
   34  }

/home/genis/Proyectos/ProyectoXat/vendor/symfony/http-kernel/Exception/TooManyRequestsHttpException.php:
   27      public function __construct($retryAfter = null, $message = null, \Exception $previous = null, $code = 0)
   28      {
   29:         $headers = array();
   30          if ($retryAfter) {
   31:             $headers = array('Retry-After' => $retryAfter);
   32          }
   33  
   34:         parent::__construct(429, $message, $previous, $headers, $code);
   35      }
   36  }

/home/genis/Proyectos/ProyectoXat/vendor/symfony/http-kernel/Exception/UnauthorizedHttpException.php:
   25      public function __construct($challenge, $message = null, \Exception $previous = null, $code = 0)
   26      {
   27:         $headers = array('WWW-Authenticate' => $challenge);
   28  
   29:         parent::__construct(401, $message, $previous, $headers, $code);
   30      }
   31  }

/home/genis/Proyectos/ProyectoXat/vendor/symfony/http-kernel/Fragment/InlineFragmentRenderer.php:
  112          // Override the arguments to emulate a sub-request.
  113          // Sub-request object will point to localhost as client ip and real client ip
  114:         // will be included into trusted header for client ip
  115          try {
  116:             if (Request::HEADER_X_FORWARDED_FOR & Request::getTrustedHeaderSet()) {
  117:                 $currentXForwardedFor = $request->headers->get('X_FORWARDED_FOR', '');
  118  
  119                  $server['HTTP_X_FORWARDED_FOR'] = ($currentXForwardedFor ? $currentXForwardedFor.', ' : '').$request->getClientIp();
  120:             } elseif (method_exists(Request::class, 'getTrustedHeaderName') && $trustedHeaderName = Request::getTrustedHeaderName(Request::HEADER_CLIENT_IP, false)) {
  121:                 $currentXForwardedFor = $request->headers->get($trustedHeaderName, '');
  122  
  123:                 $server['HTTP_'.$trustedHeaderName] = ($currentXForwardedFor ? $currentXForwardedFor.', ' : '').$request->getClientIp();
  124              }
  125          } catch (\InvalidArgumentException $e) {
  ...
  132  
  133          $subRequest = Request::create($uri, 'get', array(), $cookies, array(), $server);
  134:         if ($request->headers->has('Surrogate-Capability')) {
  135:             $subRequest->headers->set('Surrogate-Capability', $request->headers->get('Surrogate-Capability'));
  136          }
  137  

/home/genis/Proyectos/ProyectoXat/vendor/symfony/http-kernel/HttpCache/AbstractSurrogate.php:
   54      public function hasSurrogateCapability(Request $request)
   55      {
   56:         if (null === $value = $request->headers->get('Surrogate-Capability')) {
   57              return false;
   58          }
   ..
   66      public function addSurrogateCapability(Request $request)
   67      {
   68:         $current = $request->headers->get('Surrogate-Capability');
   69          $new = sprintf('symfony="%s/1.0"', strtoupper($this->getName()));
   70  
   71:         $request->headers->set('Surrogate-Capability', $current ? $current.', '.$new : $new);
   72      }
   73  
   ..
   77      public function needsParsing(Response $response)
   78      {
   79:         if (!$control = $response->headers->get('Surrogate-Control')) {
   80              return false;
   81          }
   ..
  113  
  114      /**
  115:      * Remove the Surrogate from the Surrogate-Control header.
  116       */
  117      protected function removeFromControl(Response $response)
  118      {
  119:         if (!$response->headers->has('Surrogate-Control')) {
  120              return;
  121          }
  122  
  123:         $value = $response->headers->get('Surrogate-Control');
  124          $upperName = strtoupper($this->getName());
  125  
  126          if (sprintf('content="%s/1.0"', $upperName) == $value) {
  127:             $response->headers->remove('Surrogate-Control');
  128          } elseif (preg_match(sprintf('#,\s*content="%s/1.0"#', $upperName), $value)) {
  129:             $response->headers->set('Surrogate-Control', preg_replace(sprintf('#,\s*content="%s/1.0"#', $upperName), '', $value));
  130          } elseif (preg_match(sprintf('#content="%s/1.0",\s*#', $upperName), $value)) {
  131:             $response->headers->set('Surrogate-Control', preg_replace(sprintf('#content="%s/1.0",\s*#', $upperName), '', $value));
  132          }
  133      }

/home/genis/Proyectos/ProyectoXat/vendor/symfony/http-kernel/HttpCache/Esi.php:
   39      {
   40          if (false !== strpos($response->getContent(), '<esi:include')) {
   41:             $response->headers->set('Surrogate-Control', 'content="ESI/1.0"');
   42          }
   43      }
   ..
   66      public function process(Request $request, Response $response)
   67      {
   68:         $type = $response->headers->get('Content-Type');
   69          if (empty($type)) {
   70              $type = 'text/html';
   ..
  108  
  109          $response->setContent($content);
  110:         $response->headers->set('X-Body-Eval', 'ESI');
  111  
  112:         // remove ESI/1.0 from the Surrogate-Control header
  113          $this->removeFromControl($response);
  114      }

/home/genis/Proyectos/ProyectoXat/vendor/symfony/http-kernel/HttpCache/HttpCache.php:
   41       * The available options are:
   42       *
   43:      *   * debug:                 If true, the traces are added as a HTTP header to ease debugging
   44       *
   45       *   * default_ttl            The number of seconds that a cache entry should be considered
   46       *                            fresh when no explicit freshness information is provided in
   47:      *                            a response. Explicit Cache-Control or Expires headers
   48       *                            override this value. (default: 0)
   49       *
   50:      *   * private_headers        Set of request headers that trigger "private" cache-control behavior
   51       *                            on responses that don't explicitly state whether the response is
   52       *                            public or private via a Cache-Control directive. (default: Authorization and Cookie)
   ..
   83              'debug' => false,
   84              'default_ttl' => 0,
   85:             'private_headers' => array('Authorization', 'Cookie'),
   86              'allow_reload' => false,
   87              'allow_revalidate' => false,
   ..
  176          if (!$request->isMethodSafe(false)) {
  177              $response = $this->invalidate($request, $catch);
  178:         } elseif ($request->headers->has('expect') || !$request->isMethodCacheable()) {
  179              $response = $this->pass($request, $catch);
  180          } elseif ($this->options['allow_reload'] && $request->isNoCache()) {
  ...
  192  
  193          if (HttpKernelInterface::MASTER_REQUEST === $type && $this->options['debug']) {
  194:             $response->headers->set('X-Symfony-Cache', $this->getLog());
  195          }
  196  
  ...
  257  
  258                  // As per the RFC, invalidate Location and Content-Location URLs if present
  259:                 foreach (array('Location', 'Content-Location') as $header) {
  260:                     if ($uri = $response->headers->get($header)) {
  261                          $subRequest = Request::create($uri, 'get', array(), array(), array(), $request->server->all());
  262  
  ...
  322          $this->record($request, 'fresh');
  323  
  324:         $entry->headers->set('Age', $entry->getAge());
  325  
  326          return $entry;
  ...
  343          $subRequest = clone $request;
  344  
  345:         // send no head requests because we want content
  346:         if ('HEAD' === $request->getMethod()) {
  347              $subRequest->setMethod('GET');
  348          }
  349  
  350          // add our cached last-modified validator
  351:         $subRequest->headers->set('if_modified_since', $entry->headers->get('Last-Modified'));
  352  
  353          // Add our cached etag validator to the environment.
  ...
  357          $requestEtags = $request->getETags();
  358          if ($etags = array_unique(array_merge($cachedEtags, $requestEtags))) {
  359:             $subRequest->headers->set('if_none_match', implode(', ', $etags));
  360          }
  361  
  ...
  372  
  373              $entry = clone $entry;
  374:             $entry->headers->remove('Date');
  375  
  376              foreach (array('Date', 'Expires', 'Cache-Control', 'ETag', 'Last-Modified') as $name) {
  377:                 if ($response->headers->has($name)) {
  378:                     $entry->headers->set($name, $response->headers->get($name));
  379                  }
  380              }
  ...
  405          $subRequest = clone $request;
  406  
  407:         // send no head requests because we want content
  408:         if ('HEAD' === $request->getMethod()) {
  409              $subRequest->setMethod('GET');
  410          }
  411  
  412          // avoid that the backend sends no content
  413:         $subRequest->headers->remove('if_modified_since');
  414:         $subRequest->headers->remove('if_none_match');
  415  
  416          $response = $this->forward($subRequest, $catch);
  ...
  441          }
  442  
  443:         // modify the X-Forwarded-For header if needed
  444:         $forwardedFor = $request->headers->get('X-Forwarded-For');
  445          if ($forwardedFor) {
  446:             $request->headers->set('X-Forwarded-For', $forwardedFor.', '.$request->server->get('REMOTE_ADDR'));
  447          } else {
  448:             $request->headers->set('X-Forwarded-For', $request->server->get('REMOTE_ADDR'));
  449          }
  450  
  ...
  456          if (!in_array('127.0.0.1', $trustedProxies = Request::getTrustedProxies())) {
  457              $trustedProxies[] = '127.0.0.1';
  458:             Request::setTrustedProxies($trustedProxies, Request::HEADER_X_FORWARDED_ALL);
  459          }
  460  
  ...
  465          // we don't implement the stale-if-error on Requests, which is nonetheless part of the RFC
  466          if (null !== $entry && in_array($response->getStatusCode(), array(500, 502, 503, 504))) {
  467:             if (null === $age = $entry->headers->getCacheControlDirective('stale-if-error')) {
  468                  $age = $this->options['stale_if_error'];
  469              }
  ...
  478          /*
  479              RFC 7231 Sect. 7.1.1.2 says that a server that does not have a reasonably accurate
  480:             clock MUST NOT send a "Date" header, although it MUST send one in most other cases
  481              except for 1xx or 5xx responses where it MAY do so.
  482  
  483:             Anyway, a client that received a message without a "Date" header MUST add it.
  484          */
  485:         if (!$response->headers->has('Date')) {
  486              $response->setDate(\DateTime::createFromFormat('U', time()));
  487          }
  ...
  489          $this->processResponseBody($request, $response);
  490  
  491:         if ($this->isPrivateRequest($request) && !$response->headers->hasCacheControlDirective('public')) {
  492              $response->setPrivate();
  493:         } elseif ($this->options['default_ttl'] > 0 && null === $response->getTtl() && !$response->headers->getCacheControlDirective('must-revalidate')) {
  494              $response->setTtl($this->options['default_ttl']);
  495          }
  ...
  509          }
  510  
  511:         if ($this->options['allow_revalidate'] && null !== $maxAge = $request->headers->getCacheControlDirective('max-age')) {
  512              return $maxAge > 0 && $maxAge >= $entry->getAge();
  513          }
  ...
  544              // replace the current entry with the fresh one
  545              $new = $this->lookup($request);
  546:             $entry->headers = $new->headers;
  547              $entry->setContent($new->getContent());
  548              $entry->setStatusCode($new->getStatusCode());
  549              $entry->setProtocolVersion($new->getProtocolVersion());
  550:             foreach ($new->headers->getCookies() as $cookie) {
  551:                 $entry->headers->setCookie($cookie);
  552              }
  553          } else {
  ...
  555              $entry->setStatusCode(503);
  556              $entry->setContent('503 Service Unavailable');
  557:             $entry->headers->set('Retry-After', 10);
  558          }
  559  
  ...
  573              $this->record($request, 'store');
  574  
  575:             $response->headers->set('Age', $response->getAge());
  576          } catch (\Exception $e) {
  577              $this->record($request, 'store-failed');
  ...
  591      private function restoreResponseBody(Request $request, Response $response)
  592      {
  593:         if ($response->headers->has('X-Body-Eval')) {
  594              ob_start();
  595  
  596:             if ($response->headers->has('X-Body-File')) {
  597:                 include $response->headers->get('X-Body-File');
  598              } else {
  599                  eval('; ?>'.$response->getContent().'<?php ;');
  ...
  601  
  602              $response->setContent(ob_get_clean());
  603:             $response->headers->remove('X-Body-Eval');
  604:             if (!$response->headers->has('Transfer-Encoding')) {
  605:                 $response->headers->set('Content-Length', strlen($response->getContent()));
  606              }
  607:         } elseif ($response->headers->has('X-Body-File')) {
  608              // Response does not include possibly dynamic content (ESI, SSI), so we need
  609:             // not handle the content for HEAD requests
  610:             if (!$request->isMethod('HEAD')) {
  611:                 $response->setContent(file_get_contents($response->headers->get('X-Body-File')));
  612              }
  613          } else {
  ...
  615          }
  616  
  617:         $response->headers->remove('X-Body-File');
  618      }
  619  
  ...
  633      private function isPrivateRequest(Request $request)
  634      {
  635:         foreach ($this->options['private_headers'] as $key) {
  636              $key = strtolower(str_replace('HTTP_', '', $key));
  637  
  ...
  640                      return true;
  641                  }
  642:             } elseif ($request->headers->has($key)) {
  643                  return true;
  644              }
  ...
  686      private function mayServeStaleWhileRevalidate(Response $entry)
  687      {
  688:         $timeout = $entry->headers->getCacheControlDirective('stale-while-revalidate');
  689  
  690          if (null === $timeout) {

/home/genis/Proyectos/ProyectoXat/vendor/symfony/http-kernel/HttpCache/ResponseCacheStrategy.php:
   19  
   20  /**
   21:  * ResponseCacheStrategy knows how to compute the Response cache HTTP header
   22:  * based on the different response cache headers.
   23   *
   24   * This implementation changes the master response TTL to the smallest TTL received
   ..
   65          }
   66  
   67:         // Remove validation related headers in order to avoid browsers using
   68          // their own cache, because some of the response content comes from
   69          // at least one embedded response (which likely has a different caching strategy).
   ..
   78  
   79          if (!$this->cacheable) {
   80:             $response->headers->set('Cache-Control', 'no-cache, must-revalidate');
   81  
   82              return;
   ..
   87  
   88          if ($this->isNotCacheableResponseEmbedded) {
   89:             $response->headers->removeCacheControlDirective('s-maxage');
   90          } elseif (null !== $maxAge = min($this->maxAges)) {
   91              $response->setSharedMaxAge($maxAge);
   92:             $response->headers->set('Age', $maxAge - min($this->ttls));
   93          }
   94          $response->setMaxAge(0);

/home/genis/Proyectos/ProyectoXat/vendor/symfony/http-kernel/HttpCache/ResponseCacheStrategyInterface.php:
   20  /**
   21   * ResponseCacheStrategyInterface implementations know how to compute the
   22:  * Response cache HTTP header based on the different response cache headers.
   23   *
   24   * @author Fabien Potencier <fabien@symfony.com>
   ..
   32  
   33      /**
   34:      * Updates the Response HTTP headers based on the embedded Responses.
   35       */
   36      public function update(Response $response);

/home/genis/Proyectos/ProyectoXat/vendor/symfony/http-kernel/HttpCache/Ssi.php:
   36      {
   37          if (false !== strpos($response->getContent(), '<!--#include')) {
   38:             $response->headers->set('Surrogate-Control', 'content="SSI/1.0"');
   39          }
   40      }
   ..
   53      public function process(Request $request, Response $response)
   54      {
   55:         $type = $response->headers->get('Content-Type');
   56          if (empty($type)) {
   57              $type = 'text/html';
   ..
   91  
   92          $response->setContent($content);
   93:         $response->headers->set('X-Body-Eval', 'SSI');
   94  
   95:         // remove SSI/1.0 from the Surrogate-Control header
   96          $this->removeFromControl($response);
   97      }

/home/genis/Proyectos/ProyectoXat/vendor/symfony/http-kernel/HttpCache/Store.php:
   19  
   20  /**
   21:  * Store implements all the logic for storing cache metadata (Request and Response headers).
   22   *
   23   * @author Fabien Potencier <fabien@symfony.com>
   ..
  141          $match = null;
  142          foreach ($entries as $entry) {
  143:             if ($this->requestsMatch(isset($entry[1]['vary'][0]) ? implode(', ', $entry[1]['vary']) : '', $request->headers->all(), $entry[0])) {
  144                  $match = $entry;
  145  
  ...
  152          }
  153  
  154:         $headers = $match[1];
  155:         if (file_exists($body = $this->getPath($headers['x-content-digest'][0]))) {
  156:             return $this->restoreResponse($headers, $body);
  157          }
  158  
  ...
  178  
  179          // write the response body to the entity store if this is the original response
  180:         if (!$response->headers->has('X-Content-Digest')) {
  181              $digest = $this->generateContentDigest($response);
  182  
  ...
  185              }
  186  
  187:             $response->headers->set('X-Content-Digest', $digest);
  188  
  189:             if (!$response->headers->has('Transfer-Encoding')) {
  190:                 $response->headers->set('Content-Length', strlen($response->getContent()));
  191              }
  192          }
  ...
  194          // read existing cache entries, remove non-varying, and add this one to the list
  195          $entries = array();
  196:         $vary = $response->headers->get('vary');
  197          foreach ($this->getMetadata($key) as $entry) {
  198              if (!isset($entry[1]['vary'][0])) {
  ...
  205          }
  206  
  207:         $headers = $this->persistResponse($response);
  208:         unset($headers['age']);
  209  
  210:         array_unshift($entries, array($storedEnv, $headers));
  211  
  212          if (false === $this->save($key, serialize($entries))) {
  ...
  255  
  256      /**
  257:      * Determines whether two Request HTTP header sets are non-varying based on
  258:      * the vary response header value provided.
  259       *
  260:      * @param string $vary A Response vary header
  261:      * @param array  $env1 A Request HTTP header array
  262:      * @param array  $env2 A Request HTTP header array
  263       *
  264       * @return bool true if the two environments match, false otherwise
  ...
  270          }
  271  
  272:         foreach (preg_split('/[\s,]+/', $vary) as $header) {
  273:             $key = str_replace('_', '-', strtolower($header));
  274              $v1 = isset($env1[$key]) ? $env1[$key] : null;
  275              $v2 = isset($env2[$key]) ? $env2[$key] : null;
  ...
  417       *
  418       * If the same URI can have more than one representation, based on some
  419:      * headers, use a Vary header to indicate them, and each representation will
  420       * be stored independently under the same cache key.
  421       *
  ...
  442  
  443      /**
  444:      * Persists the Request HTTP headers.
  445       *
  446:      * @return array An array of HTTP headers
  447       */
  448      private function persistRequest(Request $request)
  449      {
  450:         return $request->headers->all();
  451      }
  452  
  453      /**
  454:      * Persists the Response HTTP headers.
  455       *
  456:      * @return array An array of HTTP headers
  457       */
  458      private function persistResponse(Response $response)
  459      {
  460:         $headers = $response->headers->all();
  461:         $headers['X-Status'] = array($response->getStatusCode());
  462  
  463:         return $headers;
  464      }
  465  
  466      /**
  467:      * Restores a Response from the HTTP headers and body.
  468       *
  469:      * @param array  $headers An array of HTTP headers for the Response
  470       * @param string $body    The Response body
  471       *
  472       * @return Response
  473       */
  474:     private function restoreResponse($headers, $body = null)
  475      {
  476:         $status = $headers['X-Status'][0];
  477:         unset($headers['X-Status']);
  478  
  479          if (null !== $body) {
  480:             $headers['X-Body-File'] = array($body);
  481          }
  482  
  483:         return new Response($body, $status, $headers);
  484      }
  485  }

/home/genis/Proyectos/ProyectoXat/vendor/symfony/http-kernel/HttpCache/SurrogateInterface.php:
   44  
   45      /**
   46:      * Adds HTTP headers to specify that the Response needs to be parsed for Surrogate.
   47       *
   48:      * This method only adds an Surrogate HTTP header if the Response has some Surrogate tags.
   49       */
   50      public function addSurrogateControl(Response $response);

/home/genis/Proyectos/ProyectoXat/vendor/symfony/http-kernel/HttpKernel.php:
   63      public function handle(Request $request, $type = HttpKernelInterface::MASTER_REQUEST, $catch = true)
   64      {
   65:         $request->headers->set('X-Php-Ob-Level', ob_get_level());
   66  
   67          try {
   ..
  100          $response = $this->handleException($exception, $request, self::MASTER_REQUEST);
  101  
  102:         $response->sendHeaders();
  103          $response->sendContent();
  104  
  ...
  240  
  241          // the developer asked for a specific status code
  242:         if ($response->headers->has('X-Status-Code')) {
  243:             @trigger_error(sprintf('Using the X-Status-Code header is deprecated since Symfony 3.3 and will be removed in 4.0. Use %s::allowCustomResponseCode() instead.', GetResponseForExceptionEvent::class), E_USER_DEPRECATED);
  244  
  245:             $response->setStatusCode($response->headers->get('X-Status-Code'));
  246  
  247:             $response->headers->remove('X-Status-Code');
  248          } elseif (!$event->isAllowingCustomResponseCode() && !$response->isClientError() && !$response->isServerError() && !$response->isRedirect()) {
  249              // ensure that we actually have an error response
  250              if ($e instanceof HttpExceptionInterface) {
  251:                 // keep the HTTP status code and headers
  252                  $response->setStatusCode($e->getStatusCode());
  253:                 $response->headers->add($e->getHeaders());
  254              } else {
  255                  $response->setStatusCode(500);

/home/genis/Proyectos/ProyectoXat/vendor/symfony/http-kernel/Profiler/Profiler.php:
   12  namespace Symfony\Component\HttpKernel\Profiler;
   13  
   14: use Symfony\Component\HttpFoundation\Exception\ConflictingHeadersException;
   15  use Symfony\Component\HttpFoundation\Request;
   16  use Symfony\Component\HttpFoundation\Response;
   ..
   70      public function loadProfileFromResponse(Response $response)
   71      {
   72:         if (!$token = $response->headers->get('X-Debug-Token')) {
   73              return false;
   74          }
   ..
  156          try {
  157              $profile->setIp($request->getClientIp());
  158:         } catch (ConflictingHeadersException $e) {
  159              $profile->setIp('Unknown');
  160          }
  161  
  162:         $response->headers->set('X-Debug-Token', $profile->getToken());
  163  
  164          foreach ($this->collectors as $collector) {

/home/genis/Proyectos/ProyectoXat/vendor/symfony/http-kernel/Resources/welcome.html.php:
    1  <!DOCTYPE html>
    2  <html>
    3: <head>
    4      <meta charset="UTF-8" />
    5      <title>Welcome!</title>
    .
   32          }
   33      </style>
   34: </head>
   35  <body>
   36  <div id="wrapper">

/home/genis/Proyectos/ProyectoXat/vendor/symfony/http-kernel/Tests/ClientTest.php:
   67  
   68          $response = new Response();
   69:         $response->headers->setCookie(new Cookie('foo', 'bar', \DateTime::createFromFormat('j-M-Y H:i:s T', '15-Feb-2009 20:00:00 GMT')->format('U'), '/foo', 'http://example.com', true, true));
   70          $domResponse = $m->invoke($client, $response);
   71:         $this->assertEquals($expected[0], $domResponse->getHeader('Set-Cookie'));
   72  
   73          $response = new Response();
   74:         $response->headers->setCookie(new Cookie('foo', 'bar', \DateTime::createFromFormat('j-M-Y H:i:s T', '15-Feb-2009 20:00:00 GMT')->format('U'), '/foo', 'http://example.com', true, true));
   75:         $response->headers->setCookie(new Cookie('foo1', 'bar1', \DateTime::createFromFormat('j-M-Y H:i:s T', '15-Feb-2009 20:00:00 GMT')->format('U'), '/foo', 'http://example.com', true, true));
   76          $domResponse = $m->invoke($client, $response);
   77:         $this->assertEquals($expected[0], $domResponse->getHeader('Set-Cookie'));
   78:         $this->assertEquals($expected, $domResponse->getHeader('Set-Cookie', false));
   79      }
   80  

/home/genis/Proyectos/ProyectoXat/vendor/symfony/http-kernel/Tests/DataCollector/DumpDataCollectorTest.php:
   91          ob_start();
   92          $response = new Response();
   93:         $response->headers->set('Content-Type', 'text/html');
   94          $collector->collect(new Request(), $response);
   95          $output = ob_get_clean();

/home/genis/Proyectos/ProyectoXat/vendor/symfony/http-kernel/Tests/DataCollector/RequestDataCollectorTest.php:
   40  
   41          $this->assertSame('request', $c->getName());
   42:         $this->assertInstanceOf('Symfony\Component\HttpFoundation\ParameterBag', $c->getRequestHeaders());
   43          $this->assertInstanceOf('Symfony\Component\HttpFoundation\ParameterBag', $c->getRequestServer());
   44          $this->assertInstanceOf('Symfony\Component\HttpFoundation\ParameterBag', $c->getRequestCookies());
   ..
   55          $this->assertSame('stdClass', $attributes->get('object')->getType());
   56  
   57:         $this->assertInstanceOf('Symfony\Component\HttpFoundation\ParameterBag', $c->getResponseHeaders());
   58          $this->assertSame('OK', $c->getStatusText());
   59          $this->assertSame(200, $c->getStatusCode());
   ..
  218          $response = $this->createResponse();
  219          $response->setStatusCode(302);
  220:         $response->headers->set('Location', '/somewhere-else');
  221  
  222          $c->collect($request = $this->createRequest(), $response);
  ...
  273          $response = new Response();
  274          $response->setStatusCode(200);
  275:         $response->headers->set('Content-Type', 'application/json');
  276:         $response->headers->set('X-Foo-Bar', null);
  277:         $response->headers->setCookie(new Cookie('foo', 'bar', 1, '/foo', 'localhost', true, true));
  278:         $response->headers->setCookie(new Cookie('bar', 'foo', new \DateTime('@946684800')));
  279:         $response->headers->setCookie(new Cookie('bazz', 'foo', '2000-12-12'));
  280  
  281          return $response;
  ...
  324      private function getCookieByName(Response $response, $name)
  325      {
  326:         foreach ($response->headers->getCookies() as $cookie) {
  327              if ($cookie->getName() == $name) {
  328                  return $cookie;

/home/genis/Proyectos/ProyectoXat/vendor/symfony/http-kernel/Tests/Debug/TraceableEventDispatcherTest.php:
   31          $kernel->terminate($request, $response);
   32  
   33:         $events = $stopwatch->getSectionEvents($response->headers->get('X-Debug-Token'));
   34          $this->assertEquals(array(
   35              '__section__',

/home/genis/Proyectos/ProyectoXat/vendor/symfony/http-kernel/Tests/EventListener/ExceptionListenerTest.php:
  127      }
  128  
  129:     public function testCSPHeaderIsRemoved()
  130      {
  131          $dispatcher = new EventDispatcher();
  ...
  144  
  145          $response = new Response('', 200, array('content-security-policy' => "style-src 'self'"));
  146:         $this->assertTrue($response->headers->has('content-security-policy'));
  147  
  148          $event = new FilterResponseEvent($kernel, $request, HttpKernelInterface::MASTER_REQUEST, $response);
  149          $dispatcher->dispatch(KernelEvents::RESPONSE, $event);
  150  
  151:         $this->assertFalse($response->headers->has('content-security-policy'), 'CSP header has been removed');
  152          $this->assertFalse($dispatcher->hasListeners(KernelEvents::RESPONSE), 'CSP removal listener has been removed');
  153      }

/home/genis/Proyectos/ProyectoXat/vendor/symfony/http-kernel/Tests/EventListener/ResponseListenerTest.php:
   49          $this->dispatcher->dispatch(KernelEvents::RESPONSE, $event);
   50  
   51:         $this->assertEquals('', $event->getResponse()->headers->get('content-type'));
   52      }
   53  

/home/genis/Proyectos/ProyectoXat/vendor/symfony/http-kernel/Tests/EventListener/RouterListenerTest.php:
  183  
  184          $request = Request::create('http://localhost/');
  185:         $request->headers->set('host', '###');
  186          $response = $kernel->handle($request);
  187          $this->assertSame(400, $response->getStatusCode());

/home/genis/Proyectos/ProyectoXat/vendor/symfony/http-kernel/Tests/EventListener/SessionListenerTest.php:
   73          $listener->onKernelResponse(new FilterResponseEvent($kernel, $request, HttpKernelInterface::MASTER_REQUEST, $response));
   74  
   75:         $this->assertTrue($response->headers->hasCacheControlDirective('private'));
   76:         $this->assertTrue($response->headers->hasCacheControlDirective('must-revalidate'));
   77:         $this->assertSame('0', $response->headers->getCacheControlDirective('max-age'));
   78      }
   79  }

/home/genis/Proyectos/ProyectoXat/vendor/symfony/http-kernel/Tests/EventListener/SurrogateListenerTest.php:
   35          $dispatcher->dispatch(KernelEvents::RESPONSE, $event);
   36  
   37:         $this->assertEquals('', $event->getResponse()->headers->get('Surrogate-Control'));
   38      }
   39  
   ..
   49          $dispatcher->dispatch(KernelEvents::RESPONSE, $event);
   50  
   51:         $this->assertEquals('content="ESI/1.0"', $event->getResponse()->headers->get('Surrogate-Control'));
   52      }
   53  
   ..
   63          $dispatcher->dispatch(KernelEvents::RESPONSE, $event);
   64  
   65:         $this->assertEquals('', $event->getResponse()->headers->get('Surrogate-Control'));
   66      }
   67  }

/home/genis/Proyectos/ProyectoXat/vendor/symfony/http-kernel/Tests/EventListener/TestSessionListenerTest.php:
   69  
   70          $response = $this->filterResponse(new Request(), HttpKernelInterface::MASTER_REQUEST);
   71:         $cookies = $response->headers->getCookies();
   72  
   73          $this->assertEquals(0, reset($cookies)->getExpiresTime());
   ..
   84          $response = $this->filterResponse(new Request(), HttpKernelInterface::MASTER_REQUEST);
   85  
   86:         $this->assertSame(array(), $response->headers->getCookies());
   87      }
   88  

/home/genis/Proyectos/ProyectoXat/vendor/symfony/http-kernel/Tests/EventListener/ValidateRequestListenerTest.php:
   23  {
   24      /**
   25:      * @expectedException \Symfony\Component\HttpFoundation\Exception\ConflictingHeadersException
   26       */
   27      public function testListenerThrowsWhenMasterRequestHasInconsistentClientIps()
   ..
   31  
   32          $request = new Request();
   33:         $request->setTrustedProxies(array('1.1.1.1'), Request::HEADER_X_FORWARDED_FOR | Request::HEADER_FORWARDED);
   34          $request->server->set('REMOTE_ADDR', '1.1.1.1');
   35:         $request->headers->set('FORWARDED', 'for=2.2.2.2');
   36:         $request->headers->set('X_FORWARDED_FOR', '3.3.3.3');
   37  
   38          $dispatcher->addListener(KernelEvents::REQUEST, array(new ValidateRequestListener(), 'onKernelRequest'));

/home/genis/Proyectos/ProyectoXat/vendor/symfony/http-kernel/Tests/Exception/HttpExceptionTest.php:
    8  class HttpExceptionTest extends TestCase
    9  {
   10:     public function headerDataProvider()
   11      {
   12          return array(
   ..
   22      }
   23  
   24:     public function testHeadersDefault()
   25      {
   26          $exception = $this->createException();
   27:         $this->assertSame(array(), $exception->getHeaders());
   28      }
   29  
   30      /**
   31:      * @dataProvider headerDataProvider
   32       */
   33:     public function testHeadersConstructor($headers)
   34      {
   35:         $exception = new HttpException(200, null, null, $headers);
   36:         $this->assertSame($headers, $exception->getHeaders());
   37      }
   38  
   39      /**
   40:      * @dataProvider headerDataProvider
   41       */
   42:     public function testHeadersSetter($headers)
   43      {
   44          $exception = $this->createException();
   45:         $exception->setHeaders($headers);
   46:         $this->assertSame($headers, $exception->getHeaders());
   47      }
   48  

/home/genis/Proyectos/ProyectoXat/vendor/symfony/http-kernel/Tests/Exception/MethodNotAllowedHttpExceptionTest.php:
    7  class MethodNotAllowedHttpExceptionTest extends HttpExceptionTest
    8  {
    9:     public function testHeadersDefault()
   10      {
   11          $exception = new MethodNotAllowedHttpException(array('GET', 'PUT'));
   12:         $this->assertSame(array('Allow' => 'GET, PUT'), $exception->getHeaders());
   13      }
   14  
   15      /**
   16:      * @dataProvider headerDataProvider
   17       */
   18:     public function testHeadersSetter($headers)
   19      {
   20          $exception = new MethodNotAllowedHttpException(array('GET'));
   21:         $exception->setHeaders($headers);
   22:         $this->assertSame($headers, $exception->getHeaders());
   23      }
   24  }

/home/genis/Proyectos/ProyectoXat/vendor/symfony/http-kernel/Tests/Exception/ServiceUnavailableHttpExceptionTest.php:
    7  class ServiceUnavailableHttpExceptionTest extends HttpExceptionTest
    8  {
    9:     public function testHeadersDefaultRetryAfter()
   10      {
   11          $exception = new ServiceUnavailableHttpException(10);
   12:         $this->assertSame(array('Retry-After' => 10), $exception->getHeaders());
   13      }
   14  
   15      /**
   16:      * @dataProvider headerDataProvider
   17       */
   18:     public function testHeadersSetter($headers)
   19      {
   20          $exception = new ServiceUnavailableHttpException(10);
   21:         $exception->setHeaders($headers);
   22:         $this->assertSame($headers, $exception->getHeaders());
   23      }
   24  

/home/genis/Proyectos/ProyectoXat/vendor/symfony/http-kernel/Tests/Exception/TooManyRequestsHttpExceptionTest.php:
    7  class TooManyRequestsHttpExceptionTest extends HttpExceptionTest
    8  {
    9:     public function testHeadersDefaultRertyAfter()
   10      {
   11          $exception = new TooManyRequestsHttpException(10);
   12:         $this->assertSame(array('Retry-After' => 10), $exception->getHeaders());
   13      }
   14  
   15      /**
   16:      * @dataProvider headerDataProvider
   17       */
   18:     public function testHeadersSetter($headers)
   19      {
   20          $exception = new TooManyRequestsHttpException(10);
   21:         $exception->setHeaders($headers);
   22:         $this->assertSame($headers, $exception->getHeaders());
   23      }
   24  

/home/genis/Proyectos/ProyectoXat/vendor/symfony/http-kernel/Tests/Exception/UnauthorizedHttpExceptionTest.php:
    7  class UnauthorizedHttpExceptionTest extends HttpExceptionTest
    8  {
    9:     public function testHeadersDefault()
   10      {
   11          $exception = new UnauthorizedHttpException('Challenge');
   12:         $this->assertSame(array('WWW-Authenticate' => 'Challenge'), $exception->getHeaders());
   13      }
   14  
   15      /**
   16:      * @dataProvider headerDataProvider
   17       */
   18:     public function testHeadersSetter($headers)
   19      {
   20          $exception = new UnauthorizedHttpException('Challenge');
   21:         $exception->setHeaders($headers);
   22:         $this->assertSame($headers, $exception->getHeaders());
   23      }
   24  }

/home/genis/Proyectos/ProyectoXat/vendor/symfony/http-kernel/Tests/Exception/UnprocessableEntityHttpExceptionTest.php:
    8  {
    9      /**
   10:      * Test that setting the headers using the setter function
   11       * is working as expected.
   12       *
   13:      * @param array $headers The headers to set
   14       *
   15:      * @dataProvider headerDataProvider
   16       */
   17:     public function testHeadersSetter($headers)
   18      {
   19          $exception = new UnprocessableEntityHttpException(10);
   20:         $exception->setHeaders($headers);
   21:         $this->assertSame($headers, $exception->getHeaders());
   22      }
   23  

/home/genis/Proyectos/ProyectoXat/vendor/symfony/http-kernel/Tests/Exception/UnsupportedMediaTypeHttpExceptionTest.php:
    8  {
    9      /**
   10:      * @dataProvider headerDataProvider
   11       */
   12:     public function testHeadersSetter($headers)
   13      {
   14          $exception = new UnsupportedMediaTypeHttpException(10);
   15:         $exception->setHeaders($headers);
   16:         $this->assertSame($headers, $exception->getHeaders());
   17      }
   18  
   19:     protected function createException($headers = array())
   20      {
   21          return new UnsupportedMediaTypeHttpException();

/home/genis/Proyectos/ProyectoXat/vendor/symfony/http-kernel/Tests/Fragment/EsiFragmentRendererTest.php:
   53          $request = Request::create('/');
   54          $request->setLocale('fr');
   55:         $request->headers->set('Surrogate-Capability', 'ESI/1.0');
   56  
   57          $this->assertEquals('<esi:include src="/" />', $strategy->render('/', $request)->getContent());
   ..
   67          $request = Request::create('/');
   68          $request->setLocale('fr');
   69:         $request->headers->set('Surrogate-Capability', 'ESI/1.0');
   70  
   71          $reference = new ControllerReference('main_controller', array(), array());
   ..
   87          $request = Request::create('/');
   88          $request->setLocale('fr');
   89:         $request->headers->set('Surrogate-Capability', 'ESI/1.0');
   90  
   91          $strategy->render(new ControllerReference('main_controller'), $request);
   ..
  101          $request = Request::create('/');
  102          $request->setLocale('fr');
  103:         $request->headers->set('Surrogate-Capability', 'ESI/1.0');
  104  
  105          $strategy->render('/', $request, array('alt' => new ControllerReference('alt_controller')));

/home/genis/Proyectos/ProyectoXat/vendor/symfony/http-kernel/Tests/Fragment/InlineFragmentRendererTest.php:
   46          $subRequest = Request::create('/_fragment?_path=_format%3Dhtml%26_locale%3Den%26_controller%3Dmain_controller');
   47          $subRequest->attributes->replace(array('object' => $object, '_format' => 'html', '_controller' => 'main_controller', '_locale' => 'en'));
   48:         $subRequest->headers->set('x-forwarded-for', array('127.0.0.1'));
   49          $subRequest->server->set('HTTP_X_FORWARDED_FOR', '127.0.0.1');
   50  
   ..
   96      }
   97  
   98:     public function testRenderWithTrustedHeaderDisabled()
   99      {
  100          Request::setTrustedProxies(array(), 0);
  ...
  184      }
  185  
  186:     public function testESIHeaderIsKeptInSubrequest()
  187      {
  188          $expectedSubRequest = Request::create('/');
  189:         $expectedSubRequest->headers->set('Surrogate-Capability', 'abc="ESI/1.0"');
  190  
  191:         if (Request::HEADER_X_FORWARDED_FOR & Request::getTrustedHeaderSet()) {
  192:             $expectedSubRequest->headers->set('x-forwarded-for', array('127.0.0.1'));
  193              $expectedSubRequest->server->set('HTTP_X_FORWARDED_FOR', '127.0.0.1');
  194          }
  ...
  197  
  198          $request = Request::create('/');
  199:         $request->headers->set('Surrogate-Capability', 'abc="ESI/1.0"');
  200          $strategy->render('/', $request);
  201      }
  202  
  203:     public function testESIHeaderIsKeptInSubrequestWithTrustedHeaderDisabled()
  204      {
  205          Request::setTrustedProxies(array(), 0);
  206  
  207:         $this->testESIHeaderIsKeptInSubrequest();
  208  
  209          Request::setTrustedProxies(array(), -1);
  210      }
  211  
  212:     public function testHeadersPossiblyResultingIn304AreNotAssignedToSubrequest()
  213      {
  214          $expectedSubRequest = Request::create('/');
  215:         if (Request::HEADER_X_FORWARDED_FOR & Request::getTrustedHeaderSet()) {
  216:             $expectedSubRequest->headers->set('x-forwarded-for', array('127.0.0.1'));
  217              $expectedSubRequest->server->set('HTTP_X_FORWARDED_FOR', '127.0.0.1');
  218          }

/home/genis/Proyectos/ProyectoXat/vendor/symfony/http-kernel/Tests/Fragment/SsiFragmentRendererTest.php:
   33          $request = Request::create('/');
   34          $request->setLocale('fr');
   35:         $request->headers->set('Surrogate-Capability', 'SSI/1.0');
   36  
   37          $this->assertEquals('<!--#include virtual="/" -->', $strategy->render('/', $request)->getContent());
   ..
   46          $request = Request::create('/');
   47          $request->setLocale('fr');
   48:         $request->headers->set('Surrogate-Capability', 'SSI/1.0');
   49  
   50          $reference = new ControllerReference('main_controller', array(), array());
   ..
   66          $request = Request::create('/');
   67          $request->setLocale('fr');
   68:         $request->headers->set('Surrogate-Capability', 'SSI/1.0');
   69  
   70          $strategy->render(new ControllerReference('main_controller'), $request);
   ..
   80          $request = Request::create('/');
   81          $request->setLocale('fr');
   82:         $request->headers->set('Surrogate-Capability', 'SSI/1.0');
   83  
   84          $strategy->render('/', $request, array('alt' => new ControllerReference('alt_controller')));

/home/genis/Proyectos/ProyectoXat/vendor/symfony/http-kernel/Tests/HttpCache/EsiTest.php:
   24  
   25          $request = Request::create('/');
   26:         $request->headers->set('Surrogate-Capability', 'abc="ESI/1.0"');
   27          $this->assertTrue($esi->hasSurrogateCapability($request));
   28  
   29          $request = Request::create('/');
   30:         $request->headers->set('Surrogate-Capability', 'foobar');
   31          $this->assertFalse($esi->hasSurrogateCapability($request));
   32  
   ..
   41          $request = Request::create('/');
   42          $esi->addSurrogateCapability($request);
   43:         $this->assertEquals('symfony="ESI/1.0"', $request->headers->get('Surrogate-Capability'));
   44  
   45          $esi->addSurrogateCapability($request);
   46:         $this->assertEquals('symfony="ESI/1.0", symfony="ESI/1.0"', $request->headers->get('Surrogate-Capability'));
   47      }
   48  
   ..
   53          $response = new Response('foo <esi:include src="" />');
   54          $esi->addSurrogateControl($response);
   55:         $this->assertEquals('content="ESI/1.0"', $response->headers->get('Surrogate-Control'));
   56  
   57          $response = new Response('foo');
   58          $esi->addSurrogateControl($response);
   59:         $this->assertEquals('', $response->headers->get('Surrogate-Control'));
   60      }
   61  
   ..
   65  
   66          $response = new Response();
   67:         $response->headers->set('Surrogate-Control', 'content="ESI/1.0"');
   68          $this->assertTrue($esi->needsParsing($response));
   69  
   ..
   88          $request = Request::create('/');
   89          $response = new Response();
   90:         $response->headers->set('Content-Type', 'text/plain');
   91          $esi->process($request, $response);
   92  
   93:         $this->assertFalse($response->headers->has('x-body-eval'));
   94      }
   95  
   ..
  125  
  126          $this->assertEquals('foo <?php echo $this->surrogate->handle($this, \'...\', \'alt\', true) ?>'."\n", $response->getContent());
  127:         $this->assertEquals('ESI', $response->headers->get('x-body-eval'));
  128  
  129          $response = new Response('foo <esi:comment text="some comment" /><esi:include src="foo\'" alt="bar\'" onerror="continue" />');
  ...
  166      }
  167  
  168:     public function testProcessRemoveSurrogateControlHeader()
  169      {
  170          $esi = new Esi();
  ...
  172          $request = Request::create('/');
  173          $response = new Response('foo <esi:include src="..." />');
  174:         $response->headers->set('Surrogate-Control', 'content="ESI/1.0"');
  175          $esi->process($request, $response);
  176:         $this->assertEquals('ESI', $response->headers->get('x-body-eval'));
  177  
  178:         $response->headers->set('Surrogate-Control', 'no-store, content="ESI/1.0"');
  179          $esi->process($request, $response);
  180:         $this->assertEquals('ESI', $response->headers->get('x-body-eval'));
  181:         $this->assertEquals('no-store', $response->headers->get('surrogate-control'));
  182  
  183:         $response->headers->set('Surrogate-Control', 'content="ESI/1.0", no-store');
  184          $esi->process($request, $response);
  185:         $this->assertEquals('ESI', $response->headers->get('x-body-eval'));
  186:         $this->assertEquals('no-store', $response->headers->get('surrogate-control'));
  187      }
  188  

/home/genis/Proyectos/ProyectoXat/vendor/symfony/http-kernel/Tests/HttpCache/HttpCacheTest.php:
   48      }
   49  
   50:     public function testPassesOnNonGetHeadRequests()
   51      {
   52          $this->setNextResponse(200);
   ..
   55          $this->assertResponseOk();
   56          $this->assertTraceContains('pass');
   57:         $this->assertFalse($this->response->headers->has('Age'));
   58      }
   59  
   ..
   71      }
   72  
   73:     public function testDoesNotCacheWithAuthorizationRequestHeaderAndNonPublicResponse()
   74      {
   75          $this->setNextResponse(200, array('ETag' => '"Foo"'));
   ..
   78          $this->assertHttpKernelIsCalled();
   79          $this->assertResponseOk();
   80:         $this->assertEquals('private', $this->response->headers->get('Cache-Control'));
   81  
   82          $this->assertTraceContains('miss');
   83          $this->assertTraceNotContains('store');
   84:         $this->assertFalse($this->response->headers->has('Age'));
   85      }
   86  
   87:     public function testDoesCacheWithAuthorizationRequestHeaderAndPublicResponse()
   88      {
   89          $this->setNextResponse(200, array('Cache-Control' => 'public', 'ETag' => '"Foo"'));
   ..
   94          $this->assertTraceContains('miss');
   95          $this->assertTraceContains('store');
   96:         $this->assertTrue($this->response->headers->has('Age'));
   97:         $this->assertEquals('public', $this->response->headers->get('Cache-Control'));
   98      }
   99  
  100:     public function testDoesNotCacheWithCookieHeaderAndNonPublicResponse()
  101      {
  102          $this->setNextResponse(200, array('ETag' => '"Foo"'));
  ...
  105          $this->assertHttpKernelIsCalled();
  106          $this->assertResponseOk();
  107:         $this->assertEquals('private', $this->response->headers->get('Cache-Control'));
  108          $this->assertTraceContains('miss');
  109          $this->assertTraceNotContains('store');
  110:         $this->assertFalse($this->response->headers->has('Age'));
  111      }
  112  
  113:     public function testDoesNotCacheRequestsWithACookieHeader()
  114      {
  115          $this->setNextResponse(200);
  ...
  118          $this->assertHttpKernelIsCalled();
  119          $this->assertResponseOk();
  120:         $this->assertEquals('private', $this->response->headers->get('Cache-Control'));
  121          $this->assertTraceContains('miss');
  122          $this->assertTraceNotContains('store');
  123:         $this->assertFalse($this->response->headers->has('Age'));
  124      }
  125  
  ...
  133          $this->assertHttpKernelIsCalled();
  134          $this->assertEquals(304, $this->response->getStatusCode());
  135:         $this->assertEquals('', $this->response->headers->get('Content-Type'));
  136          $this->assertEmpty($this->response->getContent());
  137          $this->assertTraceContains('miss');
  ...
  146          $this->assertHttpKernelIsCalled();
  147          $this->assertEquals(304, $this->response->getStatusCode());
  148:         $this->assertEquals('', $this->response->headers->get('Content-Type'));
  149:         $this->assertTrue($this->response->headers->has('ETag'));
  150          $this->assertEmpty($this->response->getContent());
  151          $this->assertTraceContains('miss');
  ...
  159          $this->setNextResponse(200, array(), '', function ($request, $response) use ($time) {
  160              $response->setStatusCode(200);
  161:             $response->headers->set('ETag', '12345');
  162:             $response->headers->set('Last-Modified', $time->format(DATE_RFC2822));
  163:             $response->headers->set('Content-Type', 'text/plain');
  164              $response->setContent('Hello World');
  165          });
  ...
  204          $this->assertEquals(200, $this->response->getStatusCode());
  205          $this->assertTraceContains('fresh');
  206:         $this->assertEquals(2, $this->response->headers->get('Age'));
  207      }
  208  
  ...
  210      {
  211          $this->setNextResponse(200, array(), '', function ($request, $response) {
  212:             $etags = preg_split('/\s*,\s*/', $request->headers->get('IF_NONE_MATCH'));
  213              if ($request->cookies->has('authenticated')) {
  214:                 $response->headers->set('Cache-Control', 'private, no-store');
  215                  $response->setETag('"private tag"');
  216                  if (in_array('"private tag"', $etags)) {
  ...
  218                  } else {
  219                      $response->setStatusCode(200);
  220:                     $response->headers->set('Content-Type', 'text/plain');
  221                      $response->setContent('private data');
  222                  }
  223              } else {
  224:                 $response->headers->set('Cache-Control', 'public');
  225                  $response->setETag('"public tag"');
  226                  if (in_array('"public tag"', $etags)) {
  ...
  228                  } else {
  229                      $response->setStatusCode(200);
  230:                     $response->headers->set('Content-Type', 'text/plain');
  231                      $response->setContent('public data');
  232                  }
  ...
  237          $this->assertHttpKernelIsCalled();
  238          $this->assertEquals(200, $this->response->getStatusCode());
  239:         $this->assertEquals('"public tag"', $this->response->headers->get('ETag'));
  240          $this->assertEquals('public data', $this->response->getContent());
  241          $this->assertTraceContains('miss');
  ...
  245          $this->assertHttpKernelIsCalled();
  246          $this->assertEquals(200, $this->response->getStatusCode());
  247:         $this->assertEquals('"private tag"', $this->response->headers->get('ETag'));
  248          $this->assertEquals('private data', $this->response->getContent());
  249          $this->assertTraceContains('stale');
  ...
  261          $this->assertHttpKernelIsCalled();
  262          $this->assertTraceContains('store');
  263:         $this->assertTrue($this->response->headers->has('Age'));
  264      }
  265  
  ...
  328          $this->setNextResponse(200, array(), '', function ($request, $response) use (&$count) {
  329              ++$count;
  330:             $response->headers->set('Cache-Control', 'public, max-age=10000');
  331              $response->setETag($count);
  332              $response->setContent(1 == $count ? 'Hello World' : 'Goodbye World');
  ...
  358          $this->setNextResponse(200, array(), '', function ($request, $response) use (&$count) {
  359              ++$count;
  360:             $response->headers->set('Cache-Control', 'public, max-age=10000');
  361              $response->setETag($count);
  362              $response->setContent(1 == $count ? 'Hello World' : 'Goodbye World');
  ...
  397          $this->assertEquals(200, $this->response->getStatusCode());
  398          $this->assertTraceContains('miss');
  399:         $this->assertTrue($this->response->headers->has('Age'));
  400      }
  401  
  ...
  409              $this->assertEquals($code, $this->response->getStatusCode());
  410              $this->assertTraceNotContains('store');
  411:             $this->assertFalse($this->response->headers->has('Age'));
  412          }
  413      }
  ...
  420          $this->request('GET', '/');
  421          $this->assertTraceNotContains('store');
  422:         $this->assertFalse($this->response->headers->has('Age'));
  423      }
  424  
  ...
  439          $this->request('GET', '/');
  440          $this->assertTraceContains('store');
  441:         $this->assertTrue($this->response->headers->has('Age'));
  442      }
  443  
  444:     public function testCachesResponsesWithAnExpirationHeader()
  445      {
  446          $time = \DateTime::createFromFormat('U', time() + 5);
  ...
  450          $this->assertEquals(200, $this->response->getStatusCode());
  451          $this->assertEquals('Hello World', $this->response->getContent());
  452:         $this->assertNotNull($this->response->headers->get('Date'));
  453:         $this->assertNotNull($this->response->headers->get('X-Content-Digest'));
  454          $this->assertTraceContains('miss');
  455          $this->assertTraceContains('store');
  ...
  466          $this->assertEquals(200, $this->response->getStatusCode());
  467          $this->assertEquals('Hello World', $this->response->getContent());
  468:         $this->assertNotNull($this->response->headers->get('Date'));
  469:         $this->assertNotNull($this->response->headers->get('X-Content-Digest'));
  470          $this->assertTraceContains('miss');
  471          $this->assertTraceContains('store');
  ...
  482          $this->assertEquals(200, $this->response->getStatusCode());
  483          $this->assertEquals('Hello World', $this->response->getContent());
  484:         $this->assertNotNull($this->response->headers->get('Date'));
  485:         $this->assertNotNull($this->response->headers->get('X-Content-Digest'));
  486          $this->assertTraceContains('miss');
  487          $this->assertTraceContains('store');
  ...
  514      }
  515  
  516:     public function testHitsCachedResponsesWithExpiresHeader()
  517      {
  518          $time1 = \DateTime::createFromFormat('U', time() - 5);
  ...
  523          $this->assertHttpKernelIsCalled();
  524          $this->assertEquals(200, $this->response->getStatusCode());
  525:         $this->assertNotNull($this->response->headers->get('Date'));
  526          $this->assertTraceContains('miss');
  527          $this->assertTraceContains('store');
  ...
  531          $this->assertHttpKernelIsNotCalled();
  532          $this->assertEquals(200, $this->response->getStatusCode());
  533:         $this->assertLessThan(2, strtotime($this->responses[0]->headers->get('Date')) - strtotime($this->response->headers->get('Date')));
  534:         $this->assertGreaterThan(0, $this->response->headers->get('Age'));
  535:         $this->assertNotNull($this->response->headers->get('X-Content-Digest'));
  536          $this->assertTraceContains('fresh');
  537          $this->assertTraceNotContains('store');
  ...
  547          $this->assertHttpKernelIsCalled();
  548          $this->assertEquals(200, $this->response->getStatusCode());
  549:         $this->assertNotNull($this->response->headers->get('Date'));
  550          $this->assertTraceContains('miss');
  551          $this->assertTraceContains('store');
  ...
  555          $this->assertHttpKernelIsNotCalled();
  556          $this->assertEquals(200, $this->response->getStatusCode());
  557:         $this->assertLessThan(2, strtotime($this->responses[0]->headers->get('Date')) - strtotime($this->response->headers->get('Date')));
  558:         $this->assertGreaterThan(0, $this->response->headers->get('Age'));
  559:         $this->assertNotNull($this->response->headers->get('X-Content-Digest'));
  560          $this->assertTraceContains('fresh');
  561          $this->assertTraceNotContains('store');
  ...
  611          $this->assertHttpKernelIsCalled();
  612          $this->assertEquals(200, $this->response->getStatusCode());
  613:         $this->assertNotNull($this->response->headers->get('Date'));
  614          $this->assertTraceContains('miss');
  615          $this->assertTraceContains('store');
  ...
  619          $this->assertHttpKernelIsNotCalled();
  620          $this->assertEquals(200, $this->response->getStatusCode());
  621:         $this->assertLessThan(2, strtotime($this->responses[0]->headers->get('Date')) - strtotime($this->response->headers->get('Date')));
  622:         $this->assertGreaterThan(0, $this->response->headers->get('Age'));
  623:         $this->assertNotNull($this->response->headers->get('X-Content-Digest'));
  624          $this->assertTraceContains('fresh');
  625          $this->assertTraceNotContains('store');
  ...
  637          $this->assertTraceContains('store');
  638          $this->assertEquals('Hello World', $this->response->getContent());
  639:         $this->assertRegExp('/s-maxage=10/', $this->response->headers->get('Cache-Control'));
  640  
  641          $this->cacheConfig['default_ttl'] = 10;
  ...
  646          $this->assertTraceNotContains('store');
  647          $this->assertEquals('Hello World', $this->response->getContent());
  648:         $this->assertRegExp('/s-maxage=10/', $this->response->headers->get('Cache-Control'));
  649      }
  650  
  ...
  659          $this->assertTraceContains('store');
  660          $this->assertEquals('Hello World', $this->response->getContent());
  661:         $this->assertRegExp('/s-maxage=2/', $this->response->headers->get('Cache-Control'));
  662  
  663          $this->request('GET', '/');
  ...
  667          $this->assertTraceNotContains('store');
  668          $this->assertEquals('Hello World', $this->response->getContent());
  669:         $this->assertRegExp('/s-maxage=2/', $this->response->headers->get('Cache-Control'));
  670  
  671          // expires the cache
  ...
  687          $this->assertTraceContains('store');
  688          $this->assertEquals('Hello World', $this->response->getContent());
  689:         $this->assertRegExp('/s-maxage=2/', $this->response->headers->get('Cache-Control'));
  690  
  691          $this->setNextResponse();
  ...
  697          $this->assertTraceNotContains('store');
  698          $this->assertEquals('Hello World', $this->response->getContent());
  699:         $this->assertRegExp('/s-maxage=2/', $this->response->headers->get('Cache-Control'));
  700      }
  701  
  ...
  710          $this->assertTraceContains('store');
  711          $this->assertEquals('Hello World', $this->response->getContent());
  712:         $this->assertRegExp('/s-maxage=2/', $this->response->headers->get('Cache-Control'));
  713  
  714          $this->request('GET', '/');
  ...
  738          $this->assertTraceNotContains('miss');
  739          $this->assertEquals('Hello World', $this->response->getContent());
  740:         $this->assertRegExp('/s-maxage=2/', $this->response->headers->get('Cache-Control'));
  741  
  742          $this->request('GET', '/');
  ...
  746          $this->assertTraceNotContains('store');
  747          $this->assertEquals('Hello World', $this->response->getContent());
  748:         $this->assertRegExp('/s-maxage=2/', $this->response->headers->get('Cache-Control'));
  749      }
  750  
  ...
  759          $this->assertTraceContains('miss');
  760          $this->assertTraceNotContains('store');
  761:         $this->assertNotRegExp('/s-maxage/', $this->response->headers->get('Cache-Control'));
  762          $this->assertEquals('Hello World', $this->response->getContent());
  763      }
  ...
  772          $this->assertHttpKernelIsCalled();
  773          $this->assertEquals(200, $this->response->getStatusCode());
  774:         $this->assertNotNull($this->response->headers->get('Date'));
  775:         $this->assertNotNull($this->response->headers->get('X-Content-Digest'));
  776:         $this->assertNotNull($this->response->headers->get('Age'));
  777          $this->assertTraceContains('miss');
  778          $this->assertTraceContains('store');
  ...
  794          $this->assertHttpKernelIsCalled();
  795          $this->assertEquals(200, $this->response->getStatusCode());
  796:         $this->assertLessThanOrEqual(1, $this->response->headers->get('Age'));
  797:         $this->assertNotNull($this->response->headers->get('X-Content-Digest'));
  798          $this->assertTraceContains('stale');
  799          $this->assertTraceNotContains('fresh');
  ...
  807          $time = \DateTime::createFromFormat('U', time());
  808          $this->setNextResponse(200, array(), 'Hello World', function ($request, $response) use ($time) {
  809:             $response->headers->set('Cache-Control', 'public');
  810:             $response->headers->set('Last-Modified', $time->format(DATE_RFC2822));
  811:             if ($time->format(DATE_RFC2822) == $request->headers->get('IF_MODIFIED_SINCE')) {
  812                  $response->setStatusCode(304);
  813                  $response->setContent('');
  ...
  819          $this->assertHttpKernelIsCalled();
  820          $this->assertEquals(200, $this->response->getStatusCode());
  821:         $this->assertNotNull($this->response->headers->get('Last-Modified'));
  822:         $this->assertNotNull($this->response->headers->get('X-Content-Digest'));
  823          $this->assertEquals('Hello World', $this->response->getContent());
  824          $this->assertTraceContains('miss');
  ...
  830          $this->assertHttpKernelIsCalled();
  831          $this->assertEquals(200, $this->response->getStatusCode());
  832:         $this->assertNotNull($this->response->headers->get('Last-Modified'));
  833:         $this->assertNotNull($this->response->headers->get('X-Content-Digest'));
  834:         $this->assertLessThanOrEqual(1, $this->response->headers->get('Age'));
  835          $this->assertEquals('Hello World', $this->response->getContent());
  836          $this->assertTraceContains('stale');
  ...
  858      {
  859          $this->setNextResponse(200, array(), 'Hello World', function ($request, $response) {
  860:             $response->headers->set('Cache-Control', 'public');
  861:             $response->headers->set('ETag', '"12345"');
  862:             if ($response->getETag() == $request->headers->get('IF_NONE_MATCH')) {
  863                  $response->setStatusCode(304);
  864                  $response->setContent('');
  ...
  870          $this->assertHttpKernelIsCalled();
  871          $this->assertEquals(200, $this->response->getStatusCode());
  872:         $this->assertNotNull($this->response->headers->get('ETag'));
  873:         $this->assertNotNull($this->response->headers->get('X-Content-Digest'));
  874          $this->assertEquals('Hello World', $this->response->getContent());
  875          $this->assertTraceContains('miss');
  ...
  880          $this->assertHttpKernelIsCalled();
  881          $this->assertEquals(200, $this->response->getStatusCode());
  882:         $this->assertNotNull($this->response->headers->get('ETag'));
  883:         $this->assertNotNull($this->response->headers->get('X-Content-Digest'));
  884:         $this->assertLessThanOrEqual(1, $this->response->headers->get('Age'));
  885          $this->assertEquals('Hello World', $this->response->getContent());
  886          $this->assertTraceContains('stale');
  ...
  896          $this->setNextResponse(200, array(), 'Hello World', function (Request $request, Response $response) use ($time) {
  897              $response->setSharedMaxAge(10);
  898:             $response->headers->set('Last-Modified', $time->format(DATE_RFC2822));
  899          });
  900  
  ...
  913  
  914          $this->setNextResponse(304, array(), '', function (Request $request, Response $response) use ($time) {
  915:             $this->assertEquals($time->format(DATE_RFC2822), $request->headers->get('IF_MODIFIED_SINCE'));
  916          });
  917  
  ...
  929          $count = 0;
  930          $this->setNextResponse(200, array(), 'Hello World', function ($request, $response) use ($time, &$count) {
  931:             $response->headers->set('Last-Modified', $time->format(DATE_RFC2822));
  932:             $response->headers->set('Cache-Control', 'public');
  933              switch (++$count) {
  934                  case 1:
  ...
  963      }
  964  
  965:     public function testPassesHeadRequestsThroughDirectlyOnPass()
  966      {
  967          $this->setNextResponse(200, array(), 'Hello World', function ($request, $response) {
  968              $response->setContent('');
  969              $response->setStatusCode(200);
  970:             $this->assertEquals('HEAD', $request->getMethod());
  971          });
  972  
  973:         $this->request('HEAD', '/', array('HTTP_EXPECT' => 'something ...'));
  974          $this->assertHttpKernelIsCalled();
  975          $this->assertEquals('', $this->response->getContent());
  976      }
  977  
  978:     public function testUsesCacheToRespondToHeadRequestsWhenFresh()
  979      {
  980          $this->setNextResponse(200, array(), 'Hello World', function ($request, $response) {
  981:             $response->headers->set('Cache-Control', 'public, max-age=10');
  982              $response->setContent('Hello World');
  983              $response->setStatusCode(200);
  984:             $this->assertNotEquals('HEAD', $request->getMethod());
  985          });
  986  
  ...
  989          $this->assertEquals('Hello World', $this->response->getContent());
  990  
  991:         $this->request('HEAD', '/');
  992          $this->assertHttpKernelIsNotCalled();
  993          $this->assertEquals(200, $this->response->getStatusCode());
  994          $this->assertEquals('', $this->response->getContent());
  995:         $this->assertEquals(strlen('Hello World'), $this->response->headers->get('Content-Length'));
  996      }
  997  
  ...
 1000          $time = \DateTime::createFromFormat('U', time());
 1001          $this->setNextResponse(200, array(), 'Hello World', function ($request, $response) use ($time) {
 1002:             $response->headers->set('Cache-Control', 'public, max-age=10');
 1003:             $response->headers->set('Last-Modified', $time->format(DATE_RFC2822));
 1004          });
 1005  
 ....
 1019              if ('GET' == $request->getMethod()) {
 1020                  $response->setStatusCode(200);
 1021:                 $response->headers->set('Cache-Control', 'public, max-age=500');
 1022                  $response->setContent('Hello World');
 1023              } elseif ('POST' == $request->getMethod()) {
 1024                  $response->setStatusCode(303);
 1025:                 $response->headers->set('Location', '/');
 1026:                 $response->headers->remove('Cache-Control');
 1027                  $response->setContent('');
 1028              }
 ....
 1047          $this->request('POST', '/helloworld');
 1048          $this->assertHttpKernelIsCalled();
 1049:         $this->assertEquals('/', $this->response->headers->get('Location'));
 1050          $this->assertTraceContains('invalidate');
 1051          $this->assertTraceContains('pass');
 ....
 1062      }
 1063  
 1064:     public function testServesFromCacheWhenHeadersMatch()
 1065      {
 1066          $count = 0;
 1067          $this->setNextResponse(200, array('Cache-Control' => 'max-age=10000'), '', function ($request, $response) use (&$count) {
 1068:             $response->headers->set('Vary', 'Accept User-Agent Foo');
 1069:             $response->headers->set('Cache-Control', 'public, max-age=10');
 1070:             $response->headers->set('X-Response-Count', ++$count);
 1071:             $response->setContent($request->headers->get('USER_AGENT'));
 1072          });
 1073  
 ....
 1083          $this->assertTraceContains('fresh');
 1084          $this->assertTraceNotContains('store');
 1085:         $this->assertNotNull($this->response->headers->get('X-Content-Digest'));
 1086      }
 1087  
 1088:     public function testStoresMultipleResponsesWhenHeadersDiffer()
 1089      {
 1090          $count = 0;
 1091          $this->setNextResponse(200, array('Cache-Control' => 'max-age=10000'), '', function ($request, $response) use (&$count) {
 1092:             $response->headers->set('Vary', 'Accept User-Agent Foo');
 1093:             $response->headers->set('Cache-Control', 'public, max-age=10');
 1094:             $response->headers->set('X-Response-Count', ++$count);
 1095:             $response->setContent($request->headers->get('USER_AGENT'));
 1096          });
 1097  
 ....
 1099          $this->assertEquals(200, $this->response->getStatusCode());
 1100          $this->assertEquals('Bob/1.0', $this->response->getContent());
 1101:         $this->assertEquals(1, $this->response->headers->get('X-Response-Count'));
 1102  
 1103          $this->request('GET', '/', array('HTTP_ACCEPT' => 'text/html', 'HTTP_USER_AGENT' => 'Bob/2.0'));
 ....
 1106          $this->assertTraceContains('store');
 1107          $this->assertEquals('Bob/2.0', $this->response->getContent());
 1108:         $this->assertEquals(2, $this->response->headers->get('X-Response-Count'));
 1109  
 1110          $this->request('GET', '/', array('HTTP_ACCEPT' => 'text/html', 'HTTP_USER_AGENT' => 'Bob/1.0'));
 1111          $this->assertTraceContains('fresh');
 1112          $this->assertEquals('Bob/1.0', $this->response->getContent());
 1113:         $this->assertEquals(1, $this->response->headers->get('X-Response-Count'));
 1114  
 1115          $this->request('GET', '/', array('HTTP_ACCEPT' => 'text/html', 'HTTP_USER_AGENT' => 'Bob/2.0'));
 1116          $this->assertTraceContains('fresh');
 1117          $this->assertEquals('Bob/2.0', $this->response->getContent());
 1118:         $this->assertEquals(2, $this->response->headers->get('X-Response-Count'));
 1119  
 1120          $this->request('GET', '/', array('HTTP_USER_AGENT' => 'Bob/2.0'));
 1121          $this->assertTraceContains('miss');
 1122          $this->assertEquals('Bob/2.0', $this->response->getContent());
 1123:         $this->assertEquals(3, $this->response->headers->get('X-Response-Count'));
 1124      }
 1125  
 ....
 1161                  'status' => 200,
 1162                  'body' => '<esi:include src="/foo" /> <esi:include src="/bar" />',
 1163:                 'headers' => array(
 1164                      'Cache-Control' => 's-maxage=300',
 1165                      'Surrogate-Control' => 'content="ESI/1.0"',
 ....
 1169                  'status' => 200,
 1170                  'body' => 'Hello World!',
 1171:                 'headers' => array('Cache-Control' => 's-maxage=200'),
 1172              ),
 1173              array(
 1174                  'status' => 200,
 1175                  'body' => 'My name is Bobby.',
 1176:                 'headers' => array('Cache-Control' => 's-maxage=100'),
 1177              ),
 1178          );
 ....
 1186      }
 1187  
 1188:     public function testEsiCacheSendsTheLowestTtlForHeadRequests()
 1189      {
 1190          $responses = array(
 ....
 1192                  'status' => 200,
 1193                  'body' => 'I am a long-lived master response, but I embed a short-lived resource: <esi:include src="/foo" />',
 1194:                 'headers' => array(
 1195                      'Cache-Control' => 's-maxage=300',
 1196                      'Surrogate-Control' => 'content="ESI/1.0"',
 ....
 1200                  'status' => 200,
 1201                  'body' => 'I am a short-lived resource',
 1202:                 'headers' => array('Cache-Control' => 's-maxage=100'),
 1203              ),
 1204          );
 ....
 1206          $this->setNextResponses($responses);
 1207  
 1208:         $this->request('HEAD', '/', array(), array(), true);
 1209  
 1210          $this->assertEmpty($this->response->getContent());
 ....
 1218                  'status' => 200,
 1219                  'body' => '<esi:include src="/foo" /> <esi:include src="/bar" />',
 1220:                 'headers' => array(
 1221                      'Cache-Control' => 's-maxage=300',
 1222                      'Surrogate-Control' => 'content="ESI/1.0"',
 ....
 1226                  'status' => 200,
 1227                  'body' => 'Hello World!',
 1228:                 'headers' => array('ETag' => 'foobar'),
 1229              ),
 1230              array(
 1231                  'status' => 200,
 1232                  'body' => 'My name is Bobby.',
 1233:                 'headers' => array('Cache-Control' => 's-maxage=100'),
 1234              ),
 1235          );
 ....
 1241          $this->assertNull($this->response->getTtl());
 1242          $this->assertTrue($this->response->mustRevalidate());
 1243:         $this->assertTrue($this->response->headers->hasCacheControlDirective('private'));
 1244:         $this->assertTrue($this->response->headers->hasCacheControlDirective('no-cache'));
 1245      }
 1246  
 1247:     public function testEsiCacheForceValidationForHeadRequests()
 1248      {
 1249          $responses = array(
 ....
 1251                  'status' => 200,
 1252                  'body' => 'I am the master response and use expiration caching, but I embed another resource: <esi:include src="/foo" />',
 1253:                 'headers' => array(
 1254                      'Cache-Control' => 's-maxage=300',
 1255                      'Surrogate-Control' => 'content="ESI/1.0"',
 ....
 1259                  'status' => 200,
 1260                  'body' => 'I am the embedded resource and use validation caching',
 1261:                 'headers' => array('ETag' => 'foobar'),
 1262              ),
 1263          );
 ....
 1265          $this->setNextResponses($responses);
 1266  
 1267:         $this->request('HEAD', '/', array(), array(), true);
 1268  
 1269          // The response has been assembled from expiration and validation based resources
 ....
 1272          $this->assertNull($this->response->getTtl());
 1273          $this->assertTrue($this->response->mustRevalidate());
 1274:         $this->assertTrue($this->response->headers->hasCacheControlDirective('private'));
 1275:         $this->assertTrue($this->response->headers->hasCacheControlDirective('no-cache'));
 1276      }
 1277  
 1278:     public function testEsiRecalculateContentLengthHeader()
 1279      {
 1280          $responses = array(
 ....
 1282                  'status' => 200,
 1283                  'body' => '<esi:include src="/foo" />',
 1284:                 'headers' => array(
 1285                      'Content-Length' => 26,
 1286                      'Surrogate-Control' => 'content="ESI/1.0"',
 ....
 1290                  'status' => 200,
 1291                  'body' => 'Hello World!',
 1292:                 'headers' => array(),
 1293              ),
 1294          );
 ....
 1298          $this->request('GET', '/', array(), array(), true);
 1299          $this->assertEquals('Hello World!', $this->response->getContent());
 1300:         $this->assertEquals(12, $this->response->headers->get('Content-Length'));
 1301      }
 1302  
 1303:     public function testEsiRecalculateContentLengthHeaderForHeadRequest()
 1304      {
 1305          $responses = array(
 ....
 1307                  'status' => 200,
 1308                  'body' => '<esi:include src="/foo" />',
 1309:                 'headers' => array(
 1310                      'Content-Length' => 26,
 1311                      'Surrogate-Control' => 'content="ESI/1.0"',
 ....
 1315                  'status' => 200,
 1316                  'body' => 'Hello World!',
 1317:                 'headers' => array(),
 1318              ),
 1319          );
 ....
 1321          $this->setNextResponses($responses);
 1322  
 1323:         $this->request('HEAD', '/', array(), array(), true);
 1324  
 1325          // https://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.13
 1326:         // "The Content-Length entity-header field indicates the size of the entity-body,
 1327:         // in decimal number of OCTETs, sent to the recipient or, in the case of the HEAD
 1328          // method, the size of the entity-body that would have been sent had the request
 1329          // been a GET."
 1330          $this->assertEmpty($this->response->getContent());
 1331:         $this->assertEquals(12, $this->response->headers->get('Content-Length'));
 1332      }
 1333  
 ....
 1345      public function testHttpCacheIsSetAsATrustedProxy(array $existing, array $expected)
 1346      {
 1347:         Request::setTrustedProxies($existing, Request::HEADER_X_FORWARDED_ALL);
 1348  
 1349          $this->setNextResponse();
 ....
 1365       * @dataProvider getXForwardedForData
 1366       */
 1367:     public function testXForwarderForHeaderForForwardedRequests($xForwardedFor, $expected)
 1368      {
 1369          $this->setNextResponse();
 ....
 1374          $this->request('GET', '/', $server);
 1375  
 1376:         $this->assertEquals($expected, $this->kernel->getBackendRequest()->headers->get('X-Forwarded-For'));
 1377      }
 1378  
 ....
 1386      }
 1387  
 1388:     public function testXForwarderForHeaderForPassRequests()
 1389      {
 1390          $this->setNextResponse();
 ....
 1392          $this->request('POST', '/', $server);
 1393  
 1394:         $this->assertEquals('10.0.0.1', $this->kernel->getBackendRequest()->headers->get('X-Forwarded-For'));
 1395      }
 1396  
 1397:     public function testEsiCacheRemoveValidationHeadersIfEmbeddedResponses()
 1398      {
 1399          $time = \DateTime::createFromFormat('U', time());
 ....
 1403                  'status' => 200,
 1404                  'body' => '<esi:include src="/hey" />',
 1405:                 'headers' => array(
 1406                      'Surrogate-Control' => 'content="ESI/1.0"',
 1407                      'ETag' => 'hey',
 ....
 1412                  'status' => 200,
 1413                  'body' => 'Hey!',
 1414:                 'headers' => array(),
 1415              ),
 1416          );
 ....
 1423      }
 1424  
 1425:     public function testEsiCacheRemoveValidationHeadersIfEmbeddedResponsesAndHeadRequest()
 1426      {
 1427          $time = \DateTime::createFromFormat('U', time());
 ....
 1431                  'status' => 200,
 1432                  'body' => '<esi:include src="/hey" />',
 1433:                 'headers' => array(
 1434                      'Surrogate-Control' => 'content="ESI/1.0"',
 1435                      'ETag' => 'hey',
 ....
 1440                  'status' => 200,
 1441                  'body' => 'Hey!',
 1442:                 'headers' => array(),
 1443              ),
 1444          );
 ....
 1446          $this->setNextResponses($responses);
 1447  
 1448:         $this->request('HEAD', '/', array(), array(), true);
 1449          $this->assertEmpty($this->response->getContent());
 1450          $this->assertNull($this->response->getETag());

/home/genis/Proyectos/ProyectoXat/vendor/symfony/http-kernel/Tests/HttpCache/HttpCacheTestCase.php:
  113      }
  114  
  115:     public function request($method, $uri = '/', $server = array(), $cookies = array(), $esi = false, $headers = array())
  116      {
  117          if (null === $this->kernel) {
  ...
  128          $this->cache = new HttpCache($this->kernel, $this->store, $this->esi, $this->cacheConfig);
  129          $this->request = Request::create($uri, $method, array(), $cookies, array(), $server);
  130:         $this->request->headers->add($headers);
  131  
  132          $this->response = $this->cache->handle($this->request, HttpKernelInterface::MASTER_REQUEST, $this->catch);
  ...
  146  
  147      // A basic response with 200 status code and a tiny body.
  148:     public function setNextResponse($statusCode = 200, array $headers = array(), $body = 'Hello World', \Closure $customizer = null)
  149      {
  150:         $this->kernel = new TestHttpKernel($body, $statusCode, $headers, $customizer);
  151      }
  152  

/home/genis/Proyectos/ProyectoXat/vendor/symfony/http-kernel/Tests/HttpCache/ResponseCacheStrategyTest.php:
   38          $cacheStrategy->update($response);
   39  
   40:         $this->assertSame('60', $response->headers->getCacheControlDirective('s-maxage'));
   41      }
   42  
   ..
   56          $cacheStrategy->update($response);
   57  
   58:         $this->assertFalse($response->headers->hasCacheControlDirective('s-maxage'));
   59      }
   60  
   ..
   74          $cacheStrategy->update($response);
   75  
   76:         $this->assertFalse($response->headers->hasCacheControlDirective('s-maxage'));
   77      }
   78  
   ..
   89          $cacheStrategy->update($masterResponse);
   90  
   91:         $this->assertTrue($masterResponse->headers->hasCacheControlDirective('no-cache'));
   92:         $this->assertTrue($masterResponse->headers->hasCacheControlDirective('must-revalidate'));
   93          $this->assertFalse($masterResponse->isFresh());
   94      }
   ..
  111  
  112          $this->assertFalse($masterResponse->isValidateable());
  113:         $this->assertFalse($masterResponse->headers->has('Last-Modified'));
  114:         $this->assertFalse($masterResponse->headers->has('ETag'));
  115:         $this->assertTrue($masterResponse->headers->hasCacheControlDirective('no-cache'));
  116:         $this->assertTrue($masterResponse->headers->hasCacheControlDirective('must-revalidate'));
  117      }
  118  
  ...
  155          $cacheStrategy->update($masterResponse);
  156  
  157:         $this->assertTrue($masterResponse->headers->hasCacheControlDirective('no-cache'));
  158:         $this->assertTrue($masterResponse->headers->hasCacheControlDirective('must-revalidate'));
  159          $this->assertFalse($masterResponse->isFresh());
  160      }
  ...
  175          $cacheStrategy->update($masterResponse);
  176  
  177:         $this->assertTrue($masterResponse->headers->hasCacheControlDirective('private'));
  178          // Not sure if we should pass "max-age: 60" in this case, as long as the response is private and
  179          // that's the more conservative of both the master and embedded response...?
  ...
  199          $cacheStrategy->update($masterResponse);
  200  
  201:         $this->assertSame('60', $masterResponse->headers->getCacheControlDirective('s-maxage'));
  202      }
  203  
  ...
  217          $cacheStrategy->update($masterResponse);
  218  
  219:         $this->assertSame('60', $masterResponse->headers->getCacheControlDirective('s-maxage'));
  220          $this->assertFalse($masterResponse->isValidateable());
  221      }

/home/genis/Proyectos/ProyectoXat/vendor/symfony/http-kernel/Tests/HttpCache/SsiTest.php:
   24  
   25          $request = Request::create('/');
   26:         $request->headers->set('Surrogate-Capability', 'abc="SSI/1.0"');
   27          $this->assertTrue($ssi->hasSurrogateCapability($request));
   28  
   29          $request = Request::create('/');
   30:         $request->headers->set('Surrogate-Capability', 'foobar');
   31          $this->assertFalse($ssi->hasSurrogateCapability($request));
   32  
   ..
   41          $request = Request::create('/');
   42          $ssi->addSurrogateCapability($request);
   43:         $this->assertEquals('symfony="SSI/1.0"', $request->headers->get('Surrogate-Capability'));
   44  
   45          $ssi->addSurrogateCapability($request);
   46:         $this->assertEquals('symfony="SSI/1.0", symfony="SSI/1.0"', $request->headers->get('Surrogate-Capability'));
   47      }
   48  
   ..
   53          $response = new Response('foo <!--#include virtual="" -->');
   54          $ssi->addSurrogateControl($response);
   55:         $this->assertEquals('content="SSI/1.0"', $response->headers->get('Surrogate-Control'));
   56  
   57          $response = new Response('foo');
   58          $ssi->addSurrogateControl($response);
   59:         $this->assertEquals('', $response->headers->get('Surrogate-Control'));
   60      }
   61  
   ..
   65  
   66          $response = new Response();
   67:         $response->headers->set('Surrogate-Control', 'content="SSI/1.0"');
   68          $this->assertTrue($ssi->needsParsing($response));
   69  
   ..
   87          $request = Request::create('/');
   88          $response = new Response();
   89:         $response->headers->set('Content-Type', 'text/plain');
   90          $ssi->process($request, $response);
   91  
   92:         $this->assertFalse($response->headers->has('x-body-eval'));
   93      }
   94  
   ..
  102  
  103          $this->assertEquals('foo <?php echo $this->surrogate->handle($this, \'...\', \'\', false) ?>'."\n", $response->getContent());
  104:         $this->assertEquals('SSI', $response->headers->get('x-body-eval'));
  105  
  106          $response = new Response('foo <!--#include virtual="foo\'" -->');
  ...
  133      }
  134  
  135:     public function testProcessRemoveSurrogateControlHeader()
  136      {
  137          $ssi = new Ssi();
  ...
  139          $request = Request::create('/');
  140          $response = new Response('foo <!--#include virtual="..." -->');
  141:         $response->headers->set('Surrogate-Control', 'content="SSI/1.0"');
  142          $ssi->process($request, $response);
  143:         $this->assertEquals('SSI', $response->headers->get('x-body-eval'));
  144  
  145:         $response->headers->set('Surrogate-Control', 'no-store, content="SSI/1.0"');
  146          $ssi->process($request, $response);
  147:         $this->assertEquals('SSI', $response->headers->get('x-body-eval'));
  148:         $this->assertEquals('no-store', $response->headers->get('surrogate-control'));
  149  
  150:         $response->headers->set('Surrogate-Control', 'content="SSI/1.0", no-store');
  151          $ssi->process($request, $response);
  152:         $this->assertEquals('SSI', $response->headers->get('x-body-eval'));
  153:         $this->assertEquals('no-store', $response->headers->get('surrogate-control'));
  154      }
  155  

/home/genis/Proyectos/ProyectoXat/vendor/symfony/http-kernel/Tests/HttpCache/StoreTest.php:
   89      }
   90  
   91:     public function testSetsTheXContentDigestResponseHeaderBeforeStoring()
   92      {
   93          $cacheKey = $this->storeSimpleEntry();
   ..
  127      {
  128          $this->storeSimpleEntry();
  129:         $this->assertNotNull($this->response->headers->get('X-Content-Digest'));
  130:         $path = $this->getStorePath($this->response->headers->get('X-Content-Digest'));
  131          @unlink($path);
  132          $this->assertNull($this->store->lookup($this->request));
  133      }
  134  
  135:     public function testRestoresResponseHeadersProperlyWithLookup()
  136      {
  137          $this->storeSimpleEntry();
  138          $response = $this->store->lookup($this->request);
  139  
  140:         $this->assertEquals($response->headers->all(), array_merge(array('content-length' => 4, 'x-body-file' => array($this->getStorePath($response->headers->get('X-Content-Digest')))), $this->response->headers->all()));
  141      }
  142  
  ...
  264      }
  265  
  266:     protected function storeSimpleEntry($path = null, $headers = array())
  267      {
  268          if (null === $path) {
  ...
  270          }
  271  
  272:         $this->request = Request::create($path, 'get', array(), array(), array(), $headers);
  273          $this->response = new Response('test', 200, array('Cache-Control' => 'max-age=420'));
  274  

/home/genis/Proyectos/ProyectoXat/vendor/symfony/http-kernel/Tests/HttpCache/TestHttpKernel.php:
   24      protected $body;
   25      protected $status;
   26:     protected $headers;
   27      protected $called = false;
   28      protected $customizer;
   ..
   30      protected $backendRequest;
   31  
   32:     public function __construct($body, $status, $headers, \Closure $customizer = null)
   33      {
   34          $this->body = $body;
   35          $this->status = $status;
   36:         $this->headers = $headers;
   37          $this->customizer = $customizer;
   38  
   ..
   72          $this->called = true;
   73  
   74:         $response = new Response($this->body, $this->status, $this->headers);
   75  
   76          if (null !== $customizer = $this->customizer) {

/home/genis/Proyectos/ProyectoXat/vendor/symfony/http-kernel/Tests/HttpCache/TestMultipleHttpKernel.php:
   24      protected $bodies = array();
   25      protected $statuses = array();
   26:     protected $headers = array();
   27      protected $called = false;
   28      protected $backendRequest;
   ..
   33              $this->bodies[] = $response['body'];
   34              $this->statuses[] = $response['status'];
   35:             $this->headers[] = $response['headers'];
   36          }
   37  
   ..
   65          $this->called = true;
   66  
   67:         $response = new Response(array_shift($this->bodies), array_shift($this->statuses), array_shift($this->headers));
   68  
   69          return $response;

/home/genis/Proyectos/ProyectoXat/vendor/symfony/http-kernel/Tests/HttpKernelTest.php:
   95  
   96          $this->assertEquals('301', $response->getStatusCode());
   97:         $this->assertEquals('/login', $response->headers->get('Location'));
   98      }
   99  
  ...
  109  
  110          $this->assertEquals('405', $response->getStatusCode());
  111:         $this->assertEquals('POST', $response->headers->get('Allow'));
  112      }
  113  
  ...
  127  
  128          $this->assertEquals($expectedStatusCode, $response->getStatusCode());
  129:         $this->assertFalse($response->headers->has('X-Status-Code'));
  130      }
  131  
  ...
  286                  $response = call_user_func_array($oldController, $oldArguments);
  287  
  288:                 $response->headers->set('X-Id', $id);
  289  
  290                  return $response;
  ...
  338      {
  339          $request = new Request();
  340:         $request->setTrustedProxies(array('1.1.1.1'), Request::HEADER_X_FORWARDED_FOR | Request::HEADER_FORWARDED);
  341          $request->server->set('REMOTE_ADDR', '1.1.1.1');
  342:         $request->headers->set('FORWARDED', 'for=2.2.2.2');
  343:         $request->headers->set('X_FORWARDED_FOR', '3.3.3.3');
  344  
  345          $dispatcher = new EventDispatcher();

/home/genis/Proyectos/ProyectoXat/vendor/symfony/polyfill-mbstring/Mbstring.php:
   19   * - mb_convert_encoding     - Convert character encoding
   20   * - mb_convert_variables    - Convert character code in variable(s)
   21:  * - mb_decode_mimeheader    - Decode string in MIME header field
   22:  * - mb_encode_mimeheader    - Encode string for MIME header XXX NATIVE IMPLEMENTATION IS REALLY BUGGED
   23   * - mb_decode_numericentity - Decode HTML numeric string reference to character
   24   * - mb_encode_numericentity - Encode character to HTML numeric string reference
   ..
  129      }
  130  
  131:     public static function mb_decode_mimeheader($s)
  132      {
  133          return iconv_mime_decode($s, 2, self::$internalEncoding);
  134      }
  135  
  136:     public static function mb_encode_mimeheader($s, $charset = null, $transferEncoding = null, $linefeed = null, $indent = null)
  137      {
  138:         trigger_error('mb_encode_mimeheader() is bugged. Please use iconv_mime_encode() instead', E_USER_WARNING);
  139      }
  140  
  ...
  624              'func_overload_list' => 'no overload',
  625              'mail_charset' => 'UTF-8',
  626:             'mail_header_encoding' => 'BASE64',
  627              'mail_body_encoding' => 'BASE64',
  628              'illegal_chars' => 0,

/home/genis/Proyectos/ProyectoXat/vendor/symfony/polyfill-mbstring/bootstrap.php:
   18  
   19      function mb_convert_encoding($s, $to, $from = null) { return p\Mbstring::mb_convert_encoding($s, $to, $from); }
   20:     function mb_decode_mimeheader($s) { return p\Mbstring::mb_decode_mimeheader($s); }
   21:     function mb_encode_mimeheader($s, $charset = null, $transferEnc = null, $lf = null, $indent = null) { return p\Mbstring::mb_encode_mimeheader($s, $charset, $transferEnc, $lf, $indent); }
   22      function mb_decode_numericentity($s, $convmap, $enc = null) { return p\Mbstring::mb_decode_numericentity($s, $convmap, $enc); }
   23      function mb_encode_numericentity($s, $convmap, $enc = null, $is_hex = false) { return p\Mbstring::mb_encode_numericentity($s, $convmap, $enc, $is_hex); }

/home/genis/Proyectos/ProyectoXat/vendor/symfony/routing/Matcher/Dumper/PhpMatcherDumper.php:
  107          \$scheme = \$context->getScheme();
  108  
  109:         if ('HEAD' === \$requestMethod) {
  110              \$canonicalMethod = 'GET';
  111          }
  ...
  240          $methods = $route->getMethods();
  241  
  242:         $supportsTrailingSlash = $supportsRedirections && (!$methods || in_array('HEAD', $methods) || in_array('GET', $methods));
  243          $regex = $compiledRoute->getRegex();
  244  
  ...
  284          if ($methods) {
  285              if (1 === count($methods)) {
  286:                 if ('HEAD' === $methods[0]) {
  287                      $code .= <<<EOF
  288:             if ('HEAD' !== \$requestMethod) {
  289:                 \$allow[] = 'HEAD';
  290                  goto $gotoname;
  291              }
  ...
  307  
  308                  if (in_array('GET', $methods)) {
  309:                     // Since we treat HEAD requests like GET requests we don't need to match it.
  310                      $methodVariable = 'canonicalMethod';
  311:                     $methods = array_values(array_filter($methods, function ($method) { return 'HEAD' !== $method; }));
  312                  }
  313  

/home/genis/Proyectos/ProyectoXat/vendor/symfony/routing/Matcher/RedirectableUrlMatcher.php:
   28              $parameters = parent::match($pathinfo);
   29          } catch (ResourceNotFoundException $e) {
   30:             if ('/' === substr($pathinfo, -1) || !in_array($this->context->getMethod(), array('HEAD', 'GET'))) {
   31                  throw $e;
   32              }

/home/genis/Proyectos/ProyectoXat/vendor/symfony/routing/Matcher/TraceableUrlMatcher.php:
   90              // check HTTP method requirement
   91              if ($requiredMethods = $route->getMethods()) {
   92:                 // HEAD and GET are equivalent as per RFC
   93:                 if ('HEAD' === $method = $this->context->getMethod()) {
   94                      $method = 'GET';
   95                  }

/home/genis/Proyectos/ProyectoXat/vendor/symfony/routing/Matcher/UrlMatcher.php:
  138              // check HTTP method requirement
  139              if ($requiredMethods = $route->getMethods()) {
  140:                 // HEAD and GET are equivalent as per RFC
  141:                 if ('HEAD' === $method = $this->context->getMethod()) {
  142                      $method = 'GET';
  143                  }

/home/genis/Proyectos/ProyectoXat/vendor/symfony/routing/Tests/Fixtures/dumper/url_matcher0.php:
   26          $scheme = $context->getScheme();
   27  
   28:         if ('HEAD' === $requestMethod) {
   29              $canonicalMethod = 'GET';
   30          }

/home/genis/Proyectos/ProyectoXat/vendor/symfony/routing/Tests/Fixtures/dumper/url_matcher1.php:
   26          $scheme = $context->getScheme();
   27  
   28:         if ('HEAD' === $requestMethod) {
   29              $canonicalMethod = 'GET';
   30          }
   ..
   56              not_bar:
   57  
   58:             // barhead
   59:             if (0 === strpos($pathinfo, '/barhead') && preg_match('#^/barhead/(?P<foo>[^/]++)$#s', $pathinfo, $matches)) {
   60                  if ('GET' !== $canonicalMethod) {
   61                      $allow[] = 'GET';
   62:                     goto not_barhead;
   63                  }
   64  
   65:                 return $this->mergeDefaults(array_replace($matches, array('_route' => 'barhead')), array ());
   66              }
   67:             not_barhead:
   68  
   69          }

/home/genis/Proyectos/ProyectoXat/vendor/symfony/routing/Tests/Fixtures/dumper/url_matcher2.php:
   26          $scheme = $context->getScheme();
   27  
   28:         if ('HEAD' === $requestMethod) {
   29              $canonicalMethod = 'GET';
   30          }
   ..
   56              not_bar:
   57  
   58:             // barhead
   59:             if (0 === strpos($pathinfo, '/barhead') && preg_match('#^/barhead/(?P<foo>[^/]++)$#s', $pathinfo, $matches)) {
   60                  if ('GET' !== $canonicalMethod) {
   61                      $allow[] = 'GET';
   62:                     goto not_barhead;
   63                  }
   64  
   65:                 return $this->mergeDefaults(array_replace($matches, array('_route' => 'barhead')), array ());
   66              }
   67:             not_barhead:
   68  
   69          }

/home/genis/Proyectos/ProyectoXat/vendor/symfony/routing/Tests/Fixtures/dumper/url_matcher3.php:
   26          $scheme = $context->getScheme();
   27  
   28:         if ('HEAD' === $requestMethod) {
   29              $canonicalMethod = 'GET';
   30          }

/home/genis/Proyectos/ProyectoXat/vendor/symfony/routing/Tests/Fixtures/dumper/url_matcher4.php:
   26          $scheme = $context->getScheme();
   27  
   28:         if ('HEAD' === $requestMethod) {
   29              $canonicalMethod = 'GET';
   30          }
   31  
   32  
   33:         // just_head
   34:         if ('/just_head' === $pathinfo) {
   35:             if ('HEAD' !== $requestMethod) {
   36:                 $allow[] = 'HEAD';
   37:                 goto not_just_head;
   38              }
   39  
   40:             return array('_route' => 'just_head');
   41          }
   42:         not_just_head:
   43  
   44:         // head_and_get
   45:         if ('/head_and_get' === $pathinfo) {
   46              if ('GET' !== $canonicalMethod) {
   47                  $allow[] = 'GET';
   48:                 goto not_head_and_get;
   49              }
   50  
   51:             return array('_route' => 'head_and_get');
   52          }
   53:         not_head_and_get:
   54  
   55:         // get_and_head
   56:         if ('/get_and_head' === $pathinfo) {
   57              if ('GET' !== $canonicalMethod) {
   58                  $allow[] = 'GET';
   59:                 goto not_get_and_head;
   60              }
   61  
   62:             return array('_route' => 'get_and_head');
   63          }
   64:         not_get_and_head:
   65  
   66:         // post_and_head
   67          if ('/post_and_get' === $pathinfo) {
   68:             if (!in_array($requestMethod, array('POST', 'HEAD'))) {
   69:                 $allow = array_merge($allow, array('POST', 'HEAD'));
   70:                 goto not_post_and_head;
   71              }
   72  
   73:             return array('_route' => 'post_and_head');
   74          }
   75:         not_post_and_head:
   76  
   77          if (0 === strpos($pathinfo, '/put_and_post')) {
   ..
   87              not_put_and_post:
   88  
   89:             // put_and_get_and_head
   90              if ('/put_and_post' === $pathinfo) {
   91                  if (!in_array($canonicalMethod, array('PUT', 'GET'))) {
   92                      $allow = array_merge($allow, array('PUT', 'GET'));
   93:                     goto not_put_and_get_and_head;
   94                  }
   95  
   96:                 return array('_route' => 'put_and_get_and_head');
   97              }
   98:             not_put_and_get_and_head:
   99  
  100          }

/home/genis/Proyectos/ProyectoXat/vendor/symfony/routing/Tests/Fixtures/dumper/url_matcher5.php:
   26          $scheme = $context->getScheme();
   27  
   28:         if ('HEAD' === $requestMethod) {
   29              $canonicalMethod = 'GET';
   30          }

/home/genis/Proyectos/ProyectoXat/vendor/symfony/routing/Tests/Fixtures/dumper/url_matcher6.php:
   26          $scheme = $context->getScheme();
   27  
   28:         if ('HEAD' === $requestMethod) {
   29              $canonicalMethod = 'GET';
   30          }
   ..
   48              not_simple_trailing_slash_GET_method:
   49  
   50:             // simple_trailing_slash_HEAD_method
   51:             if ('/trailing/simple/head-method/' === $pathinfo) {
   52:                 if ('HEAD' !== $requestMethod) {
   53:                     $allow[] = 'HEAD';
   54:                     goto not_simple_trailing_slash_HEAD_method;
   55                  }
   56  
   57:                 return array('_route' => 'simple_trailing_slash_HEAD_method');
   58              }
   59:             not_simple_trailing_slash_HEAD_method:
   60  
   61              // simple_trailing_slash_POST_method
   ..
   89              not_regex_trailing_slash_GET_method:
   90  
   91:             // regex_trailing_slash_HEAD_method
   92:             if (0 === strpos($pathinfo, '/trailing/regex/head-method') && preg_match('#^/trailing/regex/head\\-method/(?P<param>[^/]++)/$#s', $pathinfo, $matches)) {
   93:                 if ('HEAD' !== $requestMethod) {
   94:                     $allow[] = 'HEAD';
   95:                     goto not_regex_trailing_slash_HEAD_method;
   96                  }
   97  
   98:                 return $this->mergeDefaults(array_replace($matches, array('_route' => 'regex_trailing_slash_HEAD_method')), array ());
   99              }
  100:             not_regex_trailing_slash_HEAD_method:
  101  
  102              // regex_trailing_slash_POST_method
  ...
  130              not_simple_not_trailing_slash_GET_method:
  131  
  132:             // simple_not_trailing_slash_HEAD_method
  133:             if ('/not-trailing/simple/head-method' === $pathinfo) {
  134:                 if ('HEAD' !== $requestMethod) {
  135:                     $allow[] = 'HEAD';
  136:                     goto not_simple_not_trailing_slash_HEAD_method;
  137                  }
  138  
  139:                 return array('_route' => 'simple_not_trailing_slash_HEAD_method');
  140              }
  141:             not_simple_not_trailing_slash_HEAD_method:
  142  
  143              // simple_not_trailing_slash_POST_method
  ...
  171              not_regex_not_trailing_slash_GET_method:
  172  
  173:             // regex_not_trailing_slash_HEAD_method
  174:             if (0 === strpos($pathinfo, '/not-trailing/regex/head-method') && preg_match('#^/not\\-trailing/regex/head\\-method/(?P<param>[^/]++)$#s', $pathinfo, $matches)) {
  175:                 if ('HEAD' !== $requestMethod) {
  176:                     $allow[] = 'HEAD';
  177:                     goto not_regex_not_trailing_slash_HEAD_method;
  178                  }
  179  
  180:                 return $this->mergeDefaults(array_replace($matches, array('_route' => 'regex_not_trailing_slash_HEAD_method')), array ());
  181              }
  182:             not_regex_not_trailing_slash_HEAD_method:
  183  
  184              // regex_not_trailing_slash_POST_method

/home/genis/Proyectos/ProyectoXat/vendor/symfony/routing/Tests/Fixtures/dumper/url_matcher7.php:
   26          $scheme = $context->getScheme();
   27  
   28:         if ('HEAD' === $requestMethod) {
   29              $canonicalMethod = 'GET';
   30          }
   ..
   58              not_simple_trailing_slash_GET_method:
   59  
   60:             // simple_trailing_slash_HEAD_method
   61:             if ('/trailing/simple/head-method' === $trimmedPathinfo) {
   62:                 if ('HEAD' !== $requestMethod) {
   63:                     $allow[] = 'HEAD';
   64:                     goto not_simple_trailing_slash_HEAD_method;
   65                  }
   66  
   67:                 $ret = array('_route' => 'simple_trailing_slash_HEAD_method');
   68                  if (substr($pathinfo, -1) !== '/') {
   69:                     return array_replace($ret, $this->redirect($rawPathinfo.'/', 'simple_trailing_slash_HEAD_method'));
   70                  }
   71  
   72                  return $ret;
   73              }
   74:             not_simple_trailing_slash_HEAD_method:
   75  
   76              // simple_trailing_slash_POST_method
   ..
  114              not_regex_trailing_slash_GET_method:
  115  
  116:             // regex_trailing_slash_HEAD_method
  117:             if (0 === strpos($pathinfo, '/trailing/regex/head-method') && preg_match('#^/trailing/regex/head\\-method/(?P<param>[^/]++)/?$#s', $pathinfo, $matches)) {
  118:                 if ('HEAD' !== $requestMethod) {
  119:                     $allow[] = 'HEAD';
  120:                     goto not_regex_trailing_slash_HEAD_method;
  121                  }
  122  
  123:                 $ret = $this->mergeDefaults(array_replace($matches, array('_route' => 'regex_trailing_slash_HEAD_method')), array ());
  124                  if (substr($pathinfo, -1) !== '/') {
  125:                     return array_replace($ret, $this->redirect($rawPathinfo.'/', 'regex_trailing_slash_HEAD_method'));
  126                  }
  127  
  128                  return $ret;
  129              }
  130:             not_regex_trailing_slash_HEAD_method:
  131  
  132              // regex_trailing_slash_POST_method
  ...
  160              not_simple_not_trailing_slash_GET_method:
  161  
  162:             // simple_not_trailing_slash_HEAD_method
  163:             if ('/not-trailing/simple/head-method' === $pathinfo) {
  164:                 if ('HEAD' !== $requestMethod) {
  165:                     $allow[] = 'HEAD';
  166:                     goto not_simple_not_trailing_slash_HEAD_method;
  167                  }
  168  
  169:                 return array('_route' => 'simple_not_trailing_slash_HEAD_method');
  170              }
  171:             not_simple_not_trailing_slash_HEAD_method:
  172  
  173              // simple_not_trailing_slash_POST_method
  ...
  201              not_regex_not_trailing_slash_GET_method:
  202  
  203:             // regex_not_trailing_slash_HEAD_method
  204:             if (0 === strpos($pathinfo, '/not-trailing/regex/head-method') && preg_match('#^/not\\-trailing/regex/head\\-method/(?P<param>[^/]++)$#s', $pathinfo, $matches)) {
  205:                 if ('HEAD' !== $requestMethod) {
  206:                     $allow[] = 'HEAD';
  207:                     goto not_regex_not_trailing_slash_HEAD_method;
  208                  }
  209  
  210:                 return $this->mergeDefaults(array_replace($matches, array('_route' => 'regex_not_trailing_slash_HEAD_method')), array ());
  211              }
  212:             not_regex_not_trailing_slash_HEAD_method:
  213  
  214              // regex_not_trailing_slash_POST_method

/home/genis/Proyectos/ProyectoXat/vendor/symfony/routing/Tests/Matcher/Dumper/PhpMatcherDumperTest.php:
  115              '',
  116              array(),
  117:             array('GET', 'head')
  118          ));
  119:         // GET method requirement automatically adds HEAD as valid
  120:         $collection->add('barhead', new Route(
  121:             '/barhead/{foo}',
  122              array(),
  123              array(),
  ...
  326  
  327          /* test case 4 */
  328:         $headMatchCasesCollection = new RouteCollection();
  329:         $headMatchCasesCollection->add('just_head', new Route(
  330:             '/just_head',
  331              array(),
  332              array(),
  ...
  334              '',
  335              array(),
  336:             array('HEAD')
  337          ));
  338:         $headMatchCasesCollection->add('head_and_get', new Route(
  339:             '/head_and_get',
  340              array(),
  341              array(),
  ...
  343              '',
  344              array(),
  345:             array('HEAD', 'GET')
  346          ));
  347:         $headMatchCasesCollection->add('get_and_head', new Route(
  348:             '/get_and_head',
  349              array(),
  350              array(),
  ...
  352              '',
  353              array(),
  354:             array('GET', 'HEAD')
  355          ));
  356:         $headMatchCasesCollection->add('post_and_head', new Route(
  357              '/post_and_get',
  358              array(),
  ...
  361              '',
  362              array(),
  363:             array('POST', 'HEAD')
  364          ));
  365:         $headMatchCasesCollection->add('put_and_post', new Route(
  366              '/put_and_post',
  367              array(),
  ...
  372              array('PUT', 'POST')
  373          ));
  374:         $headMatchCasesCollection->add('put_and_get_and_head', new Route(
  375              '/put_and_post',
  376              array(),
  ...
  379              '',
  380              array(),
  381:             array('PUT', 'GET', 'HEAD')
  382          ));
  383  
  ...
  403          $trailingSlashCollection->add('simple_trailing_slash_no_methods', new Route('/trailing/simple/no-methods/', array(), array(), array(), '', array(), array()));
  404          $trailingSlashCollection->add('simple_trailing_slash_GET_method', new Route('/trailing/simple/get-method/', array(), array(), array(), '', array(), array('GET')));
  405:         $trailingSlashCollection->add('simple_trailing_slash_HEAD_method', new Route('/trailing/simple/head-method/', array(), array(), array(), '', array(), array('HEAD')));
  406          $trailingSlashCollection->add('simple_trailing_slash_POST_method', new Route('/trailing/simple/post-method/', array(), array(), array(), '', array(), array('POST')));
  407          $trailingSlashCollection->add('regex_trailing_slash_no_methods', new Route('/trailing/regex/no-methods/{param}/', array(), array(), array(), '', array(), array()));
  408          $trailingSlashCollection->add('regex_trailing_slash_GET_method', new Route('/trailing/regex/get-method/{param}/', array(), array(), array(), '', array(), array('GET')));
  409:         $trailingSlashCollection->add('regex_trailing_slash_HEAD_method', new Route('/trailing/regex/head-method/{param}/', array(), array(), array(), '', array(), array('HEAD')));
  410          $trailingSlashCollection->add('regex_trailing_slash_POST_method', new Route('/trailing/regex/post-method/{param}/', array(), array(), array(), '', array(), array('POST')));
  411  
  412          $trailingSlashCollection->add('simple_not_trailing_slash_no_methods', new Route('/not-trailing/simple/no-methods', array(), array(), array(), '', array(), array()));
  413          $trailingSlashCollection->add('simple_not_trailing_slash_GET_method', new Route('/not-trailing/simple/get-method', array(), array(), array(), '', array(), array('GET')));
  414:         $trailingSlashCollection->add('simple_not_trailing_slash_HEAD_method', new Route('/not-trailing/simple/head-method', array(), array(), array(), '', array(), array('HEAD')));
  415          $trailingSlashCollection->add('simple_not_trailing_slash_POST_method', new Route('/not-trailing/simple/post-method', array(), array(), array(), '', array(), array('POST')));
  416          $trailingSlashCollection->add('regex_not_trailing_slash_no_methods', new Route('/not-trailing/regex/no-methods/{param}', array(), array(), array(), '', array(), array()));
  417          $trailingSlashCollection->add('regex_not_trailing_slash_GET_method', new Route('/not-trailing/regex/get-method/{param}', array(), array(), array(), '', array(), array('GET')));
  418:         $trailingSlashCollection->add('regex_not_trailing_slash_HEAD_method', new Route('/not-trailing/regex/head-method/{param}', array(), array(), array(), '', array(), array('HEAD')));
  419          $trailingSlashCollection->add('regex_not_trailing_slash_POST_method', new Route('/not-trailing/regex/post-method/{param}', array(), array(), array(), '', array(), array('POST')));
  420  
  ...
  424             array($redirectCollection, 'url_matcher2.php', array('base_class' => 'Symfony\Component\Routing\Tests\Fixtures\RedirectableUrlMatcher')),
  425             array($rootprefixCollection, 'url_matcher3.php', array()),
  426:            array($headMatchCasesCollection, 'url_matcher4.php', array()),
  427             array($groupOptimisedCollection, 'url_matcher5.php', array('base_class' => 'Symfony\Component\Routing\Tests\Fixtures\RedirectableUrlMatcher')),
  428             array($trailingSlashCollection, 'url_matcher6.php', array()),

/home/genis/Proyectos/ProyectoXat/vendor/symfony/routing/Tests/Matcher/TraceableUrlMatcherTest.php:
  105      {
  106          $routes = new RouteCollection();
  107:         $routes->add('foo', new Route('/foo', array(), array(), array(), 'baz', array(), array(), "request.headers.get('User-Agent') matches '/firefox/i'"));
  108  
  109          $context = new RequestContext();
  ...
  114          $notMatchingRequest = Request::create('/foo', 'GET');
  115          $traces = $matcher->getTracesForRequest($notMatchingRequest);
  116:         $this->assertEquals("Condition \"request.headers.get('User-Agent') matches '/firefox/i'\" does not evaluate to \"true\"", $traces[0]['log']);
  117  
  118          $matchingRequest = Request::create('/foo', 'GET', array(), array(), array(), array('HTTP_USER_AGENT' => 'Firefox'));

/home/genis/Proyectos/ProyectoXat/vendor/symfony/routing/Tests/Matcher/UrlMatcherTest.php:
   46      }
   47  
   48:     public function testHeadAllowedWhenRequirementContainsGet()
   49      {
   50          $coll = new RouteCollection();
   51          $coll->add('foo', new Route('/foo', array(), array(), array(), '', array(), array('get')));
   52  
   53:         $matcher = new UrlMatcher($coll, new RequestContext('', 'head'));
   54          $this->assertInternalType('array', $matcher->match('/foo'));
   55      }
   ..
   92          // test that route "method" is ignored if no method is given in the context
   93          $collection = new RouteCollection();
   94:         $collection->add('foo', new Route('/foo', array(), array(), array(), '', array(), array('get', 'head')));
   95          $matcher = new UrlMatcher($collection, new RequestContext());
   96          $this->assertInternalType('array', $matcher->match('/foo'));
   ..
  104          }
  105  
  106:         // route does match with GET or HEAD method context
  107          $matcher = new UrlMatcher($collection, new RequestContext());
  108          $this->assertInternalType('array', $matcher->match('/foo'));
  109:         $matcher = new UrlMatcher($collection, new RequestContext('', 'head'));
  110          $this->assertInternalType('array', $matcher->match('/foo'));
  111  

/home/genis/Proyectos/ProyectoXat/vendor/symfony/routing/Tests/RouteTest.php:
  205  
  206      /**
  207:      * Tests that the compiled version is also serialized to prevent the overhead
  208       * of compiling it again after unserialize.
  209       */

/home/genis/Proyectos/ProyectoXat/vendor/symfony/thanks/src/Command/ThanksCommand.php:
  210                  'method' => 'POST',
  211                  'content' => json_encode(['query' => $graphql]),
  212:                 'header' => ['Content-Type: application/json'],
  213              ],
  214          ]);

/home/genis/Proyectos/ProyectoXat/vendor/symfony/translation/Dumper/IcuResFileDumper.php:
   71          );
   72  
   73:         $header = pack('vC2v4C12@32',
   74:             32,                     // Header size
   75              0xDA, 0x27,             // Magic number 1 and 2
   76:             20, 0, 0, 2,            // Rest of the header, ..., Size of a char
   77              0x52, 0x65, 0x73, 0x42, // Data format identifier
   78              1, 2, 0, 0,             // Data version
   ..
   80          );
   81  
   82:         return $header.$root.$data;
   83      }
   84  

/home/genis/Proyectos/ProyectoXat/vendor/symfony/translation/Dumper/MoFileDumper.php:
   38          }
   39  
   40:         $header = array(
   41              'magicNumber' => MoFileLoader::MO_LITTLE_ENDIAN_MAGIC,
   42              'formatRevision' => 0,
   43              'count' => $size,
   44:             'offsetId' => MoFileLoader::MO_HEADER_SIZE,
   45:             'offsetTranslated' => MoFileLoader::MO_HEADER_SIZE + (8 * $size),
   46              'sizeHashes' => 0,
   47:             'offsetHashes' => MoFileLoader::MO_HEADER_SIZE + (16 * $size),
   48          );
   49  
   50          $sourcesSize = strlen($sources);
   51:         $sourcesStart = $header['offsetHashes'] + 1;
   52  
   53          foreach ($offsets as $offset) {
   ..
   58          }
   59  
   60:         $output = implode(array_map(array($this, 'writeLong'), $header))
   61                 .$sourceOffsets
   62                 .$targetOffsets

/home/genis/Proyectos/ProyectoXat/vendor/symfony/translation/Dumper/XliffFileDumper.php:
   76          $xliffFile->setAttribute('original', 'file.ext');
   77  
   78:         $xliffHead = $xliffFile->appendChild($dom->createElement('header'));
   79:         $xliffTool = $xliffHead->appendChild($dom->createElement('tool'));
   80          foreach ($toolInfo as $id => $value) {
   81              $xliffTool->setAttribute($id, $value);

/home/genis/Proyectos/ProyectoXat/vendor/symfony/translation/Loader/MoFileLoader.php:
   32  
   33      /**
   34:      * The size of the header of a MO file in bytes.
   35       */
   36:     const MO_HEADER_SIZE = 28;
   37  
   38      /**
   ..
   48          $stat = fstat($stream);
   49  
   50:         if ($stat['size'] < self::MO_HEADER_SIZE) {
   51              throw new InvalidResourceException('MO stream content has an invalid format.');
   52          }

/home/genis/Proyectos/ProyectoXat/vendor/symfony/translation/Loader/PoFileLoader.php:
   49       * The definition states:
   50       * - white-space and comments are optional.
   51:      * - msgid "" that an empty singleline defines a header.
   52       *
   53       * This parser sacrifices some features of the reference implementation the

/home/genis/Proyectos/ProyectoXat/vendor/symfony/translation/Loader/schema/dic/xliff-core/xliff-core-1.2-strict.xsd:
    4  
    5  May-19-2004:
    6: - Changed the <choice> for ElemType_header, moving minOccurs="0" maxOccurs="unbounded" from its elements 
    7  to <choice> itself.
    8  - Added <choice> for ElemType_trans-unit to allow "any order" for <context-group>, <count-group>, <prop-group>, <note>, and
    .
  221          </xsd:annotation>
  222        </xsd:enumeration>
  223:       <xsd:enumeration value="documentheader">
  224          <xsd:annotation>
  225            <xsd:documentation>Indicates portions of document that precedes data and contains metadata.</xsd:documentation>
  ...
  331          </xsd:annotation>
  332        </xsd:enumeration>
  333:       <xsd:enumeration value="pageheader">
  334          <xsd:annotation>
  335            <xsd:documentation>Indicates information to be displayed at the top of each page of a document.</xsd:documentation>
  ...
  498          </xsd:annotation>
  499        </xsd:enumeration>
  500:       <xsd:enumeration value="head-term">
  501          <xsd:annotation>
  502:           <xsd:documentation>ISO-12620 2.1.1: The concept designation that has been chosen to head a terminological record.</xsd:documentation>
  503          </xsd:annotation>
  504        </xsd:enumeration>
  ...
  795          </xsd:annotation>
  796        </xsd:enumeration>
  797:       <xsd:enumeration value="header">
  798          <xsd:annotation>
  799:           <xsd:documentation>Indicates a header item.</xsd:documentation>
  800          </xsd:annotation>
  801        </xsd:enumeration>
  802:       <xsd:enumeration value="heading">
  803          <xsd:annotation>
  804:           <xsd:documentation>Indicates a heading, such has the content of &lt;h1&gt;, &lt;h2&gt;, etc. in HTML.</xsd:documentation>
  805          </xsd:annotation>
  806        </xsd:enumeration>
  ...
 1666      <xsd:complexType>
 1667        <xsd:sequence>
 1668:         <xsd:element minOccurs="0" ref="xlf:header"/>
 1669          <xsd:element ref="xlf:body"/>
 1670        </xsd:sequence>
 ....
 1695      </xsd:keyref>
 1696      <xsd:key name="K_tool-id">
 1697:       <xsd:selector xpath="xlf:header/xlf:tool"/>
 1698        <xsd:field xpath="@tool-id"/>
 1699      </xsd:key>
 ....
 1703      </xsd:keyref>
 1704      <xsd:keyref name="KR_phase_tool-id" refer="xlf:K_tool-id">
 1705:       <xsd:selector xpath="xlf:header/xlf:phase-group/xlf:phase"/>
 1706        <xsd:field xpath="@tool-id"/>
 1707      </xsd:keyref>
 ....
 1719      </xsd:unique>
 1720      <xsd:key name="K_phase-name">
 1721:       <xsd:selector xpath="xlf:header/xlf:phase-group/xlf:phase"/>
 1722        <xsd:field xpath="@phase-name"/>
 1723      </xsd:key>
 ....
 1731      </xsd:unique>
 1732    </xsd:element>
 1733:   <xsd:element name="header">
 1734      <xsd:complexType>
 1735        <xsd:sequence>

/home/genis/Proyectos/ProyectoXat/vendor/symfony/translation/Resources/schemas/xliff-core-1.2-strict.xsd:
    4  
    5  May-19-2004:
    6: - Changed the <choice> for ElemType_header, moving minOccurs="0" maxOccurs="unbounded" from its elements 
    7  to <choice> itself.
    8  - Added <choice> for ElemType_trans-unit to allow "any order" for <context-group>, <count-group>, <prop-group>, <note>, and
    .
  221          </xsd:annotation>
  222        </xsd:enumeration>
  223:       <xsd:enumeration value="documentheader">
  224          <xsd:annotation>
  225            <xsd:documentation>Indicates portions of document that precedes data and contains metadata.</xsd:documentation>
  ...
  331          </xsd:annotation>
  332        </xsd:enumeration>
  333:       <xsd:enumeration value="pageheader">
  334          <xsd:annotation>
  335            <xsd:documentation>Indicates information to be displayed at the top of each page of a document.</xsd:documentation>
  ...
  498          </xsd:annotation>
  499        </xsd:enumeration>
  500:       <xsd:enumeration value="head-term">
  501          <xsd:annotation>
  502:           <xsd:documentation>ISO-12620 2.1.1: The concept designation that has been chosen to head a terminological record.</xsd:documentation>
  503          </xsd:annotation>
  504        </xsd:enumeration>
  ...
  795          </xsd:annotation>
  796        </xsd:enumeration>
  797:       <xsd:enumeration value="header">
  798          <xsd:annotation>
  799:           <xsd:documentation>Indicates a header item.</xsd:documentation>
  800          </xsd:annotation>
  801        </xsd:enumeration>
  802:       <xsd:enumeration value="heading">
  803          <xsd:annotation>
  804:           <xsd:documentation>Indicates a heading, such has the content of &lt;h1&gt;, &lt;h2&gt;, etc. in HTML.</xsd:documentation>
  805          </xsd:annotation>
  806        </xsd:enumeration>
  ...
 1666      <xsd:complexType>
 1667        <xsd:sequence>
 1668:         <xsd:element minOccurs="0" ref="xlf:header"/>
 1669          <xsd:element ref="xlf:body"/>
 1670        </xsd:sequence>
 ....
 1695      </xsd:keyref>
 1696      <xsd:key name="K_tool-id">
 1697:       <xsd:selector xpath="xlf:header/xlf:tool"/>
 1698        <xsd:field xpath="@tool-id"/>
 1699      </xsd:key>
 ....
 1703      </xsd:keyref>
 1704      <xsd:keyref name="KR_phase_tool-id" refer="xlf:K_tool-id">
 1705:       <xsd:selector xpath="xlf:header/xlf:phase-group/xlf:phase"/>
 1706        <xsd:field xpath="@tool-id"/>
 1707      </xsd:keyref>
 ....
 1719      </xsd:unique>
 1720      <xsd:key name="K_phase-name">
 1721:       <xsd:selector xpath="xlf:header/xlf:phase-group/xlf:phase"/>
 1722        <xsd:field xpath="@phase-name"/>
 1723      </xsd:key>
 ....
 1731      </xsd:unique>
 1732    </xsd:element>
 1733:   <xsd:element name="header">
 1734      <xsd:complexType>
 1735        <xsd:sequence>

/home/genis/Proyectos/ProyectoXat/vendor/symfony/translation/Tests/fixtures/resources-clean.xlf:
    2  <xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
    3    <file source-language="fr-FR" target-language="en-US" datatype="plaintext" original="file.ext">
    4:     <header>
    5        <tool tool-id="symfony" tool-name="Symfony"/>
    6:     </header>
    7      <body>
    8        <trans-unit id="LCa0a2j" resname="foo">

/home/genis/Proyectos/ProyectoXat/vendor/symfony/translation/Tests/fixtures/resources-target-attributes.xlf:
    2  <xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
    3    <file source-language="fr-FR" target-language="en-US" datatype="plaintext" original="file.ext">
    4:     <header>
    5        <tool tool-id="symfony" tool-name="Symfony"/>
    6:     </header>
    7      <body>
    8        <trans-unit id="LCa0a2j" resname="foo">

/home/genis/Proyectos/ProyectoXat/vendor/symfony/translation/Tests/fixtures/resources-tool-info.xlf:
    2  <xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
    3    <file source-language="en-US" target-language="en-US" datatype="plaintext" original="file.ext">
    4:     <header>
    5        <tool tool-id="foo" tool-name="foo" tool-version="0.0" tool-company="Foo"/>
    6:     </header>
    7      <body>
    8        <trans-unit id="LCa0a2j" resname="foo">

/home/genis/Proyectos/ProyectoXat/vendor/symfony/var-dumper/Caster/AmqpCaster.php:
   42          AMQP_EX_TYPE_FANOUT => 'AMQP_EX_TYPE_FANOUT',
   43          AMQP_EX_TYPE_TOPIC => 'AMQP_EX_TYPE_TOPIC',
   44:         AMQP_EX_TYPE_HEADERS => 'AMQP_EX_TYPE_HEADERS',
   45      );
   46  
   ..
  176              $prefix.'content_type' => $c->getContentType(),
  177              $prefix.'content_encoding' => $c->getContentEncoding(),
  178:             $prefix.'headers' => $c->getHeaders(),
  179              $prefix.'delivery_mode' => $deliveryMode,
  180              $prefix.'priority' => $c->getPriority(),

/home/genis/Proyectos/ProyectoXat/vendor/symfony/var-dumper/Caster/SplCaster.php:
   23      private static $splFileObjectFlags = array(
   24          \SplFileObject::DROP_NEW_LINE => 'DROP_NEW_LINE',
   25:         \SplFileObject::READ_AHEAD => 'READ_AHEAD',
   26          \SplFileObject::SKIP_EMPTY => 'SKIP_EMPTY',
   27          \SplFileObject::READ_CSV => 'READ_CSV',

/home/genis/Proyectos/ProyectoXat/vendor/symfony/var-dumper/Dumper/HtmlDumper.php:
   24      public static $defaultOutput = 'php://output';
   25  
   26:     protected $dumpHeader;
   27      protected $dumpPrefix = '<pre class=sf-dump id=%s data-indent-pad="%s">';
   28      protected $dumpSuffix = '</pre><script>Sfdump(%s)</script>';
   29      protected $dumpId = 'sf-dump';
   30      protected $colors = true;
   31:     protected $headerIsDumped = false;
   32      protected $lastDepth = -1;
   33      protected $styles = array(
   ..
   69      public function setStyles(array $styles)
   70      {
   71:         $this->headerIsDumped = false;
   72          $this->styles = $styles + $this->styles;
   73      }
   ..
   80      public function setDisplayOptions(array $displayOptions)
   81      {
   82:         $this->headerIsDumped = false;
   83          $this->displayOptions = $displayOptions + $this->displayOptions;
   84      }
   85  
   86      /**
   87:      * Sets an HTML header that will be dumped once in the output stream.
   88       *
   89:      * @param string $header An HTML string
   90       */
   91:     public function setDumpHeader($header)
   92      {
   93:         $this->dumpHeader = $header;
   94      }
   95  
   ..
  119  
  120      /**
  121:      * Dumps the HTML header.
  122       */
  123:     protected function getDumpHeader()
  124      {
  125:         $this->headerIsDumped = null !== $this->outputStream ? $this->outputStream : $this->lineDumper;
  126  
  127:         if (null !== $this->dumpHeader) {
  128:             return $this->dumpHeader;
  129          }
  130  
  ...
  727          }
  728  
  729:         return $this->dumpHeader = preg_replace('/\s+/', ' ', $line).'</style>'.$this->dumpHeader;
  730      }
  731  
  ...
  858              $this->line = sprintf($this->dumpPrefix, $this->dumpId, $this->indentPad).$this->line;
  859          }
  860:         if ($this->headerIsDumped !== (null !== $this->outputStream ? $this->outputStream : $this->lineDumper)) {
  861:             $this->line = $this->getDumpHeader().$this->line;
  862          }
  863  

/home/genis/Proyectos/ProyectoXat/vendor/symfony/var-dumper/Tests/Caster/ExceptionCasterTest.php:
  133          $cloner->setMaxItems(1);
  134          $dumper = new HtmlDumper();
  135:         $dumper->setDumpHeader('<foo></foo>');
  136          $dumper->setDumpBoundaries('<bar>', '</bar>');
  137          $dump = $dumper->dump($cloner->cloneVar($e)->withRefHandles(false), true);

/home/genis/Proyectos/ProyectoXat/vendor/symfony/var-dumper/Tests/Caster/StubCasterTest.php:
   94          $cloner = new VarCloner();
   95          $dumper = new HtmlDumper();
   96:         $dumper->setDumpHeader('<foo></foo>');
   97          $dumper->setDumpBoundaries('<bar>', '</bar>');
   98          $dumper->setDisplayOptions(array('fileLinkFormat' => '%f:%l'));
   ..
  115          $cloner = new VarCloner();
  116          $dumper = new HtmlDumper();
  117:         $dumper->setDumpHeader('<foo></foo>');
  118          $dumper->setDumpBoundaries('<bar>', '</bar>');
  119          $dumper->setDisplayOptions(array('fileLinkFormat' => '%f:%l'));
  ...
  136          $cloner = new VarCloner();
  137          $dumper = new HtmlDumper();
  138:         $dumper->setDumpHeader('<foo></foo>');
  139          $dumper->setDumpBoundaries('<bar>', '</bar>');
  140          $dump = $dumper->dump($cloner->cloneVar($var), true, array('fileLinkFormat' => '%f:%l'));
  ...
  156          $cloner = new VarCloner();
  157          $dumper = new HtmlDumper();
  158:         $dumper->setDumpHeader('<foo></foo>');
  159          $dumper->setDumpBoundaries('<bar>', '</bar>');
  160          $dump = $dumper->dump($cloner->cloneVar($var), true);
  ...
  177          $cloner = new VarCloner();
  178          $dumper = new HtmlDumper();
  179:         $dumper->setDumpHeader('<foo></foo>');
  180          $dumper->setDumpBoundaries('<bar>', '</bar>');
  181          $dump = $dumper->dump($cloner->cloneVar($var), true, array('fileLinkFormat' => '%f:%l'));

/home/genis/Proyectos/ProyectoXat/vendor/symfony/var-dumper/Tests/Dumper/HtmlDumperTest.php:
   26  
   27          $dumper = new HtmlDumper('php://output');
   28:         $dumper->setDumpHeader('<foo></foo>');
   29          $dumper->setDumpBoundaries('<bar>', '</bar>');
   30          $cloner = new VarCloner();
   ..
  119  
  120          $dumper = new HtmlDumper('php://output', 'CP1251');
  121:         $dumper->setDumpHeader('<foo></foo>');
  122          $dumper->setDumpBoundaries('<bar>', '</bar>');
  123          $cloner = new VarCloner();
  ...
  142  
  143          $dumper = new HtmlDumper();
  144:         $dumper->setDumpHeader('<foo></foo>');
  145          $dumper->setDumpBoundaries('<bar>', '</bar>');
  146          $cloner = new VarCloner();

6922 matches across 443 files
